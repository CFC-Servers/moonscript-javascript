"use strict";

/*
// Capture the output of this into a variable, if you want
(function(Module, args) {
  Module = Module || {};
  Module.arguments = args || [];
*/

///*
// Runs much faster, for some reason
if (!this['Module']) {
  this['Module'] = {};
}
if (!Module.arguments) {
  try {
    Module.arguments = scriptArgs;
  } catch(e) {
    try {
      Module.arguments = arguments;
    } catch(e) {
      Module.arguments = [];
    }
  }
}
//*/

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else {
      return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
    }
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return pointingLevels(type) > 0;
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (new RegExp(/^\[\d+\ x\ (.*)\]/g).test(type)) return true; // [15 x ?] blocks. Like structs
  // See comment in isStructPointerType()
  return !Runtime.isNumberType(type) && type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeFieldSize: function getNativeFieldSize(type) {
  return Math.max(Runtime.getNativeTypeSize(type), 4);
},
  getNativeTypeSize: function getNativeTypeSize(type) {
  if (4 == 1) return 1;
  var size = {
    '_i1': 1,
    '_i8': 1,
    '_i16': 2,
    '_i32': 4,
    '_i64': 8,
    "_float": 4,
    "_double": 8
  }['_'+type]; // add '_' since float&double confuse Closure compiler as keys.
  if (!size && type[type.length-1] == '*') {
    size = 4; // A pointer
  }
  return size;
},
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        dprint('Unclear type in struct: ' + field + ', in ' + type.name_);
        assert(0);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, 4);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (!struct) struct = (typeof Types === 'undefined' ? Runtime : Types).structMetadata[typeName.replace(/.*\./, '')];
      if (!struct) return null;
      assert(type.fields.length === struct.length, 'Number of named fields must match the type for ' + typeName + '. Perhaps due to inheritance, which is not supported yet?');
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP; assert(size > 0, "Trying to allocate 0"); _memset(STACKTOP, 0, size); STACKTOP += size;STACKTOP = Math.ceil((STACKTOP)/4)*4;; assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP; assert(size > 0, "Trying to allocate 0"); STATICTOP += size;STATICTOP = Math.ceil((STATICTOP)/4)*4;; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4);; return ret; },
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
    var items = [];
    for (var sig in this.sigs) {
      items.push({
        sig: sig,
        fails: this.sigs[sig][0],
        succeeds: this.sigs[sig][1],
        total: this.sigs[sig][0] + this.sigs[sig][1]
      });
    }
    items.sort(function(x, y) { return y.total - x.total; });
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      print(item.sig + ' : ' + item.total + ' hits, %' + (Math.floor(100*item.fails/item.total)) + ' failures');
    }
  }
};

function cRound(x) {
  return x >= 0 ? Math.floor(x) : Math.ceil(x);
}




//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
};

var __THREW__ = false; // Used in checking for thrown exceptions.

var __ATEXIT__ = [];

var ABORT = false;

var undef = 0;

function abort(text) {
  print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.

function setValue(ptr, value, type) {
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
  switch(type) {
    case 'i1': HEAP[ptr]=value;; break;
    case 'i8': HEAP[ptr]=value;; break;
    case 'i16': HEAP[ptr]=value;; break;
    case 'i32': HEAP[ptr]=value;; break;
    case 'i64': HEAP[ptr]=value;; break;
    case 'float': HEAP[ptr]=value;; break;
    case 'double': HEAP[ptr]=value;; break;
    default: abort('invalid type for setValue: ' + type);
  }
}
Module['setValue'] = setValue;

// Parallel to setValue.

function getValue(ptr, type) {
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
  switch(type) {
    case 'i1': return HEAP[ptr];
    case 'i8': return HEAP[ptr];
    case 'i16': return HEAP[ptr];
    case 'i32': return HEAP[ptr];
    case 'i64': return HEAP[ptr];
    case 'float': return HEAP[ptr];
    case 'double': return HEAP[ptr];
    default: abort('invalid type for setValue: ' + type);
  }
  return null;
}
Module['getValue'] = getValue;

// Allocates memory for some data and initializes it properly.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, 1));

  var singleType = typeof types === 'string' ? types : null;

  var i = 0, type;
  while (i < size) {
    var curr = zeroinit ? 0 : slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr) {
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAP[ptr+i]);
    if (t == nullByte) { break; } else {}
    ret += t;
    i += 1;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return Math.ceil(x/PAGE_SIZE)*PAGE_SIZE;
}

var HEAP;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;

var HAS_TYPED_ARRAYS = false;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 52428800;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
{
  // Make sure that our HEAP is implemented as a flat array.
  HEAP = new Array(TOTAL_MEMORY);
  for (var i = 0; i < FAST_MEMORY; i++) {
    HEAP[i] = 0; // XXX We do *not* use {{| makeSetValue(0, 'i', 0, 'null') |}} here, since this is done just to optimize runtime speed
  }
}

var base = intArrayFromString('(null)'); // So printing %s of NULL gives '(null)'
                                         // Also this ensures we leave 0 as an invalid address, 'NULL'
for (var i = 0; i < base.length; i++) {
  HEAP[i]=base[i];
}

Module['HEAP'] = HEAP;

STACK_ROOT = STACKTOP = alignMemoryPage(10);
var TOTAL_STACK = 1024*1024; // XXX: Changing this value can lead to bad perf on v8!
STACK_MAX = STACK_ROOT + TOTAL_STACK;

STATICTOP = alignMemoryPage(STACK_MAX);

function __shutdownRuntime__() {
  while(__ATEXIT__.length > 0) {
    var atexit = __ATEXIT__.pop();
    var func = atexit.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(atexit.arg === undefined ? null : atexit.arg);
  }

  // allow browser to GC, set heaps to null?

  // Print summary of correction activity
  CorrectionsMonitor.print();
}


// Copies a list of num items on the HEAP into a
// a normal JavaScript array of numbers
function Array_copy(ptr, num) {
  // TODO: In the SAFE_HEAP case, do some reading here, for debugging purposes - currently this is an 'unnoticed read'.
  return HEAP.slice(ptr, ptr+num);
}
Module['Array_copy'] = Array_copy;

function String_len(ptr) {
  var i = 0;
  while (HEAP[ptr+i]) i++; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i;
}
Module['String_len'] = String_len;

// Copies a C-style string, terminated by a zero, from the HEAP into
// a normal JavaScript array of numbers
function String_copy(ptr, addZero) {
  var len = String_len(ptr);
  if (addZero) len++;
  var ret = Array_copy(ptr, len);
  if (addZero) ret[len-1] = 0;
  return ret;
}
Module['String_copy'] = String_copy;

// Tools

if (typeof print === 'undefined') {
  this['print'] = console.log; // we are on the web
}

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull) {
  var ret = [];
  var t;
  var i = 0;
  while (i < stringy.length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + stringy[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half) {
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// === Body ===



Runtime.QUANTUM_SIZE = 4
var $0___SIZE = 16; // %0
  var $0___FLATTENER = [0,8,12];
var $1___SIZE = 8; // %1
  
var $2___SIZE = 8; // %2
  
var $3___SIZE = 8; // %3
  
var $4___SIZE = 8; // %4
  
var $5___SIZE = 20; // %5
  var $5___FLATTENER = [0,4,5,8,12,16];
var $6___SIZE = 12; // %6
  
var $7___SIZE = 8; // %7
  
var $8___SIZE = 28; // %8
  
var $9___SIZE = 16; // %9
  
var $10___SIZE = 16; // %10
  var $10___FLATTENER = [0,8,12];
var $11___SIZE = 4; // %11
  
var $12___SIZE = 8; // %12
  
var $enum_BinOpr___SIZE = 4; // %enum.BinOpr
  
var $enum_OpArgMask___SIZE = 4; // %enum.OpArgMask
  
var $enum_OpCode___SIZE = 4; // %enum.OpCode
  
var $enum_OpMode___SIZE = 4; // %enum.OpMode
  
var $enum_Opcode___SIZE = 4; // %enum.Opcode
  
var $enum_TMS___SIZE = 4; // %enum.TMS
  
var $enum_UnOpr___SIZE = 4; // %enum.UnOpr
  
var $enum_charsetanswer___SIZE = 4; // %enum.charsetanswer
  
var $enum_expkind___SIZE = 4; // %enum.expkind
  
var $struct_BlockCnt___SIZE = 12; // %struct.BlockCnt
  var $struct_BlockCnt___FLATTENER = [0,4,8,9,10];
var $struct_CCallS___SIZE = 8; // %struct.CCallS
  
var $struct_CClosure___SIZE = 32; // %struct.CClosure
  var $struct_CClosure___FLATTENER = [0,4,5,6,7,8,12,16,20];
var $struct_CallInfo___SIZE = 24; // %struct.CallInfo
  
var $struct_CallS___SIZE = 8; // %struct.CallS
  
var $struct_CapState___SIZE = 24; // %struct.CapState
  
var $struct_Capture___SIZE = 8; // %struct.Capture
  var $struct_Capture___FLATTENER = [0,4,6,7];
var $struct_CharsetTag___SIZE = 36; // %struct.CharsetTag
  
var $struct_ConsControl___SIZE = 36; // %struct.ConsControl
  var $struct_ConsControl___FLATTENER = [0,20,24,28,32];
var $struct_DumpState___SIZE = 20; // %struct.DumpState
  
var $struct_FuncState___SIZE = 572; // %struct.FuncState
  var $struct_FuncState___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,50,51,172];
var $struct_GCheader___SIZE = 8; // %struct.GCheader
  var $struct_GCheader___FLATTENER = [0,4,5];
var $struct_Inst___SIZE = 4; // %struct.Inst
  
var $struct_LClosure___SIZE = 24; // %struct.LClosure
  var $struct_LClosure___FLATTENER = [0,4,5,6,7,8,12,16,20];
var $struct_LG___SIZE = 348; // %struct.LG
  
var $struct_LHS_assign___SIZE = 24; // %struct.LHS_assign
  
var $struct_LexState___SIZE = 60; // %struct.LexState
  var $struct_LexState___FLATTENER = [0,4,8,12,24,36,40,44,48,52,56];
var $struct_LoadF___SIZE = 8200; // %struct.LoadF
  
var $struct_LoadS___SIZE = 8; // %struct.LoadS
  
var $struct_LoadState___SIZE = 16; // %struct.LoadState
  
var $struct_LocVar___SIZE = 12; // %struct.LocVar
  
var $struct_MatchState___SIZE = 272; // %struct.MatchState
  
var $struct_Mbuffer___SIZE = 12; // %struct.Mbuffer
  
var $struct_Node___SIZE = 28; // %struct.Node
  
var $struct_Proto___SIZE = 76; // %struct.Proto
  var $struct_Proto___FLATTENER = [0,4,5,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,73,74,75];
var $struct_SParser___SIZE = 20; // %struct.SParser
  var $struct_SParser___FLATTENER = [0,4,16];
var $struct_Stack___SIZE = 12; // %struct.Stack
  
var $struct_StrAux___SIZE = 12; // %struct.StrAux
  
var $struct_Table___SIZE = 32; // %struct.Table
  var $struct_Table___FLATTENER = [0,4,5,6,7,8,12,16,20,24,28];
var $struct_Token___SIZE = 12; // %struct.Token
  
var $struct_UpVal___SIZE = 24; // %struct.UpVal
  var $struct_UpVal___FLATTENER = [0,4,5,8,12];
var $struct_Zio___SIZE = 20; // %struct.Zio
  
var $struct__IO_FILE___SIZE = 148; // %struct._IO_FILE
  var $struct__IO_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct___jmp_buf_tag___SIZE = 156; // %struct.__jmp_buf_tag
  var $struct___jmp_buf_tag___FLATTENER = [0,24,28];
var $struct___sigset_t___SIZE = 128; // %struct.__sigset_t
  
var $struct_anon___SIZE = 16; // %struct.anon
  var $struct_anon___FLATTENER = [0,4,5,6,8,12];
var $struct_expdesc___SIZE = 20; // %struct.expdesc
  var $struct_expdesc___FLATTENER = [0,4,12,16];
var $struct_global_State___SIZE = 236; // %struct.global_State
  var $struct_global_State___FLATTENER = [0,12,16,20,21,24,28,32,36,40,44,48,52,64,68,72,76,80,84,88,92,104,108,132,168];
var $struct_lconv___SIZE = 56; // %struct.lconv
  var $struct_lconv___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53];
var $struct_luaL_Buffer___SIZE = 8204; // %struct.luaL_Buffer
  
var $struct_luaL_Reg___SIZE = 8; // %struct.luaL_Reg
  
var $struct_lua_Debug___SIZE = 100; // %struct.lua_Debug
  var $struct_lua_Debug___FLATTENER = [0,4,8,12,16,20,24,28,32,36,96];
var $struct_lua_State___SIZE = 112; // %struct.lua_State
  var $struct_lua_State___FLATTENER = [0,4,5,6,8,12,16,20,24,28,32,36,40,44,48,52,54,56,57,60,64,68,72,84,96,100,104,108];
var $struct_lua_TValue___SIZE = 12; // %struct.lua_TValue
  
var $struct_lua_longjmp___SIZE = 164; // %struct.lua_longjmp
  var $struct_lua_longjmp___FLATTENER = [0,4,160];
var $struct_stringtable___SIZE = 12; // %struct.stringtable
  
var $struct_tm___SIZE = 44; // %struct.tm
  
var $struct_upvaldesc___SIZE = 2; // %struct.upvaldesc
  
var $union_Closure___SIZE = 32; // %union.Closure
  
var $union_GCObject___SIZE = 112; // %union.GCObject
  
var $union_Instruction___SIZE = 4; // %union.Instruction
  
var $union_L_Umaxalign___SIZE = 8; // %union.L_Umaxalign
  
var $union_SemInfo___SIZE = 8; // %union.SemInfo
  
var $union_TKey___SIZE = 16; // %union.TKey
  
var $union_TString___SIZE = 16; // %union.TString
  
var $union_Udata___SIZE = 20; // %union.Udata
  
var $union_Value___SIZE = 8; // %union.Value
  
var $union_anon___SIZE = 12; // %union.anon
  
var _lua_ident;
var __str;
var __str1;
var __str2;
var __str3;
var __str4;
var __str15;
var __str26;
var __str37;
var __str48;
var __str5;
var __str6;
var __str7;
var __str8;
var __str9;
var __str10;
var __str11;
var __str12;
var __str13;
var __str14;
var __str159;
var _stdin;
var __str16;
var __str17;
var __str18;
var __str19;
var __str20;
var __str21;
var __str22;
var _stderr;
var __str23;
var __str24;
var __str25;
var __str27;
var _co_funcs;
var __str128;
var __str229;
var __str330;
var __str431;
var __str532;
var __str633;
var __str734;
var __str835;
var _statnames;
var __str936;
var __str1037;
var __str1138;
var __str1239;
var __str1340;
var __str1441;
var __str1542;
var _base_funcs;
var __str1643;
var __str1744;
var __str1845;
var __str1946;
var __str2047;
var __str2148;
var __str2249;
var __str2350;
var __str2451;
var __str2552;
var __str2653;
var __str2754;
var __str28;
var __str29;
var __str30;
var __str31;
var __str32;
var __str33;
var __str34;
var __str35;
var __str36;
var __str3755;
var __str38;
var __str39;
var __str40;
var __str41;
var __str42;
var __str43;
var __str44;
var __str45;
var __str46;
var __str47;
var __str4856;
var __str49;
var __str50;
var __str51;
var __str52;
var __str53;
var __str54;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var __str60;
var __str61;
var __str62;
var __str63;
var __str64;
var __str65;
var _stdout;
var __str66;
var __str67;
var __str68;
var __str69;
var _luaB_collectgarbage_opts;
var __str70;
var __str71;
var __str72;
var __str73;
var __str74;
var __str75;
var __str76;
var _luaB_collectgarbage_optsnum;
var __str77;
var __str78;
var __str79;
var __str180;
var __str281;
var __str382;
var __str83;
var _dblib;
var __str184;
var __str285;
var __str386;
var __str487;
var __str588;
var __str689;
var __str790;
var __str891;
var __str992;
var __str1093;
var __str1194;
var __str1295;
var __str1396;
var __str1497;
var __str1598;
var __str1699;
var __str17100;
var __str18101;
var __str19102;
var __str20103;
var __str21104;
var __str22105;
var __str23106;
var __str24107;
var __str25108;
var __str26109;
var __str27110;
var _KEY_HOOK;
var _hookf_hooknames;
var __str28111;
var __str29112;
var __str30113;
var __str31114;
var __str32115;
var __str33116;
var __str34117;
var __str35118;
var __str36119;
var __str37120;
var __str38121;
var __str39122;
var __str40123;
var __str41124;
var __str42125;
var __str43126;
var __str44127;
var __str45128;
var __str46129;
var __str47130;
var __str48131;
var __str49132;
var __str50133;
var __str51134;
var __str52135;
var __str136;
var __str1137;
var __str2138;
var __str3139;
var __str4140;
var __str5141;
var __str6142;
var __str7143;
var __str8144;
var __str9145;
var __str10146;
var __str11147;
var __str12148;
var __str13149;
var __str14150;
var __str15151;
var __str16152;
var __str17153;
var __str18154;
var __str19155;
var __str20156;
var __str167;
var __str1168;
var __str2169;
var __str3170;
var __str4171;
var __str5172;
var __str6173;
var __str7174;
var __str8175;
var _lualibs;
var __str195;
var __str1196;
var __str2197;
var __str3198;
var __str4199;
var __str5200;
var __str6201;
var __str7202;
var __str203;
var _iolib;
var __str1204;
var __str2205;
var __str3206;
var __str4207;
var __str5208;
var __str6209;
var __str7210;
var __str8211;
var __str9212;
var __str10213;
var __str11214;
var __str12215;
var __str13216;
var __str14217;
var __str15218;
var __str16219;
var __str17220;
var __str18221;
var __str19222;
var _fnames;
var __str20223;
var __str21224;
var __str22225;
var __str23226;
var __str24227;
var __str25228;
var __str26229;
var __str27230;
var __str28231;
var __str29232;
var __str30233;
var __str31234;
var __str32235;
var __str33236;
var _flib;
var __str34237;
var __str35238;
var __str36239;
var __str37240;
var __str38241;
var __str39242;
var _f_setvbuf_mode;
var _f_setvbuf_modenames;
var __str40243;
var __str41244;
var __str42245;
var _f_seek_mode;
var _f_seek_modenames;
var __str43246;
var __str44247;
var __str45248;
var __str250;
var __str1251;
var __str2252;
var __str3253;
var __str4254;
var __str5255;
var __str6256;
var __str7257;
var __str8258;
var __str9259;
var __str10260;
var __str11261;
var __str12262;
var __str13263;
var __str14264;
var __str15265;
var __str16266;
var __str17267;
var __str18268;
var __str19269;
var __str20270;
var __str21271;
var __str22272;
var __str23273;
var __str24274;
var __str25275;
var __str26276;
var __str27277;
var __str28278;
var __str29279;
var __str30280;
var _luaX_tokens;
var __str31281;
var __str32282;
var __str33283;
var __str34284;
var __str35285;
var __str36286;
var __str37287;
var __str38288;
var __str39289;
var __str40290;
var __str41291;
var __str42292;
var __str43293;
var __str44294;
var __str45295;
var __str46296;
var __str298;
var _mathlib;
var __str1299;
var __str2300;
var __str3301;
var __str4302;
var __str5303;
var __str6304;
var __str7305;
var __str8306;
var __str9307;
var __str10308;
var __str11309;
var __str12310;
var __str13311;
var __str14312;
var __str15313;
var __str16314;
var __str17315;
var __str18316;
var __str19317;
var __str20318;
var __str21319;
var __str22320;
var __str23321;
var __str24322;
var __str25323;
var __str26324;
var __str27325;
var __str28326;
var __str29327;
var __str30328;
var __str31329;
var __str32330;
var __str33331;
var __str333;
var __str337;
var __str1338;
var __str2339;
var _pk_funcs;
var _loaders;
var __str3340;
var __str4341;
var __str5342;
var __str6343;
var __str7344;
var __str8345;
var __str9346;
var __str10347;
var __str11348;
var __str12349;
var __str13350;
var __str14351;
var _ll_funcs;
var __str15352;
var __str16353;
var _sentinel_;
var __str17354;
var __str18355;
var __str19356;
var __str20357;
var __str21358;
var __str22359;
var __str23360;
var __str24361;
var __str25362;
var __str26363;
var __str27364;
var __str28365;
var __str29366;
var __str30367;
var __str31368;
var __str32369;
var __str33370;
var __str34371;
var __str35372;
var __str36373;
var __str37374;
var __str38375;
var __str39376;
var __str40377;
var __str41378;
var __str42379;
var __str43380;
var __str44381;
var __str45382;
var __str46383;
var __str47384;
var __str48385;
var __str49386;
var __str50387;
var __str51388;
var _luaO_nilobject_;
var _luaO_log2_log_2;
var __str391;
var __str1392;
var __str2393;
var __str3394;
var __str4395;
var __str5396;
var __str6397;
var __str7398;
var __str404;
var __str1405;
var __str2406;
var __str3407;
var __str4408;
var __str5409;
var __str6410;
var __str7411;
var __str8412;
var __str9413;
var __str10414;
var __str11415;
var __str12416;
var __str13417;
var __str14418;
var __str15419;
var __str16420;
var __str17421;
var __str18422;
var __str19423;
var __str20424;
var __str21425;
var __str22426;
var __str23427;
var __str24428;
var __str25429;
var __str26430;
var __str27431;
var __str28432;
var __str29433;
var __str30434;
var __str31435;
var __str32436;
var __str33437;
var __str34438;
var __str35439;
var __str36440;
var __str37441;
var _luaP_opnames;
var _luaP_opmodes;
var __str443;
var _syslib;
var __str1444;
var __str2445;
var __str3446;
var __str4447;
var __str5448;
var __str6449;
var __str7450;
var __str8451;
var __str9452;
var __str10453;
var __str11454;
var __str12455;
var __str13456;
var __str14457;
var __str15458;
var __str16459;
var __str17460;
var __str18461;
var __str19462;
var __str20463;
var _os_setlocale_cat;
var _os_setlocale_catnames;
var __str21464;
var __str22465;
var __str23466;
var __str24467;
var __str25468;
var __str26469;
var __str27470;
var __str28471;
var __str29472;
var __str30473;
var __str475;
var __str1476;
var _priority;
var __str2477;
var __str3478;
var __str4479;
var __str5480;
var __str6481;
var __str7482;
var __str8483;
var __str9484;
var __str10485;
var __str11486;
var __str12487;
var __str13488;
var __str14489;
var __str15490;
var __str16491;
var __str17492;
var __str18493;
var __str19494;
var __str20495;
var __str21496;
var __str22497;
var __str23498;
var __str24499;
var __str25500;
var __str26501;
var __str27502;
var __str504;
var __str511;
var _strlib;
var __str1512;
var __str2513;
var __str3514;
var __str4515;
var __str5516;
var __str6517;
var __str7518;
var __str8519;
var __str9520;
var __str10521;
var __str11522;
var __str12523;
var __str13524;
var __str14525;
var __str15526;
var __str16527;
var __str17528;
var __str18529;
var __str19530;
var __str20531;
var __str21532;
var __str22533;
var __str23534;
var __str24535;
var __str25536;
var __str26537;
var __str27538;
var __str28539;
var __str29540;
var __str30541;
var __str31542;
var __str32543;
var __str33544;
var __str34545;
var __str35546;
var __str36547;
var __str37548;
var __str38549;
var __str39550;
var __str552;
var __str1553;
var __str2554;
var _dummynode_;
var __str3555;
var __str565;
var _tab_funcs;
var __str1566;
var __str2567;
var __str3568;
var __str4569;
var __str5570;
var __str6571;
var __str7572;
var __str8573;
var __str9574;
var __str10575;
var __str11576;
var __str12577;
var __str13578;
var __str14579;
var __str581;
var __str1582;
var __str2583;
var __str3584;
var __str4585;
var __str5586;
var __str6587;
var __str7588;
var __str8589;
var __str9590;
var _luaT_typenames;
var _luaT_init_luaT_eventname;
var __str10592;
var __str11593;
var __str12594;
var __str13595;
var __str14596;
var __str15597;
var __str16598;
var __str17599;
var __str18600;
var __str19601;
var __str20602;
var __str21603;
var __str22604;
var __str23605;
var __str24606;
var __str25607;
var __str26608;
var __str612;
var __str1613;
var __str2614;
var __str3615;
var __str4616;
var __str5617;
var __str6618;
var __str7619;
var __str8620;
var __str9621;
var __str624;
var __str1625;
var __str2626;
var __str3627;
var __str4628;
var __str5629;
var __str6630;
var __str7631;
var __str8632;
var _moonscript_lua;
var _moonscript_lua_len;
var _l;
var __str646;
var __str1647;
var __str2648;
var __str3649;
var __str650;
var __str1651;
var __str2652;
var __str3653;
var __str4654;
var __str5655;
var __str6656;
var __str7657;
var __str8658;
var __str9659;
var __str10660;
var __str11661;
var __str12662;
var __str13663;
var __str14664;
var __str15665;
var __str16666;
var __str17667;
var __str18668;
var __str19669;
var __str20670;
var __str21671;
var __str22672;
var __str23673;
var __str24674;
var __str25675;
var __str26676;
var __str27677;
var __str28678;
var __str29679;
var __str30680;
var __str31681;
var __str32682;
var __str33683;
var __str34684;
var __str35685;
var __str36686;
var __str37687;
var __str38688;
var __str39689;
var __str40690;
var __str41691;
var __str42692;
var __str43693;
var __str44694;
var __str45695;
var __str696;
var __str1697;
var __str2698;
var _metapattreg;
var __str3699;
var _pattreg;
var __str4700;
var __str5701;
var __str6702;
var __str7703;
var __str8704;
var __str9705;
var __str10706;
var __str11707;
var __str12708;
var __str13709;
var __str14710;
var __str15711;
var __str16712;
var __str17713;
var __str18714;
var __str19715;
var __str20716;
var __str21717;
var __str22718;
var __str23719;
var __str24720;
var __str25721;
var __str26722;
var __str27723;
var __str28724;
var __str29725;
var __str30726;
var ___PRETTY_FUNCTION___setinstaux;
var __str31727;
var __str32728;
var __str33729;
var __str34730;
var __str35731;
var __str36732;
var _opproperties;
var __str37733;
var __str38734;
var ___PRETTY_FUNCTION___checkrule;
var __str39735;
var __str40736;
var _verify_dummy;
var __str41737;
var __str42738;
var ___PRETTY_FUNCTION___verify;
var __str43739;
var __str44740;
var __str45741;
var __str46742;
var __str47743;
var __str48744;
var __str49745;
var __str50746;
var __str51747;
var __str52748;
var __str53749;
var __str54750;
var ___PRETTY_FUNCTION___optimizecaptures;
var __str55751;
var __str56752;
var __str57753;
var __str58754;
var __str59755;
var __str60756;
var __str61757;
var __str62758;
var __str63759;
var __str64760;
var __str65761;
var __str66762;
var __str67763;
var __str68764;
var __str69765;
var __str70766;
var __str71767;
var __str72768;
var _printinst_names;
var __str73769;
var __str74770;
var __str75771;
var __str76772;
var __str77773;
var __str78774;
var __str79775;
var __str80;
var __str81;
var __str82;
var __str83776;
var __str84;
var __str85;
var __str86;
var __str87;
var __str88;
var __str89;
var __str90;
var __str91;
var __str92;
var __str93;
var __str94;
var __str95;
var __str96;
var __str97;
var __str98;
var __str99;
var __str100;
var __str101;
var __str102;
var __str103;
var __str104;
var __str105;
var __str106;
var _printcapkind_modes;
var __str107;
var __str108;
var __str109;
var __str110;
var __str111;
var __str112;
var __str113;
var __str114;
var __str115;
var __str116;
var __str117;
var __str118;
var __str119;
var __str120;
var __str121;
var __str122;
var __str123;
var __str124;
var __str125;
var __str126;
var ___PRETTY_FUNCTION___pushcapture;
var __str127;
var __str128777;
var __str129;
var __str130;
var __str131;
var __str132;
var __str133;
var __str134;
var __str135;
var ___PRETTY_FUNCTION___match;
var __str136778;
var __str137;
var __str138;
var __str139;
var __str140;
var __str141;
var __str142;
var __str143;
var ___PRETTY_FUNCTION___adddyncaptures;
var __str144;
var ___PRETTY_FUNCTION___runtimecap;
var __str145;
var _giveup;
var __str146;
var __str147;
var __str148;
var __str149;
var __str150;
var __str151;
var __str152;
var __str153;
var __str154;
var __str155;
var ___PRETTY_FUNCTION___optimizechoice;
var __str156;
var __str157;
var ___PRETTY_FUNCTION___check2test;
var __str158;
var __str159779;
var ___PRETTY_FUNCTION___interfere;
var __str160;
var __str161;

  
  function _memcpy(dest, src, num, idunno) {
      assert(num % 1 === 0, 'memcpy given ' + num + ' bytes to copy. Problem with 4=1 corrections perhaps?');
      // || 0, since memcpy sometimes copies uninitialized areas XXX: Investigate why initializing alloc'ed memory does not fix that too
      for (var $mcpi$ = 0; $mcpi$ < num; $mcpi$++) {
  HEAP[dest+$mcpi$]=HEAP[src+$mcpi$]; 
  };
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _strlen(ptr) {
      return String_len(ptr);
    }
var _llvm_va_start; // stub for _llvm_va_start
var _llvm_va_end; // stub for _llvm_va_end

  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAP[px+i];
        var y = HEAP[py+i];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  function _strstr(ptr1, ptr2) {
      var str1 = Pointer_stringify(ptr1);
      var str2 = Pointer_stringify(ptr2);
      var ret = str1.search(str2);
      return ret >= 0 ? ptr1 + ret : 0;
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP[ptr];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  
  var ERRNO_CODES={E2BIG: 7, EACCES: 13, EADDRINUSE: 98, EADDRNOTAVAIL: 99, EAFNOSUPPORT: 97, EAGAIN: 11, EALREADY: 114, EBADF: 9, EBADMSG: 74, EBUSY: 16, ECANCELED: 125, ECHILD: 10, ECONNABORTED: 103, ECONNREFUSED: 111, ECONNRESET: 104, EDEADLK: 35, EDESTADDRREQ: 89, EDOM: 33, EDQUOT: 122, EEXIST: 17, EFAULT: 14, EFBIG: 27, EHOSTUNREACH: 113, EIDRM: 43, EILSEQ: 84, EINPROGRESS: 115, EINTR: 4, EINVAL: 22, EIO: 5, EISCONN: 106, EISDIR: 21, ELOOP: 40, EMFILE: 24, EMLINK: 31, EMSGSIZE: 90, EMULTIHOP: 72, ENAMETOOLONG: 36, ENETDOWN: 100, ENETRESET: 102, ENETUNREACH: 101, ENFILE: 23, ENOBUFS: 105, ENODATA: 61, ENODEV: 19, ENOENT: 2, ENOEXEC: 8, ENOLCK: 37, ENOLINK: 67, ENOMEM: 12, ENOMSG: 42, ENOPROTOOPT: 92, ENOSPC: 28, ENOSR: 63, ENOSTR: 60, ENOSYS: 38, ENOTCONN: 107, ENOTDIR: 20, ENOTEMPTY: 39, ENOTRECOVERABLE: 131, ENOTSOCK: 88, ENOTSUP: 95, ENOTTY: 25, ENXIO: 6, EOVERFLOW: 75, EOWNERDEAD: 130, EPERM: 1, EPIPE: 32, EPROTO: 71, EPROTONOSUPPORT: 93, EPROTOTYPE: 91, ERANGE: 34, EROFS: 30, ESPIPE: 29, ESRCH: 3, ESTALE: 116, ETIME: 62, ETIMEDOUT: 110, ETXTBSY: 26, EWOULDBLOCK: 11, EXDEV: 18 };
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP[___setErrNo.ret]=value;
      return value;
    }
  
  var _stdin=0;
  
  var _stdout=0;
  
  var _stderr=0;var FS={currentPath: "/", nextInode: 2, streams: [null], ignorePermissions: true, absolutePath: function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      }, analyzePath: function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              return FS.analyzePath([link].concat(path).join('/'),
                                    dontResolveLastLink, linksVisited + 1);
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
          return ret;
        }
        return ret;
      }, findObject: function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      }, createObject: function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      }, createFolder: function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      }, createPath: function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      }, createFile: function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      }, createDataFile: function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = [];
          for (var i = 0; i < data.length; i++) dataArray.push(data.charCodeAt(i));
          data = dataArray;
        }
        var properties = {isDevice: false, contents: data};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      }, createLazyFile: function (parent, name, url, canRead, canWrite) {
        var properties = {isDevice: false, url: url};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      }, createLink: function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      }, createDevice: function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      }, forceLoadFile: function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link ||
            'contents' in obj) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          // Browser.
          // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
          var xhr = new XMLHttpRequest();
          xhr.open('GET', obj.url, false);
  
          // Some hints to the browser that we want binary data.
          if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
          if (xhr.overrideMimeType) {
            xhr.overrideMimeType('text/plain; charset=x-user-defined');
          }
  
          xhr.send(null);
          if (xhr.status != 200 && xhr.status != 0) success = false;
          if (xhr.response !== undefined) {
            obj.contents = new Uint8Array(xhr.response || []);
          } else {
            obj.contents = intArrayFromString(xhr.responseText || '', true);
          }
        } else if (typeof read !== 'undefined') {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read(obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      }, ensureRoot: function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: false,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      }, init: function (input, output, error) {
        // Make sure we initialize only once.
        if (FS.init.initialized) return;
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Default handlers.
        if (!input) input = function() {
          if (!input.cache || !input.cache.length) {
            var result;
            if (typeof window != 'undefined' &&
                typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
            }
            if (!result) result = '';
            input.cache = intArrayFromString(result + '\n', true);
          }
          return input.cache.shift();
        };
        if (!output) output = function(val) {
          if (!output.printer) {
            if (typeof print == 'function') {
              // Either console or custom print function defined.
              output.printer = print;
            } else if (console && typeof console.log == 'function') {
              // Browser-like environment with a console.
              output.printer = console.log;
            } else {
              // Fallback to a harmless no-op.
              output.printer = function() {};
            }
          }
          if (!output.buffer) output.buffer = [];
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(String.fromCharCode(val));
          }
        };
        if (!error) error = output;
  
        // Create the temporary folder.
        FS.createFolder('/', 'tmp', true, true);
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, false);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        _stdin = allocate([1], 'void*', ALLOC_STATIC);
        _stdout = allocate([2], 'void*', ALLOC_STATIC);
        _stderr = allocate([3], 'void*', ALLOC_STATIC);
  
        // Once initialized, permissions start having effect.
        FS.ignorePermissions = false;
      } };
  
  
  
  
  
  
  
  var ___dirent_struct_layout=null;function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP[varargs];
  
      // Simplify flags.
      var accessMode = oflag & 0x3;  // O_ACCMODE.
      var isWrite = accessMode != 0x0;  // O_RDONLY.
      var isRead = accessMode != 0x1;  // O_WRONLY.
      var isCreate = Boolean(oflag & 0x40);  // O_CREAT.
      var isExistCheck = Boolean(oflag & 0x80);  // O_EXCL.
      var isTruncate = Boolean(oflag & 0x200);  // O_TRUNC.
      var isAppend = Boolean(oflag & 0x400);  // O_APPEND.
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length;
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 0x2;  // O_RDWR
        } else {
          flags = 0x0;  // O_RDONLY
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 0x2;  // O_RDWR
        } else {
          flags = 0x1;  // O_WRONLY
        }
        flags |= 0x40;  // O_CREAT
        flags |= 0x200;  // O_TRUNC
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 0x2;  // O_RDWR
        } else {
          flags = 0x1;  // O_WRONLY
        }
        flags |= 0x40;  // O_CREAT
        flags |= 0x400;  // O_APPEND
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  
  
  
  
  
  
  
  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP[buf++]=stream.ungotten.pop();
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        for (var i = 0; i < size; i++) {
          HEAP[buf+i]=contents[offset + i];
          bytesRead++;
        }
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP[buf++]=stream.ungotten.pop();
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP[buf+i]=result;
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!(stream in FS.streams)) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAP[_fgetc.ret];
      }
    }
  
  var _getc=_fgetc;var __IO_getc=_getc;

  
  
  
  
  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        delete FS.streams[fildes];
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  
  
  function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        if (!(stream in FS.streams)) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(FS.streams[stream].path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (stream in FS.streams) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      return Number(stream in FS.streams && FS.streams[stream].error);
    }


  
  
  
  
  
  
  
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAP[buf+i];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP[buf+i]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      var getNextArg = function(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'float' || type === 'double') {
          ret = HEAP[varargs+argIndex];
        } else {
          ret = HEAP[varargs+argIndex];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return Number(ret);
      };
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP[textIndex];
        if (curr === 0) break;
        next = HEAP[textIndex+1];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP[textIndex+1];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP[textIndex+1];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP[textIndex+1];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP[textIndex+1];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP[textIndex+1];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP[textIndex+1];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP[textIndex+2];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char
              } else {
                argSize = 2; // short
              }
              break;
            case 'l':
              var nextNext = HEAP[textIndex+2];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = undefined;
          }
          if (argSize !== undefined) textIndex++;
          next = HEAP[textIndex+1];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var argText;
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              argText = currAbsArg.toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              argText = unSign(currArg, 8 * argSize).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign.
            if (currArg < 0) {
              prefix = '-' + prefix;
            } else if (flagAlwaysSigned) {
              prefix = '+' + prefix;
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg(argSize === 4 ? 'float' : 'double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*');
            var copiedString;
            if (arg) {
              copiedString = String_copy(arg);
              if (precisionSet && copiedString.length > precision) {
                copiedString = copiedString.slice(0, precision);
              }
            } else {
              copiedString = intArrayFromString('(null)', true);
            }
            if (!flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            ret = ret.concat(copiedString);
            if (flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP[ptr]=ret.length;
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP[i]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      return _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
    }

  function _free(){}

  function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(stream in FS.streams && FS.streams[stream].eof);
    }

  
  function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  
  
  
  var ERRNO_MESSAGES={1: "Operation not permitted", 2: "No such file or directory", 3: "No such process", 4: "Interrupted system call", 5: "Input/output error", 6: "No such device or address", 8: "Exec format error", 9: "Bad file descriptor", 10: "No child processes", 11: "Resource temporarily unavailable", 12: "Cannot allocate memory", 13: "Permission denied", 14: "Bad address", 16: "Device or resource busy", 17: "File exists", 18: "Invalid cross-device link", 19: "No such device", 20: "Not a directory", 21: "Is a directory", 22: "Invalid argument", 23: "Too many open files in system", 24: "Too many open files", 25: "Inappropriate ioctl for device", 26: "Text file busy", 27: "File too large", 28: "No space left on device", 29: "Illegal seek", 30: "Read-only file system", 31: "Too many links", 32: "Broken pipe", 33: "Numerical argument out of domain", 34: "Numerical result out of range", 35: "Resource deadlock avoided", 36: "File name too long", 37: "No locks available", 38: "Function not implemented", 39: "Directory not empty", 40: "Too many levels of symbolic links", 42: "No message of desired type", 43: "Identifier removed", 60: "Device not a stream", 61: "No data available", 62: "Timer expired", 63: "Out of streams resources", 67: "Link has been severed", 71: "Protocol error", 72: "Multihop attempted", 74: "Bad message", 75: "Value too large for defined data type", 84: "Invalid or incomplete multibyte or wide character", 88: "Socket operation on non-socket", 89: "Destination address required", 90: "Message too long", 91: "Protocol wrong type for socket", 92: "Protocol not available", 93: "Protocol not supported", 95: "Operation not supported", 97: "Address family not supported by protocol", 98: "Address already in use", 99: "Cannot assign requested address", 100: "Network is down", 101: "Network is unreachable", 102: "Network dropped connection on reset", 103: "Software caused connection abort", 104: "Connection reset by peer", 105: "No buffer space available", 106: "Transport endpoint is already connected", 107: "Transport endpoint is not connected", 110: "Connection timed out", 111: "Connection refused", 113: "No route to host", 114: "Operation already in progress", 115: "Operation now in progress", 116: "Stale NFS file handle", 122: "Disk quota exceeded", 125: "Operation canceled", 130: "Owner died", 131: "State not recoverable" };
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP[strerrbuf+i]=msg.charCodeAt(i);
          }
          HEAP[strerrbuf+i]=0;
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function ___errno_location() {
      return ___setErrNo.ret;
    }

  
  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  
  function __parseInt(str, endptr, base, min, max, unsignBits) {
      // Skip space.
      while (_isspace(HEAP[str])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP[str] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP[str] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP[str] == '0'.charCodeAt(0)) {
          if (HEAP[str+1] == 'x'.charCodeAt(0) ||
              HEAP[str+1] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP[str]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP[endptr]=str;
      }
  
      // Unsign if needed.
      if (unsignBits) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, unsignBits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32);  // ULONG_MAX.
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP[arr+i * i16size]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  var _floor=Math.floor;

  var _llvm_pow_f64=Math.pow;

  var _abs=Math.abs;

  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!(stream in FS.streams)) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error) return 0;
          else if (streamObj.eof) break;
        }
        HEAP[s+i]=byte_;
      }
      HEAP[s+i]=0;
      return s;
    }

  function _longjmp(env, val) {
      // not really working...
      assert(0);
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      __shutdownRuntime__();
      ABORT = true;
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  
  function _setjmp(env) {
      // XXX print('WARNING: setjmp() not really implemented, will fail if longjmp() is actually called');
      return 0;
    }var __setjmp=_setjmp;


  
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      for (var i = 0; i < result.length; i++) {
        HEAP[s+i]=result.charCodeAt(i);;
      }
      HEAP[s+i]=0;;
      return s;
    }
  function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      if (stream in FS.streams) FS.streams[stream].error = false;
    }

  
  
  
  
  
  function __scanString(format, get, unget, varargs) {
      // Supports %x, %4x, %d.%d, %s.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      for (var formatIndex = 0; formatIndex < format.length; formatIndex++) {
        var next = get();
        if (next <= 0) return fields;  // End of input.
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) &&
                 format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          // TODO: Handle type size modifier.
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          while ((curr < max_ || isNaN(max_)) && next > 0) {
            if ((type === 'd' && next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) ||
                (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) ||
                                  next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) ||
                                  next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0))) ||
                (type === 's')) {
              buffer.push(String.fromCharCode(next));
              next = get();
              curr++;
            } else {
              break;
            }
          }
          if (buffer.length === 0) return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP[varargs+argIndex];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd':
              HEAP[argPtr]=parseInt(text, 10);
              break;
            case 'x':
              HEAP[argPtr]=parseInt(text, 16);
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP[argPtr+j]=array[j];
              }
              break;
          }
          fields++;
        } else {
          // Not a specifier.
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            return fields;
          }
        }
      }
      return fields;
    }
  
  function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      if (stream in FS.streams) {
        var get = function() { return _fgetc(stream); };
        var unget = function(c) { return _ungetc(c, stream); };
        return __scanString(format, get, unget, varargs);
      } else {
        return -1;
      }
    }
  
  
  
  
  
  var ___isoc99_fscanf=_fscanf;

  
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (filedes in FS.streams && FS.streams[filedes].object.output) {
          FS.streams[filedes].object.output(null);
        }
      };
      try {
        if (stream === 0) {
          for (var i in FS.streams) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }

  function _setvbuf(stream, buf, type, size) {
      // int setvbuf(FILE *restrict stream, char *restrict buf, int type, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setvbuf.html
      // TODO: Implement custom buffering.
      return 0;
    }

  
  
  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  
  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (stream in FS.streams) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
        me.ret = allocate([allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL)], 'i8', ALLOC_NORMAL); // just decimal point, for now
      }
      return me.ret;
    }

  var _tan=Math.tan;

  
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  var _sqrt=Math.sqrt;

  var _sin=Math.sin;


  
  var ___rand_state=42;function _srand(seed) {
      // void srand(unsigned seed);
      ___rand_state = seed;
    }

  function _rand() {
      // int rand(void);
      ___rand_state = (1103515245 * ___rand_state + 12345) % 0x100000000;
      return ___rand_state & 0x7FFFFFFF;
    }

  function _modf(x, intpart) {
      HEAP[intpart]=Math.floor(x);
      return x - HEAP[intpart];
    }

  var _log=Math.log;

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }

  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = x/Math.pow(2, exp_);
      }
      HEAP[exp_addr]=exp_;
      return sig;
    }

  function _fmod(x, y) {
      return x % y;
    }

  var _exp=Math.exp;

  var _cos=Math.cos;


  var _ceil=Math.ceil;

  var _atan=Math.atan;

  var _atan2=Math.atan2;

  var _asin=Math.asin;

  var _acos=Math.acos;

  var _fabs=Math.abs;

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP[ptr2] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  
  
  
  var _environ=null;
  
  var ___environ=null;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (_environ === null) {
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP[envPtr]=poolPtr;
        _environ = allocate([envPtr], 'i8**', ALLOC_STATIC);
        // Set up global variable alias.
        ___environ = _environ;
      } else {
        envPtr = HEAP[_environ];
        poolPtr = HEAP[envPtr];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP[poolPtr+j]=line.charCodeAt(j);
        }
        HEAP[poolPtr+j]=0;
        HEAP[envPtr+i * ptrSize]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP[envPtr+strings.length * ptrSize]=0;
    }var ENV={ };function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _strtod(str, endptr) {
      // Skip space.
      while (_isspace(HEAP[str])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP[str] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP[str] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      while(1) {
        chr = HEAP[str];
        if (!_isdigit(chr)) break;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      if (HEAP[str] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP[str];
          if (!_isdigit(chr)) break;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      // Get exponent part.
      chr = HEAP[str];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP[str];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP[str];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP[str];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP[endptr]=str;
      }
  
      return ret * multiplier;
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, n - 1);
      for (var i = 0; i < limit; i++) {
        HEAP[s+i]=result[i];;
      }
      HEAP[s+i]=0;;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP[psrc+i];
        HEAP[pdest+i]=curr;
        padding = padding || HEAP[psrc+i] == 0;
      }
      return pdest;
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        for (var $mcpi$ = 0; $mcpi$ < 1; $mcpi$++) {
  HEAP[pdest+i+$mcpi$]=HEAP[psrc+i+$mcpi$];
  }
        i ++;
      } while (HEAP[psrc+i-1] != 0);
      return pdest;
    }

  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        for (var $mcpi$ = 0; $mcpi$ < 1; $mcpi$++) {
  HEAP[pdest+len+i+$mcpi$]=HEAP[psrc+i+$mcpi$];
  }
        i ++;
      } while (HEAP[psrc+i-1] != 0);
      return pdest;
    }

  function _strcspn(pstr, pset) {
      var str = String_copy(pstr, true);
      var set = String_copy(pset, true);
      var i = 0;
      while (set.indexOf(str[i]) == -1) i++; // Must halt, as 0 is in both
      return i;
    }

  function _strncat(pdest, psrc, num) {
      var len = _strlen(pdest);
      var i = 0;
      while(1) {
        for (var $mcpi$ = 0; $mcpi$ < 1; $mcpi$++) {
  HEAP[pdest+len+i+$mcpi$]=HEAP[psrc+i+$mcpi$];
  }
        if (HEAP[pdest+len+i] == 0) break;
        i ++;
        if (i == num) {
          HEAP[pdest+len+i]=0;
          break;
        }
      }
      return pdest;
    }


  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP[ptr]=ret;
      }
      return ret;
    }

  
  var ___tm_struct_layout=null;
  
  
  function _malloc(size) { var ret = STATICTOP; assert(size > 0, "Trying to allocate 0"); STATICTOP += size;STATICTOP = Math.ceil((STATICTOP)/4)*4;; return ret; }
  
  var _tzname=null;
  
  var _daylight=null;
  
  var _timezone=null;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzname !== null) return;
  
      _timezone = _malloc(4);
      HEAP[_timezone]=-(new Date()).getTimezoneOffset() * 60;
  
      _daylight = _malloc(4);
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP[_daylight]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      var winterName = winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      _tzname = _malloc(2 * 4);
      HEAP[_tzname]=winterNamePtr;
      HEAP[_tzname+4]=summerNamePtr;
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP[tmPtr+offsets.tm_year];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP[tmPtr+offsets.tm_mon],
                               HEAP[tmPtr+offsets.tm_mday],
                               HEAP[tmPtr+offsets.tm_hour],
                               HEAP[tmPtr+offsets.tm_min],
                               HEAP[tmPtr+offsets.tm_sec],
                               0).getTime() / 1000;
      HEAP[tmPtr+offsets.tm_wday]=new Date(timestamp).getDay();
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP[tmPtr+offsets.tm_yday]=yday;
      return timestamp;
    }

  function _setlocale(category, locale) {
      if (!_setlocale.ret) _setlocale.ret = allocate([0], 'i8', ALLOC_NORMAL);
      return _setlocale.ret;
    }

  
  function _rename(old, new_) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      var oldObj = FS.analyzePath(Pointer_stringify(old));
      var newObj = FS.analyzePath(Pointer_stringify(new_));
      if (newObj.path == oldObj.path) {
        return 0;
      } else if (!oldObj.exists) {
        ___setErrNo(oldObj.error);
        return -1;
      } else if (oldObj.isRoot || oldObj.path == FS.currentPath) {
        ___setErrNo(ERRNO_CODES.EBUSY);
        return -1;
      } else if (newObj.path && newObj.path.indexOf(oldObj.path) == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else if (newObj.exists && newObj.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else {
        delete oldObj.parentObject.contents[oldObj.name];
        newObj.parentObject.contents[newObj.name] = oldObj.object;
        return 0;
      }
    }

  
  
  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists || !path.exists) {
        ___setErrNo(path.error);
        return -1;
      } else if (path.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (!path.object.write) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else {
        delete path.parentObject.contents[path.name];
        return 0;
      }
    }
  
  
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists || !path.exists) {
        ___setErrNo(path.error);
        return -1;
      } else if (!path.object.write || path.isRoot) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (!path.object.isFolder) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return -1;
      } else {
        for (var i in path.object.contents) {
          ___setErrNo(ERRNO_CODES.ENOTEMPTY);
          return -1;
        }
        if (path.path == FS.currentPath) {
          ___setErrNo(ERRNO_CODES.EBUSY);
          return -1;
        } else {
          delete path.parentObject.contents[path.name];
          return 0;
        }
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  
  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  
  
  
  var ___tm_current=0;
  
  
  
  var ___tm_timezones={ };function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP[time]*1000);
      var offsets = ___tm_struct_layout;
      HEAP[tmPtr+offsets.tm_sec]=date.getUTCSeconds();
      HEAP[tmPtr+offsets.tm_min]=date.getUTCMinutes();
      HEAP[tmPtr+offsets.tm_hour]=date.getUTCHours();
      HEAP[tmPtr+offsets.tm_mday]=date.getUTCDate();
      HEAP[tmPtr+offsets.tm_mon]=date.getUTCMonth();
      HEAP[tmPtr+offsets.tm_year]=date.getUTCFullYear()-1900;
      HEAP[tmPtr+offsets.tm_wday]=date.getUTCDay();
      HEAP[tmPtr+offsets.tm_gmtoff]=0;
      HEAP[tmPtr+offsets.tm_isdst]=0;
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP[tmPtr+offsets.tm_yday]=yday;
  
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP[tmPtr+offsets.tm_zone]=___tm_timezones[timezone];
  
      return tmPtr;
    }function _gmtime(time) {
      if (!___tm_current) ___tm_current = _malloc(___tm_struct_layout.__size__);
      return _gmtime_r(time, ___tm_current);
    }

  
  
  
  
  
  
  function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP[time]*1000);
      HEAP[tmPtr+offsets.tm_sec]=date.getSeconds();
      HEAP[tmPtr+offsets.tm_min]=date.getMinutes();
      HEAP[tmPtr+offsets.tm_hour]=date.getHours();
      HEAP[tmPtr+offsets.tm_mday]=date.getDate();
      HEAP[tmPtr+offsets.tm_mon]=date.getMonth();
      HEAP[tmPtr+offsets.tm_year]=date.getFullYear()-1900;
      HEAP[tmPtr+offsets.tm_wday]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP[tmPtr+offsets.tm_yday]=yday;
      HEAP[tmPtr+offsets.tm_gmtoff]=start.getTimezoneOffset() * 60;
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP[tmPtr+offsets.tm_isdst]=dst;
  
      var timezone = date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP[tmPtr+offsets.tm_zone]=___tm_timezones[timezone];
  
      return tmPtr;
    }function _localtime(time) {
      if (!___tm_current) ___tm_current = _malloc(___tm_struct_layout.__size__);
      return _localtime_r(time, ___tm_current);
    }

  function _strftime(s, maxsize, format, timeptr) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      // TODO: Implement.
      return 0;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = new Date();
      return (Date.now() - _clock.start.getTime()) * 1000;
    }

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAP[p1+i];
        var v2 = HEAP[p2+i];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _strpbrk(ptr1, ptr2) {
      var searchSet = Runtime.set.apply(null, String_copy(ptr2));
      while (HEAP[ptr1]) {
        if (HEAP[ptr1] in searchSet) return ptr1;
        ptr1++;
      }
      return 0;
    }

  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP[ptr] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  
  var _strcoll=_strcmp;

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP[_stdout];
      return _fprintf(stdout, format, varargs);
    }

  
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP[_fputc.ret]=chr;
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (stream in FS.streams) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }
  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP[_stdout]);
    }

  function ___assert_fail(condition, file, line) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition);//JSON.stringify(arguments)//condition;
    }

  function _isalnum(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _isalpha(chr) {
      return (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }


  
  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }var _isgraph=_isprint;

  function _islower(chr) {
      return chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0);
    }


  function _ispunct(chr) {
      return (chr >= '!'.charCodeAt(0) && chr <= '/'.charCodeAt(0)) ||
             (chr >= ':'.charCodeAt(0) && chr <= '@'.charCodeAt(0)) ||
             (chr >= '['.charCodeAt(0) && chr <= '`'.charCodeAt(0)) ||
             (chr >= '{'.charCodeAt(0) && chr <= '~'.charCodeAt(0));
    }


  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  function _isxdigit(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'f'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'F'.charCodeAt(0));
    }

  function _memset(ptr, value, num) {
      for (var $mspi$ = 0; $mspi$ < num; $mspi$++) {
  HEAP[ptr+$mspi$]=value;;
  }
    }



  function _luaA_pushobject($L, $o) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $o2=__stackBase__+8;
    var $o1=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$o;
    var $3=HEAP[$2];
    HEAP[$o2]=$3;
    var $4=HEAP[$1];
    var $5=(($4+8)&4294967295);
    var $6=HEAP[$5];
    HEAP[$o1]=$6;
    var $7=HEAP[$o1];
    var $8=(($7)&4294967295);
    var $9=HEAP[$o2];
    var $10=(($9)&4294967295);
    var $11=$8;
    var $12=$10;
    _llvm_memcpy_p0i8_p0i8_i32($11, $12, 8, 4, 0);
    var $13=HEAP[$o2];
    var $14=(($13+8)&4294967295);
    var $15=HEAP[$14];
    var $16=HEAP[$o1];
    var $17=(($16+8)&4294967295);
    HEAP[$17]=$15;
    var $18=HEAP[$1];
    var $19=HEAP[$1];
    var $20=(($19+8)&4294967295);
    var $21=HEAP[$20];
    var $22=(($21+12)&4294967295);
    HEAP[$20]=$22;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_checkstack($L, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $res=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$size;
        HEAP[$res]=1;
        var $3=HEAP[$2];
        var $4=((($3))|0) > 8000;
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $5
        var $6=HEAP[$1];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=HEAP[$1];
        var $10=(($9+12)&4294967295);
        var $11=HEAP[$10];
        var $12=($8);
        var $13=($11);
        var $14=((($12) - ($13))&4294967295);
        var $15=((((($14))|0)/12)|0);
        var $16=HEAP[$2];
        var $17=((($15) + ($16))&4294967295);
        var $18=((($17))|0) > 8000;
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $19
        HEAP[$res]=0;
        __label__ = 11; break;
      case 3: // $20
        var $21=HEAP[$2];
        var $22=((($21))|0) > 0;
        if ($22) { __label__ = 4; break; } else { __label__ = 10; break; }
      case 4: // $23
        var $24=HEAP[$1];
        var $25=(($24+28)&4294967295);
        var $26=HEAP[$25];
        var $27=$26;
        var $28=HEAP[$1];
        var $29=(($28+8)&4294967295);
        var $30=HEAP[$29];
        var $31=$30;
        var $32=($27);
        var $33=($31);
        var $34=((($32) - ($33))&4294967295);
        var $35=HEAP[$2];
        var $36=((($35) * 12)&4294967295);
        var $37=((($34))|0) <= ((($36))|0);
        if ($37) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $38
        var $39=HEAP[$1];
        var $40=HEAP[$2];
        _luaD_growstack($39, $40);
        __label__ = 7; break;
      case 6: // $41
        __label__ = 7; break;
      case 7: // $42
        var $43=HEAP[$1];
        var $44=(($43+20)&4294967295);
        var $45=HEAP[$44];
        var $46=(($45+8)&4294967295);
        var $47=HEAP[$46];
        var $48=HEAP[$1];
        var $49=(($48+8)&4294967295);
        var $50=HEAP[$49];
        var $51=HEAP[$2];
        var $52=(($50+12*$51)&4294967295);
        var $53=((($47))>>>0) < ((($52))>>>0);
        if ($53) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $54
        var $55=HEAP[$1];
        var $56=(($55+8)&4294967295);
        var $57=HEAP[$56];
        var $58=HEAP[$2];
        var $59=(($57+12*$58)&4294967295);
        var $60=HEAP[$1];
        var $61=(($60+20)&4294967295);
        var $62=HEAP[$61];
        var $63=(($62+8)&4294967295);
        HEAP[$63]=$59;
        __label__ = 9; break;
      case 9: // $64
        __label__ = 10; break;
      case 10: // $65
        __label__ = 11; break;
      case 11: // $66
        var $67=HEAP[$res];
        STACKTOP = __stackBase__;
        return $67;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_xmove($from, $to, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $o2=__stackBase__+16;
        var $o1=__stackBase__+20;
        HEAP[$1]=$from;
        HEAP[$2]=$to;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=((($4))|0)==((($5))|0);
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        __label__ = 6; break;
      case 2: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$1];
        var $11=HEAP[$1];
        var $12=HEAP[$3];
        var $13=HEAP[$1];
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        var $16=((0 - ($12))&4294967295);
        var $17=(($15+12*$16)&4294967295);
        HEAP[$14]=$17;
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $18
        var $19=HEAP[$i];
        var $20=HEAP[$3];
        var $21=((($19))|0) < ((($20))|0);
        if ($21) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $22
        var $23=HEAP[$1];
        var $24=(($23+8)&4294967295);
        var $25=HEAP[$24];
        var $26=HEAP[$i];
        var $27=(($25+12*$26)&4294967295);
        HEAP[$o2]=$27;
        var $28=HEAP[$2];
        var $29=(($28+8)&4294967295);
        var $30=HEAP[$29];
        var $31=(($30+12)&4294967295);
        HEAP[$29]=$31;
        HEAP[$o1]=$30;
        var $32=HEAP[$o1];
        var $33=(($32)&4294967295);
        var $34=HEAP[$o2];
        var $35=(($34)&4294967295);
        var $36=$33;
        var $37=$35;
        _llvm_memcpy_p0i8_p0i8_i32($36, $37, 8, 4, 0);
        var $38=HEAP[$o2];
        var $39=(($38+8)&4294967295);
        var $40=HEAP[$39];
        var $41=HEAP[$o1];
        var $42=(($41+8)&4294967295);
        HEAP[$42]=$40;
        __label__ = 5; break;
      case 5: // $43
        var $44=HEAP[$i];
        var $45=((($44) + 1)&4294967295);
        HEAP[$i]=$45;
        __label__ = 3; break;
      case 6: // $46
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_setlevel($from, $to) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$from;
    HEAP[$2]=$to;
    var $3=HEAP[$1];
    var $4=(($3+52)&4294967295);
    var $5=HEAP[$4];
    var $6=HEAP[$2];
    var $7=(($6+52)&4294967295);
    HEAP[$7]=$5;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_atpanic($L, $panicf) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $old=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$panicf;
    var $3=HEAP[$1];
    var $4=(($3+16)&4294967295);
    var $5=HEAP[$4];
    var $6=(($5+88)&4294967295);
    var $7=HEAP[$6];
    HEAP[$old]=$7;
    var $8=HEAP[$2];
    var $9=HEAP[$1];
    var $10=(($9+16)&4294967295);
    var $11=HEAP[$10];
    var $12=(($11+88)&4294967295);
    HEAP[$12]=$8;
    var $13=HEAP[$old];
    STACKTOP = __stackBase__;
    return $13;
  }
  

  function _lua_newthread($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $L1=__stackBase__+4;
        var $i_o=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=HEAP[$3];
        var $5=(($4+68)&4294967295);
        var $6=HEAP[$5];
        var $7=HEAP[$1];
        var $8=(($7+16)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9+64)&4294967295);
        var $11=HEAP[$10];
        var $12=((($6))>>>0) >= ((($11))>>>0);
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        var $14=HEAP[$1];
        _luaC_step($14);
        __label__ = 2; break;
      case 2: // $15
        var $16=HEAP[$1];
        var $17=_luaE_newthread($16);
        HEAP[$L1]=$17;
        var $18=HEAP[$1];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        HEAP[$i_o]=$20;
        var $21=HEAP[$L1];
        var $22=$21;
        var $23=HEAP[$i_o];
        var $24=(($23)&4294967295);
        var $25=$24;
        HEAP[$25]=$22;
        var $26=HEAP[$i_o];
        var $27=(($26+8)&4294967295);
        HEAP[$27]=8;
        var $28=HEAP[$1];
        var $29=HEAP[$1];
        var $30=(($29+8)&4294967295);
        var $31=HEAP[$30];
        var $32=(($31+12)&4294967295);
        HEAP[$30]=$32;
        var $33=HEAP[$1];
        var $34=HEAP[$L1];
        STACKTOP = __stackBase__;
        return $34;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_gettop($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=(($2+8)&4294967295);
    var $4=HEAP[$3];
    var $5=HEAP[$1];
    var $6=(($5+12)&4294967295);
    var $7=HEAP[$6];
    var $8=($4);
    var $9=($7);
    var $10=((($8) - ($9))&4294967295);
    var $11=((((($10))|0)/12)|0);
    STACKTOP = __stackBase__;
    return $11;
  }
  

  function _lua_settop($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$2];
        var $4=((($3))|0) >= 0;
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; }
      case 1: // $5
        var $6=HEAP[$1];
        __label__ = 2; break;
      case 2: // $7
        var $8=HEAP[$1];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        var $11=HEAP[$1];
        var $12=(($11+12)&4294967295);
        var $13=HEAP[$12];
        var $14=HEAP[$2];
        var $15=(($13+12*$14)&4294967295);
        var $16=((($10))>>>0) < ((($15))>>>0);
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        var $18=HEAP[$1];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+12)&4294967295);
        HEAP[$19]=$21;
        var $22=(($20+8)&4294967295);
        HEAP[$22]=0;
        __label__ = 2; break;
      case 4: // $23
        var $24=HEAP[$1];
        var $25=(($24+12)&4294967295);
        var $26=HEAP[$25];
        var $27=HEAP[$2];
        var $28=(($26+12*$27)&4294967295);
        var $29=HEAP[$1];
        var $30=(($29+8)&4294967295);
        HEAP[$30]=$28;
        __label__ = 6; break;
      case 5: // $31
        var $32=HEAP[$1];
        var $33=HEAP[$2];
        var $34=((($33) + 1)&4294967295);
        var $35=HEAP[$1];
        var $36=(($35+8)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37+12*$34)&4294967295);
        HEAP[$36]=$38;
        __label__ = 6; break;
      case 6: // $39
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_remove($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $p=__stackBase__+8;
        var $o2=__stackBase__+12;
        var $o1=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$p]=$5;
        var $6=HEAP[$1];
        __label__ = 1; break;
      case 1: // $7
        var $8=HEAP[$p];
        var $9=(($8+12)&4294967295);
        HEAP[$p]=$9;
        var $10=HEAP[$1];
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        var $13=((($9))>>>0) < ((($12))>>>0);
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $14
        var $15=HEAP[$p];
        HEAP[$o2]=$15;
        var $16=HEAP[$p];
        var $17=(($16+-12)&4294967295);
        HEAP[$o1]=$17;
        var $18=HEAP[$o1];
        var $19=(($18)&4294967295);
        var $20=HEAP[$o2];
        var $21=(($20)&4294967295);
        var $22=$19;
        var $23=$21;
        _llvm_memcpy_p0i8_p0i8_i32($22, $23, 8, 4, 0);
        var $24=HEAP[$o2];
        var $25=(($24+8)&4294967295);
        var $26=HEAP[$25];
        var $27=HEAP[$o1];
        var $28=(($27+8)&4294967295);
        HEAP[$28]=$26;
        __label__ = 1; break;
      case 3: // $29
        var $30=HEAP[$1];
        var $31=(($30+8)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+-12)&4294967295);
        HEAP[$31]=$33;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _index2adr($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $o=__stackBase__+12;
        var $func=__stackBase__+16;
        var $i_o=__stackBase__+20;
        var $func1=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        var $4=HEAP[$3];
        var $5=((($4))|0) > 0;
        if ($5) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $6
        var $7=HEAP[$2];
        var $8=(($7+12)&4294967295);
        var $9=HEAP[$8];
        var $10=HEAP[$3];
        var $11=((($10) - 1)&4294967295);
        var $12=(($9+12*$11)&4294967295);
        HEAP[$o]=$12;
        var $13=HEAP[$2];
        var $14=HEAP[$o];
        var $15=HEAP[$2];
        var $16=(($15+8)&4294967295);
        var $17=HEAP[$16];
        var $18=((($14))>>>0) >= ((($17))>>>0);
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $19
        HEAP[$1]=_luaO_nilobject_;
        __label__ = 14; break;
      case 3: // $20
        var $21=HEAP[$o];
        HEAP[$1]=$21;
        __label__ = 14; break;
      case 4: // $22
        var $23=HEAP[$3];
        var $24=((($23))|0) > -10000;
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $25
        var $26=HEAP[$2];
        var $27=HEAP[$2];
        var $28=(($27+8)&4294967295);
        var $29=HEAP[$28];
        var $30=HEAP[$3];
        var $31=(($29+12*$30)&4294967295);
        HEAP[$1]=$31;
        __label__ = 14; break;
      case 6: // $32
        var $33=HEAP[$3];
        if ($33 == -10000) {
          __label__ = 7; break;
        }
        else if ($33 == -10001) {
          __label__ = 8; break;
        }
        else if ($33 == -10002) {
          __label__ = 9; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 7: // $34
        var $35=HEAP[$2];
        var $36=(($35+16)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37+92)&4294967295);
        HEAP[$1]=$38;
        __label__ = 14; break;
      case 8: // $39
        var $40=HEAP[$2];
        var $41=(($40+20)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+4)&4294967295);
        var $44=HEAP[$43];
        var $45=(($44)&4294967295);
        var $46=$45;
        var $47=HEAP[$46];
        var $48=$47;
        HEAP[$func]=$48;
        var $49=HEAP[$2];
        var $50=(($49+84)&4294967295);
        HEAP[$i_o]=$50;
        var $51=HEAP[$func];
        var $52=$51;
        var $53=(($52+12)&4294967295);
        var $54=HEAP[$53];
        var $55=$54;
        var $56=HEAP[$i_o];
        var $57=(($56)&4294967295);
        var $58=$57;
        HEAP[$58]=$55;
        var $59=HEAP[$i_o];
        var $60=(($59+8)&4294967295);
        HEAP[$60]=5;
        var $61=HEAP[$2];
        var $62=(($61+84)&4294967295);
        HEAP[$1]=$62;
        __label__ = 14; break;
      case 9: // $63
        var $64=HEAP[$2];
        var $65=(($64+72)&4294967295);
        HEAP[$1]=$65;
        __label__ = 14; break;
      case 10: // $66
        var $67=HEAP[$2];
        var $68=(($67+20)&4294967295);
        var $69=HEAP[$68];
        var $70=(($69+4)&4294967295);
        var $71=HEAP[$70];
        var $72=(($71)&4294967295);
        var $73=$72;
        var $74=HEAP[$73];
        var $75=$74;
        HEAP[$func1]=$75;
        var $76=HEAP[$3];
        var $77=((-10002 - ($76))&4294967295);
        HEAP[$3]=$77;
        var $78=HEAP[$3];
        var $79=HEAP[$func1];
        var $80=$79;
        var $81=(($80+7)&4294967295);
        var $82=HEAP[$81];
        var $83=unSign(($82), 8, 0);
        var $84=((($78))|0) <= ((($83))|0);
        if ($84) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $85
        var $86=HEAP[$3];
        var $87=((($86) - 1)&4294967295);
        var $88=HEAP[$func1];
        var $89=$88;
        var $90=(($89+20)&4294967295);
        var $91=(($90+$87*12)&4294967295);
        __lastLabel__ = 11; __label__ = 13; break;
      case 12: // $92
        __lastLabel__ = 12; __label__ = 13; break;
      case 13: // $93
        var $94=__lastLabel__ == 11 ? $91 : (_luaO_nilobject_);
        HEAP[$1]=$94;
        __label__ = 14; break;
      case 14: // $95
        var $96=HEAP[$1];
        STACKTOP = __stackBase__;
        return $96;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_insert($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $p=__stackBase__+8;
        var $q=__stackBase__+12;
        var $o2=__stackBase__+16;
        var $o1=__stackBase__+20;
        var $o21=__stackBase__+24;
        var $o12=__stackBase__+28;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$p]=$5;
        var $6=HEAP[$1];
        var $7=HEAP[$1];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        HEAP[$q]=$9;
        __label__ = 1; break;
      case 1: // $10
        var $11=HEAP[$q];
        var $12=HEAP[$p];
        var $13=((($11))>>>0) > ((($12))>>>0);
        if ($13) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $14
        var $15=HEAP[$q];
        var $16=(($15+-12)&4294967295);
        HEAP[$o2]=$16;
        var $17=HEAP[$q];
        HEAP[$o1]=$17;
        var $18=HEAP[$o1];
        var $19=(($18)&4294967295);
        var $20=HEAP[$o2];
        var $21=(($20)&4294967295);
        var $22=$19;
        var $23=$21;
        _llvm_memcpy_p0i8_p0i8_i32($22, $23, 8, 4, 0);
        var $24=HEAP[$o2];
        var $25=(($24+8)&4294967295);
        var $26=HEAP[$25];
        var $27=HEAP[$o1];
        var $28=(($27+8)&4294967295);
        HEAP[$28]=$26;
        __label__ = 3; break;
      case 3: // $29
        var $30=HEAP[$q];
        var $31=(($30+-12)&4294967295);
        HEAP[$q]=$31;
        __label__ = 1; break;
      case 4: // $32
        var $33=HEAP[$1];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        HEAP[$o21]=$35;
        var $36=HEAP[$p];
        HEAP[$o12]=$36;
        var $37=HEAP[$o12];
        var $38=(($37)&4294967295);
        var $39=HEAP[$o21];
        var $40=(($39)&4294967295);
        var $41=$38;
        var $42=$40;
        _llvm_memcpy_p0i8_p0i8_i32($41, $42, 8, 4, 0);
        var $43=HEAP[$o21];
        var $44=(($43+8)&4294967295);
        var $45=HEAP[$44];
        var $46=HEAP[$o12];
        var $47=(($46+8)&4294967295);
        HEAP[$47]=$45;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_replace($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        var $func=__stackBase__+12;
        var $o2=__stackBase__+16;
        var $o1=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$2];
        var $4=((($3))|0)==-10001;
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $5
        var $6=HEAP[$1];
        var $7=(($6+20)&4294967295);
        var $8=HEAP[$7];
        var $9=HEAP[$1];
        var $10=(($9+40)&4294967295);
        var $11=HEAP[$10];
        var $12=((($8))|0)==((($11))|0);
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$1];
        _luaG_runerror($14, ((__str)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $15
        var $16=HEAP[$1];
        var $17=HEAP[$1];
        var $18=HEAP[$2];
        var $19=_index2adr($17, $18);
        HEAP[$o]=$19;
        var $20=HEAP[$1];
        var $21=HEAP[$2];
        var $22=((($21))|0)==-10001;
        if ($22) { __label__ = 4; break; } else { __label__ = 9; break; }
      case 4: // $23
        var $24=HEAP[$1];
        var $25=(($24+20)&4294967295);
        var $26=HEAP[$25];
        var $27=(($26+4)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28)&4294967295);
        var $30=$29;
        var $31=HEAP[$30];
        var $32=$31;
        HEAP[$func]=$32;
        var $33=HEAP[$1];
        var $34=HEAP[$1];
        var $35=(($34+8)&4294967295);
        var $36=HEAP[$35];
        var $37=(($36+-12)&4294967295);
        var $38=(($37)&4294967295);
        var $39=$38;
        var $40=HEAP[$39];
        var $41=$40;
        var $42=HEAP[$func];
        var $43=$42;
        var $44=(($43+12)&4294967295);
        HEAP[$44]=$41;
        var $45=HEAP[$1];
        var $46=(($45+8)&4294967295);
        var $47=HEAP[$46];
        var $48=(($47+-12)&4294967295);
        var $49=(($48+8)&4294967295);
        var $50=HEAP[$49];
        var $51=((($50))|0) >= 4;
        if ($51) { __label__ = 5; break; } else { __label__ = 8; break; }
      case 5: // $52
        var $53=HEAP[$1];
        var $54=(($53+8)&4294967295);
        var $55=HEAP[$54];
        var $56=(($55+-12)&4294967295);
        var $57=(($56)&4294967295);
        var $58=$57;
        var $59=HEAP[$58];
        var $60=$59;
        var $61=(($60+5)&4294967295);
        var $62=HEAP[$61];
        var $63=unSign(($62), 8, 0);
        var $64=($63) & 3;
        var $65=((($64))|0)!=0;
        if ($65) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $66
        var $67=HEAP[$func];
        var $68=$67;
        var $69=$68;
        var $70=(($69+5)&4294967295);
        var $71=HEAP[$70];
        var $72=unSign(($71), 8, 0);
        var $73=($72) & 4;
        var $74=((($73))|0)!=0;
        if ($74) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $75
        var $76=HEAP[$1];
        var $77=HEAP[$func];
        var $78=$77;
        var $79=HEAP[$1];
        var $80=(($79+8)&4294967295);
        var $81=HEAP[$80];
        var $82=(($81+-12)&4294967295);
        var $83=(($82)&4294967295);
        var $84=$83;
        var $85=HEAP[$84];
        _luaC_barrierf($76, $78, $85);
        __label__ = 8; break;
      case 8: // $86
        __label__ = 16; break;
      case 9: // $87
        var $88=HEAP[$1];
        var $89=(($88+8)&4294967295);
        var $90=HEAP[$89];
        var $91=(($90+-12)&4294967295);
        HEAP[$o2]=$91;
        var $92=HEAP[$o];
        HEAP[$o1]=$92;
        var $93=HEAP[$o1];
        var $94=(($93)&4294967295);
        var $95=HEAP[$o2];
        var $96=(($95)&4294967295);
        var $97=$94;
        var $98=$96;
        _llvm_memcpy_p0i8_p0i8_i32($97, $98, 8, 4, 0);
        var $99=HEAP[$o2];
        var $100=(($99+8)&4294967295);
        var $101=HEAP[$100];
        var $102=HEAP[$o1];
        var $103=(($102+8)&4294967295);
        HEAP[$103]=$101;
        var $104=HEAP[$2];
        var $105=((($104))|0) < -10002;
        if ($105) { __label__ = 10; break; } else { __label__ = 15; break; }
      case 10: // $106
        var $107=HEAP[$1];
        var $108=(($107+8)&4294967295);
        var $109=HEAP[$108];
        var $110=(($109+-12)&4294967295);
        var $111=(($110+8)&4294967295);
        var $112=HEAP[$111];
        var $113=((($112))|0) >= 4;
        if ($113) { __label__ = 11; break; } else { __label__ = 14; break; }
      case 11: // $114
        var $115=HEAP[$1];
        var $116=(($115+8)&4294967295);
        var $117=HEAP[$116];
        var $118=(($117+-12)&4294967295);
        var $119=(($118)&4294967295);
        var $120=$119;
        var $121=HEAP[$120];
        var $122=$121;
        var $123=(($122+5)&4294967295);
        var $124=HEAP[$123];
        var $125=unSign(($124), 8, 0);
        var $126=($125) & 3;
        var $127=((($126))|0)!=0;
        if ($127) { __label__ = 12; break; } else { __label__ = 14; break; }
      case 12: // $128
        var $129=HEAP[$1];
        var $130=(($129+20)&4294967295);
        var $131=HEAP[$130];
        var $132=(($131+4)&4294967295);
        var $133=HEAP[$132];
        var $134=(($133)&4294967295);
        var $135=$134;
        var $136=HEAP[$135];
        var $137=$136;
        var $138=$137;
        var $139=$138;
        var $140=(($139+5)&4294967295);
        var $141=HEAP[$140];
        var $142=unSign(($141), 8, 0);
        var $143=($142) & 4;
        var $144=((($143))|0)!=0;
        if ($144) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $145
        var $146=HEAP[$1];
        var $147=HEAP[$1];
        var $148=(($147+20)&4294967295);
        var $149=HEAP[$148];
        var $150=(($149+4)&4294967295);
        var $151=HEAP[$150];
        var $152=(($151)&4294967295);
        var $153=$152;
        var $154=HEAP[$153];
        var $155=$154;
        var $156=$155;
        var $157=HEAP[$1];
        var $158=(($157+8)&4294967295);
        var $159=HEAP[$158];
        var $160=(($159+-12)&4294967295);
        var $161=(($160)&4294967295);
        var $162=$161;
        var $163=HEAP[$162];
        _luaC_barrierf($146, $156, $163);
        __label__ = 14; break;
      case 14: // $164
        __label__ = 15; break;
      case 15: // $165
        __label__ = 16; break;
      case 16: // $166
        var $167=HEAP[$1];
        var $168=(($167+8)&4294967295);
        var $169=HEAP[$168];
        var $170=(($169+-12)&4294967295);
        HEAP[$168]=$170;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_pushvalue($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $o2=__stackBase__+8;
    var $o1=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$idx;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=_index2adr($3, $4);
    HEAP[$o2]=$5;
    var $6=HEAP[$1];
    var $7=(($6+8)&4294967295);
    var $8=HEAP[$7];
    HEAP[$o1]=$8;
    var $9=HEAP[$o1];
    var $10=(($9)&4294967295);
    var $11=HEAP[$o2];
    var $12=(($11)&4294967295);
    var $13=$10;
    var $14=$12;
    _llvm_memcpy_p0i8_p0i8_i32($13, $14, 8, 4, 0);
    var $15=HEAP[$o2];
    var $16=(($15+8)&4294967295);
    var $17=HEAP[$16];
    var $18=HEAP[$o1];
    var $19=(($18+8)&4294967295);
    HEAP[$19]=$17;
    var $20=HEAP[$1];
    var $21=HEAP[$1];
    var $22=(($21+8)&4294967295);
    var $23=HEAP[$22];
    var $24=(($23+12)&4294967295);
    HEAP[$22]=$24;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_type($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$o]=$5;
        var $6=HEAP[$o];
        var $7=((($6))|0)==(((_luaO_nilobject_))|0);
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $9
        var $10=HEAP[$o];
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $13
        var $14=__lastLabel__ == 1 ? -1 : ($12);
        STACKTOP = __stackBase__;
        return $14;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_typename($L, $t) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=((($4))|0)==-1;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $7
        var $8=HEAP[$2];
        var $9=((_luaT_typenames+$8*4)&4294967295);
        var $10=HEAP[$9];
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $11
        var $12=__lastLabel__ == 1 ? ((__str1)&4294967295) : ($10);
        STACKTOP = __stackBase__;
        return $12;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_iscfunction($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$o]=$5;
        var $6=HEAP[$o];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0)==6;
        if ($9) { __lastLabel__ = 0; __label__ = 1; break; } else { __lastLabel__ = 0; __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$o];
        var $12=(($11)&4294967295);
        var $13=$12;
        var $14=HEAP[$13];
        var $15=$14;
        var $16=$15;
        var $17=(($16+6)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=((($19))|0)!=0;
        __lastLabel__ = 1; __label__ = 2; break;
      case 2: // $21
        var $22=__lastLabel__ == 0 ? 0 : ($20);
        var $23=unSign(($22), 1, 0);
        STACKTOP = __stackBase__;
        return $23;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_isnumber($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $n=__stackBase__+8;
        var $o=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$o]=$5;
        var $6=HEAP[$o];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0)==3;
        if ($9) { __lastLabel__ = 0; __label__ = 2; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $10
        var $11=HEAP[$o];
        var $12=_luaV_tonumber($11, $n);
        HEAP[$o]=$12;
        var $13=((($12))|0)!=0;
        __lastLabel__ = 1; __label__ = 2; break;
      case 2: // $14
        var $15=__lastLabel__ == 0 ? 1 : ($13);
        var $16=unSign(($15), 1, 0);
        STACKTOP = __stackBase__;
        return $16;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_isstring($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $t=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_lua_type($3, $4);
        HEAP[$t]=$5;
        var $6=HEAP[$t];
        var $7=((($6))|0)==4;
        if ($7) { __lastLabel__ = 0; __label__ = 2; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$t];
        var $10=((($9))|0)==3;
        __lastLabel__ = 1; __label__ = 2; break;
      case 2: // $11
        var $12=__lastLabel__ == 0 ? 1 : ($10);
        var $13=unSign(($12), 1, 0);
        STACKTOP = __stackBase__;
        return $13;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_isuserdata($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$o]=$5;
        var $6=HEAP[$o];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0)==7;
        if ($9) { __lastLabel__ = 0; __label__ = 2; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $10
        var $11=HEAP[$o];
        var $12=(($11+8)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0)==2;
        __lastLabel__ = 1; __label__ = 2; break;
      case 2: // $15
        var $16=__lastLabel__ == 0 ? 1 : ($14);
        var $17=unSign(($16), 1, 0);
        STACKTOP = __stackBase__;
        return $17;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_rawequal($L, $index1, $index2) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $o1=__stackBase__+12;
        var $o2=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$index1;
        HEAP[$3]=$index2;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_index2adr($4, $5);
        HEAP[$o1]=$6;
        var $7=HEAP[$1];
        var $8=HEAP[$3];
        var $9=_index2adr($7, $8);
        HEAP[$o2]=$9;
        var $10=HEAP[$o1];
        var $11=((($10))|0)==(((_luaO_nilobject_))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $12
        var $13=HEAP[$o2];
        var $14=((($13))|0)==(((_luaO_nilobject_))|0);
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $16
        var $17=HEAP[$o1];
        var $18=HEAP[$o2];
        var $19=_luaO_rawequalObj($17, $18);
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $20
        var $21=__lastLabel__ == 2 ? 0 : ($19);
        STACKTOP = __stackBase__;
        return $21;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_equal($L, $index1, $index2) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $o1=__stackBase__+12;
        var $o2=__stackBase__+16;
        var $i=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$index1;
        HEAP[$3]=$index2;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_index2adr($4, $5);
        HEAP[$o1]=$6;
        var $7=HEAP[$1];
        var $8=HEAP[$3];
        var $9=_index2adr($7, $8);
        HEAP[$o2]=$9;
        var $10=HEAP[$o1];
        var $11=((($10))|0)==(((_luaO_nilobject_))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $12
        var $13=HEAP[$o2];
        var $14=((($13))|0)==(((_luaO_nilobject_))|0);
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        __lastLabel__ = 2; __label__ = 6; break;
      case 3: // $16
        var $17=HEAP[$o1];
        var $18=(($17+8)&4294967295);
        var $19=HEAP[$18];
        var $20=HEAP[$o2];
        var $21=(($20+8)&4294967295);
        var $22=HEAP[$21];
        var $23=((($19))|0)==((($22))|0);
        if ($23) { __lastLabel__ = 3; __label__ = 4; break; } else { __lastLabel__ = 3; __label__ = 5; break; }
      case 4: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$o1];
        var $27=HEAP[$o2];
        var $28=_luaV_equalval($25, $26, $27);
        var $29=((($28))|0)!=0;
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $30
        var $31=__lastLabel__ == 3 ? 0 : ($29);
        var $32=unSign(($31), 1, 0);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $33
        var $34=__lastLabel__ == 2 ? 0 : ($32);
        HEAP[$i]=$34;
        var $35=HEAP[$i];
        STACKTOP = __stackBase__;
        return $35;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_lessthan($L, $index1, $index2) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $o1=__stackBase__+12;
        var $o2=__stackBase__+16;
        var $i=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$index1;
        HEAP[$3]=$index2;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_index2adr($4, $5);
        HEAP[$o1]=$6;
        var $7=HEAP[$1];
        var $8=HEAP[$3];
        var $9=_index2adr($7, $8);
        HEAP[$o2]=$9;
        var $10=HEAP[$o1];
        var $11=((($10))|0)==(((_luaO_nilobject_))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $12
        var $13=HEAP[$o2];
        var $14=((($13))|0)==(((_luaO_nilobject_))|0);
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $16
        var $17=HEAP[$1];
        var $18=HEAP[$o1];
        var $19=HEAP[$o2];
        var $20=_luaV_lessthan($17, $18, $19);
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $21
        var $22=__lastLabel__ == 2 ? 0 : ($20);
        HEAP[$i]=$22;
        var $23=HEAP[$i];
        STACKTOP = __stackBase__;
        return $23;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_tonumber($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+8;
        var $3=__stackBase__+12;
        var $n=__stackBase__+16;
        var $o=__stackBase__+28;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=_index2adr($4, $5);
        HEAP[$o]=$6;
        var $7=HEAP[$o];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        var $10=((($9))|0)==3;
        if ($10) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $11
        var $12=HEAP[$o];
        var $13=_luaV_tonumber($12, $n);
        HEAP[$o]=$13;
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        var $16=HEAP[$o];
        var $17=(($16)&4294967295);
        var $18=$17;
        var $19=HEAP[$18];
        HEAP[$1]=$19;
        __label__ = 4; break;
      case 3: // $20
        HEAP[$1]=0;
        __label__ = 4; break;
      case 4: // $21
        var $22=HEAP[$1];
        STACKTOP = __stackBase__;
        return $22;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_tointeger($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $n=__stackBase__+12;
        var $o=__stackBase__+24;
        var $res=__stackBase__+28;
        var $num=__stackBase__+32;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=_index2adr($4, $5);
        HEAP[$o]=$6;
        var $7=HEAP[$o];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        var $10=((($9))|0)==3;
        if ($10) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $11
        var $12=HEAP[$o];
        var $13=_luaV_tonumber($12, $n);
        HEAP[$o]=$13;
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        var $16=HEAP[$o];
        var $17=(($16)&4294967295);
        var $18=$17;
        var $19=HEAP[$18];
        HEAP[$num]=$19;
        var $20=HEAP[$num];
        var $21=((($20))|0);
        HEAP[$res]=$21;
        var $22=HEAP[$res];
        HEAP[$1]=$22;
        __label__ = 4; break;
      case 3: // $23
        HEAP[$1]=0;
        __label__ = 4; break;
      case 4: // $24
        var $25=HEAP[$1];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_toboolean($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$o]=$5;
        var $6=HEAP[$o];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0)==0;
        if ($9) { __lastLabel__ = 0; __label__ = 4; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $10
        var $11=HEAP[$o];
        var $12=(($11+8)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0)==1;
        if ($14) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $15
        var $16=HEAP[$o];
        var $17=(($16)&4294967295);
        var $18=$17;
        var $19=HEAP[$18];
        var $20=((($19))|0)==0;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $21
        var $22=__lastLabel__ == 1 ? 0 : ($20);
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $23
        var $24=__lastLabel__ == 0 ? 1 : ($22);
        var $25=($24) ^ 1;
        var $26=unSign(($25), 1, 0);
        STACKTOP = __stackBase__;
        return $26;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_tolstring($L, $idx, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $o=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        HEAP[$4]=$len;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=_index2adr($5, $6);
        HEAP[$o]=$7;
        var $8=HEAP[$o];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10))|0)==4;
        if ($11) { __label__ = 8; break; } else { __label__ = 1; break; }
      case 1: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$o];
        var $15=_luaV_tostring($13, $14);
        var $16=((($15))|0)!=0;
        if ($16) { __label__ = 5; break; } else { __label__ = 2; break; }
      case 2: // $17
        var $18=HEAP[$4];
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $20
        var $21=HEAP[$4];
        HEAP[$21]=0;
        __label__ = 4; break;
      case 4: // $22
        HEAP[$1]=0;
        __label__ = 11; break;
      case 5: // $23
        var $24=HEAP[$2];
        var $25=(($24+16)&4294967295);
        var $26=HEAP[$25];
        var $27=(($26+68)&4294967295);
        var $28=HEAP[$27];
        var $29=HEAP[$2];
        var $30=(($29+16)&4294967295);
        var $31=HEAP[$30];
        var $32=(($31+64)&4294967295);
        var $33=HEAP[$32];
        var $34=((($28))>>>0) >= ((($33))>>>0);
        if ($34) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $35
        var $36=HEAP[$2];
        _luaC_step($36);
        __label__ = 7; break;
      case 7: // $37
        var $38=HEAP[$2];
        var $39=HEAP[$3];
        var $40=_index2adr($38, $39);
        HEAP[$o]=$40;
        __label__ = 8; break;
      case 8: // $41
        var $42=HEAP[$4];
        var $43=((($42))|0)!=0;
        if ($43) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $44
        var $45=HEAP[$o];
        var $46=(($45)&4294967295);
        var $47=$46;
        var $48=HEAP[$47];
        var $49=$48;
        var $50=$49;
        var $51=(($50+12)&4294967295);
        var $52=HEAP[$51];
        var $53=HEAP[$4];
        HEAP[$53]=$52;
        __label__ = 10; break;
      case 10: // $54
        var $55=HEAP[$o];
        var $56=(($55)&4294967295);
        var $57=$56;
        var $58=HEAP[$57];
        var $59=$58;
        var $60=(($59+16)&4294967295);
        var $61=$60;
        HEAP[$1]=$61;
        __label__ = 11; break;
      case 11: // $62
        var $63=HEAP[$1];
        STACKTOP = __stackBase__;
        return $63;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_objlen($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $o=__stackBase__+12;
        var $l=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=_index2adr($4, $5);
        HEAP[$o]=$6;
        var $7=HEAP[$o];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        if ($9 == 4) {
          __label__ = 1; break;
        }
        else if ($9 == 7) {
          __label__ = 2; break;
        }
        else if ($9 == 5) {
          __label__ = 3; break;
        }
        else if ($9 == 3) {
          __label__ = 4; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $10
        var $11=HEAP[$o];
        var $12=(($11)&4294967295);
        var $13=$12;
        var $14=HEAP[$13];
        var $15=$14;
        var $16=$15;
        var $17=(($16+12)&4294967295);
        var $18=HEAP[$17];
        HEAP[$1]=$18;
        __label__ = 9; break;
      case 2: // $19
        var $20=HEAP[$o];
        var $21=(($20)&4294967295);
        var $22=$21;
        var $23=HEAP[$22];
        var $24=$23;
        var $25=$24;
        var $26=(($25+16)&4294967295);
        var $27=HEAP[$26];
        HEAP[$1]=$27;
        __label__ = 9; break;
      case 3: // $28
        var $29=HEAP[$o];
        var $30=(($29)&4294967295);
        var $31=$30;
        var $32=HEAP[$31];
        var $33=$32;
        var $34=_luaH_getn($33);
        HEAP[$1]=$34;
        __label__ = 9; break;
      case 4: // $35
        var $36=HEAP[$2];
        var $37=HEAP[$o];
        var $38=_luaV_tostring($36, $37);
        var $39=((($38))|0)!=0;
        if ($39) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $40
        var $41=HEAP[$o];
        var $42=(($41)&4294967295);
        var $43=$42;
        var $44=HEAP[$43];
        var $45=$44;
        var $46=$45;
        var $47=(($46+12)&4294967295);
        var $48=HEAP[$47];
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $49
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $50
        var $51=__lastLabel__ == 5 ? $48 : (0);
        HEAP[$l]=$51;
        var $52=HEAP[$l];
        HEAP[$1]=$52;
        __label__ = 9; break;
      case 8: // $53
        HEAP[$1]=0;
        __label__ = 9; break;
      case 9: // $54
        var $55=HEAP[$1];
        STACKTOP = __stackBase__;
        return $55;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_tocfunction($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$o]=$5;
        var $6=HEAP[$o];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0)==6;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$o];
        var $12=(($11)&4294967295);
        var $13=$12;
        var $14=HEAP[$13];
        var $15=$14;
        var $16=$15;
        var $17=(($16+6)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $21
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $22
        var $23=HEAP[$o];
        var $24=(($23)&4294967295);
        var $25=$24;
        var $26=HEAP[$25];
        var $27=$26;
        var $28=$27;
        var $29=(($28+16)&4294967295);
        var $30=HEAP[$29];
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $31
        var $32=__lastLabel__ == 2 ? 0 : ($30);
        STACKTOP = __stackBase__;
        return $32;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_touserdata($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $o=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=_index2adr($4, $5);
        HEAP[$o]=$6;
        var $7=HEAP[$o];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        if ($9 == 7) {
          __label__ = 1; break;
        }
        else if ($9 == 2) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $10
        var $11=HEAP[$o];
        var $12=(($11)&4294967295);
        var $13=$12;
        var $14=HEAP[$13];
        var $15=$14;
        var $16=(($15+20)&4294967295);
        var $17=$16;
        HEAP[$1]=$17;
        __label__ = 4; break;
      case 2: // $18
        var $19=HEAP[$o];
        var $20=(($19)&4294967295);
        var $21=$20;
        var $22=HEAP[$21];
        HEAP[$1]=$22;
        __label__ = 4; break;
      case 3: // $23
        HEAP[$1]=0;
        __label__ = 4; break;
      case 4: // $24
        var $25=HEAP[$1];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_tothread($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$o]=$5;
        var $6=HEAP[$o];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0)==8;
        if ($9) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $10
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $11
        var $12=HEAP[$o];
        var $13=(($12)&4294967295);
        var $14=$13;
        var $15=HEAP[$14];
        var $16=$15;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $17
        var $18=__lastLabel__ == 1 ? 0 : ($16);
        STACKTOP = __stackBase__;
        return $18;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_topointer($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $o=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=_index2adr($4, $5);
        HEAP[$o]=$6;
        var $7=HEAP[$o];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        if ($9 == 5) {
          __label__ = 1; break;
        }
        else if ($9 == 6) {
          __label__ = 2; break;
        }
        else if ($9 == 8) {
          __label__ = 3; break;
        }
        else if ($9 == 7) {
          __label__ = 4; break;
        }
        else if ($9 == 2) {
          __label__ = 4; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $10
        var $11=HEAP[$o];
        var $12=(($11)&4294967295);
        var $13=$12;
        var $14=HEAP[$13];
        var $15=$14;
        var $16=$15;
        HEAP[$1]=$16;
        __label__ = 6; break;
      case 2: // $17
        var $18=HEAP[$o];
        var $19=(($18)&4294967295);
        var $20=$19;
        var $21=HEAP[$20];
        var $22=$21;
        var $23=$22;
        HEAP[$1]=$23;
        __label__ = 6; break;
      case 3: // $24
        var $25=HEAP[$o];
        var $26=(($25)&4294967295);
        var $27=$26;
        var $28=HEAP[$27];
        var $29=$28;
        var $30=$29;
        HEAP[$1]=$30;
        __label__ = 6; break;
      case 4: // $31
        var $32=HEAP[$2];
        var $33=HEAP[$3];
        var $34=_lua_touserdata($32, $33);
        HEAP[$1]=$34;
        __label__ = 6; break;
      case 5: // $35
        HEAP[$1]=0;
        __label__ = 6; break;
      case 6: // $36
        var $37=HEAP[$1];
        STACKTOP = __stackBase__;
        return $37;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_pushnil($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=(($2+8)&4294967295);
    var $4=HEAP[$3];
    var $5=(($4+8)&4294967295);
    HEAP[$5]=0;
    var $6=HEAP[$1];
    var $7=HEAP[$1];
    var $8=(($7+8)&4294967295);
    var $9=HEAP[$8];
    var $10=(($9+12)&4294967295);
    HEAP[$8]=$10;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_pushnumber($L, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $i_o=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$n;
    var $3=HEAP[$1];
    var $4=(($3+8)&4294967295);
    var $5=HEAP[$4];
    HEAP[$i_o]=$5;
    var $6=HEAP[$2];
    var $7=HEAP[$i_o];
    var $8=(($7)&4294967295);
    var $9=$8;
    HEAP[$9]=$6;
    var $10=HEAP[$i_o];
    var $11=(($10+8)&4294967295);
    HEAP[$11]=3;
    var $12=HEAP[$1];
    var $13=HEAP[$1];
    var $14=(($13+8)&4294967295);
    var $15=HEAP[$14];
    var $16=(($15+12)&4294967295);
    HEAP[$14]=$16;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_pushinteger($L, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $i_o=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$n;
    var $3=HEAP[$1];
    var $4=(($3+8)&4294967295);
    var $5=HEAP[$4];
    HEAP[$i_o]=$5;
    var $6=HEAP[$2];
    var $7=((($6))|0);
    var $8=HEAP[$i_o];
    var $9=(($8)&4294967295);
    var $10=$9;
    HEAP[$10]=$7;
    var $11=HEAP[$i_o];
    var $12=(($11+8)&4294967295);
    HEAP[$12]=3;
    var $13=HEAP[$1];
    var $14=HEAP[$1];
    var $15=(($14+8)&4294967295);
    var $16=HEAP[$15];
    var $17=(($16+12)&4294967295);
    HEAP[$15]=$17;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_pushlstring($L, $s, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i_o=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$s;
        HEAP[$3]=$len;
        var $4=HEAP[$1];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+68)&4294967295);
        var $8=HEAP[$7];
        var $9=HEAP[$1];
        var $10=(($9+16)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11+64)&4294967295);
        var $13=HEAP[$12];
        var $14=((($8))>>>0) >= ((($13))>>>0);
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$1];
        _luaC_step($16);
        __label__ = 2; break;
      case 2: // $17
        var $18=HEAP[$1];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        HEAP[$i_o]=$20;
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=HEAP[$3];
        var $24=_luaS_newlstr($21, $22, $23);
        var $25=$24;
        var $26=HEAP[$i_o];
        var $27=(($26)&4294967295);
        var $28=$27;
        HEAP[$28]=$25;
        var $29=HEAP[$i_o];
        var $30=(($29+8)&4294967295);
        HEAP[$30]=4;
        var $31=HEAP[$1];
        var $32=HEAP[$1];
        var $33=(($32+8)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+12)&4294967295);
        HEAP[$33]=$35;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_pushstring($L, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$s;
        var $3=HEAP[$2];
        var $4=((($3))|0)==0;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$1];
        _lua_pushnil($6);
        __label__ = 3; break;
      case 2: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$2];
        var $10=HEAP[$2];
        var $11=_strlen($10);
        _lua_pushlstring($8, $9, $11);
        __label__ = 3; break;
      case 3: // $12
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_pushvfstring($L, $fmt, $argp) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $ret=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$fmt;
        HEAP[$3]=$argp;
        var $4=HEAP[$1];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+68)&4294967295);
        var $8=HEAP[$7];
        var $9=HEAP[$1];
        var $10=(($9+16)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11+64)&4294967295);
        var $13=HEAP[$12];
        var $14=((($8))>>>0) >= ((($13))>>>0);
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$1];
        _luaC_step($16);
        __label__ = 2; break;
      case 2: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$2];
        var $20=HEAP[$3];
        var $21=_luaO_pushvfstring($18, $19, $20);
        HEAP[$ret]=$21;
        var $22=HEAP[$ret];
        STACKTOP = __stackBase__;
        return $22;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_pushfstring($L, $fmt) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $ret=__stackBase__+8;
        var $argp=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$fmt;
        var $3=HEAP[$1];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        var $6=(($5+68)&4294967295);
        var $7=HEAP[$6];
        var $8=HEAP[$1];
        var $9=(($8+16)&4294967295);
        var $10=HEAP[$9];
        var $11=(($10+64)&4294967295);
        var $12=HEAP[$11];
        var $13=((($7))>>>0) >= ((($12))>>>0);
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $14
        var $15=HEAP[$1];
        _luaC_step($15);
        __label__ = 2; break;
      case 2: // $16
        var $17=$argp;
        HEAP[$17]=arguments[_lua_pushfstring.length];;
        var $18=HEAP[$1];
        var $19=HEAP[$2];
        var $20=HEAP[$argp];
        var $21=_luaO_pushvfstring($18, $19, $20);
        HEAP[$ret]=$21;
        var $22=$argp;
        ;;
        var $23=HEAP[$ret];
        STACKTOP = __stackBase__;
        return $23;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_pushcclosure($L, $fn, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $cl=__stackBase__+12;
        var $o2=__stackBase__+16;
        var $o1=__stackBase__+20;
        var $i_o=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$fn;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+68)&4294967295);
        var $8=HEAP[$7];
        var $9=HEAP[$1];
        var $10=(($9+16)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11+64)&4294967295);
        var $13=HEAP[$12];
        var $14=((($8))>>>0) >= ((($13))>>>0);
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$1];
        _luaC_step($16);
        __label__ = 2; break;
      case 2: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$1];
        var $20=HEAP[$3];
        var $21=HEAP[$1];
        var $22=_getcurrenv($21);
        var $23=_luaF_newCclosure($19, $20, $22);
        HEAP[$cl]=$23;
        var $24=HEAP[$2];
        var $25=HEAP[$cl];
        var $26=$25;
        var $27=(($26+16)&4294967295);
        HEAP[$27]=$24;
        var $28=HEAP[$3];
        var $29=HEAP[$1];
        var $30=(($29+8)&4294967295);
        var $31=HEAP[$30];
        var $32=((0 - ($28))&4294967295);
        var $33=(($31+12*$32)&4294967295);
        HEAP[$30]=$33;
        __label__ = 3; break;
      case 3: // $34
        var $35=HEAP[$3];
        var $36=((($35) + -1)&4294967295);
        HEAP[$3]=$36;
        var $37=((($35))|0)!=0;
        if ($37) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $38
        var $39=HEAP[$1];
        var $40=(($39+8)&4294967295);
        var $41=HEAP[$40];
        var $42=HEAP[$3];
        var $43=(($41+12*$42)&4294967295);
        HEAP[$o2]=$43;
        var $44=HEAP[$3];
        var $45=HEAP[$cl];
        var $46=$45;
        var $47=(($46+20)&4294967295);
        var $48=(($47+$44*12)&4294967295);
        HEAP[$o1]=$48;
        var $49=HEAP[$o1];
        var $50=(($49)&4294967295);
        var $51=HEAP[$o2];
        var $52=(($51)&4294967295);
        var $53=$50;
        var $54=$52;
        _llvm_memcpy_p0i8_p0i8_i32($53, $54, 8, 4, 0);
        var $55=HEAP[$o2];
        var $56=(($55+8)&4294967295);
        var $57=HEAP[$56];
        var $58=HEAP[$o1];
        var $59=(($58+8)&4294967295);
        HEAP[$59]=$57;
        __label__ = 3; break;
      case 5: // $60
        var $61=HEAP[$1];
        var $62=(($61+8)&4294967295);
        var $63=HEAP[$62];
        HEAP[$i_o]=$63;
        var $64=HEAP[$cl];
        var $65=$64;
        var $66=HEAP[$i_o];
        var $67=(($66)&4294967295);
        var $68=$67;
        HEAP[$68]=$65;
        var $69=HEAP[$i_o];
        var $70=(($69+8)&4294967295);
        HEAP[$70]=6;
        var $71=HEAP[$1];
        var $72=HEAP[$1];
        var $73=(($72+8)&4294967295);
        var $74=HEAP[$73];
        var $75=(($74+12)&4294967295);
        HEAP[$73]=$75;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getcurrenv($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $func=__stackBase__+8;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=(($3+20)&4294967295);
        var $5=HEAP[$4];
        var $6=HEAP[$2];
        var $7=(($6+40)&4294967295);
        var $8=HEAP[$7];
        var $9=((($5))|0)==((($8))|0);
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$2];
        var $12=(($11+72)&4294967295);
        var $13=(($12)&4294967295);
        var $14=$13;
        var $15=HEAP[$14];
        var $16=$15;
        HEAP[$1]=$16;
        __label__ = 3; break;
      case 2: // $17
        var $18=HEAP[$2];
        var $19=(($18+20)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+4)&4294967295);
        var $22=HEAP[$21];
        var $23=(($22)&4294967295);
        var $24=$23;
        var $25=HEAP[$24];
        var $26=$25;
        HEAP[$func]=$26;
        var $27=HEAP[$func];
        var $28=$27;
        var $29=(($28+12)&4294967295);
        var $30=HEAP[$29];
        HEAP[$1]=$30;
        __label__ = 3; break;
      case 3: // $31
        var $32=HEAP[$1];
        STACKTOP = __stackBase__;
        return $32;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_pushboolean($L, $b) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $i_o=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$b;
    var $3=HEAP[$1];
    var $4=(($3+8)&4294967295);
    var $5=HEAP[$4];
    HEAP[$i_o]=$5;
    var $6=HEAP[$2];
    var $7=((($6))|0)!=0;
    var $8=unSign(($7), 1, 0);
    var $9=HEAP[$i_o];
    var $10=(($9)&4294967295);
    var $11=$10;
    HEAP[$11]=$8;
    var $12=HEAP[$i_o];
    var $13=(($12+8)&4294967295);
    HEAP[$13]=1;
    var $14=HEAP[$1];
    var $15=HEAP[$1];
    var $16=(($15+8)&4294967295);
    var $17=HEAP[$16];
    var $18=(($17+12)&4294967295);
    HEAP[$16]=$18;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_pushlightuserdata($L, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $i_o=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$p;
    var $3=HEAP[$1];
    var $4=(($3+8)&4294967295);
    var $5=HEAP[$4];
    HEAP[$i_o]=$5;
    var $6=HEAP[$2];
    var $7=HEAP[$i_o];
    var $8=(($7)&4294967295);
    var $9=$8;
    HEAP[$9]=$6;
    var $10=HEAP[$i_o];
    var $11=(($10+8)&4294967295);
    HEAP[$11]=2;
    var $12=HEAP[$1];
    var $13=HEAP[$1];
    var $14=(($13+8)&4294967295);
    var $15=HEAP[$14];
    var $16=(($15+12)&4294967295);
    HEAP[$14]=$16;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_pushthread($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $i_o=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=(($2+8)&4294967295);
    var $4=HEAP[$3];
    HEAP[$i_o]=$4;
    var $5=HEAP[$1];
    var $6=$5;
    var $7=HEAP[$i_o];
    var $8=(($7)&4294967295);
    var $9=$8;
    HEAP[$9]=$6;
    var $10=HEAP[$i_o];
    var $11=(($10+8)&4294967295);
    HEAP[$11]=8;
    var $12=HEAP[$1];
    var $13=HEAP[$1];
    var $14=(($13+8)&4294967295);
    var $15=HEAP[$14];
    var $16=(($15+12)&4294967295);
    HEAP[$14]=$16;
    var $17=HEAP[$1];
    var $18=(($17+16)&4294967295);
    var $19=HEAP[$18];
    var $20=(($19+104)&4294967295);
    var $21=HEAP[$20];
    var $22=HEAP[$1];
    var $23=((($21))|0)==((($22))|0);
    var $24=unSign(($23), 1, 0);
    STACKTOP = __stackBase__;
    return $24;
  }
  

  function _lua_gettable($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $t=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$idx;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=_index2adr($3, $4);
    HEAP[$t]=$5;
    var $6=HEAP[$1];
    var $7=HEAP[$1];
    var $8=HEAP[$t];
    var $9=HEAP[$1];
    var $10=(($9+8)&4294967295);
    var $11=HEAP[$10];
    var $12=(($11+-12)&4294967295);
    var $13=HEAP[$1];
    var $14=(($13+8)&4294967295);
    var $15=HEAP[$14];
    var $16=(($15+-12)&4294967295);
    _luaV_gettable($7, $8, $12, $16);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_getfield($L, $idx, $k) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $t=__stackBase__+12;
    var $key=__stackBase__+16;
    var $i_o=__stackBase__+28;
    HEAP[$1]=$L;
    HEAP[$2]=$idx;
    HEAP[$3]=$k;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    var $6=_index2adr($4, $5);
    HEAP[$t]=$6;
    var $7=HEAP[$1];
    HEAP[$i_o]=$key;
    var $8=HEAP[$1];
    var $9=HEAP[$3];
    var $10=HEAP[$3];
    var $11=_strlen($10);
    var $12=_luaS_newlstr($8, $9, $11);
    var $13=$12;
    var $14=HEAP[$i_o];
    var $15=(($14)&4294967295);
    var $16=$15;
    HEAP[$16]=$13;
    var $17=HEAP[$i_o];
    var $18=(($17+8)&4294967295);
    HEAP[$18]=4;
    var $19=HEAP[$1];
    var $20=HEAP[$t];
    var $21=HEAP[$1];
    var $22=(($21+8)&4294967295);
    var $23=HEAP[$22];
    _luaV_gettable($19, $20, $key, $23);
    var $24=HEAP[$1];
    var $25=HEAP[$1];
    var $26=(($25+8)&4294967295);
    var $27=HEAP[$26];
    var $28=(($27+12)&4294967295);
    HEAP[$26]=$28;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_rawget($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $t=__stackBase__+8;
    var $o2=__stackBase__+12;
    var $o1=__stackBase__+16;
    HEAP[$1]=$L;
    HEAP[$2]=$idx;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=_index2adr($3, $4);
    HEAP[$t]=$5;
    var $6=HEAP[$1];
    var $7=HEAP[$t];
    var $8=(($7)&4294967295);
    var $9=$8;
    var $10=HEAP[$9];
    var $11=$10;
    var $12=HEAP[$1];
    var $13=(($12+8)&4294967295);
    var $14=HEAP[$13];
    var $15=(($14+-12)&4294967295);
    var $16=_luaH_get($11, $15);
    HEAP[$o2]=$16;
    var $17=HEAP[$1];
    var $18=(($17+8)&4294967295);
    var $19=HEAP[$18];
    var $20=(($19+-12)&4294967295);
    HEAP[$o1]=$20;
    var $21=HEAP[$o1];
    var $22=(($21)&4294967295);
    var $23=HEAP[$o2];
    var $24=(($23)&4294967295);
    var $25=$22;
    var $26=$24;
    _llvm_memcpy_p0i8_p0i8_i32($25, $26, 8, 4, 0);
    var $27=HEAP[$o2];
    var $28=(($27+8)&4294967295);
    var $29=HEAP[$28];
    var $30=HEAP[$o1];
    var $31=(($30+8)&4294967295);
    HEAP[$31]=$29;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_rawgeti($L, $idx, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $o=__stackBase__+12;
    var $o2=__stackBase__+16;
    var $o1=__stackBase__+20;
    HEAP[$1]=$L;
    HEAP[$2]=$idx;
    HEAP[$3]=$n;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    var $6=_index2adr($4, $5);
    HEAP[$o]=$6;
    var $7=HEAP[$1];
    var $8=HEAP[$o];
    var $9=(($8)&4294967295);
    var $10=$9;
    var $11=HEAP[$10];
    var $12=$11;
    var $13=HEAP[$3];
    var $14=_luaH_getnum($12, $13);
    HEAP[$o2]=$14;
    var $15=HEAP[$1];
    var $16=(($15+8)&4294967295);
    var $17=HEAP[$16];
    HEAP[$o1]=$17;
    var $18=HEAP[$o1];
    var $19=(($18)&4294967295);
    var $20=HEAP[$o2];
    var $21=(($20)&4294967295);
    var $22=$19;
    var $23=$21;
    _llvm_memcpy_p0i8_p0i8_i32($22, $23, 8, 4, 0);
    var $24=HEAP[$o2];
    var $25=(($24+8)&4294967295);
    var $26=HEAP[$25];
    var $27=HEAP[$o1];
    var $28=(($27+8)&4294967295);
    HEAP[$28]=$26;
    var $29=HEAP[$1];
    var $30=HEAP[$1];
    var $31=(($30+8)&4294967295);
    var $32=HEAP[$31];
    var $33=(($32+12)&4294967295);
    HEAP[$31]=$33;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_createtable($L, $narray, $nrec) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i_o=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$narray;
        HEAP[$3]=$nrec;
        var $4=HEAP[$1];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+68)&4294967295);
        var $8=HEAP[$7];
        var $9=HEAP[$1];
        var $10=(($9+16)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11+64)&4294967295);
        var $13=HEAP[$12];
        var $14=((($8))>>>0) >= ((($13))>>>0);
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$1];
        _luaC_step($16);
        __label__ = 2; break;
      case 2: // $17
        var $18=HEAP[$1];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        HEAP[$i_o]=$20;
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=HEAP[$3];
        var $24=_luaH_new($21, $22, $23);
        var $25=$24;
        var $26=HEAP[$i_o];
        var $27=(($26)&4294967295);
        var $28=$27;
        HEAP[$28]=$25;
        var $29=HEAP[$i_o];
        var $30=(($29+8)&4294967295);
        HEAP[$30]=5;
        var $31=HEAP[$1];
        var $32=HEAP[$1];
        var $33=(($32+8)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+12)&4294967295);
        HEAP[$33]=$35;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_getmetatable($L, $objindex) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $obj=__stackBase__+8;
        var $mt=__stackBase__+12;
        var $res=__stackBase__+16;
        var $i_o=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$objindex;
        HEAP[$mt]=0;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$obj]=$5;
        var $6=HEAP[$obj];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        if ($8 == 5) {
          __label__ = 1; break;
        }
        else if ($8 == 7) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $9
        var $10=HEAP[$obj];
        var $11=(($10)&4294967295);
        var $12=$11;
        var $13=HEAP[$12];
        var $14=$13;
        var $15=(($14+8)&4294967295);
        var $16=HEAP[$15];
        HEAP[$mt]=$16;
        __label__ = 4; break;
      case 2: // $17
        var $18=HEAP[$obj];
        var $19=(($18)&4294967295);
        var $20=$19;
        var $21=HEAP[$20];
        var $22=$21;
        var $23=$22;
        var $24=(($23+8)&4294967295);
        var $25=HEAP[$24];
        HEAP[$mt]=$25;
        __label__ = 4; break;
      case 3: // $26
        var $27=HEAP[$obj];
        var $28=(($27+8)&4294967295);
        var $29=HEAP[$28];
        var $30=HEAP[$1];
        var $31=(($30+16)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+132)&4294967295);
        var $34=(($33+$29*4)&4294967295);
        var $35=HEAP[$34];
        HEAP[$mt]=$35;
        __label__ = 4; break;
      case 4: // $36
        var $37=HEAP[$mt];
        var $38=((($37))|0)==0;
        if ($38) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $39
        HEAP[$res]=0;
        __label__ = 7; break;
      case 6: // $40
        var $41=HEAP[$1];
        var $42=(($41+8)&4294967295);
        var $43=HEAP[$42];
        HEAP[$i_o]=$43;
        var $44=HEAP[$mt];
        var $45=$44;
        var $46=HEAP[$i_o];
        var $47=(($46)&4294967295);
        var $48=$47;
        HEAP[$48]=$45;
        var $49=HEAP[$i_o];
        var $50=(($49+8)&4294967295);
        HEAP[$50]=5;
        var $51=HEAP[$1];
        var $52=HEAP[$1];
        var $53=(($52+8)&4294967295);
        var $54=HEAP[$53];
        var $55=(($54+12)&4294967295);
        HEAP[$53]=$55;
        HEAP[$res]=1;
        __label__ = 7; break;
      case 7: // $56
        var $57=HEAP[$res];
        STACKTOP = __stackBase__;
        return $57;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_getfenv($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        var $i_o=__stackBase__+12;
        var $i_o1=__stackBase__+16;
        var $o2=__stackBase__+20;
        var $o1=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$o]=$5;
        var $6=HEAP[$1];
        var $7=HEAP[$o];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        if ($9 == 6) {
          __label__ = 1; break;
        }
        else if ($9 == 7) {
          __label__ = 2; break;
        }
        else if ($9 == 8) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $10
        var $11=HEAP[$1];
        var $12=(($11+8)&4294967295);
        var $13=HEAP[$12];
        HEAP[$i_o]=$13;
        var $14=HEAP[$o];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        var $18=$17;
        var $19=$18;
        var $20=(($19+12)&4294967295);
        var $21=HEAP[$20];
        var $22=$21;
        var $23=HEAP[$i_o];
        var $24=(($23)&4294967295);
        var $25=$24;
        HEAP[$25]=$22;
        var $26=HEAP[$i_o];
        var $27=(($26+8)&4294967295);
        HEAP[$27]=5;
        __label__ = 5; break;
      case 2: // $28
        var $29=HEAP[$1];
        var $30=(($29+8)&4294967295);
        var $31=HEAP[$30];
        HEAP[$i_o1]=$31;
        var $32=HEAP[$o];
        var $33=(($32)&4294967295);
        var $34=$33;
        var $35=HEAP[$34];
        var $36=$35;
        var $37=$36;
        var $38=(($37+12)&4294967295);
        var $39=HEAP[$38];
        var $40=$39;
        var $41=HEAP[$i_o1];
        var $42=(($41)&4294967295);
        var $43=$42;
        HEAP[$43]=$40;
        var $44=HEAP[$i_o1];
        var $45=(($44+8)&4294967295);
        HEAP[$45]=5;
        __label__ = 5; break;
      case 3: // $46
        var $47=HEAP[$o];
        var $48=(($47)&4294967295);
        var $49=$48;
        var $50=HEAP[$49];
        var $51=$50;
        var $52=(($51+72)&4294967295);
        HEAP[$o2]=$52;
        var $53=HEAP[$1];
        var $54=(($53+8)&4294967295);
        var $55=HEAP[$54];
        HEAP[$o1]=$55;
        var $56=HEAP[$o1];
        var $57=(($56)&4294967295);
        var $58=HEAP[$o2];
        var $59=(($58)&4294967295);
        var $60=$57;
        var $61=$59;
        _llvm_memcpy_p0i8_p0i8_i32($60, $61, 8, 4, 0);
        var $62=HEAP[$o2];
        var $63=(($62+8)&4294967295);
        var $64=HEAP[$63];
        var $65=HEAP[$o1];
        var $66=(($65+8)&4294967295);
        HEAP[$66]=$64;
        __label__ = 5; break;
      case 4: // $67
        var $68=HEAP[$1];
        var $69=(($68+8)&4294967295);
        var $70=HEAP[$69];
        var $71=(($70+8)&4294967295);
        HEAP[$71]=0;
        __label__ = 5; break;
      case 5: // $72
        var $73=HEAP[$1];
        var $74=HEAP[$1];
        var $75=(($74+8)&4294967295);
        var $76=HEAP[$75];
        var $77=(($76+12)&4294967295);
        HEAP[$75]=$77;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_settable($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $t=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$idx;
    var $3=HEAP[$1];
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    var $6=_index2adr($4, $5);
    HEAP[$t]=$6;
    var $7=HEAP[$1];
    var $8=HEAP[$1];
    var $9=HEAP[$t];
    var $10=HEAP[$1];
    var $11=(($10+8)&4294967295);
    var $12=HEAP[$11];
    var $13=(($12+-24)&4294967295);
    var $14=HEAP[$1];
    var $15=(($14+8)&4294967295);
    var $16=HEAP[$15];
    var $17=(($16+-12)&4294967295);
    _luaV_settable($8, $9, $13, $17);
    var $18=HEAP[$1];
    var $19=(($18+8)&4294967295);
    var $20=HEAP[$19];
    var $21=(($20+-24)&4294967295);
    HEAP[$19]=$21;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_setfield($L, $idx, $k) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $t=__stackBase__+12;
    var $key=__stackBase__+16;
    var $i_o=__stackBase__+28;
    HEAP[$1]=$L;
    HEAP[$2]=$idx;
    HEAP[$3]=$k;
    var $4=HEAP[$1];
    var $5=HEAP[$1];
    var $6=HEAP[$2];
    var $7=_index2adr($5, $6);
    HEAP[$t]=$7;
    var $8=HEAP[$1];
    HEAP[$i_o]=$key;
    var $9=HEAP[$1];
    var $10=HEAP[$3];
    var $11=HEAP[$3];
    var $12=_strlen($11);
    var $13=_luaS_newlstr($9, $10, $12);
    var $14=$13;
    var $15=HEAP[$i_o];
    var $16=(($15)&4294967295);
    var $17=$16;
    HEAP[$17]=$14;
    var $18=HEAP[$i_o];
    var $19=(($18+8)&4294967295);
    HEAP[$19]=4;
    var $20=HEAP[$1];
    var $21=HEAP[$t];
    var $22=HEAP[$1];
    var $23=(($22+8)&4294967295);
    var $24=HEAP[$23];
    var $25=(($24+-12)&4294967295);
    _luaV_settable($20, $21, $key, $25);
    var $26=HEAP[$1];
    var $27=(($26+8)&4294967295);
    var $28=HEAP[$27];
    var $29=(($28+-12)&4294967295);
    HEAP[$27]=$29;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_rawset($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $t=__stackBase__+8;
        var $o2=__stackBase__+12;
        var $o1=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_index2adr($4, $5);
        HEAP[$t]=$6;
        var $7=HEAP[$1];
        var $8=HEAP[$1];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        var $11=(($10+-12)&4294967295);
        HEAP[$o2]=$11;
        var $12=HEAP[$1];
        var $13=HEAP[$t];
        var $14=(($13)&4294967295);
        var $15=$14;
        var $16=HEAP[$15];
        var $17=$16;
        var $18=HEAP[$1];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+-24)&4294967295);
        var $22=_luaH_set($12, $17, $21);
        HEAP[$o1]=$22;
        var $23=HEAP[$o1];
        var $24=(($23)&4294967295);
        var $25=HEAP[$o2];
        var $26=(($25)&4294967295);
        var $27=$24;
        var $28=$26;
        _llvm_memcpy_p0i8_p0i8_i32($27, $28, 8, 4, 0);
        var $29=HEAP[$o2];
        var $30=(($29+8)&4294967295);
        var $31=HEAP[$30];
        var $32=HEAP[$o1];
        var $33=(($32+8)&4294967295);
        HEAP[$33]=$31;
        var $34=HEAP[$1];
        var $35=(($34+8)&4294967295);
        var $36=HEAP[$35];
        var $37=(($36+-12)&4294967295);
        var $38=(($37+8)&4294967295);
        var $39=HEAP[$38];
        var $40=((($39))|0) >= 4;
        if ($40) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $41
        var $42=HEAP[$1];
        var $43=(($42+8)&4294967295);
        var $44=HEAP[$43];
        var $45=(($44+-12)&4294967295);
        var $46=(($45)&4294967295);
        var $47=$46;
        var $48=HEAP[$47];
        var $49=$48;
        var $50=(($49+5)&4294967295);
        var $51=HEAP[$50];
        var $52=unSign(($51), 8, 0);
        var $53=($52) & 3;
        var $54=((($53))|0)!=0;
        if ($54) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $55
        var $56=HEAP[$t];
        var $57=(($56)&4294967295);
        var $58=$57;
        var $59=HEAP[$58];
        var $60=$59;
        var $61=$60;
        var $62=$61;
        var $63=(($62+5)&4294967295);
        var $64=HEAP[$63];
        var $65=unSign(($64), 8, 0);
        var $66=($65) & 4;
        var $67=((($66))|0)!=0;
        if ($67) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $68
        var $69=HEAP[$1];
        var $70=HEAP[$t];
        var $71=(($70)&4294967295);
        var $72=$71;
        var $73=HEAP[$72];
        var $74=$73;
        _luaC_barrierback($69, $74);
        __label__ = 4; break;
      case 4: // $75
        var $76=HEAP[$1];
        var $77=(($76+8)&4294967295);
        var $78=HEAP[$77];
        var $79=(($78+-24)&4294967295);
        HEAP[$77]=$79;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_rawseti($L, $idx, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $o=__stackBase__+12;
        var $o2=__stackBase__+16;
        var $o1=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=HEAP[$1];
        var $6=HEAP[$2];
        var $7=_index2adr($5, $6);
        HEAP[$o]=$7;
        var $8=HEAP[$1];
        var $9=HEAP[$1];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11+-12)&4294967295);
        HEAP[$o2]=$12;
        var $13=HEAP[$1];
        var $14=HEAP[$o];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        var $18=$17;
        var $19=HEAP[$3];
        var $20=_luaH_setnum($13, $18, $19);
        HEAP[$o1]=$20;
        var $21=HEAP[$o1];
        var $22=(($21)&4294967295);
        var $23=HEAP[$o2];
        var $24=(($23)&4294967295);
        var $25=$22;
        var $26=$24;
        _llvm_memcpy_p0i8_p0i8_i32($25, $26, 8, 4, 0);
        var $27=HEAP[$o2];
        var $28=(($27+8)&4294967295);
        var $29=HEAP[$28];
        var $30=HEAP[$o1];
        var $31=(($30+8)&4294967295);
        HEAP[$31]=$29;
        var $32=HEAP[$1];
        var $33=(($32+8)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+-12)&4294967295);
        var $36=(($35+8)&4294967295);
        var $37=HEAP[$36];
        var $38=((($37))|0) >= 4;
        if ($38) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $39
        var $40=HEAP[$1];
        var $41=(($40+8)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+-12)&4294967295);
        var $44=(($43)&4294967295);
        var $45=$44;
        var $46=HEAP[$45];
        var $47=$46;
        var $48=(($47+5)&4294967295);
        var $49=HEAP[$48];
        var $50=unSign(($49), 8, 0);
        var $51=($50) & 3;
        var $52=((($51))|0)!=0;
        if ($52) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $53
        var $54=HEAP[$o];
        var $55=(($54)&4294967295);
        var $56=$55;
        var $57=HEAP[$56];
        var $58=$57;
        var $59=$58;
        var $60=$59;
        var $61=(($60+5)&4294967295);
        var $62=HEAP[$61];
        var $63=unSign(($62), 8, 0);
        var $64=($63) & 4;
        var $65=((($64))|0)!=0;
        if ($65) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $66
        var $67=HEAP[$1];
        var $68=HEAP[$o];
        var $69=(($68)&4294967295);
        var $70=$69;
        var $71=HEAP[$70];
        var $72=$71;
        _luaC_barrierback($67, $72);
        __label__ = 4; break;
      case 4: // $73
        var $74=HEAP[$1];
        var $75=(($74+8)&4294967295);
        var $76=HEAP[$75];
        var $77=(($76+-12)&4294967295);
        HEAP[$75]=$77;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_setmetatable($L, $objindex) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $obj=__stackBase__+8;
        var $mt=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$objindex;
        var $3=HEAP[$1];
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_index2adr($4, $5);
        HEAP[$obj]=$6;
        var $7=HEAP[$1];
        var $8=HEAP[$1];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        var $11=(($10+-12)&4294967295);
        var $12=(($11+8)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0)==0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        HEAP[$mt]=0;
        __label__ = 3; break;
      case 2: // $16
        var $17=HEAP[$1];
        var $18=HEAP[$1];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+-12)&4294967295);
        var $22=(($21)&4294967295);
        var $23=$22;
        var $24=HEAP[$23];
        var $25=$24;
        HEAP[$mt]=$25;
        __label__ = 3; break;
      case 3: // $26
        var $27=HEAP[$obj];
        var $28=(($27+8)&4294967295);
        var $29=HEAP[$28];
        if ($29 == 5) {
          __label__ = 4; break;
        }
        else if ($29 == 7) {
          __label__ = 10; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 4: // $30
        var $31=HEAP[$mt];
        var $32=HEAP[$obj];
        var $33=(($32)&4294967295);
        var $34=$33;
        var $35=HEAP[$34];
        var $36=$35;
        var $37=(($36+8)&4294967295);
        HEAP[$37]=$31;
        var $38=HEAP[$mt];
        var $39=((($38))|0)!=0;
        if ($39) { __label__ = 5; break; } else { __label__ = 9; break; }
      case 5: // $40
        var $41=HEAP[$mt];
        var $42=$41;
        var $43=$42;
        var $44=(($43+5)&4294967295);
        var $45=HEAP[$44];
        var $46=unSign(($45), 8, 0);
        var $47=($46) & 3;
        var $48=((($47))|0)!=0;
        if ($48) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $49
        var $50=HEAP[$obj];
        var $51=(($50)&4294967295);
        var $52=$51;
        var $53=HEAP[$52];
        var $54=$53;
        var $55=$54;
        var $56=$55;
        var $57=(($56+5)&4294967295);
        var $58=HEAP[$57];
        var $59=unSign(($58), 8, 0);
        var $60=($59) & 4;
        var $61=((($60))|0)!=0;
        if ($61) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $62
        var $63=HEAP[$1];
        var $64=HEAP[$obj];
        var $65=(($64)&4294967295);
        var $66=$65;
        var $67=HEAP[$66];
        var $68=$67;
        _luaC_barrierback($63, $68);
        __label__ = 8; break;
      case 8: // $69
        __label__ = 9; break;
      case 9: // $70
        __label__ = 17; break;
      case 10: // $71
        var $72=HEAP[$mt];
        var $73=HEAP[$obj];
        var $74=(($73)&4294967295);
        var $75=$74;
        var $76=HEAP[$75];
        var $77=$76;
        var $78=$77;
        var $79=(($78+8)&4294967295);
        HEAP[$79]=$72;
        var $80=HEAP[$mt];
        var $81=((($80))|0)!=0;
        if ($81) { __label__ = 11; break; } else { __label__ = 15; break; }
      case 11: // $82
        var $83=HEAP[$mt];
        var $84=$83;
        var $85=$84;
        var $86=(($85+5)&4294967295);
        var $87=HEAP[$86];
        var $88=unSign(($87), 8, 0);
        var $89=($88) & 3;
        var $90=((($89))|0)!=0;
        if ($90) { __label__ = 12; break; } else { __label__ = 14; break; }
      case 12: // $91
        var $92=HEAP[$obj];
        var $93=(($92)&4294967295);
        var $94=$93;
        var $95=HEAP[$94];
        var $96=$95;
        var $97=$96;
        var $98=$97;
        var $99=(($98+5)&4294967295);
        var $100=HEAP[$99];
        var $101=unSign(($100), 8, 0);
        var $102=($101) & 4;
        var $103=((($102))|0)!=0;
        if ($103) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $104
        var $105=HEAP[$1];
        var $106=HEAP[$obj];
        var $107=(($106)&4294967295);
        var $108=$107;
        var $109=HEAP[$108];
        var $110=$109;
        var $111=$110;
        var $112=HEAP[$mt];
        var $113=$112;
        _luaC_barrierf($105, $111, $113);
        __label__ = 14; break;
      case 14: // $114
        __label__ = 15; break;
      case 15: // $115
        __label__ = 17; break;
      case 16: // $116
        var $117=HEAP[$mt];
        var $118=HEAP[$obj];
        var $119=(($118+8)&4294967295);
        var $120=HEAP[$119];
        var $121=HEAP[$1];
        var $122=(($121+16)&4294967295);
        var $123=HEAP[$122];
        var $124=(($123+132)&4294967295);
        var $125=(($124+$120*4)&4294967295);
        HEAP[$125]=$117;
        __label__ = 17; break;
      case 17: // $126
        var $127=HEAP[$1];
        var $128=(($127+8)&4294967295);
        var $129=HEAP[$128];
        var $130=(($129+-12)&4294967295);
        HEAP[$128]=$130;
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_setfenv($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        var $res=__stackBase__+12;
        var $i_o=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        HEAP[$res]=1;
        var $3=HEAP[$1];
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_index2adr($4, $5);
        HEAP[$o]=$6;
        var $7=HEAP[$1];
        var $8=HEAP[$1];
        var $9=HEAP[$o];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        if ($11 == 6) {
          __label__ = 1; break;
        }
        else if ($11 == 7) {
          __label__ = 2; break;
        }
        else if ($11 == 8) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $12
        var $13=HEAP[$1];
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+-12)&4294967295);
        var $17=(($16)&4294967295);
        var $18=$17;
        var $19=HEAP[$18];
        var $20=$19;
        var $21=HEAP[$o];
        var $22=(($21)&4294967295);
        var $23=$22;
        var $24=HEAP[$23];
        var $25=$24;
        var $26=$25;
        var $27=(($26+12)&4294967295);
        HEAP[$27]=$20;
        __label__ = 5; break;
      case 2: // $28
        var $29=HEAP[$1];
        var $30=(($29+8)&4294967295);
        var $31=HEAP[$30];
        var $32=(($31+-12)&4294967295);
        var $33=(($32)&4294967295);
        var $34=$33;
        var $35=HEAP[$34];
        var $36=$35;
        var $37=HEAP[$o];
        var $38=(($37)&4294967295);
        var $39=$38;
        var $40=HEAP[$39];
        var $41=$40;
        var $42=$41;
        var $43=(($42+12)&4294967295);
        HEAP[$43]=$36;
        __label__ = 5; break;
      case 3: // $44
        var $45=HEAP[$o];
        var $46=(($45)&4294967295);
        var $47=$46;
        var $48=HEAP[$47];
        var $49=$48;
        var $50=(($49+72)&4294967295);
        HEAP[$i_o]=$50;
        var $51=HEAP[$1];
        var $52=(($51+8)&4294967295);
        var $53=HEAP[$52];
        var $54=(($53+-12)&4294967295);
        var $55=(($54)&4294967295);
        var $56=$55;
        var $57=HEAP[$56];
        var $58=$57;
        var $59=$58;
        var $60=HEAP[$i_o];
        var $61=(($60)&4294967295);
        var $62=$61;
        HEAP[$62]=$59;
        var $63=HEAP[$i_o];
        var $64=(($63+8)&4294967295);
        HEAP[$64]=5;
        __label__ = 5; break;
      case 4: // $65
        HEAP[$res]=0;
        __label__ = 5; break;
      case 5: // $66
        var $67=HEAP[$res];
        var $68=((($67))|0)!=0;
        if ($68) { __label__ = 6; break; } else { __label__ = 10; break; }
      case 6: // $69
        var $70=HEAP[$1];
        var $71=(($70+8)&4294967295);
        var $72=HEAP[$71];
        var $73=(($72+-12)&4294967295);
        var $74=(($73)&4294967295);
        var $75=$74;
        var $76=HEAP[$75];
        var $77=$76;
        var $78=$77;
        var $79=$78;
        var $80=(($79+5)&4294967295);
        var $81=HEAP[$80];
        var $82=unSign(($81), 8, 0);
        var $83=($82) & 3;
        var $84=((($83))|0)!=0;
        if ($84) { __label__ = 7; break; } else { __label__ = 9; break; }
      case 7: // $85
        var $86=HEAP[$o];
        var $87=(($86)&4294967295);
        var $88=$87;
        var $89=HEAP[$88];
        var $90=$89;
        var $91=(($90+5)&4294967295);
        var $92=HEAP[$91];
        var $93=unSign(($92), 8, 0);
        var $94=($93) & 4;
        var $95=((($94))|0)!=0;
        if ($95) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $96
        var $97=HEAP[$1];
        var $98=HEAP[$o];
        var $99=(($98)&4294967295);
        var $100=$99;
        var $101=HEAP[$100];
        var $102=HEAP[$1];
        var $103=(($102+8)&4294967295);
        var $104=HEAP[$103];
        var $105=(($104+-12)&4294967295);
        var $106=(($105)&4294967295);
        var $107=$106;
        var $108=HEAP[$107];
        var $109=$108;
        var $110=$109;
        _luaC_barrierf($97, $101, $110);
        __label__ = 9; break;
      case 9: // $111
        __label__ = 10; break;
      case 10: // $112
        var $113=HEAP[$1];
        var $114=(($113+8)&4294967295);
        var $115=HEAP[$114];
        var $116=(($115+-12)&4294967295);
        HEAP[$114]=$116;
        var $117=HEAP[$res];
        STACKTOP = __stackBase__;
        return $117;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_call($L, $nargs, $nresults) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $func=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$nargs;
        HEAP[$3]=$nresults;
        var $4=HEAP[$1];
        var $5=HEAP[$1];
        var $6=HEAP[$1];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=HEAP[$2];
        var $10=((($9) + 1)&4294967295);
        var $11=((0 - ($10))&4294967295);
        var $12=(($8+12*$11)&4294967295);
        HEAP[$func]=$12;
        var $13=HEAP[$1];
        var $14=HEAP[$func];
        var $15=HEAP[$3];
        _luaD_call($13, $14, $15);
        var $16=HEAP[$3];
        var $17=((($16))|0)==-1;
        if ($17) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $18
        var $19=HEAP[$1];
        var $20=(($19+8)&4294967295);
        var $21=HEAP[$20];
        var $22=HEAP[$1];
        var $23=(($22+20)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+8)&4294967295);
        var $26=HEAP[$25];
        var $27=((($21))>>>0) >= ((($26))>>>0);
        if ($27) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $28
        var $29=HEAP[$1];
        var $30=(($29+8)&4294967295);
        var $31=HEAP[$30];
        var $32=HEAP[$1];
        var $33=(($32+20)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+8)&4294967295);
        HEAP[$35]=$31;
        __label__ = 3; break;
      case 3: // $36
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_pcall($L, $nargs, $nresults, $errfunc) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $c=__stackBase__+16;
        var $status=__stackBase__+24;
        var $func=__stackBase__+28;
        var $o=__stackBase__+32;
        HEAP[$1]=$L;
        HEAP[$2]=$nargs;
        HEAP[$3]=$nresults;
        HEAP[$4]=$errfunc;
        var $5=HEAP[$1];
        var $6=HEAP[$1];
        var $7=HEAP[$4];
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        HEAP[$func]=0;
        __label__ = 3; break;
      case 2: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$4];
        var $13=_index2adr($11, $12);
        HEAP[$o]=$13;
        var $14=HEAP[$1];
        var $15=HEAP[$o];
        var $16=$15;
        var $17=HEAP[$1];
        var $18=(($17+32)&4294967295);
        var $19=HEAP[$18];
        var $20=$19;
        var $21=($16);
        var $22=($20);
        var $23=((($21) - ($22))&4294967295);
        HEAP[$func]=$23;
        __label__ = 3; break;
      case 3: // $24
        var $25=HEAP[$1];
        var $26=(($25+8)&4294967295);
        var $27=HEAP[$26];
        var $28=HEAP[$2];
        var $29=((($28) + 1)&4294967295);
        var $30=((0 - ($29))&4294967295);
        var $31=(($27+12*$30)&4294967295);
        var $32=(($c)&4294967295);
        HEAP[$32]=$31;
        var $33=HEAP[$3];
        var $34=(($c+4)&4294967295);
        HEAP[$34]=$33;
        var $35=HEAP[$1];
        var $36=$c;
        var $37=(($c)&4294967295);
        var $38=HEAP[$37];
        var $39=$38;
        var $40=HEAP[$1];
        var $41=(($40+32)&4294967295);
        var $42=HEAP[$41];
        var $43=$42;
        var $44=($39);
        var $45=($43);
        var $46=((($44) - ($45))&4294967295);
        var $47=HEAP[$func];
        var $48=_luaD_pcall($35, 2, $36, $46, $47);
        HEAP[$status]=$48;
        var $49=HEAP[$3];
        var $50=((($49))|0)==-1;
        if ($50) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $51
        var $52=HEAP[$1];
        var $53=(($52+8)&4294967295);
        var $54=HEAP[$53];
        var $55=HEAP[$1];
        var $56=(($55+20)&4294967295);
        var $57=HEAP[$56];
        var $58=(($57+8)&4294967295);
        var $59=HEAP[$58];
        var $60=((($54))>>>0) >= ((($59))>>>0);
        if ($60) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $61
        var $62=HEAP[$1];
        var $63=(($62+8)&4294967295);
        var $64=HEAP[$63];
        var $65=HEAP[$1];
        var $66=(($65+20)&4294967295);
        var $67=HEAP[$66];
        var $68=(($67+8)&4294967295);
        HEAP[$68]=$64;
        __label__ = 6; break;
      case 6: // $69
        var $70=HEAP[$status];
        STACKTOP = __stackBase__;
        return $70;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _f_call($L, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $c=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$ud;
    var $3=HEAP[$2];
    var $4=$3;
    HEAP[$c]=$4;
    var $5=HEAP[$1];
    var $6=HEAP[$c];
    var $7=(($6)&4294967295);
    var $8=HEAP[$7];
    var $9=HEAP[$c];
    var $10=(($9+4)&4294967295);
    var $11=HEAP[$10];
    _luaD_call($5, $8, $11);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_cpcall($L, $func, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $c=__stackBase__+12;
    var $status=__stackBase__+20;
    HEAP[$1]=$L;
    HEAP[$2]=$func;
    HEAP[$3]=$ud;
    var $4=HEAP[$2];
    var $5=(($c)&4294967295);
    HEAP[$5]=$4;
    var $6=HEAP[$3];
    var $7=(($c+4)&4294967295);
    HEAP[$7]=$6;
    var $8=HEAP[$1];
    var $9=$c;
    var $10=HEAP[$1];
    var $11=(($10+8)&4294967295);
    var $12=HEAP[$11];
    var $13=$12;
    var $14=HEAP[$1];
    var $15=(($14+32)&4294967295);
    var $16=HEAP[$15];
    var $17=$16;
    var $18=($13);
    var $19=($17);
    var $20=((($18) - ($19))&4294967295);
    var $21=_luaD_pcall($8, 4, $9, $20, 0);
    HEAP[$status]=$21;
    var $22=HEAP[$status];
    STACKTOP = __stackBase__;
    return $22;
  }
  

  function _f_Ccall($L, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $c=__stackBase__+8;
    var $cl=__stackBase__+12;
    var $i_o=__stackBase__+16;
    var $i_o1=__stackBase__+20;
    HEAP[$1]=$L;
    HEAP[$2]=$ud;
    var $3=HEAP[$2];
    var $4=$3;
    HEAP[$c]=$4;
    var $5=HEAP[$1];
    var $6=HEAP[$1];
    var $7=_getcurrenv($6);
    var $8=_luaF_newCclosure($5, 0, $7);
    HEAP[$cl]=$8;
    var $9=HEAP[$c];
    var $10=(($9)&4294967295);
    var $11=HEAP[$10];
    var $12=HEAP[$cl];
    var $13=$12;
    var $14=(($13+16)&4294967295);
    HEAP[$14]=$11;
    var $15=HEAP[$1];
    var $16=(($15+8)&4294967295);
    var $17=HEAP[$16];
    HEAP[$i_o]=$17;
    var $18=HEAP[$cl];
    var $19=$18;
    var $20=HEAP[$i_o];
    var $21=(($20)&4294967295);
    var $22=$21;
    HEAP[$22]=$19;
    var $23=HEAP[$i_o];
    var $24=(($23+8)&4294967295);
    HEAP[$24]=6;
    var $25=HEAP[$1];
    var $26=HEAP[$1];
    var $27=(($26+8)&4294967295);
    var $28=HEAP[$27];
    var $29=(($28+12)&4294967295);
    HEAP[$27]=$29;
    var $30=HEAP[$1];
    var $31=(($30+8)&4294967295);
    var $32=HEAP[$31];
    HEAP[$i_o1]=$32;
    var $33=HEAP[$c];
    var $34=(($33+4)&4294967295);
    var $35=HEAP[$34];
    var $36=HEAP[$i_o1];
    var $37=(($36)&4294967295);
    var $38=$37;
    HEAP[$38]=$35;
    var $39=HEAP[$i_o1];
    var $40=(($39+8)&4294967295);
    HEAP[$40]=2;
    var $41=HEAP[$1];
    var $42=HEAP[$1];
    var $43=(($42+8)&4294967295);
    var $44=HEAP[$43];
    var $45=(($44+12)&4294967295);
    HEAP[$43]=$45;
    var $46=HEAP[$1];
    var $47=HEAP[$1];
    var $48=(($47+8)&4294967295);
    var $49=HEAP[$48];
    var $50=(($49+-24)&4294967295);
    _luaD_call($46, $50, 0);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_load($L, $reader, $data, $chunkname) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $z=__stackBase__+16;
        var $status=__stackBase__+36;
        HEAP[$1]=$L;
        HEAP[$2]=$reader;
        HEAP[$3]=$data;
        HEAP[$4]=$chunkname;
        var $5=HEAP[$4];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $7
        HEAP[$4]=((__str2)&4294967295);
        __label__ = 2; break;
      case 2: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$2];
        var $11=HEAP[$3];
        _luaZ_init($9, $z, $10, $11);
        var $12=HEAP[$1];
        var $13=HEAP[$4];
        var $14=_luaD_protectedparser($12, $z, $13);
        HEAP[$status]=$14;
        var $15=HEAP[$status];
        STACKTOP = __stackBase__;
        return $15;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_dump($L, $writer, $data) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $status=__stackBase__+12;
        var $o=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$writer;
        HEAP[$3]=$data;
        var $4=HEAP[$1];
        var $5=HEAP[$1];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        var $8=(($7+-12)&4294967295);
        HEAP[$o]=$8;
        var $9=HEAP[$o];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))|0)==6;
        if ($12) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $13
        var $14=HEAP[$o];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        var $18=$17;
        var $19=$18;
        var $20=(($19+6)&4294967295);
        var $21=HEAP[$20];
        var $22=reSign(($21), 8, 0)!=0;
        if ($22) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$o];
        var $26=(($25)&4294967295);
        var $27=$26;
        var $28=HEAP[$27];
        var $29=$28;
        var $30=$29;
        var $31=(($30+16)&4294967295);
        var $32=HEAP[$31];
        var $33=HEAP[$2];
        var $34=HEAP[$3];
        var $35=_luaU_dump($24, $32, $33, $34, 0);
        HEAP[$status]=$35;
        __label__ = 4; break;
      case 3: // $36
        HEAP[$status]=1;
        __label__ = 4; break;
      case 4: // $37
        var $38=HEAP[$status];
        STACKTOP = __stackBase__;
        return $38;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_status($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=(($2+6)&4294967295);
    var $4=HEAP[$3];
    var $5=unSign(($4), 8, 0);
    STACKTOP = __stackBase__;
    return $5;
  }
  

  function _lua_gc($L, $what, $data) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $res=__stackBase__+12;
        var $g=__stackBase__+16;
        var $a=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$what;
        HEAP[$3]=$data;
        HEAP[$res]=0;
        var $4=HEAP[$1];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        HEAP[$g]=$6;
        var $7=HEAP[$2];
        if ($7 == 0) {
          __label__ = 1; break;
        }
        else if ($7 == 1) {
          __label__ = 2; break;
        }
        else if ($7 == 2) {
          __label__ = 3; break;
        }
        else if ($7 == 3) {
          __label__ = 4; break;
        }
        else if ($7 == 4) {
          __label__ = 5; break;
        }
        else if ($7 == 5) {
          __label__ = 6; break;
        }
        else if ($7 == 6) {
          __label__ = 15; break;
        }
        else if ($7 == 7) {
          __label__ = 16; break;
        }
        else {
        __label__ = 17; break;
        }
        
      case 1: // $8
        var $9=HEAP[$g];
        var $10=(($9+64)&4294967295);
        HEAP[$10]=-3;
        __label__ = 18; break;
      case 2: // $11
        var $12=HEAP[$g];
        var $13=(($12+68)&4294967295);
        var $14=HEAP[$13];
        var $15=HEAP[$g];
        var $16=(($15+64)&4294967295);
        HEAP[$16]=$14;
        __label__ = 18; break;
      case 3: // $17
        var $18=HEAP[$1];
        _luaC_fullgc($18);
        __label__ = 18; break;
      case 4: // $19
        var $20=HEAP[$g];
        var $21=(($20+68)&4294967295);
        var $22=HEAP[$21];
        var $23=((($22))>>>0) >>> 10;
        HEAP[$res]=$23;
        __label__ = 18; break;
      case 5: // $24
        var $25=HEAP[$g];
        var $26=(($25+68)&4294967295);
        var $27=HEAP[$26];
        var $28=($27) & 1023;
        HEAP[$res]=$28;
        __label__ = 18; break;
      case 6: // $29
        var $30=HEAP[$3];
        var $31=($30) << 10;
        HEAP[$a]=$31;
        var $32=HEAP[$a];
        var $33=HEAP[$g];
        var $34=(($33+68)&4294967295);
        var $35=HEAP[$34];
        var $36=((($32))>>>0) <= ((($35))>>>0);
        if ($36) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $37
        var $38=HEAP[$g];
        var $39=(($38+68)&4294967295);
        var $40=HEAP[$39];
        var $41=HEAP[$a];
        var $42=((($40) - ($41))&4294967295);
        var $43=HEAP[$g];
        var $44=(($43+64)&4294967295);
        HEAP[$44]=$42;
        __label__ = 9; break;
      case 8: // $45
        var $46=HEAP[$g];
        var $47=(($46+64)&4294967295);
        HEAP[$47]=0;
        __label__ = 9; break;
      case 9: // $48
        __label__ = 10; break;
      case 10: // $49
        var $50=HEAP[$g];
        var $51=(($50+64)&4294967295);
        var $52=HEAP[$51];
        var $53=HEAP[$g];
        var $54=(($53+68)&4294967295);
        var $55=HEAP[$54];
        var $56=((($52))>>>0) <= ((($55))>>>0);
        if ($56) { __label__ = 11; break; } else { __label__ = 14; break; }
      case 11: // $57
        var $58=HEAP[$1];
        _luaC_step($58);
        var $59=HEAP[$g];
        var $60=(($59+21)&4294967295);
        var $61=HEAP[$60];
        var $62=unSign(($61), 8, 0);
        var $63=((($62))|0)==0;
        if ($63) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $64
        HEAP[$res]=1;
        __label__ = 14; break;
      case 13: // $65
        __label__ = 10; break;
      case 14: // $66
        __label__ = 18; break;
      case 15: // $67
        var $68=HEAP[$g];
        var $69=(($68+80)&4294967295);
        var $70=HEAP[$69];
        HEAP[$res]=$70;
        var $71=HEAP[$3];
        var $72=HEAP[$g];
        var $73=(($72+80)&4294967295);
        HEAP[$73]=$71;
        __label__ = 18; break;
      case 16: // $74
        var $75=HEAP[$g];
        var $76=(($75+84)&4294967295);
        var $77=HEAP[$76];
        HEAP[$res]=$77;
        var $78=HEAP[$3];
        var $79=HEAP[$g];
        var $80=(($79+84)&4294967295);
        HEAP[$80]=$78;
        __label__ = 18; break;
      case 17: // $81
        HEAP[$res]=-1;
        __label__ = 18; break;
      case 18: // $82
        var $83=HEAP[$res];
        STACKTOP = __stackBase__;
        return $83;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_error($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    _luaG_errormsg($3);
    STACKTOP = __stackBase__;
    return 0;
  }
  

  function _lua_next($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $t=__stackBase__+8;
        var $more=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_index2adr($3, $4);
        HEAP[$t]=$5;
        var $6=HEAP[$1];
        var $7=HEAP[$1];
        var $8=HEAP[$t];
        var $9=(($8)&4294967295);
        var $10=$9;
        var $11=HEAP[$10];
        var $12=$11;
        var $13=HEAP[$1];
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+-12)&4294967295);
        var $17=_luaH_next($7, $12, $16);
        HEAP[$more]=$17;
        var $18=HEAP[$more];
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $20
        var $21=HEAP[$1];
        var $22=HEAP[$1];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+12)&4294967295);
        HEAP[$23]=$25;
        __label__ = 3; break;
      case 2: // $26
        var $27=HEAP[$1];
        var $28=(($27+8)&4294967295);
        var $29=HEAP[$28];
        var $30=(($29+-12)&4294967295);
        HEAP[$28]=$30;
        __label__ = 3; break;
      case 3: // $31
        var $32=HEAP[$more];
        STACKTOP = __stackBase__;
        return $32;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_concat($L, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i_o=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$n;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=((($4))|0) >= 2;
        if ($5) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $6
        var $7=HEAP[$1];
        var $8=(($7+16)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9+68)&4294967295);
        var $11=HEAP[$10];
        var $12=HEAP[$1];
        var $13=(($12+16)&4294967295);
        var $14=HEAP[$13];
        var $15=(($14+64)&4294967295);
        var $16=HEAP[$15];
        var $17=((($11))>>>0) >= ((($16))>>>0);
        if ($17) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $18
        var $19=HEAP[$1];
        _luaC_step($19);
        __label__ = 3; break;
      case 3: // $20
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=HEAP[$1];
        var $24=(($23+8)&4294967295);
        var $25=HEAP[$24];
        var $26=HEAP[$1];
        var $27=(($26+12)&4294967295);
        var $28=HEAP[$27];
        var $29=($25);
        var $30=($28);
        var $31=((($29) - ($30))&4294967295);
        var $32=((((($31))|0)/12)|0);
        var $33=((($32) - 1)&4294967295);
        _luaV_concat($21, $22, $33);
        var $34=HEAP[$2];
        var $35=((($34) - 1)&4294967295);
        var $36=HEAP[$1];
        var $37=(($36+8)&4294967295);
        var $38=HEAP[$37];
        var $39=((0 - ($35))&4294967295);
        var $40=(($38+12*$39)&4294967295);
        HEAP[$37]=$40;
        __label__ = 7; break;
      case 4: // $41
        var $42=HEAP[$2];
        var $43=((($42))|0)==0;
        if ($43) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $44
        var $45=HEAP[$1];
        var $46=(($45+8)&4294967295);
        var $47=HEAP[$46];
        HEAP[$i_o]=$47;
        var $48=HEAP[$1];
        var $49=_luaS_newlstr($48, ((__str3)&4294967295), 0);
        var $50=$49;
        var $51=HEAP[$i_o];
        var $52=(($51)&4294967295);
        var $53=$52;
        HEAP[$53]=$50;
        var $54=HEAP[$i_o];
        var $55=(($54+8)&4294967295);
        HEAP[$55]=4;
        var $56=HEAP[$1];
        var $57=HEAP[$1];
        var $58=(($57+8)&4294967295);
        var $59=HEAP[$58];
        var $60=(($59+12)&4294967295);
        HEAP[$58]=$60;
        __label__ = 6; break;
      case 6: // $61
        __label__ = 7; break;
      case 7: // $62
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_getallocf($L, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $f=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$ud;
        var $3=HEAP[$2];
        var $4=((($3))|0)!=0;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$1];
        var $7=(($6+16)&4294967295);
        var $8=HEAP[$7];
        var $9=(($8+16)&4294967295);
        var $10=HEAP[$9];
        var $11=HEAP[$2];
        HEAP[$11]=$10;
        __label__ = 2; break;
      case 2: // $12
        var $13=HEAP[$1];
        var $14=(($13+16)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+12)&4294967295);
        var $17=HEAP[$16];
        HEAP[$f]=$17;
        var $18=HEAP[$f];
        STACKTOP = __stackBase__;
        return $18;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_setallocf($L, $f, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$f;
    HEAP[$3]=$ud;
    var $4=HEAP[$3];
    var $5=HEAP[$1];
    var $6=(($5+16)&4294967295);
    var $7=HEAP[$6];
    var $8=(($7+16)&4294967295);
    HEAP[$8]=$4;
    var $9=HEAP[$2];
    var $10=HEAP[$1];
    var $11=(($10+16)&4294967295);
    var $12=HEAP[$11];
    var $13=(($12+12)&4294967295);
    HEAP[$13]=$9;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_newuserdata($L, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $u=__stackBase__+8;
        var $i_o=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$size;
        var $3=HEAP[$1];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        var $6=(($5+68)&4294967295);
        var $7=HEAP[$6];
        var $8=HEAP[$1];
        var $9=(($8+16)&4294967295);
        var $10=HEAP[$9];
        var $11=(($10+64)&4294967295);
        var $12=HEAP[$11];
        var $13=((($7))>>>0) >= ((($12))>>>0);
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $14
        var $15=HEAP[$1];
        _luaC_step($15);
        __label__ = 2; break;
      case 2: // $16
        var $17=HEAP[$1];
        var $18=HEAP[$2];
        var $19=HEAP[$1];
        var $20=_getcurrenv($19);
        var $21=_luaS_newudata($17, $18, $20);
        HEAP[$u]=$21;
        var $22=HEAP[$1];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        HEAP[$i_o]=$24;
        var $25=HEAP[$u];
        var $26=$25;
        var $27=HEAP[$i_o];
        var $28=(($27)&4294967295);
        var $29=$28;
        HEAP[$29]=$26;
        var $30=HEAP[$i_o];
        var $31=(($30+8)&4294967295);
        HEAP[$31]=7;
        var $32=HEAP[$1];
        var $33=HEAP[$1];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+12)&4294967295);
        HEAP[$34]=$36;
        var $37=HEAP[$u];
        var $38=(($37+20)&4294967295);
        var $39=$38;
        STACKTOP = __stackBase__;
        return $39;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_getupvalue($L, $funcindex, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $name=__stackBase__+12;
        var $val=__stackBase__+16;
        var $o2=__stackBase__+20;
        var $o1=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$funcindex;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_index2adr($4, $5);
        var $7=HEAP[$3];
        var $8=_aux_upvalue($6, $7, $val);
        HEAP[$name]=$8;
        var $9=HEAP[$name];
        var $10=((($9))|0)!=0;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=HEAP[$val];
        HEAP[$o2]=$12;
        var $13=HEAP[$1];
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        HEAP[$o1]=$15;
        var $16=HEAP[$o1];
        var $17=(($16)&4294967295);
        var $18=HEAP[$o2];
        var $19=(($18)&4294967295);
        var $20=$17;
        var $21=$19;
        _llvm_memcpy_p0i8_p0i8_i32($20, $21, 8, 4, 0);
        var $22=HEAP[$o2];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=HEAP[$o1];
        var $26=(($25+8)&4294967295);
        HEAP[$26]=$24;
        var $27=HEAP[$1];
        var $28=HEAP[$1];
        var $29=(($28+8)&4294967295);
        var $30=HEAP[$29];
        var $31=(($30+12)&4294967295);
        HEAP[$29]=$31;
        __label__ = 2; break;
      case 2: // $32
        var $33=HEAP[$name];
        STACKTOP = __stackBase__;
        return $33;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _aux_upvalue($fi, $n, $val) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $f=__stackBase__+16;
        var $p=__stackBase__+20;
        HEAP[$2]=$fi;
        HEAP[$3]=$n;
        HEAP[$4]=$val;
        var $5=HEAP[$2];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        var $8=((($7))|0)==6;
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $9
        HEAP[$1]=0;
        __label__ = 11; break;
      case 2: // $10
        var $11=HEAP[$2];
        var $12=(($11)&4294967295);
        var $13=$12;
        var $14=HEAP[$13];
        var $15=$14;
        HEAP[$f]=$15;
        var $16=HEAP[$f];
        var $17=$16;
        var $18=(($17+6)&4294967295);
        var $19=HEAP[$18];
        var $20=reSign(($19), 8, 0)!=0;
        if ($20) { __label__ = 3; break; } else { __label__ = 7; break; }
      case 3: // $21
        var $22=HEAP[$3];
        var $23=1 <= ((($22))|0);
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $24
        var $25=HEAP[$3];
        var $26=HEAP[$f];
        var $27=$26;
        var $28=(($27+7)&4294967295);
        var $29=HEAP[$28];
        var $30=unSign(($29), 8, 0);
        var $31=((($25))|0) <= ((($30))|0);
        if ($31) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $32
        HEAP[$1]=0;
        __label__ = 11; break;
      case 6: // $33
        var $34=HEAP[$3];
        var $35=((($34) - 1)&4294967295);
        var $36=HEAP[$f];
        var $37=$36;
        var $38=(($37+20)&4294967295);
        var $39=(($38+$35*12)&4294967295);
        var $40=HEAP[$4];
        HEAP[$40]=$39;
        HEAP[$1]=((__str3)&4294967295);
        __label__ = 11; break;
      case 7: // $41
        var $42=HEAP[$f];
        var $43=$42;
        var $44=(($43+16)&4294967295);
        var $45=HEAP[$44];
        HEAP[$p]=$45;
        var $46=HEAP[$3];
        var $47=1 <= ((($46))|0);
        if ($47) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $48
        var $49=HEAP[$3];
        var $50=HEAP[$p];
        var $51=(($50+36)&4294967295);
        var $52=HEAP[$51];
        var $53=((($49))|0) <= ((($52))|0);
        if ($53) { __label__ = 10; break; } else { __label__ = 9; break; }
      case 9: // $54
        HEAP[$1]=0;
        __label__ = 11; break;
      case 10: // $55
        var $56=HEAP[$3];
        var $57=((($56) - 1)&4294967295);
        var $58=HEAP[$f];
        var $59=$58;
        var $60=(($59+20)&4294967295);
        var $61=(($60+$57*4)&4294967295);
        var $62=HEAP[$61];
        var $63=(($62+8)&4294967295);
        var $64=HEAP[$63];
        var $65=HEAP[$4];
        HEAP[$65]=$64;
        var $66=HEAP[$3];
        var $67=((($66) - 1)&4294967295);
        var $68=HEAP[$p];
        var $69=(($68+28)&4294967295);
        var $70=HEAP[$69];
        var $71=(($70+4*$67)&4294967295);
        var $72=HEAP[$71];
        var $73=(($72+16)&4294967295);
        var $74=$73;
        HEAP[$1]=$74;
        __label__ = 11; break;
      case 11: // $75
        var $76=HEAP[$1];
        STACKTOP = __stackBase__;
        return $76;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_setupvalue($L, $funcindex, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $name=__stackBase__+12;
        var $val=__stackBase__+16;
        var $fi=__stackBase__+20;
        var $o2=__stackBase__+24;
        var $o1=__stackBase__+28;
        HEAP[$1]=$L;
        HEAP[$2]=$funcindex;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_index2adr($4, $5);
        HEAP[$fi]=$6;
        var $7=HEAP[$1];
        var $8=HEAP[$fi];
        var $9=HEAP[$3];
        var $10=_aux_upvalue($8, $9, $val);
        HEAP[$name]=$10;
        var $11=HEAP[$name];
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 1; break; } else { __label__ = 6; break; }
      case 1: // $13
        var $14=HEAP[$1];
        var $15=(($14+8)&4294967295);
        var $16=HEAP[$15];
        var $17=(($16+-12)&4294967295);
        HEAP[$15]=$17;
        var $18=HEAP[$1];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        HEAP[$o2]=$20;
        var $21=HEAP[$val];
        HEAP[$o1]=$21;
        var $22=HEAP[$o1];
        var $23=(($22)&4294967295);
        var $24=HEAP[$o2];
        var $25=(($24)&4294967295);
        var $26=$23;
        var $27=$25;
        _llvm_memcpy_p0i8_p0i8_i32($26, $27, 8, 4, 0);
        var $28=HEAP[$o2];
        var $29=(($28+8)&4294967295);
        var $30=HEAP[$29];
        var $31=HEAP[$o1];
        var $32=(($31+8)&4294967295);
        HEAP[$32]=$30;
        var $33=HEAP[$1];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+8)&4294967295);
        var $37=HEAP[$36];
        var $38=((($37))|0) >= 4;
        if ($38) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $39
        var $40=HEAP[$1];
        var $41=(($40+8)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42)&4294967295);
        var $44=$43;
        var $45=HEAP[$44];
        var $46=$45;
        var $47=(($46+5)&4294967295);
        var $48=HEAP[$47];
        var $49=unSign(($48), 8, 0);
        var $50=($49) & 3;
        var $51=((($50))|0)!=0;
        if ($51) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $52
        var $53=HEAP[$fi];
        var $54=(($53)&4294967295);
        var $55=$54;
        var $56=HEAP[$55];
        var $57=$56;
        var $58=$57;
        var $59=$58;
        var $60=(($59+5)&4294967295);
        var $61=HEAP[$60];
        var $62=unSign(($61), 8, 0);
        var $63=($62) & 4;
        var $64=((($63))|0)!=0;
        if ($64) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $65
        var $66=HEAP[$1];
        var $67=HEAP[$fi];
        var $68=(($67)&4294967295);
        var $69=$68;
        var $70=HEAP[$69];
        var $71=$70;
        var $72=$71;
        var $73=HEAP[$1];
        var $74=(($73+8)&4294967295);
        var $75=HEAP[$74];
        var $76=(($75)&4294967295);
        var $77=$76;
        var $78=HEAP[$77];
        _luaC_barrierf($66, $72, $78);
        __label__ = 5; break;
      case 5: // $79
        __label__ = 6; break;
      case 6: // $80
        var $81=HEAP[$name];
        STACKTOP = __stackBase__;
        return $81;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_argerror($L, $narg, $extramsg) {
    var __stackBase__  = STACKTOP; STACKTOP += 116; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 116);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $ar=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$narg;
        HEAP[$4]=$extramsg;
        var $5=HEAP[$2];
        var $6=_lua_getstack($5, 0, $ar);
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$2];
        var $10=HEAP[$3];
        var $11=HEAP[$4];
        var $12=_luaL_error($9, ((__str4)&4294967295), allocate([$10,0,0,0,$11,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$12;
        __label__ = 9; break;
      case 2: // $13
        var $14=HEAP[$2];
        var $15=_lua_getinfo($14, ((__str15)&4294967295), $ar);
        var $16=(($ar+8)&4294967295);
        var $17=HEAP[$16];
        var $18=_strcmp($17, ((__str26)&4294967295));
        var $19=((($18))|0)==0;
        if ($19) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $20
        var $21=HEAP[$3];
        var $22=((($21) + -1)&4294967295);
        HEAP[$3]=$22;
        var $23=HEAP[$3];
        var $24=((($23))|0)==0;
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $25
        var $26=HEAP[$2];
        var $27=(($ar+4)&4294967295);
        var $28=HEAP[$27];
        var $29=HEAP[$4];
        var $30=_luaL_error($26, ((__str37)&4294967295), allocate([$28,0,0,0,$29,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$30;
        __label__ = 9; break;
      case 5: // $31
        __label__ = 6; break;
      case 6: // $32
        var $33=(($ar+4)&4294967295);
        var $34=HEAP[$33];
        var $35=((($34))|0)==0;
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $36
        var $37=(($ar+4)&4294967295);
        HEAP[$37]=((__str48)&4294967295);
        __label__ = 8; break;
      case 8: // $38
        var $39=HEAP[$2];
        var $40=HEAP[$3];
        var $41=(($ar+4)&4294967295);
        var $42=HEAP[$41];
        var $43=HEAP[$4];
        var $44=_luaL_error($39, ((__str5)&4294967295), allocate([$40,0,0,0,$42,0,0,0,$43,0,0,0], ["i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$44;
        __label__ = 9; break;
      case 9: // $45
        var $46=HEAP[$1];
        STACKTOP = __stackBase__;
        return $46;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_error($L, $fmt) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $argp=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$fmt;
    var $3=$argp;
    HEAP[$3]=arguments[_luaL_error.length];;
    var $4=HEAP[$1];
    _luaL_where($4, 1);
    var $5=HEAP[$1];
    var $6=HEAP[$2];
    var $7=HEAP[$argp];
    var $8=_lua_pushvfstring($5, $6, $7);
    var $9=$argp;
    ;;
    var $10=HEAP[$1];
    _lua_concat($10, 2);
    var $11=HEAP[$1];
    var $12=_lua_error($11);
    STACKTOP = __stackBase__;
    return $12;
  }
  

  function _luaL_typerror($L, $narg, $tname) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $msg=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$narg;
    HEAP[$3]=$tname;
    var $4=HEAP[$1];
    var $5=HEAP[$3];
    var $6=HEAP[$1];
    var $7=HEAP[$1];
    var $8=HEAP[$2];
    var $9=_lua_type($7, $8);
    var $10=_lua_typename($6, $9);
    var $11=_lua_pushfstring($4, ((__str6)&4294967295), allocate([$5,0,0,0,$10,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
    HEAP[$msg]=$11;
    var $12=HEAP[$1];
    var $13=HEAP[$2];
    var $14=HEAP[$msg];
    var $15=_luaL_argerror($12, $13, $14);
    STACKTOP = __stackBase__;
    return $15;
  }
  

  function _luaL_where($L, $level) {
    var __stackBase__  = STACKTOP; STACKTOP += 108; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 108);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $ar=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$level;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_lua_getstack($3, $4, $ar);
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=_lua_getinfo($8, ((__str7)&4294967295), $ar);
        var $10=(($ar+20)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))|0) > 0;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$1];
        var $15=(($ar+36)&4294967295);
        var $16=(($15)&4294967295);
        var $17=(($ar+20)&4294967295);
        var $18=HEAP[$17];
        var $19=_lua_pushfstring($14, ((__str8)&4294967295), allocate([$16,0,0,0,$18,0,0,0], ["i8*",0,0,0,"i32",0,0,0], ALLOC_STACK));
        __label__ = 5; break;
      case 3: // $20
        __label__ = 4; break;
      case 4: // $21
        var $22=HEAP[$1];
        _lua_pushlstring($22, ((__str9)&4294967295), 0);
        __label__ = 5; break;
      case 5: // $23
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_checkoption($L, $narg, $def, $lst) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $name=__stackBase__+20;
        var $i=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$3]=$narg;
        HEAP[$4]=$def;
        HEAP[$5]=$lst;
        var $6=HEAP[$4];
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$2];
        var $10=HEAP[$3];
        var $11=HEAP[$4];
        var $12=_luaL_optlstring($9, $10, $11, 0);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $13
        var $14=HEAP[$2];
        var $15=HEAP[$3];
        var $16=_luaL_checklstring($14, $15, 0);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $17
        var $18=__lastLabel__ == 1 ? $12 : ($16);
        HEAP[$name]=$18;
        HEAP[$i]=0;
        __label__ = 4; break;
      case 4: // $19
        var $20=HEAP[$i];
        var $21=HEAP[$5];
        var $22=(($21+4*$20)&4294967295);
        var $23=HEAP[$22];
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 5; break; } else { __label__ = 9; break; }
      case 5: // $25
        var $26=HEAP[$i];
        var $27=HEAP[$5];
        var $28=(($27+4*$26)&4294967295);
        var $29=HEAP[$28];
        var $30=HEAP[$name];
        var $31=_strcmp($29, $30);
        var $32=((($31))|0)==0;
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $33
        var $34=HEAP[$i];
        HEAP[$1]=$34;
        __label__ = 10; break;
      case 7: // $35
        __label__ = 8; break;
      case 8: // $36
        var $37=HEAP[$i];
        var $38=((($37) + 1)&4294967295);
        HEAP[$i]=$38;
        __label__ = 4; break;
      case 9: // $39
        var $40=HEAP[$2];
        var $41=HEAP[$3];
        var $42=HEAP[$2];
        var $43=HEAP[$name];
        var $44=_lua_pushfstring($42, ((__str10)&4294967295), allocate([$43,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        var $45=_luaL_argerror($40, $41, $44);
        HEAP[$1]=$45;
        __label__ = 10; break;
      case 10: // $46
        var $47=HEAP[$1];
        STACKTOP = __stackBase__;
        return $47;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_optlstring($L, $narg, $def, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$narg;
        HEAP[$4]=$def;
        HEAP[$5]=$len;
        var $6=HEAP[$2];
        var $7=HEAP[$3];
        var $8=_lua_type($6, $7);
        var $9=((($8))|0) <= 0;
        if ($9) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 1: // $10
        var $11=HEAP[$5];
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $13
        var $14=HEAP[$4];
        var $15=((($14))|0)!=0;
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $16
        var $17=HEAP[$4];
        var $18=_strlen($17);
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $19
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $20
        var $21=__lastLabel__ == 3 ? $18 : (0);
        var $22=HEAP[$5];
        HEAP[$22]=$21;
        __label__ = 6; break;
      case 6: // $23
        var $24=HEAP[$4];
        HEAP[$1]=$24;
        __label__ = 8; break;
      case 7: // $25
        var $26=HEAP[$2];
        var $27=HEAP[$3];
        var $28=HEAP[$5];
        var $29=_luaL_checklstring($26, $27, $28);
        HEAP[$1]=$29;
        __label__ = 8; break;
      case 8: // $30
        var $31=HEAP[$1];
        STACKTOP = __stackBase__;
        return $31;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_checklstring($L, $narg, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $s=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$narg;
        HEAP[$3]=$len;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=_lua_tolstring($4, $5, $6);
        HEAP[$s]=$7;
        var $8=HEAP[$s];
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$2];
        _tag_error($11, $12, 4);
        __label__ = 2; break;
      case 2: // $13
        var $14=HEAP[$s];
        STACKTOP = __stackBase__;
        return $14;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_newmetatable($L, $tname) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$L;
        HEAP[$3]=$tname;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        _lua_getfield($4, -10000, $5);
        var $6=HEAP[$2];
        var $7=_lua_type($6, -1);
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $9
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $10
        var $11=HEAP[$2];
        _lua_settop($11, -2);
        var $12=HEAP[$2];
        _lua_createtable($12, 0, 0);
        var $13=HEAP[$2];
        _lua_pushvalue($13, -1);
        var $14=HEAP[$2];
        var $15=HEAP[$3];
        _lua_setfield($14, -10000, $15);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 3: // $16
        var $17=HEAP[$1];
        STACKTOP = __stackBase__;
        return $17;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_checkudata($L, $ud, $tname) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $p=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$ud;
        HEAP[$4]=$tname;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=_lua_touserdata($5, $6);
        HEAP[$p]=$7;
        var $8=HEAP[$p];
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 1; break; } else { __label__ = 6; break; }
      case 1: // $10
        var $11=HEAP[$2];
        var $12=HEAP[$3];
        var $13=_lua_getmetatable($11, $12);
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $15
        var $16=HEAP[$2];
        var $17=HEAP[$4];
        _lua_getfield($16, -10000, $17);
        var $18=HEAP[$2];
        var $19=_lua_rawequal($18, -1, -2);
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $21
        var $22=HEAP[$2];
        _lua_settop($22, -3);
        var $23=HEAP[$p];
        HEAP[$1]=$23;
        __label__ = 7; break;
      case 4: // $24
        __label__ = 5; break;
      case 5: // $25
        __label__ = 6; break;
      case 6: // $26
        var $27=HEAP[$2];
        var $28=HEAP[$3];
        var $29=HEAP[$4];
        var $30=_luaL_typerror($27, $28, $29);
        HEAP[$1]=0;
        __label__ = 7; break;
      case 7: // $31
        var $32=HEAP[$1];
        STACKTOP = __stackBase__;
        return $32;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_checkstack($L, $space, $mes) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$space;
        HEAP[$3]=$mes;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_lua_checkstack($4, $5);
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$3];
        var $11=_luaL_error($9, ((__str11)&4294967295), allocate([$10,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $12
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_checktype($L, $narg, $t) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$narg;
        HEAP[$3]=$t;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_lua_type($4, $5);
        var $7=HEAP[$3];
        var $8=((($6))|0)!=((($7))|0);
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$2];
        var $12=HEAP[$3];
        _tag_error($10, $11, $12);
        __label__ = 2; break;
      case 2: // $13
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tag_error($L, $narg, $tag) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$narg;
    HEAP[$3]=$tag;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    var $6=HEAP[$1];
    var $7=HEAP[$3];
    var $8=_lua_typename($6, $7);
    var $9=_luaL_typerror($4, $5, $8);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaL_checkany($L, $narg) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$narg;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_lua_type($3, $4);
        var $6=((($5))|0)==-1;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$2];
        var $10=_luaL_argerror($8, $9, ((__str12)&4294967295));
        __label__ = 2; break;
      case 2: // $11
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_checknumber($L, $narg) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $d=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$narg;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_lua_tonumber($3, $4);
        HEAP[$d]=$5;
        var $6=HEAP[$d];
        var $7=($6) == 0;
        if ($7) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$2];
        var $11=_lua_isnumber($9, $10);
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $13
        var $14=HEAP[$1];
        var $15=HEAP[$2];
        _tag_error($14, $15, 3);
        __label__ = 3; break;
      case 3: // $16
        var $17=HEAP[$d];
        STACKTOP = __stackBase__;
        return $17;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_optnumber($L, $narg, $def) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$narg;
        HEAP[$3]=$def;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_lua_type($4, $5);
        var $7=((($6))|0) <= 0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$3];
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$2];
        var $13=_luaL_checknumber($11, $12);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $14
        var $15=__lastLabel__ == 1 ? $9 : ($13);
        STACKTOP = __stackBase__;
        return $15;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_checkinteger($L, $narg) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $d=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$narg;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_lua_tointeger($3, $4);
        HEAP[$d]=$5;
        var $6=HEAP[$d];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$2];
        var $11=_lua_isnumber($9, $10);
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $13
        var $14=HEAP[$1];
        var $15=HEAP[$2];
        _tag_error($14, $15, 3);
        __label__ = 3; break;
      case 3: // $16
        var $17=HEAP[$d];
        STACKTOP = __stackBase__;
        return $17;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_optinteger($L, $narg, $def) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$narg;
        HEAP[$3]=$def;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_lua_type($4, $5);
        var $7=((($6))|0) <= 0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$3];
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$2];
        var $13=_luaL_checkinteger($11, $12);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $14
        var $15=__lastLabel__ == 1 ? $9 : ($13);
        STACKTOP = __stackBase__;
        return $15;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_getmetafield($L, $obj, $event) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$obj;
        HEAP[$4]=$event;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=_lua_getmetatable($5, $6);
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $9
        HEAP[$1]=0;
        __label__ = 5; break;
      case 2: // $10
        var $11=HEAP[$2];
        var $12=HEAP[$4];
        _lua_pushstring($11, $12);
        var $13=HEAP[$2];
        _lua_rawget($13, -2);
        var $14=HEAP[$2];
        var $15=_lua_type($14, -1);
        var $16=((($15))|0)==0;
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        var $18=HEAP[$2];
        _lua_settop($18, -3);
        HEAP[$1]=0;
        __label__ = 5; break;
      case 4: // $19
        var $20=HEAP[$2];
        _lua_remove($20, -2);
        HEAP[$1]=1;
        __label__ = 5; break;
      case 5: // $21
        var $22=HEAP[$1];
        STACKTOP = __stackBase__;
        return $22;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_callmeta($L, $obj, $event) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$obj;
        HEAP[$4]=$event;
        var $5=HEAP[$3];
        var $6=((($5))|0) > 0;
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $7
        var $8=HEAP[$3];
        var $9=((($8))|0) <= -10000;
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $10
        var $11=HEAP[$3];
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $12
        var $13=HEAP[$2];
        var $14=_lua_gettop($13);
        var $15=HEAP[$3];
        var $16=((($14) + ($15))&4294967295);
        var $17=((($16) + 1)&4294967295);
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $18
        var $19=__lastLabel__ == 2 ? $11 : ($17);
        HEAP[$3]=$19;
        var $20=HEAP[$2];
        var $21=HEAP[$3];
        var $22=HEAP[$4];
        var $23=_luaL_getmetafield($20, $21, $22);
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $25
        HEAP[$1]=0;
        __label__ = 7; break;
      case 6: // $26
        var $27=HEAP[$2];
        var $28=HEAP[$3];
        _lua_pushvalue($27, $28);
        var $29=HEAP[$2];
        _lua_call($29, 1, 1);
        HEAP[$1]=1;
        __label__ = 7; break;
      case 7: // $30
        var $31=HEAP[$1];
        STACKTOP = __stackBase__;
        return $31;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_register($L, $libname, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$libname;
    HEAP[$3]=$l;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    var $6=HEAP[$3];
    _luaL_openlib($4, $5, $6, 0);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaL_openlib($L, $libname, $l, $nup) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $size=__stackBase__+16;
        var $i=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$libname;
        HEAP[$3]=$l;
        HEAP[$4]=$nup;
        var $5=HEAP[$2];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 1; break; } else { __label__ = 6; break; }
      case 1: // $7
        var $8=HEAP[$3];
        var $9=_libsize($8);
        HEAP[$size]=$9;
        var $10=HEAP[$1];
        var $11=_luaL_findtable($10, -10000, ((__str13)&4294967295), 1);
        var $12=HEAP[$1];
        var $13=HEAP[$2];
        _lua_getfield($12, -1, $13);
        var $14=HEAP[$1];
        var $15=_lua_type($14, -1);
        var $16=((($15))|0)==5;
        if ($16) { __label__ = 5; break; } else { __label__ = 2; break; }
      case 2: // $17
        var $18=HEAP[$1];
        _lua_settop($18, -2);
        var $19=HEAP[$1];
        var $20=HEAP[$2];
        var $21=HEAP[$size];
        var $22=_luaL_findtable($19, -10002, $20, $21);
        var $23=((($22))|0)!=0;
        if ($23) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$2];
        var $27=_luaL_error($25, ((__str14)&4294967295), allocate([$26,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 4; break;
      case 4: // $28
        var $29=HEAP[$1];
        _lua_pushvalue($29, -1);
        var $30=HEAP[$1];
        var $31=HEAP[$2];
        _lua_setfield($30, -3, $31);
        __label__ = 5; break;
      case 5: // $32
        var $33=HEAP[$1];
        _lua_remove($33, -2);
        var $34=HEAP[$1];
        var $35=HEAP[$4];
        var $36=((($35) + 1)&4294967295);
        var $37=((0 - ($36))&4294967295);
        _lua_insert($34, $37);
        __label__ = 6; break;
      case 6: // $38
        __label__ = 7; break;
      case 7: // $39
        var $40=HEAP[$3];
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        var $43=((($42))|0)!=0;
        if ($43) { __label__ = 8; break; } else { __label__ = 14; break; }
      case 8: // $44
        HEAP[$i]=0;
        __label__ = 9; break;
      case 9: // $45
        var $46=HEAP[$i];
        var $47=HEAP[$4];
        var $48=((($46))|0) < ((($47))|0);
        if ($48) { __label__ = 10; break; } else { __label__ = 12; break; }
      case 10: // $49
        var $50=HEAP[$1];
        var $51=HEAP[$4];
        var $52=((0 - ($51))&4294967295);
        _lua_pushvalue($50, $52);
        __label__ = 11; break;
      case 11: // $53
        var $54=HEAP[$i];
        var $55=((($54) + 1)&4294967295);
        HEAP[$i]=$55;
        __label__ = 9; break;
      case 12: // $56
        var $57=HEAP[$1];
        var $58=HEAP[$3];
        var $59=(($58+4)&4294967295);
        var $60=HEAP[$59];
        var $61=HEAP[$4];
        _lua_pushcclosure($57, $60, $61);
        var $62=HEAP[$1];
        var $63=HEAP[$4];
        var $64=((($63) + 2)&4294967295);
        var $65=((0 - ($64))&4294967295);
        var $66=HEAP[$3];
        var $67=(($66)&4294967295);
        var $68=HEAP[$67];
        _lua_setfield($62, $65, $68);
        __label__ = 13; break;
      case 13: // $69
        var $70=HEAP[$3];
        var $71=(($70+8)&4294967295);
        HEAP[$3]=$71;
        __label__ = 7; break;
      case 14: // $72
        var $73=HEAP[$1];
        var $74=HEAP[$4];
        var $75=((0 - ($74))&4294967295);
        var $76=((($75) - 1)&4294967295);
        _lua_settop($73, $76);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _libsize($l) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $size=__stackBase__+4;
        HEAP[$1]=$l;
        HEAP[$size]=0;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$1];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $7
        var $8=HEAP[$size];
        var $9=((($8) + 1)&4294967295);
        HEAP[$size]=$9;
        __label__ = 3; break;
      case 3: // $10
        var $11=HEAP[$1];
        var $12=(($11+8)&4294967295);
        HEAP[$1]=$12;
        __label__ = 1; break;
      case 4: // $13
        var $14=HEAP[$size];
        STACKTOP = __stackBase__;
        return $14;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_findtable($L, $idx, $fname, $szhint) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $e=__stackBase__+20;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        HEAP[$4]=$fname;
        HEAP[$5]=$szhint;
        var $6=HEAP[$2];
        var $7=HEAP[$3];
        _lua_pushvalue($6, $7);
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$4];
        var $10=_strchr($9, 46);
        HEAP[$e]=$10;
        var $11=HEAP[$e];
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$4];
        var $15=HEAP[$4];
        var $16=_strlen($15);
        var $17=(($14+$16)&4294967295);
        HEAP[$e]=$17;
        __label__ = 3; break;
      case 3: // $18
        var $19=HEAP[$2];
        var $20=HEAP[$4];
        var $21=HEAP[$e];
        var $22=HEAP[$4];
        var $23=($21);
        var $24=($22);
        var $25=((($23) - ($24))&4294967295);
        _lua_pushlstring($19, $20, $25);
        var $26=HEAP[$2];
        _lua_rawget($26, -2);
        var $27=HEAP[$2];
        var $28=_lua_type($27, -1);
        var $29=((($28))|0)==0;
        if ($29) { __label__ = 4; break; } else { __label__ = 8; break; }
      case 4: // $30
        var $31=HEAP[$2];
        _lua_settop($31, -2);
        var $32=HEAP[$2];
        var $33=HEAP[$e];
        var $34=HEAP[$33];
        var $35=reSign(($34), 8, 0);
        var $36=((($35))|0)==46;
        if ($36) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $37
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $38
        var $39=HEAP[$5];
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $40
        var $41=__lastLabel__ == 5 ? 1 : ($39);
        _lua_createtable($32, 0, $41);
        var $42=HEAP[$2];
        var $43=HEAP[$4];
        var $44=HEAP[$e];
        var $45=HEAP[$4];
        var $46=($44);
        var $47=($45);
        var $48=((($46) - ($47))&4294967295);
        _lua_pushlstring($42, $43, $48);
        var $49=HEAP[$2];
        _lua_pushvalue($49, -2);
        var $50=HEAP[$2];
        _lua_settable($50, -4);
        __label__ = 11; break;
      case 8: // $51
        var $52=HEAP[$2];
        var $53=_lua_type($52, -1);
        var $54=((($53))|0)==5;
        if ($54) { __label__ = 10; break; } else { __label__ = 9; break; }
      case 9: // $55
        var $56=HEAP[$2];
        _lua_settop($56, -3);
        var $57=HEAP[$4];
        HEAP[$1]=$57;
        __label__ = 14; break;
      case 10: // $58
        __label__ = 11; break;
      case 11: // $59
        var $60=HEAP[$2];
        _lua_remove($60, -2);
        var $61=HEAP[$e];
        var $62=(($61+1)&4294967295);
        HEAP[$4]=$62;
        __label__ = 12; break;
      case 12: // $63
        var $64=HEAP[$e];
        var $65=HEAP[$64];
        var $66=reSign(($65), 8, 0);
        var $67=((($66))|0)==46;
        if ($67) { __label__ = 1; break; } else { __label__ = 13; break; }
      case 13: // $68
        HEAP[$1]=0;
        __label__ = 14; break;
      case 14: // $69
        var $70=HEAP[$1];
        STACKTOP = __stackBase__;
        return $70;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_gsub($L, $s, $p, $r) {
    var __stackBase__  = STACKTOP; STACKTOP += 8228; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8228);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $wild=__stackBase__+16;
        var $l=__stackBase__+20;
        var $b=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$s;
        HEAP[$3]=$p;
        HEAP[$4]=$r;
        var $5=HEAP[$3];
        var $6=_strlen($5);
        HEAP[$l]=$6;
        var $7=HEAP[$1];
        _luaL_buffinit($7, $b);
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$2];
        var $10=HEAP[$3];
        var $11=_strstr($9, $10);
        HEAP[$wild]=$11;
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$2];
        var $15=HEAP[$wild];
        var $16=HEAP[$2];
        var $17=($15);
        var $18=($16);
        var $19=((($17) - ($18))&4294967295);
        _luaL_addlstring($b, $14, $19);
        var $20=HEAP[$4];
        _luaL_addstring($b, $20);
        var $21=HEAP[$wild];
        var $22=HEAP[$l];
        var $23=(($21+$22)&4294967295);
        HEAP[$2]=$23;
        __label__ = 1; break;
      case 3: // $24
        var $25=HEAP[$2];
        _luaL_addstring($b, $25);
        _luaL_pushresult($b);
        var $26=HEAP[$1];
        var $27=_lua_tolstring($26, -1, 0);
        STACKTOP = __stackBase__;
        return $27;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_buffinit($L, $B) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$B;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=(($4+8)&4294967295);
    HEAP[$5]=$3;
    var $6=HEAP[$2];
    var $7=(($6+12)&4294967295);
    var $8=(($7)&4294967295);
    var $9=HEAP[$2];
    var $10=(($9)&4294967295);
    HEAP[$10]=$8;
    var $11=HEAP[$2];
    var $12=(($11+4)&4294967295);
    HEAP[$12]=0;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaL_addlstring($B, $s, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$B;
        HEAP[$2]=$s;
        HEAP[$3]=$l;
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$3];
        var $6=((($5) + -1)&4294967295);
        HEAP[$3]=$6;
        var $7=((($5))|0)!=0;
        if ($7) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $8
        var $9=HEAP[$1];
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        var $12=HEAP[$1];
        var $13=(($12+12)&4294967295);
        var $14=(($13)&4294967295);
        var $15=(($14+8192)&4294967295);
        var $16=((($11))>>>0) < ((($15))>>>0);
        if ($16) { __lastLabel__ = 2; __label__ = 4; break; } else { __lastLabel__ = 2; __label__ = 3; break; }
      case 3: // $17
        var $18=HEAP[$1];
        var $19=_luaL_prepbuffer($18);
        var $20=((($19))|0)!=0;
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $21
        var $22=__lastLabel__ == 2 ? 1 : ($20);
        var $23=unSign(($22), 1, 0);
        var $24=HEAP[$2];
        var $25=(($24+1)&4294967295);
        HEAP[$2]=$25;
        var $26=HEAP[$24];
        var $27=HEAP[$1];
        var $28=(($27)&4294967295);
        var $29=HEAP[$28];
        var $30=(($29+1)&4294967295);
        HEAP[$28]=$30;
        HEAP[$29]=$26;
        __label__ = 1; break;
      case 5: // $31
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_addstring($B, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$B;
    HEAP[$2]=$s;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=HEAP[$2];
    var $6=_strlen($5);
    _luaL_addlstring($3, $4, $6);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaL_pushresult($B) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$B;
    var $2=HEAP[$1];
    var $3=_emptybuffer($2);
    var $4=HEAP[$1];
    var $5=(($4+8)&4294967295);
    var $6=HEAP[$5];
    var $7=HEAP[$1];
    var $8=(($7+4)&4294967295);
    var $9=HEAP[$8];
    _lua_concat($6, $9);
    var $10=HEAP[$1];
    var $11=(($10+4)&4294967295);
    HEAP[$11]=1;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaL_prepbuffer($B) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$B;
        var $2=HEAP[$1];
        var $3=_emptybuffer($2);
        var $4=((($3))|0)!=0;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$1];
        _adjuststack($6);
        __label__ = 2; break;
      case 2: // $7
        var $8=HEAP[$1];
        var $9=(($8+12)&4294967295);
        var $10=(($9)&4294967295);
        STACKTOP = __stackBase__;
        return $10;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _emptybuffer($B) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $l=__stackBase__+8;
        HEAP[$2]=$B;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=HEAP[$2];
        var $7=(($6+12)&4294967295);
        var $8=(($7)&4294967295);
        var $9=($5);
        var $10=($8);
        var $11=((($9) - ($10))&4294967295);
        HEAP[$l]=$11;
        var $12=HEAP[$l];
        var $13=((($12))|0)==0;
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $14
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $15
        var $16=HEAP[$2];
        var $17=(($16+8)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$2];
        var $20=(($19+12)&4294967295);
        var $21=(($20)&4294967295);
        var $22=HEAP[$l];
        _lua_pushlstring($18, $21, $22);
        var $23=HEAP[$2];
        var $24=(($23+12)&4294967295);
        var $25=(($24)&4294967295);
        var $26=HEAP[$2];
        var $27=(($26)&4294967295);
        HEAP[$27]=$25;
        var $28=HEAP[$2];
        var $29=(($28+4)&4294967295);
        var $30=HEAP[$29];
        var $31=((($30) + 1)&4294967295);
        HEAP[$29]=$31;
        HEAP[$1]=1;
        __label__ = 3; break;
      case 3: // $32
        var $33=HEAP[$1];
        STACKTOP = __stackBase__;
        return $33;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _adjuststack($B) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $L=__stackBase__+4;
        var $toget=__stackBase__+8;
        var $toplen=__stackBase__+12;
        var $l=__stackBase__+16;
        HEAP[$1]=$B;
        var $2=HEAP[$1];
        var $3=(($2+4)&4294967295);
        var $4=HEAP[$3];
        var $5=((($4))|0) > 1;
        if ($5) { __label__ = 1; break; } else { __label__ = 9; break; }
      case 1: // $6
        var $7=HEAP[$1];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        HEAP[$L]=$9;
        HEAP[$toget]=1;
        var $10=HEAP[$L];
        var $11=_lua_objlen($10, -1);
        HEAP[$toplen]=$11;
        __label__ = 2; break;
      case 2: // $12
        var $13=HEAP[$L];
        var $14=HEAP[$toget];
        var $15=((($14) + 1)&4294967295);
        var $16=((0 - ($15))&4294967295);
        var $17=_lua_objlen($13, $16);
        HEAP[$l]=$17;
        var $18=HEAP[$1];
        var $19=(($18+4)&4294967295);
        var $20=HEAP[$19];
        var $21=HEAP[$toget];
        var $22=((($20) - ($21))&4294967295);
        var $23=((($22) + 1)&4294967295);
        var $24=((($23))|0) >= 10;
        if ($24) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $25
        var $26=HEAP[$toplen];
        var $27=HEAP[$l];
        var $28=((($26))>>>0) > ((($27))>>>0);
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $29
        var $30=HEAP[$l];
        var $31=HEAP[$toplen];
        var $32=((($31) + ($30))&4294967295);
        HEAP[$toplen]=$32;
        var $33=HEAP[$toget];
        var $34=((($33) + 1)&4294967295);
        HEAP[$toget]=$34;
        __label__ = 6; break;
      case 5: // $35
        __label__ = 8; break;
      case 6: // $36
        __label__ = 7; break;
      case 7: // $37
        var $38=HEAP[$toget];
        var $39=HEAP[$1];
        var $40=(($39+4)&4294967295);
        var $41=HEAP[$40];
        var $42=((($38))|0) < ((($41))|0);
        if ($42) { __label__ = 2; break; } else { __label__ = 8; break; }
      case 8: // $43
        var $44=HEAP[$L];
        var $45=HEAP[$toget];
        _lua_concat($44, $45);
        var $46=HEAP[$1];
        var $47=(($46+4)&4294967295);
        var $48=HEAP[$47];
        var $49=HEAP[$toget];
        var $50=((($48) - ($49))&4294967295);
        var $51=((($50) + 1)&4294967295);
        var $52=HEAP[$1];
        var $53=(($52+4)&4294967295);
        HEAP[$53]=$51;
        __label__ = 9; break;
      case 9: // $54
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_addvalue($B) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $L=__stackBase__+4;
        var $vl=__stackBase__+8;
        var $s=__stackBase__+12;
        HEAP[$1]=$B;
        var $2=HEAP[$1];
        var $3=(($2+8)&4294967295);
        var $4=HEAP[$3];
        HEAP[$L]=$4;
        var $5=HEAP[$L];
        var $6=_lua_tolstring($5, -1, $vl);
        HEAP[$s]=$6;
        var $7=HEAP[$vl];
        var $8=HEAP[$1];
        var $9=(($8)&4294967295);
        var $10=HEAP[$9];
        var $11=HEAP[$1];
        var $12=(($11+12)&4294967295);
        var $13=(($12)&4294967295);
        var $14=($10);
        var $15=($13);
        var $16=((($14) - ($15))&4294967295);
        var $17=((8192 - ($16))&4294967295);
        var $18=((($7))>>>0) <= ((($17))>>>0);
        if ($18) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $19
        var $20=HEAP[$1];
        var $21=(($20)&4294967295);
        var $22=HEAP[$21];
        var $23=HEAP[$s];
        var $24=HEAP[$vl];
        _llvm_memcpy_p0i8_p0i8_i32($22, $23, $24, 1, 0);
        var $25=HEAP[$vl];
        var $26=HEAP[$1];
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28+$25)&4294967295);
        HEAP[$27]=$29;
        var $30=HEAP[$L];
        _lua_settop($30, -2);
        __label__ = 5; break;
      case 2: // $31
        var $32=HEAP[$1];
        var $33=_emptybuffer($32);
        var $34=((($33))|0)!=0;
        if ($34) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $35
        var $36=HEAP[$L];
        _lua_insert($36, -2);
        __label__ = 4; break;
      case 4: // $37
        var $38=HEAP[$1];
        var $39=(($38+4)&4294967295);
        var $40=HEAP[$39];
        var $41=((($40) + 1)&4294967295);
        HEAP[$39]=$41;
        var $42=HEAP[$1];
        _adjuststack($42);
        __label__ = 5; break;
      case 5: // $43
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_ref($L, $t) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $ref=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$t;
        var $4=HEAP[$3];
        var $5=((($4))|0) > 0;
        if ($5) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $6
        var $7=HEAP[$3];
        var $8=((($7))|0) <= -10000;
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $9
        var $10=HEAP[$3];
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $11
        var $12=HEAP[$2];
        var $13=_lua_gettop($12);
        var $14=HEAP[$3];
        var $15=((($13) + ($14))&4294967295);
        var $16=((($15) + 1)&4294967295);
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $17
        var $18=__lastLabel__ == 2 ? $10 : ($16);
        HEAP[$3]=$18;
        var $19=HEAP[$2];
        var $20=_lua_type($19, -1);
        var $21=((($20))|0)==0;
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $22
        var $23=HEAP[$2];
        _lua_settop($23, -2);
        HEAP[$1]=-1;
        __label__ = 10; break;
      case 6: // $24
        var $25=HEAP[$2];
        var $26=HEAP[$3];
        _lua_rawgeti($25, $26, 0);
        var $27=HEAP[$2];
        var $28=_lua_tointeger($27, -1);
        HEAP[$ref]=$28;
        var $29=HEAP[$2];
        _lua_settop($29, -2);
        var $30=HEAP[$ref];
        var $31=((($30))|0)!=0;
        if ($31) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $32
        var $33=HEAP[$2];
        var $34=HEAP[$3];
        var $35=HEAP[$ref];
        _lua_rawgeti($33, $34, $35);
        var $36=HEAP[$2];
        var $37=HEAP[$3];
        _lua_rawseti($36, $37, 0);
        __label__ = 9; break;
      case 8: // $38
        var $39=HEAP[$2];
        var $40=HEAP[$3];
        var $41=_lua_objlen($39, $40);
        HEAP[$ref]=$41;
        var $42=HEAP[$ref];
        var $43=((($42) + 1)&4294967295);
        HEAP[$ref]=$43;
        __label__ = 9; break;
      case 9: // $44
        var $45=HEAP[$2];
        var $46=HEAP[$3];
        var $47=HEAP[$ref];
        _lua_rawseti($45, $46, $47);
        var $48=HEAP[$ref];
        HEAP[$1]=$48;
        __label__ = 10; break;
      case 10: // $49
        var $50=HEAP[$1];
        STACKTOP = __stackBase__;
        return $50;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_unref($L, $t, $ref) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        HEAP[$3]=$ref;
        var $4=HEAP[$3];
        var $5=((($4))|0) >= 0;
        if ($5) { __label__ = 1; break; } else { __label__ = 6; break; }
      case 1: // $6
        var $7=HEAP[$2];
        var $8=((($7))|0) > 0;
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $9
        var $10=HEAP[$2];
        var $11=((($10))|0) <= -10000;
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $12
        var $13=HEAP[$2];
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $14
        var $15=HEAP[$1];
        var $16=_lua_gettop($15);
        var $17=HEAP[$2];
        var $18=((($16) + ($17))&4294967295);
        var $19=((($18) + 1)&4294967295);
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $20
        var $21=__lastLabel__ == 3 ? $13 : ($19);
        HEAP[$2]=$21;
        var $22=HEAP[$1];
        var $23=HEAP[$2];
        _lua_rawgeti($22, $23, 0);
        var $24=HEAP[$1];
        var $25=HEAP[$2];
        var $26=HEAP[$3];
        _lua_rawseti($24, $25, $26);
        var $27=HEAP[$1];
        var $28=HEAP[$3];
        _lua_pushinteger($27, $28);
        var $29=HEAP[$1];
        var $30=HEAP[$2];
        _lua_rawseti($29, $30, 0);
        __label__ = 6; break;
      case 6: // $31
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_loadfile($L, $filename) {
    var __stackBase__  = STACKTOP; STACKTOP += 8228; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8228);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $lf=__stackBase__+12;
        var $status=__stackBase__+8212;
        var $readstatus=__stackBase__+8216;
        var $c=__stackBase__+8220;
        var $fnameindex=__stackBase__+8224;
        HEAP[$2]=$L;
        HEAP[$3]=$filename;
        var $4=HEAP[$2];
        var $5=_lua_gettop($4);
        var $6=((($5) + 1)&4294967295);
        HEAP[$fnameindex]=$6;
        var $7=(($lf)&4294967295);
        HEAP[$7]=0;
        var $8=HEAP[$3];
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$2];
        _lua_pushlstring($11, ((__str159)&4294967295), 6);
        var $12=HEAP[_stdin];
        var $13=(($lf+4)&4294967295);
        HEAP[$13]=$12;
        __label__ = 5; break;
      case 2: // $14
        var $15=HEAP[$2];
        var $16=HEAP[$3];
        var $17=_lua_pushfstring($15, ((__str16)&4294967295), allocate([$16,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        var $18=HEAP[$3];
        var $19=_fopen($18, ((__str17)&4294967295));
        var $20=(($lf+4)&4294967295);
        HEAP[$20]=$19;
        var $21=(($lf+4)&4294967295);
        var $22=HEAP[$21];
        var $23=((($22))|0)==0;
        if ($23) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $24
        var $25=HEAP[$2];
        var $26=HEAP[$fnameindex];
        var $27=_errfile($25, ((__str18)&4294967295), $26);
        HEAP[$1]=$27;
        __label__ = 29; break;
      case 4: // $28
        __label__ = 5; break;
      case 5: // $29
        var $30=(($lf+4)&4294967295);
        var $31=HEAP[$30];
        var $32=__IO_getc($31);
        HEAP[$c]=$32;
        var $33=HEAP[$c];
        var $34=((($33))|0)==35;
        if ($34) { __label__ = 6; break; } else { __label__ = 14; break; }
      case 6: // $35
        var $36=(($lf)&4294967295);
        HEAP[$36]=1;
        __label__ = 7; break;
      case 7: // $37
        var $38=(($lf+4)&4294967295);
        var $39=HEAP[$38];
        var $40=__IO_getc($39);
        HEAP[$c]=$40;
        var $41=((($40))|0)!=-1;
        if ($41) { __lastLabel__ = 7; __label__ = 8; break; } else { __lastLabel__ = 7; __label__ = 9; break; }
      case 8: // $42
        var $43=HEAP[$c];
        var $44=((($43))|0)!=10;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $45
        var $46=__lastLabel__ == 7 ? 0 : ($44);
        if ($46) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $47
        __label__ = 7; break;
      case 11: // $48
        var $49=HEAP[$c];
        var $50=((($49))|0)==10;
        if ($50) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $51
        var $52=(($lf+4)&4294967295);
        var $53=HEAP[$52];
        var $54=__IO_getc($53);
        HEAP[$c]=$54;
        __label__ = 13; break;
      case 13: // $55
        __label__ = 14; break;
      case 14: // $56
        var $57=HEAP[$c];
        var $58=HEAP[((__str19)&4294967295)];
        var $59=reSign(($58), 8, 0);
        var $60=((($57))|0)==((($59))|0);
        if ($60) { __label__ = 15; break; } else { __label__ = 24; break; }
      case 15: // $61
        var $62=HEAP[$3];
        var $63=((($62))|0)!=0;
        if ($63) { __label__ = 16; break; } else { __label__ = 24; break; }
      case 16: // $64
        var $65=HEAP[$3];
        var $66=(($lf+4)&4294967295);
        var $67=HEAP[$66];
        var $68=_freopen($65, ((__str20)&4294967295), $67);
        var $69=(($lf+4)&4294967295);
        HEAP[$69]=$68;
        var $70=(($lf+4)&4294967295);
        var $71=HEAP[$70];
        var $72=((($71))|0)==0;
        if ($72) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $73
        var $74=HEAP[$2];
        var $75=HEAP[$fnameindex];
        var $76=_errfile($74, ((__str21)&4294967295), $75);
        HEAP[$1]=$76;
        __label__ = 29; break;
      case 18: // $77
        __label__ = 19; break;
      case 19: // $78
        var $79=(($lf+4)&4294967295);
        var $80=HEAP[$79];
        var $81=__IO_getc($80);
        HEAP[$c]=$81;
        var $82=((($81))|0)!=-1;
        if ($82) { __lastLabel__ = 19; __label__ = 20; break; } else { __lastLabel__ = 19; __label__ = 21; break; }
      case 20: // $83
        var $84=HEAP[$c];
        var $85=HEAP[((__str19)&4294967295)];
        var $86=reSign(($85), 8, 0);
        var $87=((($84))|0)!=((($86))|0);
        __lastLabel__ = 20; __label__ = 21; break;
      case 21: // $88
        var $89=__lastLabel__ == 19 ? 0 : ($87);
        if ($89) { __label__ = 22; break; } else { __label__ = 23; break; }
      case 22: // $90
        __label__ = 19; break;
      case 23: // $91
        var $92=(($lf)&4294967295);
        HEAP[$92]=0;
        __label__ = 24; break;
      case 24: // $93
        var $94=HEAP[$c];
        var $95=(($lf+4)&4294967295);
        var $96=HEAP[$95];
        var $97=_ungetc($94, $96);
        var $98=HEAP[$2];
        var $99=$lf;
        var $100=HEAP[$2];
        var $101=_lua_tolstring($100, -1, 0);
        var $102=_lua_load($98, 6, $99, $101);
        HEAP[$status]=$102;
        var $103=(($lf+4)&4294967295);
        var $104=HEAP[$103];
        var $105=_ferror($104);
        HEAP[$readstatus]=$105;
        var $106=HEAP[$3];
        var $107=((($106))|0)!=0;
        if ($107) { __label__ = 25; break; } else { __label__ = 26; break; }
      case 25: // $108
        var $109=(($lf+4)&4294967295);
        var $110=HEAP[$109];
        var $111=_fclose($110);
        __label__ = 26; break;
      case 26: // $112
        var $113=HEAP[$readstatus];
        var $114=((($113))|0)!=0;
        if ($114) { __label__ = 27; break; } else { __label__ = 28; break; }
      case 27: // $115
        var $116=HEAP[$2];
        var $117=HEAP[$fnameindex];
        _lua_settop($116, $117);
        var $118=HEAP[$2];
        var $119=HEAP[$fnameindex];
        var $120=_errfile($118, ((__str22)&4294967295), $119);
        HEAP[$1]=$120;
        __label__ = 29; break;
      case 28: // $121
        var $122=HEAP[$2];
        var $123=HEAP[$fnameindex];
        _lua_remove($122, $123);
        var $124=HEAP[$status];
        HEAP[$1]=$124;
        __label__ = 29; break;
      case 29: // $125
        var $126=HEAP[$1];
        STACKTOP = __stackBase__;
        return $126;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _errfile($L, $what, $fnameindex) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $serr=__stackBase__+12;
    var $filename=__stackBase__+16;
    HEAP[$1]=$L;
    HEAP[$2]=$what;
    HEAP[$3]=$fnameindex;
    var $4=___errno_location();
    var $5=HEAP[$4];
    var $6=_strerror($5);
    HEAP[$serr]=$6;
    var $7=HEAP[$1];
    var $8=HEAP[$3];
    var $9=_lua_tolstring($7, $8, 0);
    var $10=(($9+1)&4294967295);
    HEAP[$filename]=$10;
    var $11=HEAP[$1];
    var $12=HEAP[$2];
    var $13=HEAP[$filename];
    var $14=HEAP[$serr];
    var $15=_lua_pushfstring($11, ((__str25)&4294967295), allocate([$12,0,0,0,$13,0,0,0,$14,0,0,0], ["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
    var $16=HEAP[$1];
    var $17=HEAP[$3];
    _lua_remove($16, $17);
    STACKTOP = __stackBase__;
    return 6;
  }
  

  function _getF($L, $ud, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $lf=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$ud;
        HEAP[$4]=$size;
        var $5=HEAP[$3];
        var $6=$5;
        HEAP[$lf]=$6;
        var $7=HEAP[$2];
        var $8=HEAP[$lf];
        var $9=(($8)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$lf];
        var $14=(($13)&4294967295);
        HEAP[$14]=0;
        var $15=HEAP[$4];
        HEAP[$15]=1;
        HEAP[$1]=((__str24)&4294967295);
        __label__ = 8; break;
      case 2: // $16
        var $17=HEAP[$lf];
        var $18=(($17+4)&4294967295);
        var $19=HEAP[$18];
        var $20=_feof($19);
        var $21=((($20))|0)!=0;
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $22
        HEAP[$1]=0;
        __label__ = 8; break;
      case 4: // $23
        var $24=HEAP[$lf];
        var $25=(($24+8)&4294967295);
        var $26=(($25)&4294967295);
        var $27=HEAP[$lf];
        var $28=(($27+4)&4294967295);
        var $29=HEAP[$28];
        var $30=_fread($26, 1, 8192, $29);
        var $31=HEAP[$4];
        HEAP[$31]=$30;
        var $32=HEAP[$4];
        var $33=HEAP[$32];
        var $34=((($33))>>>0) > 0;
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $35
        var $36=HEAP[$lf];
        var $37=(($36+8)&4294967295);
        var $38=(($37)&4294967295);
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $39
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $40
        var $41=__lastLabel__ == 5 ? $38 : (0);
        HEAP[$1]=$41;
        __label__ = 8; break;
      case 8: // $42
        var $43=HEAP[$1];
        STACKTOP = __stackBase__;
        return $43;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_loadbuffer($L, $buff, $size, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    var $ls=__stackBase__+16;
    HEAP[$1]=$L;
    HEAP[$2]=$buff;
    HEAP[$3]=$size;
    HEAP[$4]=$name;
    var $5=HEAP[$2];
    var $6=(($ls)&4294967295);
    HEAP[$6]=$5;
    var $7=HEAP[$3];
    var $8=(($ls+4)&4294967295);
    HEAP[$8]=$7;
    var $9=HEAP[$1];
    var $10=$ls;
    var $11=HEAP[$4];
    var $12=_lua_load($9, 8, $10, $11);
    STACKTOP = __stackBase__;
    return $12;
  }
  

  function _getS($L, $ud, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $ls=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$ud;
        HEAP[$4]=$size;
        var $5=HEAP[$3];
        var $6=$5;
        HEAP[$ls]=$6;
        var $7=HEAP[$2];
        var $8=HEAP[$ls];
        var $9=(($8+4)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10))|0)==0;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $13
        var $14=HEAP[$ls];
        var $15=(($14+4)&4294967295);
        var $16=HEAP[$15];
        var $17=HEAP[$4];
        HEAP[$17]=$16;
        var $18=HEAP[$ls];
        var $19=(($18+4)&4294967295);
        HEAP[$19]=0;
        var $20=HEAP[$ls];
        var $21=(($20)&4294967295);
        var $22=HEAP[$21];
        HEAP[$1]=$22;
        __label__ = 3; break;
      case 3: // $23
        var $24=HEAP[$1];
        STACKTOP = __stackBase__;
        return $24;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_loadstring($L, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$s;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=HEAP[$2];
    var $6=_strlen($5);
    var $7=HEAP[$2];
    var $8=_luaL_loadbuffer($3, $4, $6, $7);
    STACKTOP = __stackBase__;
    return $8;
  }
  

  function _luaL_newstate() {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $L=__stackBase__;
        var $1=_lua_newstate(10, 0);
        HEAP[$L]=$1;
        var $2=HEAP[$L];
        var $3=((($2))|0)!=0;
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $4
        var $5=HEAP[$L];
        var $6=_lua_atpanic($5, 12);
        __label__ = 2; break;
      case 2: // $7
        var $8=HEAP[$L];
        STACKTOP = __stackBase__;
        return $8;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _l_alloc($ud, $ptr, $osize, $nsize) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        HEAP[$2]=$ud;
        HEAP[$3]=$ptr;
        HEAP[$4]=$osize;
        HEAP[$5]=$nsize;
        var $6=HEAP[$2];
        var $7=HEAP[$4];
        var $8=HEAP[$5];
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$3];
        _free($11);
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $12
        var $13=HEAP[$3];
        var $14=HEAP[$5];
        var $15=_realloc($13, $14);
        HEAP[$1]=$15;
        __label__ = 3; break;
      case 3: // $16
        var $17=HEAP[$1];
        STACKTOP = __stackBase__;
        return $17;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _panic($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[_stderr];
    var $4=HEAP[$1];
    var $5=_lua_tolstring($4, -1, 0);
    var $6=_fprintf($3, ((__str23)&4294967295), allocate([$5,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
    STACKTOP = __stackBase__;
    return 0;
  }
  

  function _luaopen_base($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _base_open($2);
    var $3=HEAP[$1];
    _luaL_register($3, ((__str27)&4294967295), ((_co_funcs)&4294967295));
    STACKTOP = __stackBase__;
    return 2;
  }
  

  function _base_open($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _lua_pushvalue($2, -10002);
    var $3=HEAP[$1];
    _lua_setfield($3, -10002, ((__str1542)&4294967295));
    var $4=HEAP[$1];
    _luaL_register($4, ((__str1542)&4294967295), ((_base_funcs)&4294967295));
    var $5=HEAP[$1];
    _lua_pushlstring($5, ((__str1643)&4294967295), 7);
    var $6=HEAP[$1];
    _lua_setfield($6, -10002, ((__str1744)&4294967295));
    var $7=HEAP[$1];
    _auxopen($7, ((__str1845)&4294967295), 14, 16);
    var $8=HEAP[$1];
    _auxopen($8, ((__str1946)&4294967295), 18, 20);
    var $9=HEAP[$1];
    _lua_createtable($9, 0, 1);
    var $10=HEAP[$1];
    _lua_pushvalue($10, -1);
    var $11=HEAP[$1];
    var $12=_lua_setmetatable($11, -2);
    var $13=HEAP[$1];
    _lua_pushlstring($13, ((__str2047)&4294967295), 2);
    var $14=HEAP[$1];
    _lua_setfield($14, -2, ((__str2148)&4294967295));
    var $15=HEAP[$1];
    _lua_pushcclosure($15, 22, 1);
    var $16=HEAP[$1];
    _lua_setfield($16, -10002, ((__str2249)&4294967295));
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaB_cocreate($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $NL=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_newthread($2);
        HEAP[$NL]=$3;
        var $4=HEAP[$1];
        var $5=_lua_type($4, 1);
        var $6=((($5))|0)==6;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=_lua_iscfunction($8, 1);
        var $10=((($9))|0)!=0;
        if ($10) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$1];
        var $13=_luaL_argerror($12, 1, ((__str1441)&4294967295));
        var $14=((($13))|0)!=0;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $15
        var $16=__lastLabel__ == 1 ? 1 : ($14);
        var $17=unSign(($16), 1, 0);
        var $18=HEAP[$1];
        _lua_pushvalue($18, 1);
        var $19=HEAP[$1];
        var $20=HEAP[$NL];
        _lua_xmove($19, $20, 1);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_coresume($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $co=__stackBase__+8;
        var $r=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_lua_tothread($3, 1);
        HEAP[$co]=$4;
        var $5=HEAP[$co];
        var $6=((($5))|0)!=0;
        if ($6) { __lastLabel__ = 0; __label__ = 2; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $7
        var $8=HEAP[$2];
        var $9=_luaL_argerror($8, 1, ((__str1340)&4294967295));
        var $10=((($9))|0)!=0;
        __lastLabel__ = 1; __label__ = 2; break;
      case 2: // $11
        var $12=__lastLabel__ == 0 ? 1 : ($10);
        var $13=unSign(($12), 1, 0);
        var $14=HEAP[$2];
        var $15=HEAP[$co];
        var $16=HEAP[$2];
        var $17=_lua_gettop($16);
        var $18=((($17) - 1)&4294967295);
        var $19=_auxresume($14, $15, $18);
        HEAP[$r]=$19;
        var $20=HEAP[$r];
        var $21=((($20))|0) < 0;
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $22
        var $23=HEAP[$2];
        _lua_pushboolean($23, 0);
        var $24=HEAP[$2];
        _lua_insert($24, -2);
        HEAP[$1]=2;
        __label__ = 5; break;
      case 4: // $25
        var $26=HEAP[$2];
        _lua_pushboolean($26, 1);
        var $27=HEAP[$2];
        var $28=HEAP[$r];
        var $29=((($28) + 1)&4294967295);
        var $30=((0 - ($29))&4294967295);
        _lua_insert($27, $30);
        var $31=HEAP[$r];
        var $32=((($31) + 1)&4294967295);
        HEAP[$1]=$32;
        __label__ = 5; break;
      case 5: // $33
        var $34=HEAP[$1];
        STACKTOP = __stackBase__;
        return $34;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_corunning($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_pushthread($2);
        var $4=((($3))|0)!=0;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$1];
        _lua_pushnil($6);
        __label__ = 2; break;
      case 2: // $7
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_costatus($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $co=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_tothread($2, 1);
        HEAP[$co]=$3;
        var $4=HEAP[$co];
        var $5=((($4))|0)!=0;
        if ($5) { __lastLabel__ = 0; __label__ = 2; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $6
        var $7=HEAP[$1];
        var $8=_luaL_argerror($7, 1, ((__str1340)&4294967295));
        var $9=((($8))|0)!=0;
        __lastLabel__ = 1; __label__ = 2; break;
      case 2: // $10
        var $11=__lastLabel__ == 0 ? 1 : ($9);
        var $12=unSign(($11), 1, 0);
        var $13=HEAP[$1];
        var $14=HEAP[$1];
        var $15=HEAP[$co];
        var $16=_costatus($14, $15);
        var $17=((_statnames+$16*4)&4294967295);
        var $18=HEAP[$17];
        _lua_pushstring($13, $18);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_cowrap($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaB_cocreate($2);
    var $4=HEAP[$1];
    _lua_pushcclosure($4, 24, 1);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _luaB_yield($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_lua_gettop($3);
    var $5=_lua_yield($2, $4);
    STACKTOP = __stackBase__;
    return $5;
  }
  

  function _luaB_auxwrap($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $co=__stackBase__+4;
        var $r=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_tothread($2, -10003);
        HEAP[$co]=$3;
        var $4=HEAP[$1];
        var $5=HEAP[$co];
        var $6=HEAP[$1];
        var $7=_lua_gettop($6);
        var $8=_auxresume($4, $5, $7);
        HEAP[$r]=$8;
        var $9=HEAP[$r];
        var $10=((($9))|0) < 0;
        if ($10) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $11
        var $12=HEAP[$1];
        var $13=_lua_isstring($12, -1);
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        var $16=HEAP[$1];
        _luaL_where($16, 1);
        var $17=HEAP[$1];
        _lua_insert($17, -2);
        var $18=HEAP[$1];
        _lua_concat($18, 2);
        __label__ = 3; break;
      case 3: // $19
        var $20=HEAP[$1];
        var $21=_lua_error($20);
        __label__ = 4; break;
      case 4: // $22
        var $23=HEAP[$r];
        STACKTOP = __stackBase__;
        return $23;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _auxresume($L, $co, $narg) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $status=__stackBase__+16;
        var $nres=__stackBase__+20;
        HEAP[$2]=$L;
        HEAP[$3]=$co;
        HEAP[$4]=$narg;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=_costatus($5, $6);
        HEAP[$status]=$7;
        var $8=HEAP[$3];
        var $9=HEAP[$4];
        var $10=_lua_checkstack($8, $9);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $12
        var $13=HEAP[$2];
        var $14=_luaL_error($13, ((__str734)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $15
        var $16=HEAP[$status];
        var $17=((($16))|0)!=1;
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $18
        var $19=HEAP[$2];
        var $20=HEAP[$status];
        var $21=((_statnames+$20*4)&4294967295);
        var $22=HEAP[$21];
        var $23=_lua_pushfstring($19, ((__str835)&4294967295), allocate([$22,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=-1;
        __label__ = 10; break;
      case 4: // $24
        var $25=HEAP[$2];
        var $26=HEAP[$3];
        var $27=HEAP[$4];
        _lua_xmove($25, $26, $27);
        var $28=HEAP[$2];
        var $29=HEAP[$3];
        _lua_setlevel($28, $29);
        var $30=HEAP[$3];
        var $31=HEAP[$4];
        var $32=_lua_resume($30, $31);
        HEAP[$status]=$32;
        var $33=HEAP[$status];
        var $34=((($33))|0)==0;
        if ($34) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $35
        var $36=HEAP[$status];
        var $37=((($36))|0)==1;
        if ($37) { __label__ = 6; break; } else { __label__ = 9; break; }
      case 6: // $38
        var $39=HEAP[$3];
        var $40=_lua_gettop($39);
        HEAP[$nres]=$40;
        var $41=HEAP[$2];
        var $42=HEAP[$nres];
        var $43=((($42) + 1)&4294967295);
        var $44=_lua_checkstack($41, $43);
        var $45=((($44))|0)!=0;
        if ($45) { __label__ = 8; break; } else { __label__ = 7; break; }
      case 7: // $46
        var $47=HEAP[$2];
        var $48=_luaL_error($47, ((__str936)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 8; break;
      case 8: // $49
        var $50=HEAP[$3];
        var $51=HEAP[$2];
        var $52=HEAP[$nres];
        _lua_xmove($50, $51, $52);
        var $53=HEAP[$nres];
        HEAP[$1]=$53;
        __label__ = 10; break;
      case 9: // $54
        var $55=HEAP[$3];
        var $56=HEAP[$2];
        _lua_xmove($55, $56, 1);
        HEAP[$1]=-1;
        __label__ = 10; break;
      case 10: // $57
        var $58=HEAP[$1];
        STACKTOP = __stackBase__;
        return $58;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _costatus($L, $co) {
    var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 112);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $ar=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$co;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=((($4))|0)==((($5))|0);
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        HEAP[$1]=0;
        __label__ = 10; break;
      case 2: // $8
        var $9=HEAP[$3];
        var $10=_lua_status($9);
        if ($10 == 1) {
          __label__ = 3; break;
        }
        else if ($10 == 0) {
          __label__ = 4; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 3: // $11
        HEAP[$1]=1;
        __label__ = 10; break;
      case 4: // $12
        var $13=HEAP[$3];
        var $14=_lua_getstack($13, 0, $ar);
        var $15=((($14))|0) > 0;
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $16
        HEAP[$1]=2;
        __label__ = 10; break;
      case 6: // $17
        var $18=HEAP[$3];
        var $19=_lua_gettop($18);
        var $20=((($19))|0)==0;
        if ($20) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $21
        HEAP[$1]=3;
        __label__ = 10; break;
      case 8: // $22
        HEAP[$1]=1;
        __label__ = 10; break;
      case 9: // $23
        HEAP[$1]=3;
        __label__ = 10; break;
      case 10: // $24
        var $25=HEAP[$1];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _auxopen($L, $name, $f, $u) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$name;
    HEAP[$3]=$f;
    HEAP[$4]=$u;
    var $5=HEAP[$1];
    var $6=HEAP[$4];
    _lua_pushcclosure($5, $6, 0);
    var $7=HEAP[$1];
    var $8=HEAP[$3];
    _lua_pushcclosure($7, $8, 1);
    var $9=HEAP[$1];
    var $10=HEAP[$2];
    _lua_setfield($9, -2, $10);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaB_ipairs($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checktype($2, 1, 5);
    var $3=HEAP[$1];
    _lua_pushvalue($3, -10003);
    var $4=HEAP[$1];
    _lua_pushvalue($4, 1);
    var $5=HEAP[$1];
    _lua_pushinteger($5, 0);
    STACKTOP = __stackBase__;
    return 3;
  }
  

  function _ipairsaux($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $i=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checkinteger($2, 2);
    HEAP[$i]=$3;
    var $4=HEAP[$1];
    _luaL_checktype($4, 1, 5);
    var $5=HEAP[$i];
    var $6=((($5) + 1)&4294967295);
    HEAP[$i]=$6;
    var $7=HEAP[$1];
    var $8=HEAP[$i];
    _lua_pushinteger($7, $8);
    var $9=HEAP[$1];
    var $10=HEAP[$i];
    _lua_rawgeti($9, 1, $10);
    var $11=HEAP[$1];
    var $12=_lua_type($11, -1);
    var $13=((($12))|0)==0;
    var $14=($13) ? 0 : 2;
    STACKTOP = __stackBase__;
    return $14;
  }
  

  function _luaB_pairs($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checktype($2, 1, 5);
    var $3=HEAP[$1];
    _lua_pushvalue($3, -10003);
    var $4=HEAP[$1];
    _lua_pushvalue($4, 1);
    var $5=HEAP[$1];
    _lua_pushnil($5);
    STACKTOP = __stackBase__;
    return 3;
  }
  

  function _luaB_next($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checktype($3, 1, 5);
        var $4=HEAP[$2];
        _lua_settop($4, 2);
        var $5=HEAP[$2];
        var $6=_lua_next($5, 1);
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        HEAP[$1]=2;
        __label__ = 3; break;
      case 2: // $9
        var $10=HEAP[$2];
        _lua_pushnil($10);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 3: // $11
        var $12=HEAP[$1];
        STACKTOP = __stackBase__;
        return $12;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_newproxy($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $validproxy=__stackBase__+8;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _lua_settop($3, 1);
        var $4=HEAP[$2];
        var $5=_lua_newuserdata($4, 0);
        var $6=HEAP[$2];
        var $7=_lua_toboolean($6, 1);
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        HEAP[$1]=1;
        __label__ = 11; break;
      case 2: // $10
        var $11=HEAP[$2];
        var $12=_lua_type($11, 1);
        var $13=((($12))|0)==1;
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $14
        var $15=HEAP[$2];
        _lua_createtable($15, 0, 0);
        var $16=HEAP[$2];
        _lua_pushvalue($16, -1);
        var $17=HEAP[$2];
        _lua_pushboolean($17, 1);
        var $18=HEAP[$2];
        _lua_rawset($18, -10003);
        __label__ = 9; break;
      case 4: // $19
        HEAP[$validproxy]=0;
        var $20=HEAP[$2];
        var $21=_lua_getmetatable($20, 1);
        var $22=((($21))|0)!=0;
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $23
        var $24=HEAP[$2];
        _lua_rawget($24, -10003);
        var $25=HEAP[$2];
        var $26=_lua_toboolean($25, -1);
        HEAP[$validproxy]=$26;
        var $27=HEAP[$2];
        _lua_settop($27, -2);
        __label__ = 6; break;
      case 6: // $28
        var $29=HEAP[$validproxy];
        var $30=((($29))|0)!=0;
        if ($30) { __lastLabel__ = 6; __label__ = 8; break; } else { __lastLabel__ = 6; __label__ = 7; break; }
      case 7: // $31
        var $32=HEAP[$2];
        var $33=_luaL_argerror($32, 1, ((__str2350)&4294967295));
        var $34=((($33))|0)!=0;
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $35
        var $36=__lastLabel__ == 6 ? 1 : ($34);
        var $37=unSign(($36), 1, 0);
        var $38=HEAP[$2];
        var $39=_lua_getmetatable($38, 1);
        __label__ = 9; break;
      case 9: // $40
        __label__ = 10; break;
      case 10: // $41
        var $42=HEAP[$2];
        var $43=_lua_setmetatable($42, 2);
        HEAP[$1]=1;
        __label__ = 11; break;
      case 11: // $44
        var $45=HEAP[$1];
        STACKTOP = __stackBase__;
        return $45;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_assert($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checkany($3, 1);
        var $4=HEAP[$2];
        var $5=_lua_toboolean($4, 1);
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $7
        var $8=HEAP[$2];
        var $9=HEAP[$2];
        var $10=_luaL_optlstring($9, 2, ((__str78)&4294967295), 0);
        var $11=_luaL_error($8, ((__str77)&4294967295), allocate([$10,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$11;
        __label__ = 3; break;
      case 2: // $12
        var $13=HEAP[$2];
        var $14=_lua_gettop($13);
        HEAP[$1]=$14;
        __label__ = 3; break;
      case 3: // $15
        var $16=HEAP[$1];
        STACKTOP = __stackBase__;
        return $16;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_collectgarbage($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        var $ex=__stackBase__+12;
        var $res=__stackBase__+16;
        var $b=__stackBase__+20;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_checkoption($3, 1, ((__str72)&4294967295), ((_luaB_collectgarbage_opts)&4294967295));
        HEAP[$o]=$4;
        var $5=HEAP[$2];
        var $6=_luaL_optinteger($5, 2, 0);
        HEAP[$ex]=$6;
        var $7=HEAP[$2];
        var $8=HEAP[$o];
        var $9=((_luaB_collectgarbage_optsnum+$8*4)&4294967295);
        var $10=HEAP[$9];
        var $11=HEAP[$ex];
        var $12=_lua_gc($7, $10, $11);
        HEAP[$res]=$12;
        var $13=HEAP[$o];
        var $14=((_luaB_collectgarbage_optsnum+$13*4)&4294967295);
        var $15=HEAP[$14];
        if ($15 == 3) {
          __label__ = 1; break;
        }
        else if ($15 == 5) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $16
        var $17=HEAP[$2];
        var $18=_lua_gc($17, 4, 0);
        HEAP[$b]=$18;
        var $19=HEAP[$2];
        var $20=HEAP[$res];
        var $21=((($20))|0);
        var $22=HEAP[$b];
        var $23=((($22))|0);
        var $24=($23) / 1024;
        var $25=($21) + ($24);
        _lua_pushnumber($19, $25);
        HEAP[$1]=1;
        __label__ = 4; break;
      case 2: // $26
        var $27=HEAP[$2];
        var $28=HEAP[$res];
        _lua_pushboolean($27, $28);
        HEAP[$1]=1;
        __label__ = 4; break;
      case 3: // $29
        var $30=HEAP[$2];
        var $31=HEAP[$res];
        var $32=((($31))|0);
        _lua_pushnumber($30, $32);
        HEAP[$1]=1;
        __label__ = 4; break;
      case 4: // $33
        var $34=HEAP[$1];
        STACKTOP = __stackBase__;
        return $34;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_dofile($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $fname=__stackBase__+4;
        var $n=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_optlstring($2, 1, 0, 0);
        HEAP[$fname]=$3;
        var $4=HEAP[$1];
        var $5=_lua_gettop($4);
        HEAP[$n]=$5;
        var $6=HEAP[$1];
        var $7=HEAP[$fname];
        var $8=_luaL_loadfile($6, $7);
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$1];
        var $12=_lua_error($11);
        __label__ = 2; break;
      case 2: // $13
        var $14=HEAP[$1];
        _lua_call($14, 0, -1);
        var $15=HEAP[$1];
        var $16=_lua_gettop($15);
        var $17=HEAP[$n];
        var $18=((($16) - ($17))&4294967295);
        STACKTOP = __stackBase__;
        return $18;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_error($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $level=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_optinteger($2, 2, 1);
        HEAP[$level]=$3;
        var $4=HEAP[$1];
        _lua_settop($4, 1);
        var $5=HEAP[$1];
        var $6=_lua_isstring($5, 1);
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $8
        var $9=HEAP[$level];
        var $10=((($9))|0) > 0;
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$level];
        _luaL_where($12, $13);
        var $14=HEAP[$1];
        _lua_pushvalue($14, 1);
        var $15=HEAP[$1];
        _lua_concat($15, 2);
        __label__ = 3; break;
      case 3: // $16
        var $17=HEAP[$1];
        var $18=_lua_error($17);
        STACKTOP = __stackBase__;
        return $18;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_gcinfo($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_lua_gc($3, 3, 0);
    _lua_pushinteger($2, $4);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _luaB_getfenv($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        _getfunc($2, 1);
        var $3=HEAP[$1];
        var $4=_lua_iscfunction($3, -1);
        var $5=((($4))|0)!=0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$1];
        _lua_pushvalue($7, -10002);
        __label__ = 3; break;
      case 2: // $8
        var $9=HEAP[$1];
        _lua_getfenv($9, -1);
        __label__ = 3; break;
      case 3: // $10
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_getmetatable($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checkany($3, 1);
        var $4=HEAP[$2];
        var $5=_lua_getmetatable($4, 1);
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $7
        var $8=HEAP[$2];
        _lua_pushnil($8);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 2: // $9
        var $10=HEAP[$2];
        var $11=_luaL_getmetafield($10, 1, ((__str56)&4294967295));
        HEAP[$1]=1;
        __label__ = 3; break;
      case 3: // $12
        var $13=HEAP[$1];
        STACKTOP = __stackBase__;
        return $13;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_loadfile($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $fname=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_optlstring($2, 1, 0, 0);
    HEAP[$fname]=$3;
    var $4=HEAP[$1];
    var $5=HEAP[$1];
    var $6=HEAP[$fname];
    var $7=_luaL_loadfile($5, $6);
    var $8=_load_aux($4, $7);
    STACKTOP = __stackBase__;
    return $8;
  }
  

  function _luaB_load($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $status=__stackBase__+4;
    var $cname=__stackBase__+8;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_optlstring($2, 2, ((__str67)&4294967295), 0);
    HEAP[$cname]=$3;
    var $4=HEAP[$1];
    _luaL_checktype($4, 1, 6);
    var $5=HEAP[$1];
    _lua_settop($5, 3);
    var $6=HEAP[$1];
    var $7=HEAP[$cname];
    var $8=_lua_load($6, 26, 0, $7);
    HEAP[$status]=$8;
    var $9=HEAP[$1];
    var $10=HEAP[$status];
    var $11=_load_aux($9, $10);
    STACKTOP = __stackBase__;
    return $11;
  }
  

  function _luaB_loadstring($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $l=__stackBase__+4;
    var $s=__stackBase__+8;
    var $chunkname=__stackBase__+12;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checklstring($2, 1, $l);
    HEAP[$s]=$3;
    var $4=HEAP[$1];
    var $5=HEAP[$s];
    var $6=_luaL_optlstring($4, 2, $5, 0);
    HEAP[$chunkname]=$6;
    var $7=HEAP[$1];
    var $8=HEAP[$1];
    var $9=HEAP[$s];
    var $10=HEAP[$l];
    var $11=HEAP[$chunkname];
    var $12=_luaL_loadbuffer($8, $9, $10, $11);
    var $13=_load_aux($7, $12);
    STACKTOP = __stackBase__;
    return $13;
  }
  

  function _luaB_pcall($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $status=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checkany($2, 1);
    var $3=HEAP[$1];
    var $4=HEAP[$1];
    var $5=_lua_gettop($4);
    var $6=((($5) - 1)&4294967295);
    var $7=_lua_pcall($3, $6, -1, 0);
    HEAP[$status]=$7;
    var $8=HEAP[$1];
    var $9=HEAP[$status];
    var $10=((($9))|0)==0;
    var $11=unSign(($10), 1, 0);
    _lua_pushboolean($8, $11);
    var $12=HEAP[$1];
    _lua_insert($12, 1);
    var $13=HEAP[$1];
    var $14=_lua_gettop($13);
    STACKTOP = __stackBase__;
    return $14;
  }
  

  function _luaB_print($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $n=__stackBase__+8;
        var $i=__stackBase__+12;
        var $s=__stackBase__+16;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_lua_gettop($3);
        HEAP[$n]=$4;
        var $5=HEAP[$2];
        _lua_getfield($5, -10002, ((__str44)&4294967295));
        HEAP[$i]=1;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$i];
        var $8=HEAP[$n];
        var $9=((($7))|0) <= ((($8))|0);
        if ($9) { __label__ = 2; break; } else { __label__ = 8; break; }
      case 2: // $10
        var $11=HEAP[$2];
        _lua_pushvalue($11, -1);
        var $12=HEAP[$2];
        var $13=HEAP[$i];
        _lua_pushvalue($12, $13);
        var $14=HEAP[$2];
        _lua_call($14, 1, 1);
        var $15=HEAP[$2];
        var $16=_lua_tolstring($15, -1, 0);
        HEAP[$s]=$16;
        var $17=HEAP[$s];
        var $18=((($17))|0)==0;
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $19
        var $20=HEAP[$2];
        var $21=_luaL_error($20, ((__str64)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$21;
        __label__ = 9; break;
      case 4: // $22
        var $23=HEAP[$i];
        var $24=((($23))|0) > 1;
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $25
        var $26=HEAP[_stdout];
        var $27=_fputs(((__str65)&4294967295), $26);
        __label__ = 6; break;
      case 6: // $28
        var $29=HEAP[$s];
        var $30=HEAP[_stdout];
        var $31=_fputs($29, $30);
        var $32=HEAP[$2];
        _lua_settop($32, -2);
        __label__ = 7; break;
      case 7: // $33
        var $34=HEAP[$i];
        var $35=((($34) + 1)&4294967295);
        HEAP[$i]=$35;
        __label__ = 1; break;
      case 8: // $36
        var $37=HEAP[_stdout];
        var $38=_fputs(((__str66)&4294967295), $37);
        HEAP[$1]=0;
        __label__ = 9; break;
      case 9: // $39
        var $40=HEAP[$1];
        STACKTOP = __stackBase__;
        return $40;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_rawequal($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checkany($2, 1);
    var $3=HEAP[$1];
    _luaL_checkany($3, 2);
    var $4=HEAP[$1];
    var $5=HEAP[$1];
    var $6=_lua_rawequal($5, 1, 2);
    _lua_pushboolean($4, $6);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _luaB_rawget($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checktype($2, 1, 5);
    var $3=HEAP[$1];
    _luaL_checkany($3, 2);
    var $4=HEAP[$1];
    _lua_settop($4, 2);
    var $5=HEAP[$1];
    _lua_rawget($5, 1);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _luaB_rawset($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checktype($2, 1, 5);
    var $3=HEAP[$1];
    _luaL_checkany($3, 2);
    var $4=HEAP[$1];
    _luaL_checkany($4, 3);
    var $5=HEAP[$1];
    _lua_settop($5, 3);
    var $6=HEAP[$1];
    _lua_rawset($6, 1);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _luaB_select($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $n=__stackBase__+8;
        var $i=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_lua_gettop($3);
        HEAP[$n]=$4;
        var $5=HEAP[$2];
        var $6=_lua_type($5, 1);
        var $7=((($6))|0)==4;
        if ($7) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $8
        var $9=HEAP[$2];
        var $10=_lua_tolstring($9, 1, 0);
        var $11=HEAP[$10];
        var $12=reSign(($11), 8, 0);
        var $13=((($12))|0)==35;
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $14
        var $15=HEAP[$2];
        var $16=HEAP[$n];
        var $17=((($16) - 1)&4294967295);
        _lua_pushinteger($15, $17);
        HEAP[$1]=1;
        __label__ = 11; break;
      case 3: // $18
        var $19=HEAP[$2];
        var $20=_luaL_checkinteger($19, 1);
        HEAP[$i]=$20;
        var $21=HEAP[$i];
        var $22=((($21))|0) < 0;
        if ($22) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $23
        var $24=HEAP[$n];
        var $25=HEAP[$i];
        var $26=((($24) + ($25))&4294967295);
        HEAP[$i]=$26;
        __label__ = 8; break;
      case 5: // $27
        var $28=HEAP[$i];
        var $29=HEAP[$n];
        var $30=((($28))|0) > ((($29))|0);
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $31
        var $32=HEAP[$n];
        HEAP[$i]=$32;
        __label__ = 7; break;
      case 7: // $33
        __label__ = 8; break;
      case 8: // $34
        var $35=HEAP[$i];
        var $36=1 <= ((($35))|0);
        if ($36) { __lastLabel__ = 8; __label__ = 10; break; } else { __lastLabel__ = 8; __label__ = 9; break; }
      case 9: // $37
        var $38=HEAP[$2];
        var $39=_luaL_argerror($38, 1, ((__str63)&4294967295));
        var $40=((($39))|0)!=0;
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $41
        var $42=__lastLabel__ == 8 ? 1 : ($40);
        var $43=unSign(($42), 1, 0);
        var $44=HEAP[$n];
        var $45=HEAP[$i];
        var $46=((($44) - ($45))&4294967295);
        HEAP[$1]=$46;
        __label__ = 11; break;
      case 11: // $47
        var $48=HEAP[$1];
        STACKTOP = __stackBase__;
        return $48;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_setfenv($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checktype($3, 2, 5);
        var $4=HEAP[$2];
        _getfunc($4, 0);
        var $5=HEAP[$2];
        _lua_pushvalue($5, 2);
        var $6=HEAP[$2];
        var $7=_lua_isnumber($6, 1);
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $9
        var $10=HEAP[$2];
        var $11=_lua_tonumber($10, 1);
        var $12=($11) == 0;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$2];
        var $15=_lua_pushthread($14);
        var $16=HEAP[$2];
        _lua_insert($16, -2);
        var $17=HEAP[$2];
        var $18=_lua_setfenv($17, -2);
        HEAP[$1]=0;
        __label__ = 8; break;
      case 3: // $19
        var $20=HEAP[$2];
        var $21=_lua_iscfunction($20, -2);
        var $22=((($21))|0)!=0;
        if ($22) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $23
        var $24=HEAP[$2];
        var $25=_lua_setfenv($24, -2);
        var $26=((($25))|0)==0;
        if ($26) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $27
        var $28=HEAP[$2];
        var $29=_luaL_error($28, ((__str58)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 6; break;
      case 6: // $30
        __label__ = 7; break;
      case 7: // $31
        HEAP[$1]=1;
        __label__ = 8; break;
      case 8: // $32
        var $33=HEAP[$1];
        STACKTOP = __stackBase__;
        return $33;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_setmetatable($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $t=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_type($2, 2);
        HEAP[$t]=$3;
        var $4=HEAP[$1];
        _luaL_checktype($4, 1, 5);
        var $5=HEAP[$t];
        var $6=((($5))|0)==0;
        if ($6) { __lastLabel__ = 0; __label__ = 3; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $7
        var $8=HEAP[$t];
        var $9=((($8))|0)==5;
        if ($9) { __lastLabel__ = 1; __label__ = 3; break; } else { __lastLabel__ = 1; __label__ = 2; break; }
      case 2: // $10
        var $11=HEAP[$1];
        var $12=_luaL_argerror($11, 2, ((__str55)&4294967295));
        var $13=((($12))|0)!=0;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $14
        var $15=__lastLabel__ == 1 ? 1 : (__lastLabel__ == 0 ? 1 : ($13));
        var $16=unSign(($15), 1, 0);
        var $17=HEAP[$1];
        var $18=_luaL_getmetafield($17, 1, ((__str56)&4294967295));
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $20
        var $21=HEAP[$1];
        var $22=_luaL_error($21, ((__str57)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 5; break;
      case 5: // $23
        var $24=HEAP[$1];
        _lua_settop($24, 2);
        var $25=HEAP[$1];
        var $26=_lua_setmetatable($25, 1);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_tonumber($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $base=__stackBase__+8;
        var $s1=__stackBase__+12;
        var $s2=__stackBase__+16;
        var $n=__stackBase__+20;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_optinteger($3, 2, 10);
        HEAP[$base]=$4;
        var $5=HEAP[$base];
        var $6=((($5))|0)==10;
        if ($6) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $7
        var $8=HEAP[$2];
        _luaL_checkany($8, 1);
        var $9=HEAP[$2];
        var $10=_lua_isnumber($9, 1);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$2];
        var $15=_lua_tonumber($14, 1);
        _lua_pushnumber($13, $15);
        HEAP[$1]=1;
        __label__ = 16; break;
      case 3: // $16
        __label__ = 15; break;
      case 4: // $17
        var $18=HEAP[$2];
        var $19=_luaL_checklstring($18, 1, 0);
        HEAP[$s1]=$19;
        var $20=HEAP[$base];
        var $21=2 <= ((($20))|0);
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $22
        var $23=HEAP[$base];
        var $24=((($23))|0) <= 36;
        if ($24) { __lastLabel__ = 5; __label__ = 7; break; } else { __lastLabel__ = 5; __label__ = 6; break; }
      case 6: // $25
        var $26=HEAP[$2];
        var $27=_luaL_argerror($26, 2, ((__str54)&4294967295));
        var $28=((($27))|0)!=0;
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $29
        var $30=__lastLabel__ == 5 ? 1 : ($28);
        var $31=unSign(($30), 1, 0);
        var $32=HEAP[$s1];
        var $33=HEAP[$base];
        var $34=_strtoul($32, $s2, $33);
        HEAP[$n]=$34;
        var $35=HEAP[$s1];
        var $36=HEAP[$s2];
        var $37=((($35))|0)!=((($36))|0);
        if ($37) { __label__ = 8; break; } else { __label__ = 14; break; }
      case 8: // $38
        __label__ = 9; break;
      case 9: // $39
        var $40=HEAP[$s2];
        var $41=HEAP[$40];
        var $42=unSign(($41), 8, 0);
        var $43=___ctype_b_loc();
        var $44=HEAP[$43];
        var $45=(($44+2*$42)&4294967295);
        var $46=HEAP[$45];
        var $47=unSign(($46), 16, 0);
        var $48=($47) & 8192;
        var $49=((($48))|0)!=0;
        if ($49) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $50
        var $51=HEAP[$s2];
        var $52=(($51+1)&4294967295);
        HEAP[$s2]=$52;
        __label__ = 9; break;
      case 11: // $53
        var $54=HEAP[$s2];
        var $55=HEAP[$54];
        var $56=reSign(($55), 8, 0);
        var $57=((($56))|0)==0;
        if ($57) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $58
        var $59=HEAP[$2];
        var $60=HEAP[$n];
        var $61=((($60))>>>0);
        _lua_pushnumber($59, $61);
        HEAP[$1]=1;
        __label__ = 16; break;
      case 13: // $62
        __label__ = 14; break;
      case 14: // $63
        __label__ = 15; break;
      case 15: // $64
        var $65=HEAP[$2];
        _lua_pushnil($65);
        HEAP[$1]=1;
        __label__ = 16; break;
      case 16: // $66
        var $67=HEAP[$1];
        STACKTOP = __stackBase__;
        return $67;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_tostring($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checkany($3, 1);
        var $4=HEAP[$2];
        var $5=_luaL_callmeta($4, 1, ((__str49)&4294967295));
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        HEAP[$1]=1;
        __label__ = 12; break;
      case 2: // $8
        var $9=HEAP[$2];
        var $10=_lua_type($9, 1);
        if ($10 == 3) {
          __label__ = 3; break;
        }
        else if ($10 == 4) {
          __label__ = 4; break;
        }
        else if ($10 == 1) {
          __label__ = 5; break;
        }
        else if ($10 == 0) {
          __label__ = 9; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 3: // $11
        var $12=HEAP[$2];
        var $13=HEAP[$2];
        var $14=_lua_tolstring($13, 1, 0);
        _lua_pushstring($12, $14);
        __label__ = 11; break;
      case 4: // $15
        var $16=HEAP[$2];
        _lua_pushvalue($16, 1);
        __label__ = 11; break;
      case 5: // $17
        var $18=HEAP[$2];
        var $19=HEAP[$2];
        var $20=_lua_toboolean($19, 1);
        var $21=((($20))|0)!=0;
        if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $22
        __lastLabel__ = 6; __label__ = 8; break;
      case 7: // $23
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $24
        var $25=__lastLabel__ == 6 ? ((__str50)&4294967295) : (((__str51)&4294967295));
        _lua_pushstring($18, $25);
        __label__ = 11; break;
      case 9: // $26
        var $27=HEAP[$2];
        _lua_pushlstring($27, ((__str52)&4294967295), 3);
        __label__ = 11; break;
      case 10: // $28
        var $29=HEAP[$2];
        var $30=HEAP[$2];
        var $31=HEAP[$2];
        var $32=_lua_type($31, 1);
        var $33=_lua_typename($30, $32);
        var $34=HEAP[$2];
        var $35=_lua_topointer($34, 1);
        var $36=_lua_pushfstring($29, ((__str53)&4294967295), allocate([$33,0,0,0,$35,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 11; break;
      case 11: // $37
        HEAP[$1]=1;
        __label__ = 12; break;
      case 12: // $38
        var $39=HEAP[$1];
        STACKTOP = __stackBase__;
        return $39;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_type($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checkany($2, 1);
    var $3=HEAP[$1];
    var $4=HEAP[$1];
    var $5=HEAP[$1];
    var $6=_lua_type($5, 1);
    var $7=_lua_typename($4, $6);
    _lua_pushstring($3, $7);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _luaB_unpack($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $e=__stackBase__+12;
        var $n=__stackBase__+16;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checktype($3, 1, 5);
        var $4=HEAP[$2];
        var $5=_luaL_optinteger($4, 2, 1);
        HEAP[$i]=$5;
        var $6=HEAP[$2];
        var $7=_lua_type($6, 3);
        var $8=((($7))|0) <= 0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$2];
        var $11=_lua_objlen($10, 1);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $12
        var $13=HEAP[$2];
        var $14=_luaL_checkinteger($13, 3);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $15
        var $16=__lastLabel__ == 1 ? $11 : ($14);
        HEAP[$e]=$16;
        var $17=HEAP[$i];
        var $18=HEAP[$e];
        var $19=((($17))|0) > ((($18))|0);
        if ($19) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $20
        HEAP[$1]=0;
        __label__ = 12; break;
      case 5: // $21
        var $22=HEAP[$e];
        var $23=HEAP[$i];
        var $24=((($22) - ($23))&4294967295);
        var $25=((($24) + 1)&4294967295);
        HEAP[$n]=$25;
        var $26=HEAP[$n];
        var $27=((($26))|0) <= 0;
        if ($27) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $28
        var $29=HEAP[$2];
        var $30=HEAP[$n];
        var $31=_lua_checkstack($29, $30);
        var $32=((($31))|0)!=0;
        if ($32) { __label__ = 8; break; } else { __label__ = 7; break; }
      case 7: // $33
        var $34=HEAP[$2];
        var $35=_luaL_error($34, ((__str4856)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$35;
        __label__ = 12; break;
      case 8: // $36
        var $37=HEAP[$2];
        var $38=HEAP[$i];
        _lua_rawgeti($37, 1, $38);
        __label__ = 9; break;
      case 9: // $39
        var $40=HEAP[$i];
        var $41=((($40) + 1)&4294967295);
        HEAP[$i]=$41;
        var $42=HEAP[$e];
        var $43=((($40))|0) < ((($42))|0);
        if ($43) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $44
        var $45=HEAP[$2];
        var $46=HEAP[$i];
        _lua_rawgeti($45, 1, $46);
        __label__ = 9; break;
      case 11: // $47
        var $48=HEAP[$n];
        HEAP[$1]=$48;
        __label__ = 12; break;
      case 12: // $49
        var $50=HEAP[$1];
        STACKTOP = __stackBase__;
        return $50;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaB_xpcall($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $status=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checkany($2, 2);
    var $3=HEAP[$1];
    _lua_settop($3, 2);
    var $4=HEAP[$1];
    _lua_insert($4, 1);
    var $5=HEAP[$1];
    var $6=_lua_pcall($5, 0, -1, 1);
    HEAP[$status]=$6;
    var $7=HEAP[$1];
    var $8=HEAP[$status];
    var $9=((($8))|0)==0;
    var $10=unSign(($9), 1, 0);
    _lua_pushboolean($7, $10);
    var $11=HEAP[$1];
    _lua_replace($11, 1);
    var $12=HEAP[$1];
    var $13=_lua_gettop($12);
    STACKTOP = __stackBase__;
    return $13;
  }
  

  function _getfunc($L, $opt) {
    var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 112);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $ar=__stackBase__+8;
        var $level=__stackBase__+108;
        HEAP[$1]=$L;
        HEAP[$2]=$opt;
        var $3=HEAP[$1];
        var $4=_lua_type($3, 1);
        var $5=((($4))|0)==6;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$1];
        _lua_pushvalue($7, 1);
        __label__ = 12; break;
      case 2: // $8
        var $9=HEAP[$2];
        var $10=((($9))|0)!=0;
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $11
        var $12=HEAP[$1];
        var $13=_luaL_optinteger($12, 1, 1);
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $14
        var $15=HEAP[$1];
        var $16=_luaL_checkinteger($15, 1);
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $17
        var $18=__lastLabel__ == 3 ? $13 : ($16);
        HEAP[$level]=$18;
        var $19=HEAP[$level];
        var $20=((($19))|0) >= 0;
        if ($20) { __lastLabel__ = 5; __label__ = 7; break; } else { __lastLabel__ = 5; __label__ = 6; break; }
      case 6: // $21
        var $22=HEAP[$1];
        var $23=_luaL_argerror($22, 1, ((__str59)&4294967295));
        var $24=((($23))|0)!=0;
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $25
        var $26=__lastLabel__ == 5 ? 1 : ($24);
        var $27=unSign(($26), 1, 0);
        var $28=HEAP[$1];
        var $29=HEAP[$level];
        var $30=_lua_getstack($28, $29, $ar);
        var $31=((($30))|0)==0;
        if ($31) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $32
        var $33=HEAP[$1];
        var $34=_luaL_argerror($33, 1, ((__str60)&4294967295));
        __label__ = 9; break;
      case 9: // $35
        var $36=HEAP[$1];
        var $37=_lua_getinfo($36, ((__str61)&4294967295), $ar);
        var $38=HEAP[$1];
        var $39=_lua_type($38, -1);
        var $40=((($39))|0)==0;
        if ($40) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $41
        var $42=HEAP[$1];
        var $43=HEAP[$level];
        var $44=_luaL_error($42, ((__str62)&4294967295), allocate([$43,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 11; break;
      case 11: // $45
        __label__ = 12; break;
      case 12: // $46
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_aux($L, $status) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$L;
        HEAP[$3]=$status;
        var $4=HEAP[$3];
        var $5=((($4))|0)==0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        HEAP[$1]=1;
        __label__ = 3; break;
      case 2: // $7
        var $8=HEAP[$2];
        _lua_pushnil($8);
        var $9=HEAP[$2];
        _lua_insert($9, -2);
        HEAP[$1]=2;
        __label__ = 3; break;
      case 3: // $10
        var $11=HEAP[$1];
        STACKTOP = __stackBase__;
        return $11;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _generic_reader($L, $ud, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$ud;
        HEAP[$4]=$size;
        var $5=HEAP[$3];
        var $6=HEAP[$2];
        _luaL_checkstack($6, 2, ((__str68)&4294967295));
        var $7=HEAP[$2];
        _lua_pushvalue($7, 1);
        var $8=HEAP[$2];
        _lua_call($8, 0, 1);
        var $9=HEAP[$2];
        var $10=_lua_type($9, -1);
        var $11=((($10))|0)==0;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$4];
        HEAP[$13]=0;
        HEAP[$1]=0;
        __label__ = 7; break;
      case 2: // $14
        var $15=HEAP[$2];
        var $16=_lua_isstring($15, -1);
        var $17=((($16))|0)!=0;
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $18
        var $19=HEAP[$2];
        _lua_replace($19, 3);
        var $20=HEAP[$2];
        var $21=HEAP[$4];
        var $22=_lua_tolstring($20, 3, $21);
        HEAP[$1]=$22;
        __label__ = 7; break;
      case 4: // $23
        var $24=HEAP[$2];
        var $25=_luaL_error($24, ((__str69)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 5; break;
      case 5: // $26
        __label__ = 6; break;
      case 6: // $27
        HEAP[$1]=0;
        __label__ = 7; break;
      case 7: // $28
        var $29=HEAP[$1];
        STACKTOP = __stackBase__;
        return $29;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_nil($fs, $from, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $previous=__stackBase__+12;
        var $pfrom=__stackBase__+16;
        var $pto=__stackBase__+20;
        HEAP[$1]=$fs;
        HEAP[$2]=$from;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=(($4+24)&4294967295);
        var $6=HEAP[$5];
        var $7=HEAP[$1];
        var $8=(($7+28)&4294967295);
        var $9=HEAP[$8];
        var $10=((($6))|0) > ((($9))|0);
        if ($10) { __label__ = 1; break; } else { __label__ = 14; break; }
      case 1: // $11
        var $12=HEAP[$1];
        var $13=(($12+24)&4294967295);
        var $14=HEAP[$13];
        var $15=((($14))|0)==0;
        if ($15) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $16
        var $17=HEAP[$2];
        var $18=HEAP[$1];
        var $19=(($18+50)&4294967295);
        var $20=HEAP[$19];
        var $21=unSign(($20), 8, 0);
        var $22=((($17))|0) >= ((($21))|0);
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $23
        __label__ = 15; break;
      case 4: // $24
        __label__ = 13; break;
      case 5: // $25
        var $26=HEAP[$1];
        var $27=(($26+24)&4294967295);
        var $28=HEAP[$27];
        var $29=((($28) - 1)&4294967295);
        var $30=HEAP[$1];
        var $31=(($30)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+12)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+4*$29)&4294967295);
        HEAP[$previous]=$35;
        var $36=HEAP[$previous];
        var $37=HEAP[$36];
        var $38=((($37))>>>0) >>> 0;
        var $39=($38) & 63;
        var $40=((($39))|0)==3;
        if ($40) { __label__ = 6; break; } else { __label__ = 12; break; }
      case 6: // $41
        var $42=HEAP[$previous];
        var $43=HEAP[$42];
        var $44=((($43))>>>0) >>> 6;
        var $45=($44) & 255;
        HEAP[$pfrom]=$45;
        var $46=HEAP[$previous];
        var $47=HEAP[$46];
        var $48=((($47))>>>0) >>> 23;
        var $49=($48) & 511;
        HEAP[$pto]=$49;
        var $50=HEAP[$pfrom];
        var $51=HEAP[$2];
        var $52=((($50))|0) <= ((($51))|0);
        if ($52) { __label__ = 7; break; } else { __label__ = 11; break; }
      case 7: // $53
        var $54=HEAP[$2];
        var $55=HEAP[$pto];
        var $56=((($55) + 1)&4294967295);
        var $57=((($54))|0) <= ((($56))|0);
        if ($57) { __label__ = 8; break; } else { __label__ = 11; break; }
      case 8: // $58
        var $59=HEAP[$2];
        var $60=HEAP[$3];
        var $61=((($59) + ($60))&4294967295);
        var $62=((($61) - 1)&4294967295);
        var $63=HEAP[$pto];
        var $64=((($62))|0) > ((($63))|0);
        if ($64) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $65
        var $66=HEAP[$previous];
        var $67=HEAP[$66];
        var $68=($67) & 8388607;
        var $69=HEAP[$2];
        var $70=HEAP[$3];
        var $71=((($69) + ($70))&4294967295);
        var $72=((($71) - 1)&4294967295);
        var $73=($72) << 23;
        var $74=($73) & -8388608;
        var $75=($68) | ($74);
        var $76=HEAP[$previous];
        HEAP[$76]=$75;
        __label__ = 10; break;
      case 10: // $77
        __label__ = 15; break;
      case 11: // $78
        __label__ = 12; break;
      case 12: // $79
        __label__ = 13; break;
      case 13: // $80
        __label__ = 14; break;
      case 14: // $81
        var $82=HEAP[$1];
        var $83=HEAP[$2];
        var $84=HEAP[$2];
        var $85=HEAP[$3];
        var $86=((($84) + ($85))&4294967295);
        var $87=((($86) - 1)&4294967295);
        var $88=_luaK_codeABC($82, 3, $83, $87, 0);
        __label__ = 15; break;
      case 15: // $89
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_codeABC($fs, $o, $a, $b, $c) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    var $5=__stackBase__+16;
    HEAP[$1]=$fs;
    HEAP[$2]=$o;
    HEAP[$3]=$a;
    HEAP[$4]=$b;
    HEAP[$5]=$c;
    var $6=HEAP[$1];
    var $7=HEAP[$2];
    var $8=($7) << 0;
    var $9=HEAP[$3];
    var $10=($9) << 6;
    var $11=($8) | ($10);
    var $12=HEAP[$4];
    var $13=($12) << 23;
    var $14=($11) | ($13);
    var $15=HEAP[$5];
    var $16=($15) << 14;
    var $17=($14) | ($16);
    var $18=HEAP[$1];
    var $19=(($18+12)&4294967295);
    var $20=HEAP[$19];
    var $21=(($20+8)&4294967295);
    var $22=HEAP[$21];
    var $23=_luaK_code($6, $17, $22);
    STACKTOP = __stackBase__;
    return $23;
  }
  

  function _luaK_jump($fs) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $jpc=__stackBase__+4;
    var $j=__stackBase__+8;
    HEAP[$1]=$fs;
    var $2=HEAP[$1];
    var $3=(($2+32)&4294967295);
    var $4=HEAP[$3];
    HEAP[$jpc]=$4;
    var $5=HEAP[$1];
    var $6=(($5+32)&4294967295);
    HEAP[$6]=-1;
    var $7=HEAP[$1];
    var $8=_luaK_codeABx($7, 22, 0, 131070);
    HEAP[$j]=$8;
    var $9=HEAP[$1];
    var $10=HEAP[$jpc];
    _luaK_concat($9, $j, $10);
    var $11=HEAP[$j];
    STACKTOP = __stackBase__;
    return $11;
  }
  

  function _luaK_codeABx($fs, $o, $a, $bc) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    HEAP[$1]=$fs;
    HEAP[$2]=$o;
    HEAP[$3]=$a;
    HEAP[$4]=$bc;
    var $5=HEAP[$1];
    var $6=HEAP[$2];
    var $7=($6) << 0;
    var $8=HEAP[$3];
    var $9=($8) << 6;
    var $10=($7) | ($9);
    var $11=HEAP[$4];
    var $12=($11) << 14;
    var $13=($10) | ($12);
    var $14=HEAP[$1];
    var $15=(($14+12)&4294967295);
    var $16=HEAP[$15];
    var $17=(($16+8)&4294967295);
    var $18=HEAP[$17];
    var $19=_luaK_code($5, $13, $18);
    STACKTOP = __stackBase__;
    return $19;
  }
  

  function _luaK_concat($fs, $l1, $l2) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $list=__stackBase__+12;
        var $next=__stackBase__+16;
        HEAP[$1]=$fs;
        HEAP[$2]=$l1;
        HEAP[$3]=$l2;
        var $4=HEAP[$3];
        var $5=((($4))|0)==-1;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        __label__ = 9; break;
      case 2: // $7
        var $8=HEAP[$2];
        var $9=HEAP[$8];
        var $10=((($9))|0)==-1;
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $11
        var $12=HEAP[$3];
        var $13=HEAP[$2];
        HEAP[$13]=$12;
        __label__ = 8; break;
      case 4: // $14
        var $15=HEAP[$2];
        var $16=HEAP[$15];
        HEAP[$list]=$16;
        __label__ = 5; break;
      case 5: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$list];
        var $20=_getjump($18, $19);
        HEAP[$next]=$20;
        var $21=((($20))|0)!=-1;
        if ($21) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $22
        var $23=HEAP[$next];
        HEAP[$list]=$23;
        __label__ = 5; break;
      case 7: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$list];
        var $27=HEAP[$3];
        _fixjump($25, $26, $27);
        __label__ = 8; break;
      case 8: // $28
        __label__ = 9; break;
      case 9: // $29
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_ret($fs, $first, $nret) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$fs;
    HEAP[$2]=$first;
    HEAP[$3]=$nret;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    var $6=HEAP[$3];
    var $7=((($6) + 1)&4294967295);
    var $8=_luaK_codeABC($4, 30, $5, $7, 0);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaK_getlabel($fs) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$fs;
    var $2=HEAP[$1];
    var $3=(($2+24)&4294967295);
    var $4=HEAP[$3];
    var $5=HEAP[$1];
    var $6=(($5+28)&4294967295);
    HEAP[$6]=$4;
    var $7=HEAP[$1];
    var $8=(($7+24)&4294967295);
    var $9=HEAP[$8];
    STACKTOP = __stackBase__;
    return $9;
  }
  

  function _luaK_patchlist($fs, $list, $target) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$fs;
        HEAP[$2]=$list;
        HEAP[$3]=$target;
        var $4=HEAP[$3];
        var $5=HEAP[$1];
        var $6=(($5+24)&4294967295);
        var $7=HEAP[$6];
        var $8=((($4))|0)==((($7))|0);
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$2];
        _luaK_patchtohere($10, $11);
        __label__ = 3; break;
      case 2: // $12
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=HEAP[$3];
        var $16=HEAP[$3];
        _patchlistaux($13, $14, $15, 255, $16);
        __label__ = 3; break;
      case 3: // $17
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_patchtohere($fs, $list) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$fs;
    HEAP[$2]=$list;
    var $3=HEAP[$1];
    var $4=_luaK_getlabel($3);
    var $5=HEAP[$1];
    var $6=HEAP[$1];
    var $7=(($6+32)&4294967295);
    var $8=HEAP[$2];
    _luaK_concat($5, $7, $8);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _patchlistaux($fs, $list, $vtarget, $reg, $dtarget) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $next=__stackBase__+20;
        HEAP[$1]=$fs;
        HEAP[$2]=$list;
        HEAP[$3]=$vtarget;
        HEAP[$4]=$reg;
        HEAP[$5]=$dtarget;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$2];
        var $8=((($7))|0)!=-1;
        if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$2];
        var $12=_getjump($10, $11);
        HEAP[$next]=$12;
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=HEAP[$4];
        var $16=_patchtestreg($13, $14, $15);
        var $17=((($16))|0)!=0;
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$2];
        var $21=HEAP[$3];
        _fixjump($19, $20, $21);
        __label__ = 5; break;
      case 4: // $22
        var $23=HEAP[$1];
        var $24=HEAP[$2];
        var $25=HEAP[$5];
        _fixjump($23, $24, $25);
        __label__ = 5; break;
      case 5: // $26
        var $27=HEAP[$next];
        HEAP[$2]=$27;
        __label__ = 1; break;
      case 6: // $28
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getjump($fs, $pc) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $offset=__stackBase__+12;
        HEAP[$2]=$fs;
        HEAP[$3]=$pc;
        var $4=HEAP[$3];
        var $5=HEAP[$2];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=(($7+12)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9+4*$4)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))>>>0) >>> 14;
        var $13=($12) & 262143;
        var $14=((($13) - 131071)&4294967295);
        HEAP[$offset]=$14;
        var $15=HEAP[$offset];
        var $16=((($15))|0)==-1;
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $17
        HEAP[$1]=-1;
        __label__ = 3; break;
      case 2: // $18
        var $19=HEAP[$3];
        var $20=((($19) + 1)&4294967295);
        var $21=HEAP[$offset];
        var $22=((($20) + ($21))&4294967295);
        HEAP[$1]=$22;
        __label__ = 3; break;
      case 3: // $23
        var $24=HEAP[$1];
        STACKTOP = __stackBase__;
        return $24;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fixjump($fs, $pc, $dest) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $jmp=__stackBase__+12;
        var $offset=__stackBase__+16;
        HEAP[$1]=$fs;
        HEAP[$2]=$pc;
        HEAP[$3]=$dest;
        var $4=HEAP[$2];
        var $5=HEAP[$1];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=(($7+12)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9+4*$4)&4294967295);
        HEAP[$jmp]=$10;
        var $11=HEAP[$3];
        var $12=HEAP[$2];
        var $13=((($12) + 1)&4294967295);
        var $14=((($11) - ($13))&4294967295);
        HEAP[$offset]=$14;
        var $15=HEAP[$offset];
        var $16=_abs($15);
        var $17=((($16))|0) > 131071;
        if ($17) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $18
        var $19=HEAP[$1];
        var $20=(($19+12)&4294967295);
        var $21=HEAP[$20];
        _luaX_syntaxerror($21, ((__str382)&4294967295));
        __label__ = 2; break;
      case 2: // $22
        var $23=HEAP[$jmp];
        var $24=HEAP[$23];
        var $25=($24) & 16383;
        var $26=HEAP[$offset];
        var $27=((($26) + 131071)&4294967295);
        var $28=($27) << 14;
        var $29=($28) & -16384;
        var $30=($25) | ($29);
        var $31=HEAP[$jmp];
        HEAP[$31]=$30;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_checkstack($fs, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $newstack=__stackBase__+8;
        HEAP[$1]=$fs;
        HEAP[$2]=$n;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        var $6=HEAP[$2];
        var $7=((($5) + ($6))&4294967295);
        HEAP[$newstack]=$7;
        var $8=HEAP[$newstack];
        var $9=HEAP[$1];
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11+75)&4294967295);
        var $13=HEAP[$12];
        var $14=unSign(($13), 8, 0);
        var $15=((($8))|0) > ((($14))|0);
        if ($15) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $16
        var $17=HEAP[$newstack];
        var $18=((($17))|0) >= 250;
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $19
        var $20=HEAP[$1];
        var $21=(($20+12)&4294967295);
        var $22=HEAP[$21];
        _luaX_syntaxerror($22, ((__str79)&4294967295));
        __label__ = 3; break;
      case 3: // $23
        var $24=HEAP[$newstack];
        var $25=((($24)) & 255);
        var $26=HEAP[$1];
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28+75)&4294967295);
        HEAP[$29]=$25;
        __label__ = 4; break;
      case 4: // $30
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_reserveregs($fs, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$fs;
    HEAP[$2]=$n;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    _luaK_checkstack($3, $4);
    var $5=HEAP[$2];
    var $6=HEAP[$1];
    var $7=(($6+36)&4294967295);
    var $8=HEAP[$7];
    var $9=((($8) + ($5))&4294967295);
    HEAP[$7]=$9;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaK_stringK($fs, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $o=__stackBase__+8;
    var $i_o=__stackBase__+20;
    HEAP[$1]=$fs;
    HEAP[$2]=$s;
    HEAP[$i_o]=$o;
    var $3=HEAP[$2];
    var $4=$3;
    var $5=HEAP[$i_o];
    var $6=(($5)&4294967295);
    var $7=$6;
    HEAP[$7]=$4;
    var $8=HEAP[$i_o];
    var $9=(($8+8)&4294967295);
    HEAP[$9]=4;
    var $10=HEAP[$1];
    var $11=_addk($10, $o, $o);
    STACKTOP = __stackBase__;
    return $11;
  }
  

  function _addk($fs, $k, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $L=__stackBase__+16;
        var $idx=__stackBase__+20;
        var $f=__stackBase__+24;
        var $oldsize=__stackBase__+28;
        var $i_o=__stackBase__+32;
        var $o2=__stackBase__+36;
        var $o1=__stackBase__+40;
        HEAP[$2]=$fs;
        HEAP[$3]=$k;
        HEAP[$4]=$v;
        var $5=HEAP[$2];
        var $6=(($5+16)&4294967295);
        var $7=HEAP[$6];
        HEAP[$L]=$7;
        var $8=HEAP[$L];
        var $9=HEAP[$2];
        var $10=(($9+4)&4294967295);
        var $11=HEAP[$10];
        var $12=HEAP[$3];
        var $13=_luaH_set($8, $11, $12);
        HEAP[$idx]=$13;
        var $14=HEAP[$2];
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        HEAP[$f]=$16;
        var $17=HEAP[$f];
        var $18=(($17+40)&4294967295);
        var $19=HEAP[$18];
        HEAP[$oldsize]=$19;
        var $20=HEAP[$idx];
        var $21=(($20+8)&4294967295);
        var $22=HEAP[$21];
        var $23=((($22))|0)==3;
        if ($23) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $24
        var $25=HEAP[$idx];
        var $26=(($25)&4294967295);
        var $27=$26;
        var $28=HEAP[$27];
        var $29=((($28))|0);
        HEAP[$1]=$29;
        __label__ = 12; break;
      case 2: // $30
        var $31=HEAP[$idx];
        HEAP[$i_o]=$31;
        var $32=HEAP[$2];
        var $33=(($32+40)&4294967295);
        var $34=HEAP[$33];
        var $35=((($34))|0);
        var $36=HEAP[$i_o];
        var $37=(($36)&4294967295);
        var $38=$37;
        HEAP[$38]=$35;
        var $39=HEAP[$i_o];
        var $40=(($39+8)&4294967295);
        HEAP[$40]=3;
        var $41=HEAP[$2];
        var $42=(($41+40)&4294967295);
        var $43=HEAP[$42];
        var $44=((($43) + 1)&4294967295);
        var $45=HEAP[$f];
        var $46=(($45+40)&4294967295);
        var $47=HEAP[$46];
        var $48=((($44))|0) > ((($47))|0);
        if ($48) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $49
        var $50=HEAP[$L];
        var $51=HEAP[$f];
        var $52=(($51+8)&4294967295);
        var $53=HEAP[$52];
        var $54=$53;
        var $55=HEAP[$f];
        var $56=(($55+40)&4294967295);
        var $57=_luaM_growaux_($50, $54, $56, 12, 262143, ((__str281)&4294967295));
        var $58=$57;
        var $59=HEAP[$f];
        var $60=(($59+8)&4294967295);
        HEAP[$60]=$58;
        __label__ = 4; break;
      case 4: // $61
        __label__ = 5; break;
      case 5: // $62
        var $63=HEAP[$oldsize];
        var $64=HEAP[$f];
        var $65=(($64+40)&4294967295);
        var $66=HEAP[$65];
        var $67=((($63))|0) < ((($66))|0);
        if ($67) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $68
        var $69=HEAP[$oldsize];
        var $70=((($69) + 1)&4294967295);
        HEAP[$oldsize]=$70;
        var $71=HEAP[$f];
        var $72=(($71+8)&4294967295);
        var $73=HEAP[$72];
        var $74=(($73+12*$69)&4294967295);
        var $75=(($74+8)&4294967295);
        HEAP[$75]=0;
        __label__ = 5; break;
      case 7: // $76
        var $77=HEAP[$4];
        HEAP[$o2]=$77;
        var $78=HEAP[$2];
        var $79=(($78+40)&4294967295);
        var $80=HEAP[$79];
        var $81=HEAP[$f];
        var $82=(($81+8)&4294967295);
        var $83=HEAP[$82];
        var $84=(($83+12*$80)&4294967295);
        HEAP[$o1]=$84;
        var $85=HEAP[$o1];
        var $86=(($85)&4294967295);
        var $87=HEAP[$o2];
        var $88=(($87)&4294967295);
        var $89=$86;
        var $90=$88;
        _llvm_memcpy_p0i8_p0i8_i32($89, $90, 8, 4, 0);
        var $91=HEAP[$o2];
        var $92=(($91+8)&4294967295);
        var $93=HEAP[$92];
        var $94=HEAP[$o1];
        var $95=(($94+8)&4294967295);
        HEAP[$95]=$93;
        var $96=HEAP[$4];
        var $97=(($96+8)&4294967295);
        var $98=HEAP[$97];
        var $99=((($98))|0) >= 4;
        if ($99) { __label__ = 8; break; } else { __label__ = 11; break; }
      case 8: // $100
        var $101=HEAP[$4];
        var $102=(($101)&4294967295);
        var $103=$102;
        var $104=HEAP[$103];
        var $105=$104;
        var $106=(($105+5)&4294967295);
        var $107=HEAP[$106];
        var $108=unSign(($107), 8, 0);
        var $109=($108) & 3;
        var $110=((($109))|0)!=0;
        if ($110) { __label__ = 9; break; } else { __label__ = 11; break; }
      case 9: // $111
        var $112=HEAP[$f];
        var $113=$112;
        var $114=$113;
        var $115=(($114+5)&4294967295);
        var $116=HEAP[$115];
        var $117=unSign(($116), 8, 0);
        var $118=($117) & 4;
        var $119=((($118))|0)!=0;
        if ($119) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $120
        var $121=HEAP[$L];
        var $122=HEAP[$f];
        var $123=$122;
        var $124=HEAP[$4];
        var $125=(($124)&4294967295);
        var $126=$125;
        var $127=HEAP[$126];
        _luaC_barrierf($121, $123, $127);
        __label__ = 11; break;
      case 11: // $128
        var $129=HEAP[$2];
        var $130=(($129+40)&4294967295);
        var $131=HEAP[$130];
        var $132=((($131) + 1)&4294967295);
        HEAP[$130]=$132;
        HEAP[$1]=$131;
        __label__ = 12; break;
      case 12: // $133
        var $134=HEAP[$1];
        STACKTOP = __stackBase__;
        return $134;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_numberK($fs, $r) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $o=__stackBase__+12;
    var $i_o=__stackBase__+24;
    HEAP[$1]=$fs;
    HEAP[$2]=$r;
    HEAP[$i_o]=$o;
    var $3=HEAP[$2];
    var $4=HEAP[$i_o];
    var $5=(($4)&4294967295);
    var $6=$5;
    HEAP[$6]=$3;
    var $7=HEAP[$i_o];
    var $8=(($7+8)&4294967295);
    HEAP[$8]=3;
    var $9=HEAP[$1];
    var $10=_addk($9, $o, $o);
    STACKTOP = __stackBase__;
    return $10;
  }
  

  function _luaK_setreturns($fs, $e, $nresults) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        HEAP[$3]=$nresults;
        var $4=HEAP[$2];
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==13;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$2];
        var $10=(($9+4)&4294967295);
        var $11=$10;
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        var $14=HEAP[$1];
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        var $17=(($16+12)&4294967295);
        var $18=HEAP[$17];
        var $19=(($18+4*$13)&4294967295);
        var $20=HEAP[$19];
        var $21=($20) & -8372225;
        var $22=HEAP[$3];
        var $23=((($22) + 1)&4294967295);
        var $24=($23) << 14;
        var $25=($24) & 8372224;
        var $26=($21) | ($25);
        var $27=HEAP[$2];
        var $28=(($27+4)&4294967295);
        var $29=$28;
        var $30=(($29)&4294967295);
        var $31=HEAP[$30];
        var $32=HEAP[$1];
        var $33=(($32)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+12)&4294967295);
        var $36=HEAP[$35];
        var $37=(($36+4*$31)&4294967295);
        HEAP[$37]=$26;
        __label__ = 5; break;
      case 2: // $38
        var $39=HEAP[$2];
        var $40=(($39)&4294967295);
        var $41=HEAP[$40];
        var $42=((($41))|0)==14;
        if ($42) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $43
        var $44=HEAP[$2];
        var $45=(($44+4)&4294967295);
        var $46=$45;
        var $47=(($46)&4294967295);
        var $48=HEAP[$47];
        var $49=HEAP[$1];
        var $50=(($49)&4294967295);
        var $51=HEAP[$50];
        var $52=(($51+12)&4294967295);
        var $53=HEAP[$52];
        var $54=(($53+4*$48)&4294967295);
        var $55=HEAP[$54];
        var $56=($55) & 8388607;
        var $57=HEAP[$3];
        var $58=((($57) + 1)&4294967295);
        var $59=($58) << 23;
        var $60=($59) & -8388608;
        var $61=($56) | ($60);
        var $62=HEAP[$2];
        var $63=(($62+4)&4294967295);
        var $64=$63;
        var $65=(($64)&4294967295);
        var $66=HEAP[$65];
        var $67=HEAP[$1];
        var $68=(($67)&4294967295);
        var $69=HEAP[$68];
        var $70=(($69+12)&4294967295);
        var $71=HEAP[$70];
        var $72=(($71+4*$66)&4294967295);
        HEAP[$72]=$61;
        var $73=HEAP[$2];
        var $74=(($73+4)&4294967295);
        var $75=$74;
        var $76=(($75)&4294967295);
        var $77=HEAP[$76];
        var $78=HEAP[$1];
        var $79=(($78)&4294967295);
        var $80=HEAP[$79];
        var $81=(($80+12)&4294967295);
        var $82=HEAP[$81];
        var $83=(($82+4*$77)&4294967295);
        var $84=HEAP[$83];
        var $85=($84) & -16321;
        var $86=HEAP[$1];
        var $87=(($86+36)&4294967295);
        var $88=HEAP[$87];
        var $89=($88) << 6;
        var $90=($89) & 16320;
        var $91=($85) | ($90);
        var $92=HEAP[$2];
        var $93=(($92+4)&4294967295);
        var $94=$93;
        var $95=(($94)&4294967295);
        var $96=HEAP[$95];
        var $97=HEAP[$1];
        var $98=(($97)&4294967295);
        var $99=HEAP[$98];
        var $100=(($99+12)&4294967295);
        var $101=HEAP[$100];
        var $102=(($101+4*$96)&4294967295);
        HEAP[$102]=$91;
        var $103=HEAP[$1];
        _luaK_reserveregs($103, 1);
        __label__ = 4; break;
      case 4: // $104
        __label__ = 5; break;
      case 5: // $105
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_setoneret($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)==13;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$2];
        var $9=(($8)&4294967295);
        HEAP[$9]=12;
        var $10=HEAP[$2];
        var $11=(($10+4)&4294967295);
        var $12=$11;
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=HEAP[$1];
        var $16=(($15)&4294967295);
        var $17=HEAP[$16];
        var $18=(($17+12)&4294967295);
        var $19=HEAP[$18];
        var $20=(($19+4*$14)&4294967295);
        var $21=HEAP[$20];
        var $22=((($21))>>>0) >>> 6;
        var $23=($22) & 255;
        var $24=HEAP[$2];
        var $25=(($24+4)&4294967295);
        var $26=$25;
        var $27=(($26)&4294967295);
        HEAP[$27]=$23;
        __label__ = 5; break;
      case 2: // $28
        var $29=HEAP[$2];
        var $30=(($29)&4294967295);
        var $31=HEAP[$30];
        var $32=((($31))|0)==14;
        if ($32) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $33
        var $34=HEAP[$2];
        var $35=(($34+4)&4294967295);
        var $36=$35;
        var $37=(($36)&4294967295);
        var $38=HEAP[$37];
        var $39=HEAP[$1];
        var $40=(($39)&4294967295);
        var $41=HEAP[$40];
        var $42=(($41+12)&4294967295);
        var $43=HEAP[$42];
        var $44=(($43+4*$38)&4294967295);
        var $45=HEAP[$44];
        var $46=($45) & 8388607;
        var $47=($46) | 16777216;
        var $48=HEAP[$2];
        var $49=(($48+4)&4294967295);
        var $50=$49;
        var $51=(($50)&4294967295);
        var $52=HEAP[$51];
        var $53=HEAP[$1];
        var $54=(($53)&4294967295);
        var $55=HEAP[$54];
        var $56=(($55+12)&4294967295);
        var $57=HEAP[$56];
        var $58=(($57+4*$52)&4294967295);
        HEAP[$58]=$47;
        var $59=HEAP[$2];
        var $60=(($59)&4294967295);
        HEAP[$60]=11;
        __label__ = 4; break;
      case 4: // $61
        __label__ = 5; break;
      case 5: // $62
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_dischargevars($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        if ($5 == 6) {
          __label__ = 1; break;
        }
        else if ($5 == 7) {
          __label__ = 2; break;
        }
        else if ($5 == 8) {
          __label__ = 3; break;
        }
        else if ($5 == 9) {
          __label__ = 4; break;
        }
        else if ($5 == 14) {
          __label__ = 5; break;
        }
        else if ($5 == 13) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 1: // $6
        var $7=HEAP[$2];
        var $8=(($7)&4294967295);
        HEAP[$8]=12;
        __label__ = 7; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$2];
        var $12=(($11+4)&4294967295);
        var $13=$12;
        var $14=(($13)&4294967295);
        var $15=HEAP[$14];
        var $16=_luaK_codeABC($10, 4, 0, $15, 0);
        var $17=HEAP[$2];
        var $18=(($17+4)&4294967295);
        var $19=$18;
        var $20=(($19)&4294967295);
        HEAP[$20]=$16;
        var $21=HEAP[$2];
        var $22=(($21)&4294967295);
        HEAP[$22]=11;
        __label__ = 7; break;
      case 3: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$2];
        var $26=(($25+4)&4294967295);
        var $27=$26;
        var $28=(($27)&4294967295);
        var $29=HEAP[$28];
        var $30=_luaK_codeABx($24, 5, 0, $29);
        var $31=HEAP[$2];
        var $32=(($31+4)&4294967295);
        var $33=$32;
        var $34=(($33)&4294967295);
        HEAP[$34]=$30;
        var $35=HEAP[$2];
        var $36=(($35)&4294967295);
        HEAP[$36]=11;
        __label__ = 7; break;
      case 4: // $37
        var $38=HEAP[$1];
        var $39=HEAP[$2];
        var $40=(($39+4)&4294967295);
        var $41=$40;
        var $42=(($41+4)&4294967295);
        var $43=HEAP[$42];
        _freereg($38, $43);
        var $44=HEAP[$1];
        var $45=HEAP[$2];
        var $46=(($45+4)&4294967295);
        var $47=$46;
        var $48=(($47)&4294967295);
        var $49=HEAP[$48];
        _freereg($44, $49);
        var $50=HEAP[$1];
        var $51=HEAP[$2];
        var $52=(($51+4)&4294967295);
        var $53=$52;
        var $54=(($53)&4294967295);
        var $55=HEAP[$54];
        var $56=HEAP[$2];
        var $57=(($56+4)&4294967295);
        var $58=$57;
        var $59=(($58+4)&4294967295);
        var $60=HEAP[$59];
        var $61=_luaK_codeABC($50, 6, 0, $55, $60);
        var $62=HEAP[$2];
        var $63=(($62+4)&4294967295);
        var $64=$63;
        var $65=(($64)&4294967295);
        HEAP[$65]=$61;
        var $66=HEAP[$2];
        var $67=(($66)&4294967295);
        HEAP[$67]=11;
        __label__ = 7; break;
      case 5: // $68
        var $69=HEAP[$1];
        var $70=HEAP[$2];
        _luaK_setoneret($69, $70);
        __label__ = 7; break;
      case 6: // $71
        __label__ = 7; break;
      case 7: // $72
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _freereg($fs, $reg) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$fs;
        HEAP[$2]=$reg;
        var $3=HEAP[$2];
        var $4=($3) & 256;
        var $5=((($4))|0)!=0;
        if ($5) { __label__ = 3; break; } else { __label__ = 1; break; }
      case 1: // $6
        var $7=HEAP[$2];
        var $8=HEAP[$1];
        var $9=(($8+50)&4294967295);
        var $10=HEAP[$9];
        var $11=unSign(($10), 8, 0);
        var $12=((($7))|0) >= ((($11))|0);
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$1];
        var $15=(($14+36)&4294967295);
        var $16=HEAP[$15];
        var $17=((($16) + -1)&4294967295);
        HEAP[$15]=$17;
        __label__ = 3; break;
      case 3: // $18
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_exp2nextreg($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$fs;
    HEAP[$2]=$e;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    _luaK_dischargevars($3, $4);
    var $5=HEAP[$1];
    var $6=HEAP[$2];
    _freeexp($5, $6);
    var $7=HEAP[$1];
    _luaK_reserveregs($7, 1);
    var $8=HEAP[$1];
    var $9=HEAP[$2];
    var $10=HEAP[$1];
    var $11=(($10+36)&4294967295);
    var $12=HEAP[$11];
    var $13=((($12) - 1)&4294967295);
    _exp2reg($8, $9, $13);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _freeexp($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)==12;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$2];
        var $10=(($9+4)&4294967295);
        var $11=$10;
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        _freereg($8, $13);
        __label__ = 2; break;
      case 2: // $14
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _exp2reg($fs, $e, $reg) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $final=__stackBase__+12;
        var $p_f=__stackBase__+16;
        var $p_t=__stackBase__+20;
        var $fj=__stackBase__+24;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        HEAP[$3]=$reg;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        _discharge2reg($4, $5, $6);
        var $7=HEAP[$2];
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=((($9))|0)==10;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$2];
        var $14=(($13+12)&4294967295);
        var $15=HEAP[$2];
        var $16=(($15+4)&4294967295);
        var $17=$16;
        var $18=(($17)&4294967295);
        var $19=HEAP[$18];
        _luaK_concat($12, $14, $19);
        __label__ = 2; break;
      case 2: // $20
        var $21=HEAP[$2];
        var $22=(($21+12)&4294967295);
        var $23=HEAP[$22];
        var $24=HEAP[$2];
        var $25=(($24+16)&4294967295);
        var $26=HEAP[$25];
        var $27=((($23))|0)!=((($26))|0);
        if ($27) { __label__ = 3; break; } else { __label__ = 10; break; }
      case 3: // $28
        HEAP[$p_f]=-1;
        HEAP[$p_t]=-1;
        var $29=HEAP[$1];
        var $30=HEAP[$2];
        var $31=(($30+12)&4294967295);
        var $32=HEAP[$31];
        var $33=_need_value($29, $32);
        var $34=((($33))|0)!=0;
        if ($34) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $35
        var $36=HEAP[$1];
        var $37=HEAP[$2];
        var $38=(($37+16)&4294967295);
        var $39=HEAP[$38];
        var $40=_need_value($36, $39);
        var $41=((($40))|0)!=0;
        if ($41) { __label__ = 5; break; } else { __label__ = 9; break; }
      case 5: // $42
        var $43=HEAP[$2];
        var $44=(($43)&4294967295);
        var $45=HEAP[$44];
        var $46=((($45))|0)==10;
        if ($46) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $47
        __lastLabel__ = 6; __label__ = 8; break;
      case 7: // $48
        var $49=HEAP[$1];
        var $50=_luaK_jump($49);
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $51
        var $52=__lastLabel__ == 6 ? -1 : ($50);
        HEAP[$fj]=$52;
        var $53=HEAP[$1];
        var $54=HEAP[$3];
        var $55=_code_label($53, $54, 0, 1);
        HEAP[$p_f]=$55;
        var $56=HEAP[$1];
        var $57=HEAP[$3];
        var $58=_code_label($56, $57, 1, 0);
        HEAP[$p_t]=$58;
        var $59=HEAP[$1];
        var $60=HEAP[$fj];
        _luaK_patchtohere($59, $60);
        __label__ = 9; break;
      case 9: // $61
        var $62=HEAP[$1];
        var $63=_luaK_getlabel($62);
        HEAP[$final]=$63;
        var $64=HEAP[$1];
        var $65=HEAP[$2];
        var $66=(($65+16)&4294967295);
        var $67=HEAP[$66];
        var $68=HEAP[$final];
        var $69=HEAP[$3];
        var $70=HEAP[$p_f];
        _patchlistaux($64, $67, $68, $69, $70);
        var $71=HEAP[$1];
        var $72=HEAP[$2];
        var $73=(($72+12)&4294967295);
        var $74=HEAP[$73];
        var $75=HEAP[$final];
        var $76=HEAP[$3];
        var $77=HEAP[$p_t];
        _patchlistaux($71, $74, $75, $76, $77);
        __label__ = 10; break;
      case 10: // $78
        var $79=HEAP[$2];
        var $80=(($79+12)&4294967295);
        HEAP[$80]=-1;
        var $81=HEAP[$2];
        var $82=(($81+16)&4294967295);
        HEAP[$82]=-1;
        var $83=HEAP[$3];
        var $84=HEAP[$2];
        var $85=(($84+4)&4294967295);
        var $86=$85;
        var $87=(($86)&4294967295);
        HEAP[$87]=$83;
        var $88=HEAP[$2];
        var $89=(($88)&4294967295);
        HEAP[$89]=12;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_exp2anyreg($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$fs;
        HEAP[$3]=$e;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        _luaK_dischargevars($4, $5);
        var $6=HEAP[$3];
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0)==12;
        if ($9) { __label__ = 1; break; } else { __label__ = 6; break; }
      case 1: // $10
        var $11=HEAP[$3];
        var $12=(($11+12)&4294967295);
        var $13=HEAP[$12];
        var $14=HEAP[$3];
        var $15=(($14+16)&4294967295);
        var $16=HEAP[$15];
        var $17=((($13))|0)!=((($16))|0);
        if ($17) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $18
        var $19=HEAP[$3];
        var $20=(($19+4)&4294967295);
        var $21=$20;
        var $22=(($21)&4294967295);
        var $23=HEAP[$22];
        HEAP[$1]=$23;
        __label__ = 7; break;
      case 3: // $24
        var $25=HEAP[$3];
        var $26=(($25+4)&4294967295);
        var $27=$26;
        var $28=(($27)&4294967295);
        var $29=HEAP[$28];
        var $30=HEAP[$2];
        var $31=(($30+50)&4294967295);
        var $32=HEAP[$31];
        var $33=unSign(($32), 8, 0);
        var $34=((($29))|0) >= ((($33))|0);
        if ($34) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $35
        var $36=HEAP[$2];
        var $37=HEAP[$3];
        var $38=HEAP[$3];
        var $39=(($38+4)&4294967295);
        var $40=$39;
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        _exp2reg($36, $37, $42);
        var $43=HEAP[$3];
        var $44=(($43+4)&4294967295);
        var $45=$44;
        var $46=(($45)&4294967295);
        var $47=HEAP[$46];
        HEAP[$1]=$47;
        __label__ = 7; break;
      case 5: // $48
        __label__ = 6; break;
      case 6: // $49
        var $50=HEAP[$2];
        var $51=HEAP[$3];
        _luaK_exp2nextreg($50, $51);
        var $52=HEAP[$3];
        var $53=(($52+4)&4294967295);
        var $54=$53;
        var $55=(($54)&4294967295);
        var $56=HEAP[$55];
        HEAP[$1]=$56;
        __label__ = 7; break;
      case 7: // $57
        var $58=HEAP[$1];
        STACKTOP = __stackBase__;
        return $58;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_exp2val($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        var $3=HEAP[$2];
        var $4=(($3+12)&4294967295);
        var $5=HEAP[$4];
        var $6=HEAP[$2];
        var $7=(($6+16)&4294967295);
        var $8=HEAP[$7];
        var $9=((($5))|0)!=((($8))|0);
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$2];
        var $13=_luaK_exp2anyreg($11, $12);
        __label__ = 3; break;
      case 2: // $14
        var $15=HEAP[$1];
        var $16=HEAP[$2];
        _luaK_dischargevars($15, $16);
        __label__ = 3; break;
      case 3: // $17
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_exp2RK($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$fs;
        HEAP[$3]=$e;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        _luaK_exp2val($4, $5);
        var $6=HEAP[$3];
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        if ($8 == 5) {
          __label__ = 1; break;
        }
        else if ($8 == 2) {
          __label__ = 1; break;
        }
        else if ($8 == 3) {
          __label__ = 1; break;
        }
        else if ($8 == 1) {
          __label__ = 1; break;
        }
        else if ($8 == 4) {
          __label__ = 10; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 1: // $9
        var $10=HEAP[$2];
        var $11=(($10+40)&4294967295);
        var $12=HEAP[$11];
        var $13=((($12))|0) <= 255;
        if ($13) { __label__ = 2; break; } else { __label__ = 9; break; }
      case 2: // $14
        var $15=HEAP[$3];
        var $16=(($15)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17))|0)==1;
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $19
        var $20=HEAP[$2];
        var $21=_nilK($20);
        __lastLabel__ = 3; __label__ = 8; break;
      case 4: // $22
        var $23=HEAP[$3];
        var $24=(($23)&4294967295);
        var $25=HEAP[$24];
        var $26=((($25))|0)==5;
        if ($26) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $27
        var $28=HEAP[$2];
        var $29=HEAP[$3];
        var $30=(($29+4)&4294967295);
        var $31=$30;
        var $32=HEAP[$31];
        var $33=_luaK_numberK($28, $32);
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $34
        var $35=HEAP[$2];
        var $36=HEAP[$3];
        var $37=(($36)&4294967295);
        var $38=HEAP[$37];
        var $39=((($38))|0)==2;
        var $40=unSign(($39), 1, 0);
        var $41=_boolK($35, $40);
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $42
        var $43=__lastLabel__ == 5 ? $33 : ($41);
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $44
        var $45=__lastLabel__ == 3 ? $21 : ($43);
        var $46=HEAP[$3];
        var $47=(($46+4)&4294967295);
        var $48=$47;
        var $49=(($48)&4294967295);
        HEAP[$49]=$45;
        var $50=HEAP[$3];
        var $51=(($50)&4294967295);
        HEAP[$51]=4;
        var $52=HEAP[$3];
        var $53=(($52+4)&4294967295);
        var $54=$53;
        var $55=(($54)&4294967295);
        var $56=HEAP[$55];
        var $57=($56) | 256;
        HEAP[$1]=$57;
        __label__ = 15; break;
      case 9: // $58
        __label__ = 14; break;
      case 10: // $59
        var $60=HEAP[$3];
        var $61=(($60+4)&4294967295);
        var $62=$61;
        var $63=(($62)&4294967295);
        var $64=HEAP[$63];
        var $65=((($64))|0) <= 255;
        if ($65) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $66
        var $67=HEAP[$3];
        var $68=(($67+4)&4294967295);
        var $69=$68;
        var $70=(($69)&4294967295);
        var $71=HEAP[$70];
        var $72=($71) | 256;
        HEAP[$1]=$72;
        __label__ = 15; break;
      case 12: // $73
        __label__ = 14; break;
      case 13: // $74
        __label__ = 14; break;
      case 14: // $75
        var $76=HEAP[$2];
        var $77=HEAP[$3];
        var $78=_luaK_exp2anyreg($76, $77);
        HEAP[$1]=$78;
        __label__ = 15; break;
      case 15: // $79
        var $80=HEAP[$1];
        STACKTOP = __stackBase__;
        return $80;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _nilK($fs) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
  
    var $1=__stackBase__;
    var $k=__stackBase__+4;
    var $v=__stackBase__+16;
    var $i_o=__stackBase__+28;
    HEAP[$1]=$fs;
    var $2=(($v+8)&4294967295);
    HEAP[$2]=0;
    HEAP[$i_o]=$k;
    var $3=HEAP[$1];
    var $4=(($3+4)&4294967295);
    var $5=HEAP[$4];
    var $6=$5;
    var $7=HEAP[$i_o];
    var $8=(($7)&4294967295);
    var $9=$8;
    HEAP[$9]=$6;
    var $10=HEAP[$i_o];
    var $11=(($10+8)&4294967295);
    HEAP[$11]=5;
    var $12=HEAP[$1];
    var $13=_addk($12, $k, $v);
    STACKTOP = __stackBase__;
    return $13;
  }
  

  function _boolK($fs, $b) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $o=__stackBase__+8;
    var $i_o=__stackBase__+20;
    HEAP[$1]=$fs;
    HEAP[$2]=$b;
    HEAP[$i_o]=$o;
    var $3=HEAP[$2];
    var $4=HEAP[$i_o];
    var $5=(($4)&4294967295);
    var $6=$5;
    HEAP[$6]=$3;
    var $7=HEAP[$i_o];
    var $8=(($7+8)&4294967295);
    HEAP[$8]=1;
    var $9=HEAP[$1];
    var $10=_addk($9, $o, $o);
    STACKTOP = __stackBase__;
    return $10;
  }
  

  function _luaK_storevar($fs, $var, $ex) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $e=__stackBase__+12;
        var $e1=__stackBase__+16;
        var $e2=__stackBase__+20;
        HEAP[$1]=$fs;
        HEAP[$2]=$var;
        HEAP[$3]=$ex;
        var $4=HEAP[$2];
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        if ($6 == 6) {
          __label__ = 1; break;
        }
        else if ($6 == 7) {
          __label__ = 2; break;
        }
        else if ($6 == 8) {
          __label__ = 3; break;
        }
        else if ($6 == 9) {
          __label__ = 4; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$3];
        _freeexp($8, $9);
        var $10=HEAP[$1];
        var $11=HEAP[$3];
        var $12=HEAP[$2];
        var $13=(($12+4)&4294967295);
        var $14=$13;
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        _exp2reg($10, $11, $16);
        __label__ = 7; break;
      case 2: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$3];
        var $20=_luaK_exp2anyreg($18, $19);
        HEAP[$e]=$20;
        var $21=HEAP[$1];
        var $22=HEAP[$e];
        var $23=HEAP[$2];
        var $24=(($23+4)&4294967295);
        var $25=$24;
        var $26=(($25)&4294967295);
        var $27=HEAP[$26];
        var $28=_luaK_codeABC($21, 8, $22, $27, 0);
        __label__ = 6; break;
      case 3: // $29
        var $30=HEAP[$1];
        var $31=HEAP[$3];
        var $32=_luaK_exp2anyreg($30, $31);
        HEAP[$e1]=$32;
        var $33=HEAP[$1];
        var $34=HEAP[$e1];
        var $35=HEAP[$2];
        var $36=(($35+4)&4294967295);
        var $37=$36;
        var $38=(($37)&4294967295);
        var $39=HEAP[$38];
        var $40=_luaK_codeABx($33, 7, $34, $39);
        __label__ = 6; break;
      case 4: // $41
        var $42=HEAP[$1];
        var $43=HEAP[$3];
        var $44=_luaK_exp2RK($42, $43);
        HEAP[$e2]=$44;
        var $45=HEAP[$1];
        var $46=HEAP[$2];
        var $47=(($46+4)&4294967295);
        var $48=$47;
        var $49=(($48)&4294967295);
        var $50=HEAP[$49];
        var $51=HEAP[$2];
        var $52=(($51+4)&4294967295);
        var $53=$52;
        var $54=(($53+4)&4294967295);
        var $55=HEAP[$54];
        var $56=HEAP[$e2];
        var $57=_luaK_codeABC($45, 9, $50, $55, $56);
        __label__ = 6; break;
      case 5: // $58
        __label__ = 6; break;
      case 6: // $59
        var $60=HEAP[$1];
        var $61=HEAP[$3];
        _freeexp($60, $61);
        __label__ = 7; break;
      case 7: // $62
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_self($fs, $e, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $func=__stackBase__+12;
    HEAP[$1]=$fs;
    HEAP[$2]=$e;
    HEAP[$3]=$key;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    var $6=_luaK_exp2anyreg($4, $5);
    var $7=HEAP[$1];
    var $8=HEAP[$2];
    _freeexp($7, $8);
    var $9=HEAP[$1];
    var $10=(($9+36)&4294967295);
    var $11=HEAP[$10];
    HEAP[$func]=$11;
    var $12=HEAP[$1];
    _luaK_reserveregs($12, 2);
    var $13=HEAP[$1];
    var $14=HEAP[$func];
    var $15=HEAP[$2];
    var $16=(($15+4)&4294967295);
    var $17=$16;
    var $18=(($17)&4294967295);
    var $19=HEAP[$18];
    var $20=HEAP[$1];
    var $21=HEAP[$3];
    var $22=_luaK_exp2RK($20, $21);
    var $23=_luaK_codeABC($13, 11, $14, $19, $22);
    var $24=HEAP[$1];
    var $25=HEAP[$3];
    _freeexp($24, $25);
    var $26=HEAP[$func];
    var $27=HEAP[$2];
    var $28=(($27+4)&4294967295);
    var $29=$28;
    var $30=(($29)&4294967295);
    HEAP[$30]=$26;
    var $31=HEAP[$2];
    var $32=(($31)&4294967295);
    HEAP[$32]=12;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaK_goiftrue($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $pc=__stackBase__+8;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        _luaK_dischargevars($3, $4);
        var $5=HEAP[$2];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        if ($7 == 4) {
          __label__ = 1; break;
        }
        else if ($7 == 5) {
          __label__ = 1; break;
        }
        else if ($7 == 2) {
          __label__ = 1; break;
        }
        else if ($7 == 3) {
          __label__ = 2; break;
        }
        else if ($7 == 10) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $8
        HEAP[$pc]=-1;
        __label__ = 5; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=_luaK_jump($10);
        HEAP[$pc]=$11;
        __label__ = 5; break;
      case 3: // $12
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        _invertjump($13, $14);
        var $15=HEAP[$2];
        var $16=(($15+4)&4294967295);
        var $17=$16;
        var $18=(($17)&4294967295);
        var $19=HEAP[$18];
        HEAP[$pc]=$19;
        __label__ = 5; break;
      case 4: // $20
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=_jumponcond($21, $22, 0);
        HEAP[$pc]=$23;
        __label__ = 5; break;
      case 5: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$2];
        var $27=(($26+16)&4294967295);
        var $28=HEAP[$pc];
        _luaK_concat($25, $27, $28);
        var $29=HEAP[$1];
        var $30=HEAP[$2];
        var $31=(($30+12)&4294967295);
        var $32=HEAP[$31];
        _luaK_patchtohere($29, $32);
        var $33=HEAP[$2];
        var $34=(($33+12)&4294967295);
        HEAP[$34]=-1;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _invertjump($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $pc=__stackBase__+8;
    HEAP[$1]=$fs;
    HEAP[$2]=$e;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=(($4+4)&4294967295);
    var $6=$5;
    var $7=(($6)&4294967295);
    var $8=HEAP[$7];
    var $9=_getjumpcontrol($3, $8);
    HEAP[$pc]=$9;
    var $10=HEAP[$pc];
    var $11=HEAP[$10];
    var $12=($11) & -16321;
    var $13=HEAP[$pc];
    var $14=HEAP[$13];
    var $15=((($14))>>>0) >>> 6;
    var $16=($15) & 255;
    var $17=((($16))|0)!=0;
    var $18=($17) ^ 1;
    var $19=unSign(($18), 1, 0);
    var $20=($19) << 6;
    var $21=($20) & 16320;
    var $22=($12) | ($21);
    var $23=HEAP[$pc];
    HEAP[$23]=$22;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _jumponcond($fs, $e, $cond) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $ie=__stackBase__+16;
        HEAP[$2]=$fs;
        HEAP[$3]=$e;
        HEAP[$4]=$cond;
        var $5=HEAP[$3];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=((($7))|0)==11;
        if ($8) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $9
        var $10=HEAP[$3];
        var $11=(($10+4)&4294967295);
        var $12=$11;
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=HEAP[$2];
        var $16=(($15)&4294967295);
        var $17=HEAP[$16];
        var $18=(($17+12)&4294967295);
        var $19=HEAP[$18];
        var $20=(($19+4*$14)&4294967295);
        var $21=HEAP[$20];
        HEAP[$ie]=$21;
        var $22=HEAP[$ie];
        var $23=((($22))>>>0) >>> 0;
        var $24=($23) & 63;
        var $25=((($24))|0)==19;
        if ($25) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $26
        var $27=HEAP[$2];
        var $28=(($27+24)&4294967295);
        var $29=HEAP[$28];
        var $30=((($29) + -1)&4294967295);
        HEAP[$28]=$30;
        var $31=HEAP[$2];
        var $32=HEAP[$ie];
        var $33=((($32))>>>0) >>> 23;
        var $34=($33) & 511;
        var $35=HEAP[$4];
        var $36=((($35))|0)!=0;
        var $37=($36) ^ 1;
        var $38=unSign(($37), 1, 0);
        var $39=_condjump($31, 26, $34, 0, $38);
        HEAP[$1]=$39;
        __label__ = 5; break;
      case 3: // $40
        __label__ = 4; break;
      case 4: // $41
        var $42=HEAP[$2];
        var $43=HEAP[$3];
        _discharge2anyreg($42, $43);
        var $44=HEAP[$2];
        var $45=HEAP[$3];
        _freeexp($44, $45);
        var $46=HEAP[$2];
        var $47=HEAP[$3];
        var $48=(($47+4)&4294967295);
        var $49=$48;
        var $50=(($49)&4294967295);
        var $51=HEAP[$50];
        var $52=HEAP[$4];
        var $53=_condjump($46, 27, 255, $51, $52);
        HEAP[$1]=$53;
        __label__ = 5; break;
      case 5: // $54
        var $55=HEAP[$1];
        STACKTOP = __stackBase__;
        return $55;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_indexed($fs, $t, $k) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$fs;
    HEAP[$2]=$t;
    HEAP[$3]=$k;
    var $4=HEAP[$1];
    var $5=HEAP[$3];
    var $6=_luaK_exp2RK($4, $5);
    var $7=HEAP[$2];
    var $8=(($7+4)&4294967295);
    var $9=$8;
    var $10=(($9+4)&4294967295);
    HEAP[$10]=$6;
    var $11=HEAP[$2];
    var $12=(($11)&4294967295);
    HEAP[$12]=9;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaK_prefix($fs, $op, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $e2=__stackBase__+12;
        HEAP[$1]=$fs;
        HEAP[$2]=$op;
        HEAP[$3]=$e;
        var $4=(($e2+16)&4294967295);
        HEAP[$4]=-1;
        var $5=(($e2+12)&4294967295);
        HEAP[$5]=-1;
        var $6=(($e2)&4294967295);
        HEAP[$6]=5;
        var $7=(($e2+4)&4294967295);
        var $8=$7;
        HEAP[$8]=0;
        var $9=HEAP[$2];
        if ($9 == 0) {
          __label__ = 1; break;
        }
        else if ($9 == 1) {
          __label__ = 4; break;
        }
        else if ($9 == 2) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 1: // $10
        var $11=HEAP[$3];
        var $12=_isnumeral($11);
        var $13=((($12))|0)!=0;
        if ($13) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $14
        var $15=HEAP[$1];
        var $16=HEAP[$3];
        var $17=_luaK_exp2anyreg($15, $16);
        __label__ = 3; break;
      case 3: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$3];
        _codearith($19, 18, $20, $e2);
        __label__ = 7; break;
      case 4: // $21
        var $22=HEAP[$1];
        var $23=HEAP[$3];
        _codenot($22, $23);
        __label__ = 7; break;
      case 5: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$3];
        var $27=_luaK_exp2anyreg($25, $26);
        var $28=HEAP[$1];
        var $29=HEAP[$3];
        _codearith($28, 20, $29, $e2);
        __label__ = 7; break;
      case 6: // $30
        __label__ = 7; break;
      case 7: // $31
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _isnumeral($e) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        HEAP[$1]=$e;
        var $2=HEAP[$1];
        var $3=(($2)&4294967295);
        var $4=HEAP[$3];
        var $5=((($4))|0)==5;
        if ($5) { __lastLabel__ = 0; __label__ = 1; break; } else { __lastLabel__ = 0; __label__ = 3; break; }
      case 1: // $6
        var $7=HEAP[$1];
        var $8=(($7+12)&4294967295);
        var $9=HEAP[$8];
        var $10=((($9))|0)==-1;
        if ($10) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$1];
        var $13=(($12+16)&4294967295);
        var $14=HEAP[$13];
        var $15=((($14))|0)==-1;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $16
        var $17=__lastLabel__ == 1 ? 0 : (__lastLabel__ == 0 ? 0 : ($15));
        var $18=unSign(($17), 1, 0);
        STACKTOP = __stackBase__;
        return $18;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _codearith($fs, $op, $e1, $e2) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $o2=__stackBase__+16;
        var $o1=__stackBase__+20;
        HEAP[$1]=$fs;
        HEAP[$2]=$op;
        HEAP[$3]=$e1;
        HEAP[$4]=$e2;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=HEAP[$4];
        var $8=_constfolding($5, $6, $7);
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        __label__ = 10; break;
      case 2: // $11
        var $12=HEAP[$2];
        var $13=((($12))|0)!=18;
        if ($13) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $14
        var $15=HEAP[$2];
        var $16=((($15))|0)!=20;
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$4];
        var $20=_luaK_exp2RK($18, $19);
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $21
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $22
        var $23=__lastLabel__ == 4 ? $20 : (0);
        HEAP[$o2]=$23;
        var $24=HEAP[$1];
        var $25=HEAP[$3];
        var $26=_luaK_exp2RK($24, $25);
        HEAP[$o1]=$26;
        var $27=HEAP[$o1];
        var $28=HEAP[$o2];
        var $29=((($27))|0) > ((($28))|0);
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $30
        var $31=HEAP[$1];
        var $32=HEAP[$3];
        _freeexp($31, $32);
        var $33=HEAP[$1];
        var $34=HEAP[$4];
        _freeexp($33, $34);
        __label__ = 9; break;
      case 8: // $35
        var $36=HEAP[$1];
        var $37=HEAP[$4];
        _freeexp($36, $37);
        var $38=HEAP[$1];
        var $39=HEAP[$3];
        _freeexp($38, $39);
        __label__ = 9; break;
      case 9: // $40
        var $41=HEAP[$1];
        var $42=HEAP[$2];
        var $43=HEAP[$o1];
        var $44=HEAP[$o2];
        var $45=_luaK_codeABC($41, $42, 0, $43, $44);
        var $46=HEAP[$3];
        var $47=(($46+4)&4294967295);
        var $48=$47;
        var $49=(($48)&4294967295);
        HEAP[$49]=$45;
        var $50=HEAP[$3];
        var $51=(($50)&4294967295);
        HEAP[$51]=11;
        __label__ = 10; break;
      case 10: // $52
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _codenot($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $temp=__stackBase__+8;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        _luaK_dischargevars($3, $4);
        var $5=HEAP[$2];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        if ($7 == 1) {
          __label__ = 1; break;
        }
        else if ($7 == 3) {
          __label__ = 1; break;
        }
        else if ($7 == 4) {
          __label__ = 2; break;
        }
        else if ($7 == 5) {
          __label__ = 2; break;
        }
        else if ($7 == 2) {
          __label__ = 2; break;
        }
        else if ($7 == 10) {
          __label__ = 3; break;
        }
        else if ($7 == 11) {
          __label__ = 4; break;
        }
        else if ($7 == 12) {
          __label__ = 4; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $8
        var $9=HEAP[$2];
        var $10=(($9)&4294967295);
        HEAP[$10]=2;
        __label__ = 6; break;
      case 2: // $11
        var $12=HEAP[$2];
        var $13=(($12)&4294967295);
        HEAP[$13]=3;
        __label__ = 6; break;
      case 3: // $14
        var $15=HEAP[$1];
        var $16=HEAP[$2];
        _invertjump($15, $16);
        __label__ = 6; break;
      case 4: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$2];
        _discharge2anyreg($18, $19);
        var $20=HEAP[$1];
        var $21=HEAP[$2];
        _freeexp($20, $21);
        var $22=HEAP[$1];
        var $23=HEAP[$2];
        var $24=(($23+4)&4294967295);
        var $25=$24;
        var $26=(($25)&4294967295);
        var $27=HEAP[$26];
        var $28=_luaK_codeABC($22, 19, 0, $27, 0);
        var $29=HEAP[$2];
        var $30=(($29+4)&4294967295);
        var $31=$30;
        var $32=(($31)&4294967295);
        HEAP[$32]=$28;
        var $33=HEAP[$2];
        var $34=(($33)&4294967295);
        HEAP[$34]=11;
        __label__ = 6; break;
      case 5: // $35
        __label__ = 6; break;
      case 6: // $36
        var $37=HEAP[$2];
        var $38=(($37+16)&4294967295);
        var $39=HEAP[$38];
        HEAP[$temp]=$39;
        var $40=HEAP[$2];
        var $41=(($40+12)&4294967295);
        var $42=HEAP[$41];
        var $43=HEAP[$2];
        var $44=(($43+16)&4294967295);
        HEAP[$44]=$42;
        var $45=HEAP[$temp];
        var $46=HEAP[$2];
        var $47=(($46+12)&4294967295);
        HEAP[$47]=$45;
        var $48=HEAP[$1];
        var $49=HEAP[$2];
        var $50=(($49+16)&4294967295);
        var $51=HEAP[$50];
        _removevalues($48, $51);
        var $52=HEAP[$1];
        var $53=HEAP[$2];
        var $54=(($53+12)&4294967295);
        var $55=HEAP[$54];
        _removevalues($52, $55);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_infix($fs, $op, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$fs;
        HEAP[$2]=$op;
        HEAP[$3]=$v;
        var $4=HEAP[$2];
        if ($4 == 13) {
          __label__ = 1; break;
        }
        else if ($4 == 14) {
          __label__ = 2; break;
        }
        else if ($4 == 6) {
          __label__ = 3; break;
        }
        else if ($4 == 0) {
          __label__ = 4; break;
        }
        else if ($4 == 1) {
          __label__ = 4; break;
        }
        else if ($4 == 2) {
          __label__ = 4; break;
        }
        else if ($4 == 3) {
          __label__ = 4; break;
        }
        else if ($4 == 4) {
          __label__ = 4; break;
        }
        else if ($4 == 5) {
          __label__ = 4; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $5
        var $6=HEAP[$1];
        var $7=HEAP[$3];
        _luaK_goiftrue($6, $7);
        __label__ = 8; break;
      case 2: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$3];
        _luaK_goiffalse($9, $10);
        __label__ = 8; break;
      case 3: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$3];
        _luaK_exp2nextreg($12, $13);
        __label__ = 8; break;
      case 4: // $14
        var $15=HEAP[$3];
        var $16=_isnumeral($15);
        var $17=((($16))|0)!=0;
        if ($17) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$3];
        var $21=_luaK_exp2RK($19, $20);
        __label__ = 6; break;
      case 6: // $22
        __label__ = 8; break;
      case 7: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$3];
        var $26=_luaK_exp2RK($24, $25);
        __label__ = 8; break;
      case 8: // $27
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_goiffalse($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $pc=__stackBase__+8;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        _luaK_dischargevars($3, $4);
        var $5=HEAP[$2];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        if ($7 == 1) {
          __label__ = 1; break;
        }
        else if ($7 == 3) {
          __label__ = 1; break;
        }
        else if ($7 == 2) {
          __label__ = 2; break;
        }
        else if ($7 == 10) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $8
        HEAP[$pc]=-1;
        __label__ = 5; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=_luaK_jump($10);
        HEAP[$pc]=$11;
        __label__ = 5; break;
      case 3: // $12
        var $13=HEAP[$2];
        var $14=(($13+4)&4294967295);
        var $15=$14;
        var $16=(($15)&4294967295);
        var $17=HEAP[$16];
        HEAP[$pc]=$17;
        __label__ = 5; break;
      case 4: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$2];
        var $21=_jumponcond($19, $20, 1);
        HEAP[$pc]=$21;
        __label__ = 5; break;
      case 5: // $22
        var $23=HEAP[$1];
        var $24=HEAP[$2];
        var $25=(($24+12)&4294967295);
        var $26=HEAP[$pc];
        _luaK_concat($23, $25, $26);
        var $27=HEAP[$1];
        var $28=HEAP[$2];
        var $29=(($28+16)&4294967295);
        var $30=HEAP[$29];
        _luaK_patchtohere($27, $30);
        var $31=HEAP[$2];
        var $32=(($31+16)&4294967295);
        HEAP[$32]=-1;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_posfix($fs, $op, $e1, $e2) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$1]=$fs;
        HEAP[$2]=$op;
        HEAP[$3]=$e1;
        HEAP[$4]=$e2;
        var $5=HEAP[$2];
        if ($5 == 13) {
          __label__ = 1; break;
        }
        else if ($5 == 14) {
          __label__ = 2; break;
        }
        else if ($5 == 6) {
          __label__ = 3; break;
        }
        else if ($5 == 0) {
          __label__ = 8; break;
        }
        else if ($5 == 1) {
          __label__ = 9; break;
        }
        else if ($5 == 2) {
          __label__ = 10; break;
        }
        else if ($5 == 3) {
          __label__ = 11; break;
        }
        else if ($5 == 4) {
          __label__ = 12; break;
        }
        else if ($5 == 5) {
          __label__ = 13; break;
        }
        else if ($5 == 8) {
          __label__ = 14; break;
        }
        else if ($5 == 7) {
          __label__ = 15; break;
        }
        else if ($5 == 9) {
          __label__ = 16; break;
        }
        else if ($5 == 10) {
          __label__ = 17; break;
        }
        else if ($5 == 11) {
          __label__ = 18; break;
        }
        else if ($5 == 12) {
          __label__ = 19; break;
        }
        else {
        __label__ = 20; break;
        }
        
      case 1: // $6
        var $7=HEAP[$1];
        var $8=HEAP[$4];
        _luaK_dischargevars($7, $8);
        var $9=HEAP[$1];
        var $10=HEAP[$4];
        var $11=(($10+16)&4294967295);
        var $12=HEAP[$3];
        var $13=(($12+16)&4294967295);
        var $14=HEAP[$13];
        _luaK_concat($9, $11, $14);
        var $15=HEAP[$3];
        var $16=HEAP[$4];
        var $17=$15;
        var $18=$16;
        _llvm_memcpy_p0i8_p0i8_i32($17, $18, 20, 4, 0);
        __label__ = 21; break;
      case 2: // $19
        var $20=HEAP[$1];
        var $21=HEAP[$4];
        _luaK_dischargevars($20, $21);
        var $22=HEAP[$1];
        var $23=HEAP[$4];
        var $24=(($23+12)&4294967295);
        var $25=HEAP[$3];
        var $26=(($25+12)&4294967295);
        var $27=HEAP[$26];
        _luaK_concat($22, $24, $27);
        var $28=HEAP[$3];
        var $29=HEAP[$4];
        var $30=$28;
        var $31=$29;
        _llvm_memcpy_p0i8_p0i8_i32($30, $31, 20, 4, 0);
        __label__ = 21; break;
      case 3: // $32
        var $33=HEAP[$1];
        var $34=HEAP[$4];
        _luaK_exp2val($33, $34);
        var $35=HEAP[$4];
        var $36=(($35)&4294967295);
        var $37=HEAP[$36];
        var $38=((($37))|0)==11;
        if ($38) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $39
        var $40=HEAP[$4];
        var $41=(($40+4)&4294967295);
        var $42=$41;
        var $43=(($42)&4294967295);
        var $44=HEAP[$43];
        var $45=HEAP[$1];
        var $46=(($45)&4294967295);
        var $47=HEAP[$46];
        var $48=(($47+12)&4294967295);
        var $49=HEAP[$48];
        var $50=(($49+4*$44)&4294967295);
        var $51=HEAP[$50];
        var $52=((($51))>>>0) >>> 0;
        var $53=($52) & 63;
        var $54=((($53))|0)==21;
        if ($54) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $55
        var $56=HEAP[$1];
        var $57=HEAP[$3];
        _freeexp($56, $57);
        var $58=HEAP[$4];
        var $59=(($58+4)&4294967295);
        var $60=$59;
        var $61=(($60)&4294967295);
        var $62=HEAP[$61];
        var $63=HEAP[$1];
        var $64=(($63)&4294967295);
        var $65=HEAP[$64];
        var $66=(($65+12)&4294967295);
        var $67=HEAP[$66];
        var $68=(($67+4*$62)&4294967295);
        var $69=HEAP[$68];
        var $70=($69) & 8388607;
        var $71=HEAP[$3];
        var $72=(($71+4)&4294967295);
        var $73=$72;
        var $74=(($73)&4294967295);
        var $75=HEAP[$74];
        var $76=($75) << 23;
        var $77=($76) & -8388608;
        var $78=($70) | ($77);
        var $79=HEAP[$4];
        var $80=(($79+4)&4294967295);
        var $81=$80;
        var $82=(($81)&4294967295);
        var $83=HEAP[$82];
        var $84=HEAP[$1];
        var $85=(($84)&4294967295);
        var $86=HEAP[$85];
        var $87=(($86+12)&4294967295);
        var $88=HEAP[$87];
        var $89=(($88+4*$83)&4294967295);
        HEAP[$89]=$78;
        var $90=HEAP[$3];
        var $91=(($90)&4294967295);
        HEAP[$91]=11;
        var $92=HEAP[$4];
        var $93=(($92+4)&4294967295);
        var $94=$93;
        var $95=(($94)&4294967295);
        var $96=HEAP[$95];
        var $97=HEAP[$3];
        var $98=(($97+4)&4294967295);
        var $99=$98;
        var $100=(($99)&4294967295);
        HEAP[$100]=$96;
        __label__ = 7; break;
      case 6: // $101
        var $102=HEAP[$1];
        var $103=HEAP[$4];
        _luaK_exp2nextreg($102, $103);
        var $104=HEAP[$1];
        var $105=HEAP[$3];
        var $106=HEAP[$4];
        _codearith($104, 21, $105, $106);
        __label__ = 7; break;
      case 7: // $107
        __label__ = 21; break;
      case 8: // $108
        var $109=HEAP[$1];
        var $110=HEAP[$3];
        var $111=HEAP[$4];
        _codearith($109, 12, $110, $111);
        __label__ = 21; break;
      case 9: // $112
        var $113=HEAP[$1];
        var $114=HEAP[$3];
        var $115=HEAP[$4];
        _codearith($113, 13, $114, $115);
        __label__ = 21; break;
      case 10: // $116
        var $117=HEAP[$1];
        var $118=HEAP[$3];
        var $119=HEAP[$4];
        _codearith($117, 14, $118, $119);
        __label__ = 21; break;
      case 11: // $120
        var $121=HEAP[$1];
        var $122=HEAP[$3];
        var $123=HEAP[$4];
        _codearith($121, 15, $122, $123);
        __label__ = 21; break;
      case 12: // $124
        var $125=HEAP[$1];
        var $126=HEAP[$3];
        var $127=HEAP[$4];
        _codearith($125, 16, $126, $127);
        __label__ = 21; break;
      case 13: // $128
        var $129=HEAP[$1];
        var $130=HEAP[$3];
        var $131=HEAP[$4];
        _codearith($129, 17, $130, $131);
        __label__ = 21; break;
      case 14: // $132
        var $133=HEAP[$1];
        var $134=HEAP[$3];
        var $135=HEAP[$4];
        _codecomp($133, 23, 1, $134, $135);
        __label__ = 21; break;
      case 15: // $136
        var $137=HEAP[$1];
        var $138=HEAP[$3];
        var $139=HEAP[$4];
        _codecomp($137, 23, 0, $138, $139);
        __label__ = 21; break;
      case 16: // $140
        var $141=HEAP[$1];
        var $142=HEAP[$3];
        var $143=HEAP[$4];
        _codecomp($141, 24, 1, $142, $143);
        __label__ = 21; break;
      case 17: // $144
        var $145=HEAP[$1];
        var $146=HEAP[$3];
        var $147=HEAP[$4];
        _codecomp($145, 25, 1, $146, $147);
        __label__ = 21; break;
      case 18: // $148
        var $149=HEAP[$1];
        var $150=HEAP[$3];
        var $151=HEAP[$4];
        _codecomp($149, 24, 0, $150, $151);
        __label__ = 21; break;
      case 19: // $152
        var $153=HEAP[$1];
        var $154=HEAP[$3];
        var $155=HEAP[$4];
        _codecomp($153, 25, 0, $154, $155);
        __label__ = 21; break;
      case 20: // $156
        __label__ = 21; break;
      case 21: // $157
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _codecomp($fs, $op, $cond, $e1, $e2) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $o1=__stackBase__+20;
        var $o2=__stackBase__+24;
        var $temp=__stackBase__+28;
        HEAP[$1]=$fs;
        HEAP[$2]=$op;
        HEAP[$3]=$cond;
        HEAP[$4]=$e1;
        HEAP[$5]=$e2;
        var $6=HEAP[$1];
        var $7=HEAP[$4];
        var $8=_luaK_exp2RK($6, $7);
        HEAP[$o1]=$8;
        var $9=HEAP[$1];
        var $10=HEAP[$5];
        var $11=_luaK_exp2RK($9, $10);
        HEAP[$o2]=$11;
        var $12=HEAP[$1];
        var $13=HEAP[$5];
        _freeexp($12, $13);
        var $14=HEAP[$1];
        var $15=HEAP[$4];
        _freeexp($14, $15);
        var $16=HEAP[$3];
        var $17=((($16))|0)==0;
        if ($17) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $18
        var $19=HEAP[$2];
        var $20=((($19))|0)!=23;
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $21
        var $22=HEAP[$o1];
        HEAP[$temp]=$22;
        var $23=HEAP[$o2];
        HEAP[$o1]=$23;
        var $24=HEAP[$temp];
        HEAP[$o2]=$24;
        HEAP[$3]=1;
        __label__ = 3; break;
      case 3: // $25
        var $26=HEAP[$1];
        var $27=HEAP[$2];
        var $28=HEAP[$3];
        var $29=HEAP[$o1];
        var $30=HEAP[$o2];
        var $31=_condjump($26, $27, $28, $29, $30);
        var $32=HEAP[$4];
        var $33=(($32+4)&4294967295);
        var $34=$33;
        var $35=(($34)&4294967295);
        HEAP[$35]=$31;
        var $36=HEAP[$4];
        var $37=(($36)&4294967295);
        HEAP[$37]=10;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_fixline($fs, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$fs;
    HEAP[$2]=$line;
    var $3=HEAP[$2];
    var $4=HEAP[$1];
    var $5=(($4+24)&4294967295);
    var $6=HEAP[$5];
    var $7=((($6) - 1)&4294967295);
    var $8=HEAP[$1];
    var $9=(($8)&4294967295);
    var $10=HEAP[$9];
    var $11=(($10+20)&4294967295);
    var $12=HEAP[$11];
    var $13=(($12+4*$7)&4294967295);
    HEAP[$13]=$3;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaK_code($fs, $i, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $f=__stackBase__+12;
        HEAP[$1]=$fs;
        HEAP[$2]=$i;
        HEAP[$3]=$line;
        var $4=HEAP[$1];
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        HEAP[$f]=$6;
        var $7=HEAP[$1];
        _dischargejpc($7);
        var $8=HEAP[$1];
        var $9=(($8+24)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10) + 1)&4294967295);
        var $12=HEAP[$f];
        var $13=(($12+44)&4294967295);
        var $14=HEAP[$13];
        var $15=((($11))|0) > ((($14))|0);
        if ($15) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $16
        var $17=HEAP[$1];
        var $18=(($17+16)&4294967295);
        var $19=HEAP[$18];
        var $20=HEAP[$f];
        var $21=(($20+12)&4294967295);
        var $22=HEAP[$21];
        var $23=$22;
        var $24=HEAP[$f];
        var $25=(($24+44)&4294967295);
        var $26=_luaM_growaux_($19, $23, $25, 4, 2147483645, ((__str180)&4294967295));
        var $27=$26;
        var $28=HEAP[$f];
        var $29=(($28+12)&4294967295);
        HEAP[$29]=$27;
        __label__ = 2; break;
      case 2: // $30
        var $31=HEAP[$2];
        var $32=HEAP[$1];
        var $33=(($32+24)&4294967295);
        var $34=HEAP[$33];
        var $35=HEAP[$f];
        var $36=(($35+12)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37+4*$34)&4294967295);
        HEAP[$38]=$31;
        var $39=HEAP[$1];
        var $40=(($39+24)&4294967295);
        var $41=HEAP[$40];
        var $42=((($41) + 1)&4294967295);
        var $43=HEAP[$f];
        var $44=(($43+48)&4294967295);
        var $45=HEAP[$44];
        var $46=((($42))|0) > ((($45))|0);
        if ($46) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $47
        var $48=HEAP[$1];
        var $49=(($48+16)&4294967295);
        var $50=HEAP[$49];
        var $51=HEAP[$f];
        var $52=(($51+20)&4294967295);
        var $53=HEAP[$52];
        var $54=$53;
        var $55=HEAP[$f];
        var $56=(($55+48)&4294967295);
        var $57=_luaM_growaux_($50, $54, $56, 4, 2147483645, ((__str180)&4294967295));
        var $58=$57;
        var $59=HEAP[$f];
        var $60=(($59+20)&4294967295);
        HEAP[$60]=$58;
        __label__ = 4; break;
      case 4: // $61
        var $62=HEAP[$3];
        var $63=HEAP[$1];
        var $64=(($63+24)&4294967295);
        var $65=HEAP[$64];
        var $66=HEAP[$f];
        var $67=(($66+20)&4294967295);
        var $68=HEAP[$67];
        var $69=(($68+4*$65)&4294967295);
        HEAP[$69]=$62;
        var $70=HEAP[$1];
        var $71=(($70+24)&4294967295);
        var $72=HEAP[$71];
        var $73=((($72) + 1)&4294967295);
        HEAP[$71]=$73;
        STACKTOP = __stackBase__;
        return $72;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaK_setlist($fs, $base, $nelems, $tostore) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $c=__stackBase__+16;
        var $b=__stackBase__+20;
        HEAP[$1]=$fs;
        HEAP[$2]=$base;
        HEAP[$3]=$nelems;
        HEAP[$4]=$tostore;
        var $5=HEAP[$3];
        var $6=((($5) - 1)&4294967295);
        var $7=((((($6))|0)/50)|0);
        var $8=((($7) + 1)&4294967295);
        HEAP[$c]=$8;
        var $9=HEAP[$4];
        var $10=((($9))|0)==-1;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $12
        var $13=HEAP[$4];
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $14
        var $15=__lastLabel__ == 1 ? 0 : ($13);
        HEAP[$b]=$15;
        var $16=HEAP[$c];
        var $17=((($16))|0) <= 511;
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$2];
        var $21=HEAP[$b];
        var $22=HEAP[$c];
        var $23=_luaK_codeABC($19, 34, $20, $21, $22);
        __label__ = 6; break;
      case 5: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$2];
        var $27=HEAP[$b];
        var $28=_luaK_codeABC($25, 34, $26, $27, 0);
        var $29=HEAP[$1];
        var $30=HEAP[$c];
        var $31=HEAP[$1];
        var $32=(($31+12)&4294967295);
        var $33=HEAP[$32];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=_luaK_code($29, $30, $35);
        __label__ = 6; break;
      case 6: // $37
        var $38=HEAP[$2];
        var $39=((($38) + 1)&4294967295);
        var $40=HEAP[$1];
        var $41=(($40+36)&4294967295);
        HEAP[$41]=$39;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dischargejpc($fs) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$fs;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=(($3+32)&4294967295);
    var $5=HEAP[$4];
    var $6=HEAP[$1];
    var $7=(($6+24)&4294967295);
    var $8=HEAP[$7];
    var $9=HEAP[$1];
    var $10=(($9+24)&4294967295);
    var $11=HEAP[$10];
    _patchlistaux($2, $5, $8, 255, $11);
    var $12=HEAP[$1];
    var $13=(($12+32)&4294967295);
    HEAP[$13]=-1;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _condjump($fs, $op, $A, $B, $C) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    var $5=__stackBase__+16;
    HEAP[$1]=$fs;
    HEAP[$2]=$op;
    HEAP[$3]=$A;
    HEAP[$4]=$B;
    HEAP[$5]=$C;
    var $6=HEAP[$1];
    var $7=HEAP[$2];
    var $8=HEAP[$3];
    var $9=HEAP[$4];
    var $10=HEAP[$5];
    var $11=_luaK_codeABC($6, $7, $8, $9, $10);
    var $12=HEAP[$1];
    var $13=_luaK_jump($12);
    STACKTOP = __stackBase__;
    return $13;
  }
  

  function _discharge2anyreg($fs, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)!=12;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$1];
        _luaK_reserveregs($8, 1);
        var $9=HEAP[$1];
        var $10=HEAP[$2];
        var $11=HEAP[$1];
        var $12=(($11+36)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13) - 1)&4294967295);
        _discharge2reg($9, $10, $14);
        __label__ = 2; break;
      case 2: // $15
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _removevalues($fs, $list) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$fs;
        HEAP[$2]=$list;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$2];
        var $5=((($4))|0)!=-1;
        if ($5) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $6
        var $7=HEAP[$1];
        var $8=HEAP[$2];
        var $9=_patchtestreg($7, $8, 255);
        __label__ = 3; break;
      case 3: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$2];
        var $13=_getjump($11, $12);
        HEAP[$2]=$13;
        __label__ = 1; break;
      case 4: // $14
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _patchtestreg($fs, $node, $reg) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        HEAP[$2]=$fs;
        HEAP[$3]=$node;
        HEAP[$4]=$reg;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=_getjumpcontrol($5, $6);
        HEAP[$i]=$7;
        var $8=HEAP[$i];
        var $9=HEAP[$8];
        var $10=((($9))>>>0) >>> 0;
        var $11=($10) & 63;
        var $12=((($11))|0)!=27;
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        HEAP[$1]=0;
        __label__ = 7; break;
      case 2: // $14
        var $15=HEAP[$4];
        var $16=((($15))|0)!=255;
        if ($16) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $17
        var $18=HEAP[$4];
        var $19=HEAP[$i];
        var $20=HEAP[$19];
        var $21=((($20))>>>0) >>> 23;
        var $22=($21) & 511;
        var $23=((($18))|0)!=((($22))|0);
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $24
        var $25=HEAP[$i];
        var $26=HEAP[$25];
        var $27=($26) & -16321;
        var $28=HEAP[$4];
        var $29=($28) << 6;
        var $30=($29) & 16320;
        var $31=($27) | ($30);
        var $32=HEAP[$i];
        HEAP[$32]=$31;
        __label__ = 6; break;
      case 5: // $33
        var $34=HEAP[$i];
        var $35=HEAP[$34];
        var $36=((($35))>>>0) >>> 23;
        var $37=($36) & 511;
        var $38=($37) << 6;
        var $39=26 | ($38);
        var $40=HEAP[$i];
        var $41=HEAP[$40];
        var $42=((($41))>>>0) >>> 14;
        var $43=($42) & 511;
        var $44=($43) << 14;
        var $45=($39) | ($44);
        var $46=HEAP[$i];
        HEAP[$46]=$45;
        __label__ = 6; break;
      case 6: // $47
        HEAP[$1]=1;
        __label__ = 7; break;
      case 7: // $48
        var $49=HEAP[$1];
        STACKTOP = __stackBase__;
        return $49;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getjumpcontrol($fs, $pc) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $pi=__stackBase__+12;
        HEAP[$2]=$fs;
        HEAP[$3]=$pc;
        var $4=HEAP[$3];
        var $5=HEAP[$2];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=(($7+12)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9+4*$4)&4294967295);
        HEAP[$pi]=$10;
        var $11=HEAP[$3];
        var $12=((($11))|0) >= 1;
        if ($12) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $13
        var $14=HEAP[$pi];
        var $15=(($14+-4)&4294967295);
        var $16=HEAP[$15];
        var $17=((($16))>>>0) >>> 0;
        var $18=($17) & 63;
        var $19=((_luaP_opmodes+$18)&4294967295);
        var $20=HEAP[$19];
        var $21=unSign(($20), 8, 0);
        var $22=($21) & 128;
        var $23=((($22))|0)!=0;
        if ($23) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $24
        var $25=HEAP[$pi];
        var $26=(($25+-4)&4294967295);
        HEAP[$1]=$26;
        __label__ = 4; break;
      case 3: // $27
        var $28=HEAP[$pi];
        HEAP[$1]=$28;
        __label__ = 4; break;
      case 4: // $29
        var $30=HEAP[$1];
        STACKTOP = __stackBase__;
        return $30;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _discharge2reg($fs, $e, $reg) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $pc=__stackBase__+12;
        HEAP[$1]=$fs;
        HEAP[$2]=$e;
        HEAP[$3]=$reg;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        _luaK_dischargevars($4, $5);
        var $6=HEAP[$2];
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        if ($8 == 1) {
          __label__ = 1; break;
        }
        else if ($8 == 3) {
          __label__ = 2; break;
        }
        else if ($8 == 2) {
          __label__ = 2; break;
        }
        else if ($8 == 4) {
          __label__ = 3; break;
        }
        else if ($8 == 5) {
          __label__ = 4; break;
        }
        else if ($8 == 11) {
          __label__ = 5; break;
        }
        else if ($8 == 12) {
          __label__ = 6; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 1: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$3];
        _luaK_nil($10, $11, 1);
        __label__ = 10; break;
      case 2: // $12
        var $13=HEAP[$1];
        var $14=HEAP[$3];
        var $15=HEAP[$2];
        var $16=(($15)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17))|0)==2;
        var $19=unSign(($18), 1, 0);
        var $20=_luaK_codeABC($13, 2, $14, $19, 0);
        __label__ = 10; break;
      case 3: // $21
        var $22=HEAP[$1];
        var $23=HEAP[$3];
        var $24=HEAP[$2];
        var $25=(($24+4)&4294967295);
        var $26=$25;
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        var $29=_luaK_codeABx($22, 1, $23, $28);
        __label__ = 10; break;
      case 4: // $30
        var $31=HEAP[$1];
        var $32=HEAP[$3];
        var $33=HEAP[$1];
        var $34=HEAP[$2];
        var $35=(($34+4)&4294967295);
        var $36=$35;
        var $37=HEAP[$36];
        var $38=_luaK_numberK($33, $37);
        var $39=_luaK_codeABx($31, 1, $32, $38);
        __label__ = 10; break;
      case 5: // $40
        var $41=HEAP[$2];
        var $42=(($41+4)&4294967295);
        var $43=$42;
        var $44=(($43)&4294967295);
        var $45=HEAP[$44];
        var $46=HEAP[$1];
        var $47=(($46)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48+12)&4294967295);
        var $50=HEAP[$49];
        var $51=(($50+4*$45)&4294967295);
        HEAP[$pc]=$51;
        var $52=HEAP[$pc];
        var $53=HEAP[$52];
        var $54=($53) & -16321;
        var $55=HEAP[$3];
        var $56=($55) << 6;
        var $57=($56) & 16320;
        var $58=($54) | ($57);
        var $59=HEAP[$pc];
        HEAP[$59]=$58;
        __label__ = 10; break;
      case 6: // $60
        var $61=HEAP[$3];
        var $62=HEAP[$2];
        var $63=(($62+4)&4294967295);
        var $64=$63;
        var $65=(($64)&4294967295);
        var $66=HEAP[$65];
        var $67=((($61))|0)!=((($66))|0);
        if ($67) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $68
        var $69=HEAP[$1];
        var $70=HEAP[$3];
        var $71=HEAP[$2];
        var $72=(($71+4)&4294967295);
        var $73=$72;
        var $74=(($73)&4294967295);
        var $75=HEAP[$74];
        var $76=_luaK_codeABC($69, 0, $70, $75, 0);
        __label__ = 8; break;
      case 8: // $77
        __label__ = 10; break;
      case 9: // $78
        __label__ = 11; break;
      case 10: // $79
        var $80=HEAP[$3];
        var $81=HEAP[$2];
        var $82=(($81+4)&4294967295);
        var $83=$82;
        var $84=(($83)&4294967295);
        HEAP[$84]=$80;
        var $85=HEAP[$2];
        var $86=(($85)&4294967295);
        HEAP[$86]=12;
        __label__ = 11; break;
      case 11: // $87
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _constfolding($op, $e1, $e2) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $v1=__stackBase__+16;
        var $v2=__stackBase__+24;
        var $r=__stackBase__+32;
        HEAP[$2]=$op;
        HEAP[$3]=$e1;
        HEAP[$4]=$e2;
        var $5=HEAP[$3];
        var $6=_isnumeral($5);
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$4];
        var $10=_isnumeral($9);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $12
        HEAP[$1]=0;
        __label__ = 20; break;
      case 3: // $13
        var $14=HEAP[$3];
        var $15=(($14+4)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        HEAP[$v1]=$17;
        var $18=HEAP[$4];
        var $19=(($18+4)&4294967295);
        var $20=$19;
        var $21=HEAP[$20];
        HEAP[$v2]=$21;
        var $22=HEAP[$2];
        if ($22 == 12) {
          __label__ = 4; break;
        }
        else if ($22 == 13) {
          __label__ = 5; break;
        }
        else if ($22 == 14) {
          __label__ = 6; break;
        }
        else if ($22 == 15) {
          __label__ = 7; break;
        }
        else if ($22 == 16) {
          __label__ = 10; break;
        }
        else if ($22 == 17) {
          __label__ = 13; break;
        }
        else if ($22 == 18) {
          __label__ = 14; break;
        }
        else if ($22 == 20) {
          __label__ = 15; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 4: // $23
        var $24=HEAP[$v1];
        var $25=HEAP[$v2];
        var $26=($24) + ($25);
        HEAP[$r]=$26;
        __label__ = 17; break;
      case 5: // $27
        var $28=HEAP[$v1];
        var $29=HEAP[$v2];
        var $30=($28) - ($29);
        HEAP[$r]=$30;
        __label__ = 17; break;
      case 6: // $31
        var $32=HEAP[$v1];
        var $33=HEAP[$v2];
        var $34=($32) * ($33);
        HEAP[$r]=$34;
        __label__ = 17; break;
      case 7: // $35
        var $36=HEAP[$v2];
        var $37=($36) == 0;
        if ($37) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $38
        HEAP[$1]=0;
        __label__ = 20; break;
      case 9: // $39
        var $40=HEAP[$v1];
        var $41=HEAP[$v2];
        var $42=($40) / ($41);
        HEAP[$r]=$42;
        __label__ = 17; break;
      case 10: // $43
        var $44=HEAP[$v2];
        var $45=($44) == 0;
        if ($45) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $46
        HEAP[$1]=0;
        __label__ = 20; break;
      case 12: // $47
        var $48=HEAP[$v1];
        var $49=HEAP[$v1];
        var $50=HEAP[$v2];
        var $51=($49) / ($50);
        var $52=_floor($51);
        var $53=HEAP[$v2];
        var $54=($52) * ($53);
        var $55=($48) - ($54);
        HEAP[$r]=$55;
        __label__ = 17; break;
      case 13: // $56
        var $57=HEAP[$v1];
        var $58=HEAP[$v2];
        var $59=_llvm_pow_f64($57, $58);
        HEAP[$r]=$59;
        __label__ = 17; break;
      case 14: // $60
        var $61=HEAP[$v1];
        var $62=0 - ($61);
        HEAP[$r]=$62;
        __label__ = 17; break;
      case 15: // $63
        HEAP[$1]=0;
        __label__ = 20; break;
      case 16: // $64
        HEAP[$r]=0;
        __label__ = 17; break;
      case 17: // $65
        var $66=HEAP[$r];
        var $67=HEAP[$r];
        var $68=($66) == ($67);
        if ($68) { __label__ = 19; break; } else { __label__ = 18; break; }
      case 18: // $69
        HEAP[$1]=0;
        __label__ = 20; break;
      case 19: // $70
        var $71=HEAP[$r];
        var $72=HEAP[$3];
        var $73=(($72+4)&4294967295);
        var $74=$73;
        HEAP[$74]=$71;
        HEAP[$1]=1;
        __label__ = 20; break;
      case 20: // $75
        var $76=HEAP[$1];
        STACKTOP = __stackBase__;
        return $76;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _need_value($fs, $list) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        HEAP[$2]=$fs;
        HEAP[$3]=$list;
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$3];
        var $6=((($5))|0)!=-1;
        if ($6) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $7
        var $8=HEAP[$2];
        var $9=HEAP[$3];
        var $10=_getjumpcontrol($8, $9);
        var $11=HEAP[$10];
        HEAP[$i]=$11;
        var $12=HEAP[$i];
        var $13=((($12))>>>0) >>> 0;
        var $14=($13) & 63;
        var $15=((($14))|0)!=27;
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $16
        HEAP[$1]=1;
        __label__ = 7; break;
      case 4: // $17
        __label__ = 5; break;
      case 5: // $18
        var $19=HEAP[$2];
        var $20=HEAP[$3];
        var $21=_getjump($19, $20);
        HEAP[$3]=$21;
        __label__ = 1; break;
      case 6: // $22
        HEAP[$1]=0;
        __label__ = 7; break;
      case 7: // $23
        var $24=HEAP[$1];
        STACKTOP = __stackBase__;
        return $24;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _code_label($fs, $A, $b, $jump) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    HEAP[$1]=$fs;
    HEAP[$2]=$A;
    HEAP[$3]=$b;
    HEAP[$4]=$jump;
    var $5=HEAP[$1];
    var $6=_luaK_getlabel($5);
    var $7=HEAP[$1];
    var $8=HEAP[$2];
    var $9=HEAP[$3];
    var $10=HEAP[$4];
    var $11=_luaK_codeABC($7, 2, $8, $9, $10);
    STACKTOP = __stackBase__;
    return $11;
  }
  

  function _luaopen_debug($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_register($2, ((__str83)&4294967295), ((_dblib)&4294967295));
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _db_debug($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 254; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 254);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $buffer=__stackBase__+4;
        HEAP[$1]=$L;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[_stderr];
        var $4=_fputs(((__str50133)&4294967295), $3);
        var $5=(($buffer)&4294967295);
        var $6=HEAP[_stdin];
        var $7=_fgets($5, 250, $6);
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $9
        var $10=(($buffer)&4294967295);
        var $11=_strcmp($10, ((__str51134)&4294967295));
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $13
        STACKTOP = __stackBase__;
        return 0;
      case 4: // $14
        var $15=HEAP[$1];
        var $16=(($buffer)&4294967295);
        var $17=(($buffer)&4294967295);
        var $18=_strlen($17);
        var $19=_luaL_loadbuffer($15, $16, $18, ((__str52135)&4294967295));
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $21
        var $22=HEAP[$1];
        var $23=_lua_pcall($22, 0, 0, 0);
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $25
        var $26=HEAP[$1];
        var $27=_lua_tolstring($26, -1, 0);
        var $28=HEAP[_stderr];
        var $29=_fputs($27, $28);
        var $30=HEAP[_stderr];
        var $31=_fputs(((__str1598)&4294967295), $30);
        __label__ = 7; break;
      case 7: // $32
        var $33=HEAP[$1];
        _lua_settop($33, 0);
        __label__ = 1; break;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _db_getfenv($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _lua_getfenv($2, 1);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _db_gethook($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 25; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 25);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $arg=__stackBase__+4;
        var $L1=__stackBase__+8;
        var $buff=__stackBase__+12;
        var $mask=__stackBase__+17;
        var $hook=__stackBase__+21;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_getthread($2, $arg);
        HEAP[$L1]=$3;
        var $4=HEAP[$L1];
        var $5=_lua_gethookmask($4);
        HEAP[$mask]=$5;
        var $6=HEAP[$L1];
        var $7=_lua_gethook($6);
        HEAP[$hook]=$7;
        var $8=HEAP[$hook];
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $10
        var $11=HEAP[$hook];
        var $12=((($11))|0)!=28;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$1];
        _lua_pushlstring($14, ((__str49132)&4294967295), 13);
        __label__ = 4; break;
      case 3: // $15
        var $16=HEAP[$1];
        _gethooktable($16);
        var $17=HEAP[$1];
        var $18=HEAP[$L1];
        var $19=$18;
        _lua_pushlightuserdata($17, $19);
        var $20=HEAP[$1];
        _lua_rawget($20, -2);
        var $21=HEAP[$1];
        _lua_remove($21, -2);
        __label__ = 4; break;
      case 4: // $22
        var $23=HEAP[$1];
        var $24=HEAP[$mask];
        var $25=(($buff)&4294967295);
        var $26=_unmakemask($24, $25);
        _lua_pushstring($23, $26);
        var $27=HEAP[$1];
        var $28=HEAP[$L1];
        var $29=_lua_gethookcount($28);
        _lua_pushinteger($27, $29);
        STACKTOP = __stackBase__;
        return 3;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _db_getinfo($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 120; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 120);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $ar=__stackBase__+8;
        var $arg=__stackBase__+108;
        var $L1=__stackBase__+112;
        var $options=__stackBase__+116;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_getthread($3, $arg);
        HEAP[$L1]=$4;
        var $5=HEAP[$2];
        var $6=HEAP[$arg];
        var $7=((($6) + 2)&4294967295);
        var $8=_luaL_optlstring($5, $7, ((__str34117)&4294967295), 0);
        HEAP[$options]=$8;
        var $9=HEAP[$2];
        var $10=HEAP[$arg];
        var $11=((($10) + 1)&4294967295);
        var $12=_lua_isnumber($9, $11);
        var $13=((($12))|0)!=0;
        if ($13) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $14
        var $15=HEAP[$L1];
        var $16=HEAP[$2];
        var $17=HEAP[$arg];
        var $18=((($17) + 1)&4294967295);
        var $19=_lua_tointeger($16, $18);
        var $20=_lua_getstack($15, $19, $ar);
        var $21=((($20))|0)!=0;
        if ($21) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $22
        var $23=HEAP[$2];
        _lua_pushnil($23);
        HEAP[$1]=1;
        __label__ = 23; break;
      case 3: // $24
        __label__ = 8; break;
      case 4: // $25
        var $26=HEAP[$2];
        var $27=HEAP[$arg];
        var $28=((($27) + 1)&4294967295);
        var $29=_lua_type($26, $28);
        var $30=((($29))|0)==6;
        if ($30) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $31
        var $32=HEAP[$2];
        var $33=HEAP[$options];
        var $34=_lua_pushfstring($32, ((__str35118)&4294967295), allocate([$33,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        var $35=HEAP[$2];
        var $36=_lua_tolstring($35, -1, 0);
        HEAP[$options]=$36;
        var $37=HEAP[$2];
        var $38=HEAP[$arg];
        var $39=((($38) + 1)&4294967295);
        _lua_pushvalue($37, $39);
        var $40=HEAP[$2];
        var $41=HEAP[$L1];
        _lua_xmove($40, $41, 1);
        __label__ = 7; break;
      case 6: // $42
        var $43=HEAP[$2];
        var $44=HEAP[$arg];
        var $45=((($44) + 1)&4294967295);
        var $46=_luaL_argerror($43, $45, ((__str36119)&4294967295));
        HEAP[$1]=$46;
        __label__ = 23; break;
      case 7: // $47
        __label__ = 8; break;
      case 8: // $48
        var $49=HEAP[$L1];
        var $50=HEAP[$options];
        var $51=_lua_getinfo($49, $50, $ar);
        var $52=((($51))|0)!=0;
        if ($52) { __label__ = 10; break; } else { __label__ = 9; break; }
      case 9: // $53
        var $54=HEAP[$2];
        var $55=HEAP[$arg];
        var $56=((($55) + 2)&4294967295);
        var $57=_luaL_argerror($54, $56, ((__str37120)&4294967295));
        HEAP[$1]=$57;
        __label__ = 23; break;
      case 10: // $58
        var $59=HEAP[$2];
        _lua_createtable($59, 0, 2);
        var $60=HEAP[$options];
        var $61=_strchr($60, 83);
        var $62=((($61))|0)!=0;
        if ($62) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $63
        var $64=HEAP[$2];
        var $65=(($ar+16)&4294967295);
        var $66=HEAP[$65];
        _settabss($64, ((__str38121)&4294967295), $66);
        var $67=HEAP[$2];
        var $68=(($ar+36)&4294967295);
        var $69=(($68)&4294967295);
        _settabss($67, ((__str39122)&4294967295), $69);
        var $70=HEAP[$2];
        var $71=(($ar+28)&4294967295);
        var $72=HEAP[$71];
        _settabsi($70, ((__str40123)&4294967295), $72);
        var $73=HEAP[$2];
        var $74=(($ar+32)&4294967295);
        var $75=HEAP[$74];
        _settabsi($73, ((__str41124)&4294967295), $75);
        var $76=HEAP[$2];
        var $77=(($ar+12)&4294967295);
        var $78=HEAP[$77];
        _settabss($76, ((__str42125)&4294967295), $78);
        __label__ = 12; break;
      case 12: // $79
        var $80=HEAP[$options];
        var $81=_strchr($80, 108);
        var $82=((($81))|0)!=0;
        if ($82) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $83
        var $84=HEAP[$2];
        var $85=(($ar+20)&4294967295);
        var $86=HEAP[$85];
        _settabsi($84, ((__str43126)&4294967295), $86);
        __label__ = 14; break;
      case 14: // $87
        var $88=HEAP[$options];
        var $89=_strchr($88, 117);
        var $90=((($89))|0)!=0;
        if ($90) { __label__ = 15; break; } else { __label__ = 16; break; }
      case 15: // $91
        var $92=HEAP[$2];
        var $93=(($ar+24)&4294967295);
        var $94=HEAP[$93];
        _settabsi($92, ((__str44127)&4294967295), $94);
        __label__ = 16; break;
      case 16: // $95
        var $96=HEAP[$options];
        var $97=_strchr($96, 110);
        var $98=((($97))|0)!=0;
        if ($98) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $99
        var $100=HEAP[$2];
        var $101=(($ar+4)&4294967295);
        var $102=HEAP[$101];
        _settabss($100, ((__str45128)&4294967295), $102);
        var $103=HEAP[$2];
        var $104=(($ar+8)&4294967295);
        var $105=HEAP[$104];
        _settabss($103, ((__str46129)&4294967295), $105);
        __label__ = 18; break;
      case 18: // $106
        var $107=HEAP[$options];
        var $108=_strchr($107, 76);
        var $109=((($108))|0)!=0;
        if ($109) { __label__ = 19; break; } else { __label__ = 20; break; }
      case 19: // $110
        var $111=HEAP[$2];
        var $112=HEAP[$L1];
        _treatstackoption($111, $112, ((__str47130)&4294967295));
        __label__ = 20; break;
      case 20: // $113
        var $114=HEAP[$options];
        var $115=_strchr($114, 102);
        var $116=((($115))|0)!=0;
        if ($116) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $117
        var $118=HEAP[$2];
        var $119=HEAP[$L1];
        _treatstackoption($118, $119, ((__str48131)&4294967295));
        __label__ = 22; break;
      case 22: // $120
        HEAP[$1]=1;
        __label__ = 23; break;
      case 23: // $121
        var $122=HEAP[$1];
        STACKTOP = __stackBase__;
        return $122;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _db_getlocal($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 120; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 120);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $arg=__stackBase__+8;
        var $L1=__stackBase__+12;
        var $ar=__stackBase__+16;
        var $name=__stackBase__+116;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_getthread($3, $arg);
        HEAP[$L1]=$4;
        var $5=HEAP[$L1];
        var $6=HEAP[$2];
        var $7=HEAP[$arg];
        var $8=((($7) + 1)&4294967295);
        var $9=_luaL_checkinteger($6, $8);
        var $10=_lua_getstack($5, $9, $ar);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$arg];
        var $15=((($14) + 1)&4294967295);
        var $16=_luaL_argerror($13, $15, ((__str27110)&4294967295));
        HEAP[$1]=$16;
        __label__ = 5; break;
      case 2: // $17
        var $18=HEAP[$L1];
        var $19=HEAP[$2];
        var $20=HEAP[$arg];
        var $21=((($20) + 2)&4294967295);
        var $22=_luaL_checkinteger($19, $21);
        var $23=_lua_getlocal($18, $ar, $22);
        HEAP[$name]=$23;
        var $24=HEAP[$name];
        var $25=((($24))|0)!=0;
        if ($25) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $26
        var $27=HEAP[$L1];
        var $28=HEAP[$2];
        _lua_xmove($27, $28, 1);
        var $29=HEAP[$2];
        var $30=HEAP[$name];
        _lua_pushstring($29, $30);
        var $31=HEAP[$2];
        _lua_pushvalue($31, -2);
        HEAP[$1]=2;
        __label__ = 5; break;
      case 4: // $32
        var $33=HEAP[$2];
        _lua_pushnil($33);
        HEAP[$1]=1;
        __label__ = 5; break;
      case 5: // $34
        var $35=HEAP[$1];
        STACKTOP = __stackBase__;
        return $35;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _db_getregistry($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _lua_pushvalue($2, -10000);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _db_getmetatable($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        _luaL_checkany($2, 1);
        var $3=HEAP[$1];
        var $4=_lua_getmetatable($3, 1);
        var $5=((($4))|0)!=0;
        if ($5) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $6
        var $7=HEAP[$1];
        _lua_pushnil($7);
        __label__ = 2; break;
      case 2: // $8
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _db_getupvalue($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_auxupvalue($2, 1);
    STACKTOP = __stackBase__;
    return $3;
  }
  

  function _db_setfenv($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        _luaL_checktype($2, 2, 5);
        var $3=HEAP[$1];
        _lua_settop($3, 2);
        var $4=HEAP[$1];
        var $5=_lua_setfenv($4, 1);
        var $6=((($5))|0)==0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=_luaL_error($8, ((__str33116)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $10
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _db_sethook($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $arg=__stackBase__+4;
        var $mask=__stackBase__+8;
        var $count=__stackBase__+12;
        var $func=__stackBase__+16;
        var $L1=__stackBase__+20;
        var $smask=__stackBase__+24;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_getthread($2, $arg);
        HEAP[$L1]=$3;
        var $4=HEAP[$1];
        var $5=HEAP[$arg];
        var $6=((($5) + 1)&4294967295);
        var $7=_lua_type($4, $6);
        var $8=((($7))|0) <= 0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$arg];
        var $12=((($11) + 1)&4294967295);
        _lua_settop($10, $12);
        HEAP[$func]=0;
        HEAP[$mask]=0;
        HEAP[$count]=0;
        __label__ = 3; break;
      case 2: // $13
        var $14=HEAP[$1];
        var $15=HEAP[$arg];
        var $16=((($15) + 2)&4294967295);
        var $17=_luaL_checklstring($14, $16, 0);
        HEAP[$smask]=$17;
        var $18=HEAP[$1];
        var $19=HEAP[$arg];
        var $20=((($19) + 1)&4294967295);
        _luaL_checktype($18, $20, 6);
        var $21=HEAP[$1];
        var $22=HEAP[$arg];
        var $23=((($22) + 3)&4294967295);
        var $24=_luaL_optinteger($21, $23, 0);
        HEAP[$count]=$24;
        HEAP[$func]=28;
        var $25=HEAP[$smask];
        var $26=HEAP[$count];
        var $27=_makemask($25, $26);
        HEAP[$mask]=$27;
        __label__ = 3; break;
      case 3: // $28
        var $29=HEAP[$1];
        _gethooktable($29);
        var $30=HEAP[$1];
        var $31=HEAP[$L1];
        var $32=$31;
        _lua_pushlightuserdata($30, $32);
        var $33=HEAP[$1];
        var $34=HEAP[$arg];
        var $35=((($34) + 1)&4294967295);
        _lua_pushvalue($33, $35);
        var $36=HEAP[$1];
        _lua_rawset($36, -3);
        var $37=HEAP[$1];
        _lua_settop($37, -2);
        var $38=HEAP[$L1];
        var $39=HEAP[$func];
        var $40=HEAP[$mask];
        var $41=HEAP[$count];
        var $42=_lua_sethook($38, $39, $40, $41);
        STACKTOP = __stackBase__;
        return 0;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _db_setlocal($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 116; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 116);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $arg=__stackBase__+8;
        var $L1=__stackBase__+12;
        var $ar=__stackBase__+16;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_getthread($3, $arg);
        HEAP[$L1]=$4;
        var $5=HEAP[$L1];
        var $6=HEAP[$2];
        var $7=HEAP[$arg];
        var $8=((($7) + 1)&4294967295);
        var $9=_luaL_checkinteger($6, $8);
        var $10=_lua_getstack($5, $9, $ar);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$arg];
        var $15=((($14) + 1)&4294967295);
        var $16=_luaL_argerror($13, $15, ((__str27110)&4294967295));
        HEAP[$1]=$16;
        __label__ = 3; break;
      case 2: // $17
        var $18=HEAP[$2];
        var $19=HEAP[$arg];
        var $20=((($19) + 3)&4294967295);
        _luaL_checkany($18, $20);
        var $21=HEAP[$2];
        var $22=HEAP[$arg];
        var $23=((($22) + 3)&4294967295);
        _lua_settop($21, $23);
        var $24=HEAP[$2];
        var $25=HEAP[$L1];
        _lua_xmove($24, $25, 1);
        var $26=HEAP[$2];
        var $27=HEAP[$L1];
        var $28=HEAP[$2];
        var $29=HEAP[$arg];
        var $30=((($29) + 2)&4294967295);
        var $31=_luaL_checkinteger($28, $30);
        var $32=_lua_setlocal($27, $ar, $31);
        _lua_pushstring($26, $32);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 3: // $33
        var $34=HEAP[$1];
        STACKTOP = __stackBase__;
        return $34;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _db_setmetatable($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $t=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_type($2, 2);
        HEAP[$t]=$3;
        var $4=HEAP[$t];
        var $5=((($4))|0)==0;
        if ($5) { __lastLabel__ = 0; __label__ = 3; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $6
        var $7=HEAP[$t];
        var $8=((($7))|0)==5;
        if ($8) { __lastLabel__ = 1; __label__ = 3; break; } else { __lastLabel__ = 1; __label__ = 2; break; }
      case 2: // $9
        var $10=HEAP[$1];
        var $11=_luaL_argerror($10, 2, ((__str26109)&4294967295));
        var $12=((($11))|0)!=0;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $13
        var $14=__lastLabel__ == 1 ? 1 : (__lastLabel__ == 0 ? 1 : ($12));
        var $15=unSign(($14), 1, 0);
        var $16=HEAP[$1];
        _lua_settop($16, 2);
        var $17=HEAP[$1];
        var $18=HEAP[$1];
        var $19=_lua_setmetatable($18, 1);
        _lua_pushboolean($17, $19);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _db_setupvalue($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checkany($2, 3);
    var $3=HEAP[$1];
    var $4=_auxupvalue($3, 0);
    STACKTOP = __stackBase__;
    return $4;
  }
  

  function _db_errorfb($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 124; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 124);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $level=__stackBase__+8;
        var $firstpart=__stackBase__+12;
        var $arg=__stackBase__+16;
        var $L1=__stackBase__+20;
        var $ar=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$firstpart]=1;
        var $3=HEAP[$2];
        var $4=_getthread($3, $arg);
        HEAP[$L1]=$4;
        var $5=HEAP[$2];
        var $6=HEAP[$arg];
        var $7=((($6) + 2)&4294967295);
        var $8=_lua_isnumber($5, $7);
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$2];
        var $12=HEAP[$arg];
        var $13=((($12) + 2)&4294967295);
        var $14=_lua_tointeger($11, $13);
        HEAP[$level]=$14;
        var $15=HEAP[$2];
        _lua_settop($15, -2);
        __label__ = 3; break;
      case 2: // $16
        var $17=HEAP[$2];
        var $18=HEAP[$L1];
        var $19=((($17))|0)==((($18))|0);
        var $20=($19) ? 1 : 0;
        HEAP[$level]=$20;
        __label__ = 3; break;
      case 3: // $21
        var $22=HEAP[$2];
        var $23=_lua_gettop($22);
        var $24=HEAP[$arg];
        var $25=((($23))|0)==((($24))|0);
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $26
        var $27=HEAP[$2];
        _lua_pushlstring($27, ((__str1497)&4294967295), 0);
        __label__ = 9; break;
      case 5: // $28
        var $29=HEAP[$2];
        var $30=HEAP[$arg];
        var $31=((($30) + 1)&4294967295);
        var $32=_lua_isstring($29, $31);
        var $33=((($32))|0)!=0;
        if ($33) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $34
        HEAP[$1]=1;
        __label__ = 34; break;
      case 7: // $35
        var $36=HEAP[$2];
        _lua_pushlstring($36, ((__str1598)&4294967295), 1);
        __label__ = 8; break;
      case 8: // $37
        __label__ = 9; break;
      case 9: // $38
        var $39=HEAP[$2];
        _lua_pushlstring($39, ((__str1699)&4294967295), 16);
        __label__ = 10; break;
      case 10: // $40
        var $41=HEAP[$L1];
        var $42=HEAP[$level];
        var $43=((($42) + 1)&4294967295);
        HEAP[$level]=$43;
        var $44=_lua_getstack($41, $42, $ar);
        var $45=((($44))|0)!=0;
        if ($45) { __label__ = 11; break; } else { __label__ = 33; break; }
      case 11: // $46
        var $47=HEAP[$level];
        var $48=((($47))|0) > 12;
        if ($48) { __label__ = 12; break; } else { __label__ = 20; break; }
      case 12: // $49
        var $50=HEAP[$firstpart];
        var $51=((($50))|0)!=0;
        if ($51) { __label__ = 13; break; } else { __label__ = 20; break; }
      case 13: // $52
        var $53=HEAP[$L1];
        var $54=HEAP[$level];
        var $55=((($54) + 10)&4294967295);
        var $56=_lua_getstack($53, $55, $ar);
        var $57=((($56))|0)!=0;
        if ($57) { __label__ = 15; break; } else { __label__ = 14; break; }
      case 14: // $58
        var $59=HEAP[$level];
        var $60=((($59) + -1)&4294967295);
        HEAP[$level]=$60;
        __label__ = 19; break;
      case 15: // $61
        var $62=HEAP[$2];
        _lua_pushlstring($62, ((__str17100)&4294967295), 5);
        __label__ = 16; break;
      case 16: // $63
        var $64=HEAP[$L1];
        var $65=HEAP[$level];
        var $66=((($65) + 10)&4294967295);
        var $67=_lua_getstack($64, $66, $ar);
        var $68=((($67))|0)!=0;
        if ($68) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $69
        var $70=HEAP[$level];
        var $71=((($70) + 1)&4294967295);
        HEAP[$level]=$71;
        __label__ = 16; break;
      case 18: // $72
        __label__ = 19; break;
      case 19: // $73
        HEAP[$firstpart]=0;
        __label__ = 10; break;
      case 20: // $74
        var $75=HEAP[$2];
        _lua_pushlstring($75, ((__str18101)&4294967295), 2);
        var $76=HEAP[$L1];
        var $77=_lua_getinfo($76, ((__str19102)&4294967295), $ar);
        var $78=HEAP[$2];
        var $79=(($ar+36)&4294967295);
        var $80=(($79)&4294967295);
        var $81=_lua_pushfstring($78, ((__str20103)&4294967295), allocate([$80,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        var $82=(($ar+20)&4294967295);
        var $83=HEAP[$82];
        var $84=((($83))|0) > 0;
        if ($84) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $85
        var $86=HEAP[$2];
        var $87=(($ar+20)&4294967295);
        var $88=HEAP[$87];
        var $89=_lua_pushfstring($86, ((__str21104)&4294967295), allocate([$88,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 22; break;
      case 22: // $90
        var $91=(($ar+8)&4294967295);
        var $92=HEAP[$91];
        var $93=HEAP[$92];
        var $94=reSign(($93), 8, 0);
        var $95=((($94))|0)!=0;
        if ($95) { __label__ = 23; break; } else { __label__ = 24; break; }
      case 23: // $96
        var $97=HEAP[$2];
        var $98=(($ar+4)&4294967295);
        var $99=HEAP[$98];
        var $100=_lua_pushfstring($97, ((__str22105)&4294967295), allocate([$99,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 32; break;
      case 24: // $101
        var $102=(($ar+12)&4294967295);
        var $103=HEAP[$102];
        var $104=HEAP[$103];
        var $105=reSign(($104), 8, 0);
        var $106=((($105))|0)==109;
        if ($106) { __label__ = 25; break; } else { __label__ = 26; break; }
      case 25: // $107
        var $108=HEAP[$2];
        var $109=_lua_pushfstring($108, ((__str23106)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 31; break;
      case 26: // $110
        var $111=(($ar+12)&4294967295);
        var $112=HEAP[$111];
        var $113=HEAP[$112];
        var $114=reSign(($113), 8, 0);
        var $115=((($114))|0)==67;
        if ($115) { __label__ = 28; break; } else { __label__ = 27; break; }
      case 27: // $116
        var $117=(($ar+12)&4294967295);
        var $118=HEAP[$117];
        var $119=HEAP[$118];
        var $120=reSign(($119), 8, 0);
        var $121=((($120))|0)==116;
        if ($121) { __label__ = 28; break; } else { __label__ = 29; break; }
      case 28: // $122
        var $123=HEAP[$2];
        _lua_pushlstring($123, ((__str24107)&4294967295), 2);
        __label__ = 30; break;
      case 29: // $124
        var $125=HEAP[$2];
        var $126=(($ar+36)&4294967295);
        var $127=(($126)&4294967295);
        var $128=(($ar+28)&4294967295);
        var $129=HEAP[$128];
        var $130=_lua_pushfstring($125, ((__str25108)&4294967295), allocate([$127,0,0,0,$129,0,0,0], ["i8*",0,0,0,"i32",0,0,0], ALLOC_STACK));
        __label__ = 30; break;
      case 30: // $131
        __label__ = 31; break;
      case 31: // $132
        __label__ = 32; break;
      case 32: // $133
        var $134=HEAP[$2];
        var $135=HEAP[$2];
        var $136=_lua_gettop($135);
        var $137=HEAP[$arg];
        var $138=((($136) - ($137))&4294967295);
        _lua_concat($134, $138);
        __label__ = 10; break;
      case 33: // $139
        var $140=HEAP[$2];
        var $141=HEAP[$2];
        var $142=_lua_gettop($141);
        var $143=HEAP[$arg];
        var $144=((($142) - ($143))&4294967295);
        _lua_concat($140, $144);
        HEAP[$1]=1;
        __label__ = 34; break;
      case 34: // $145
        var $146=HEAP[$1];
        STACKTOP = __stackBase__;
        return $146;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getthread($L, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$L;
        HEAP[$3]=$arg;
        var $4=HEAP[$2];
        var $5=_lua_type($4, 1);
        var $6=((($5))|0)==8;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$3];
        HEAP[$8]=1;
        var $9=HEAP[$2];
        var $10=_lua_tothread($9, 1);
        HEAP[$1]=$10;
        __label__ = 3; break;
      case 2: // $11
        var $12=HEAP[$3];
        HEAP[$12]=0;
        var $13=HEAP[$2];
        HEAP[$1]=$13;
        __label__ = 3; break;
      case 3: // $14
        var $15=HEAP[$1];
        STACKTOP = __stackBase__;
        return $15;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _auxupvalue($L, $get) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $name=__stackBase__+12;
        var $n=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$get;
        var $4=HEAP[$2];
        var $5=_luaL_checkinteger($4, 2);
        HEAP[$n]=$5;
        var $6=HEAP[$2];
        _luaL_checktype($6, 1, 6);
        var $7=HEAP[$2];
        var $8=_lua_iscfunction($7, 1);
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        HEAP[$1]=0;
        __label__ = 8; break;
      case 2: // $11
        var $12=HEAP[$3];
        var $13=((($12))|0)!=0;
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $14
        var $15=HEAP[$2];
        var $16=HEAP[$n];
        var $17=_lua_getupvalue($15, 1, $16);
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $18
        var $19=HEAP[$2];
        var $20=HEAP[$n];
        var $21=_lua_setupvalue($19, 1, $20);
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $22
        var $23=__lastLabel__ == 3 ? $17 : ($21);
        HEAP[$name]=$23;
        var $24=HEAP[$name];
        var $25=((($24))|0)==0;
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $26
        HEAP[$1]=0;
        __label__ = 8; break;
      case 7: // $27
        var $28=HEAP[$2];
        var $29=HEAP[$name];
        _lua_pushstring($28, $29);
        var $30=HEAP[$2];
        var $31=HEAP[$3];
        var $32=((($31) + 1)&4294967295);
        var $33=((0 - ($32))&4294967295);
        _lua_insert($30, $33);
        var $34=HEAP[$3];
        var $35=((($34) + 1)&4294967295);
        HEAP[$1]=$35;
        __label__ = 8; break;
      case 8: // $36
        var $37=HEAP[$1];
        STACKTOP = __stackBase__;
        return $37;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hookf($L, $ar) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$ar;
        var $3=HEAP[$1];
        _lua_pushlightuserdata($3, _KEY_HOOK);
        var $4=HEAP[$1];
        _lua_rawget($4, -10000);
        var $5=HEAP[$1];
        var $6=HEAP[$1];
        var $7=$6;
        _lua_pushlightuserdata($5, $7);
        var $8=HEAP[$1];
        _lua_rawget($8, -2);
        var $9=HEAP[$1];
        var $10=_lua_type($9, -1);
        var $11=((($10))|0)==6;
        if ($11) { __label__ = 1; break; } else { __label__ = 5; break; }
      case 1: // $12
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        var $17=((_hookf_hooknames+$16*4)&4294967295);
        var $18=HEAP[$17];
        _lua_pushstring($13, $18);
        var $19=HEAP[$2];
        var $20=(($19+20)&4294967295);
        var $21=HEAP[$20];
        var $22=((($21))|0) >= 0;
        if ($22) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$2];
        var $26=(($25+20)&4294967295);
        var $27=HEAP[$26];
        _lua_pushinteger($24, $27);
        __label__ = 4; break;
      case 3: // $28
        var $29=HEAP[$1];
        _lua_pushnil($29);
        __label__ = 4; break;
      case 4: // $30
        var $31=HEAP[$1];
        _lua_call($31, 2, 0);
        __label__ = 5; break;
      case 5: // $32
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _makemask($smask, $count) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $mask=__stackBase__+8;
        HEAP[$1]=$smask;
        HEAP[$2]=$count;
        HEAP[$mask]=0;
        var $3=HEAP[$1];
        var $4=_strchr($3, 99);
        var $5=((($4))|0)!=0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$mask];
        var $8=($7) | 1;
        HEAP[$mask]=$8;
        __label__ = 2; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=_strchr($10, 114);
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $13
        var $14=HEAP[$mask];
        var $15=($14) | 2;
        HEAP[$mask]=$15;
        __label__ = 4; break;
      case 4: // $16
        var $17=HEAP[$1];
        var $18=_strchr($17, 108);
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $20
        var $21=HEAP[$mask];
        var $22=($21) | 4;
        HEAP[$mask]=$22;
        __label__ = 6; break;
      case 6: // $23
        var $24=HEAP[$2];
        var $25=((($24))|0) > 0;
        if ($25) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $26
        var $27=HEAP[$mask];
        var $28=($27) | 8;
        HEAP[$mask]=$28;
        __label__ = 8; break;
      case 8: // $29
        var $30=HEAP[$mask];
        STACKTOP = __stackBase__;
        return $30;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _gethooktable($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        _lua_pushlightuserdata($2, _KEY_HOOK);
        var $3=HEAP[$1];
        _lua_rawget($3, -10000);
        var $4=HEAP[$1];
        var $5=_lua_type($4, -1);
        var $6=((($5))|0)==5;
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $7
        var $8=HEAP[$1];
        _lua_settop($8, -2);
        var $9=HEAP[$1];
        _lua_createtable($9, 0, 1);
        var $10=HEAP[$1];
        _lua_pushlightuserdata($10, _KEY_HOOK);
        var $11=HEAP[$1];
        _lua_pushvalue($11, -2);
        var $12=HEAP[$1];
        _lua_rawset($12, -10000);
        __label__ = 2; break;
      case 2: // $13
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _settabss($L, $i, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$i;
    HEAP[$3]=$v;
    var $4=HEAP[$1];
    var $5=HEAP[$3];
    _lua_pushstring($4, $5);
    var $6=HEAP[$1];
    var $7=HEAP[$2];
    _lua_setfield($6, -2, $7);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _settabsi($L, $i, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$i;
    HEAP[$3]=$v;
    var $4=HEAP[$1];
    var $5=HEAP[$3];
    _lua_pushinteger($4, $5);
    var $6=HEAP[$1];
    var $7=HEAP[$2];
    _lua_setfield($6, -2, $7);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _treatstackoption($L, $L1, $fname) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$L1;
        HEAP[$3]=$fname;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=((($4))|0)==((($5))|0);
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$1];
        _lua_pushvalue($8, -2);
        var $9=HEAP[$1];
        _lua_remove($9, -3);
        __label__ = 3; break;
      case 2: // $10
        var $11=HEAP[$2];
        var $12=HEAP[$1];
        _lua_xmove($11, $12, 1);
        __label__ = 3; break;
      case 3: // $13
        var $14=HEAP[$1];
        var $15=HEAP[$3];
        _lua_setfield($14, -2, $15);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unmakemask($mask, $smask) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        HEAP[$1]=$mask;
        HEAP[$2]=$smask;
        HEAP[$i]=0;
        var $3=HEAP[$1];
        var $4=($3) & 1;
        var $5=((($4))|0)!=0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$i];
        var $8=((($7) + 1)&4294967295);
        HEAP[$i]=$8;
        var $9=HEAP[$2];
        var $10=(($9+$7)&4294967295);
        HEAP[$10]=99;
        __label__ = 2; break;
      case 2: // $11
        var $12=HEAP[$1];
        var $13=($12) & 2;
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $15
        var $16=HEAP[$i];
        var $17=((($16) + 1)&4294967295);
        HEAP[$i]=$17;
        var $18=HEAP[$2];
        var $19=(($18+$16)&4294967295);
        HEAP[$19]=114;
        __label__ = 4; break;
      case 4: // $20
        var $21=HEAP[$1];
        var $22=($21) & 4;
        var $23=((($22))|0)!=0;
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $24
        var $25=HEAP[$i];
        var $26=((($25) + 1)&4294967295);
        HEAP[$i]=$26;
        var $27=HEAP[$2];
        var $28=(($27+$25)&4294967295);
        HEAP[$28]=108;
        __label__ = 6; break;
      case 6: // $29
        var $30=HEAP[$i];
        var $31=HEAP[$2];
        var $32=(($31+$30)&4294967295);
        HEAP[$32]=0;
        var $33=HEAP[$2];
        STACKTOP = __stackBase__;
        return $33;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_sethook($L, $func, $mask, $count) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$func;
        HEAP[$3]=$mask;
        HEAP[$4]=$count;
        var $5=HEAP[$2];
        var $6=((($5))|0)==0;
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $7
        var $8=HEAP[$3];
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $10
        HEAP[$3]=0;
        HEAP[$2]=0;
        __label__ = 3; break;
      case 3: // $11
        var $12=HEAP[$2];
        var $13=HEAP[$1];
        var $14=(($13+68)&4294967295);
        HEAP[$14]=$12;
        var $15=HEAP[$4];
        var $16=HEAP[$1];
        var $17=(($16+60)&4294967295);
        HEAP[$17]=$15;
        var $18=HEAP[$1];
        var $19=(($18+60)&4294967295);
        var $20=HEAP[$19];
        var $21=HEAP[$1];
        var $22=(($21+64)&4294967295);
        HEAP[$22]=$20;
        var $23=HEAP[$3];
        var $24=((($23)) & 255);
        var $25=HEAP[$1];
        var $26=(($25+56)&4294967295);
        HEAP[$26]=$24;
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_gethook($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=(($2+68)&4294967295);
    var $4=HEAP[$3];
    STACKTOP = __stackBase__;
    return $4;
  }
  

  function _lua_gethookmask($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=(($2+56)&4294967295);
    var $4=HEAP[$3];
    var $5=unSign(($4), 8, 0);
    STACKTOP = __stackBase__;
    return $5;
  }
  

  function _lua_gethookcount($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=(($2+60)&4294967295);
    var $4=HEAP[$3];
    STACKTOP = __stackBase__;
    return $4;
  }
  

  function _lua_getstack($L, $level, $ar) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $status=__stackBase__+12;
        var $ci=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$level;
        HEAP[$3]=$ar;
        var $4=HEAP[$1];
        var $5=(($4+20)&4294967295);
        var $6=HEAP[$5];
        HEAP[$ci]=$6;
        __label__ = 1; break;
      case 1: // $7
        var $8=HEAP[$2];
        var $9=((($8))|0) > 0;
        if ($9) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $10
        var $11=HEAP[$ci];
        var $12=HEAP[$1];
        var $13=(($12+40)&4294967295);
        var $14=HEAP[$13];
        var $15=((($11))>>>0) > ((($14))>>>0);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $16
        var $17=__lastLabel__ == 1 ? 0 : ($15);
        if ($17) { __label__ = 4; break; } else { __label__ = 8; break; }
      case 4: // $18
        var $19=HEAP[$2];
        var $20=((($19) + -1)&4294967295);
        HEAP[$2]=$20;
        var $21=HEAP[$ci];
        var $22=(($21+4)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23)&4294967295);
        var $25=$24;
        var $26=HEAP[$25];
        var $27=$26;
        var $28=$27;
        var $29=(($28+6)&4294967295);
        var $30=HEAP[$29];
        var $31=reSign(($30), 8, 0)!=0;
        if ($31) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $32
        var $33=HEAP[$ci];
        var $34=(($33+20)&4294967295);
        var $35=HEAP[$34];
        var $36=HEAP[$2];
        var $37=((($36) - ($35))&4294967295);
        HEAP[$2]=$37;
        __label__ = 6; break;
      case 6: // $38
        __label__ = 7; break;
      case 7: // $39
        var $40=HEAP[$ci];
        var $41=(($40+-24)&4294967295);
        HEAP[$ci]=$41;
        __label__ = 1; break;
      case 8: // $42
        var $43=HEAP[$2];
        var $44=((($43))|0)==0;
        if ($44) { __label__ = 9; break; } else { __label__ = 11; break; }
      case 9: // $45
        var $46=HEAP[$ci];
        var $47=HEAP[$1];
        var $48=(($47+40)&4294967295);
        var $49=HEAP[$48];
        var $50=((($46))>>>0) > ((($49))>>>0);
        if ($50) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $51
        HEAP[$status]=1;
        var $52=HEAP[$ci];
        var $53=HEAP[$1];
        var $54=(($53+40)&4294967295);
        var $55=HEAP[$54];
        var $56=($52);
        var $57=($55);
        var $58=((($56) - ($57))&4294967295);
        var $59=((((($58))|0)/24)|0);
        var $60=HEAP[$3];
        var $61=(($60+96)&4294967295);
        HEAP[$61]=$59;
        __label__ = 15; break;
      case 11: // $62
        var $63=HEAP[$2];
        var $64=((($63))|0) < 0;
        if ($64) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $65
        HEAP[$status]=1;
        var $66=HEAP[$3];
        var $67=(($66+96)&4294967295);
        HEAP[$67]=0;
        __label__ = 14; break;
      case 13: // $68
        HEAP[$status]=0;
        __label__ = 14; break;
      case 14: // $69
        __label__ = 15; break;
      case 15: // $70
        var $71=HEAP[$status];
        STACKTOP = __stackBase__;
        return $71;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_getlocal($L, $ar, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $ci=__stackBase__+12;
        var $name=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$ar;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=(($4+40)&4294967295);
        var $6=HEAP[$5];
        var $7=HEAP[$2];
        var $8=(($7+96)&4294967295);
        var $9=HEAP[$8];
        var $10=(($6+24*$9)&4294967295);
        HEAP[$ci]=$10;
        var $11=HEAP[$1];
        var $12=HEAP[$ci];
        var $13=HEAP[$3];
        var $14=_findlocal($11, $12, $13);
        HEAP[$name]=$14;
        var $15=HEAP[$name];
        var $16=((($15))|0)!=0;
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$ci];
        var $20=(($19)&4294967295);
        var $21=HEAP[$20];
        var $22=HEAP[$3];
        var $23=((($22) - 1)&4294967295);
        var $24=(($21+12*$23)&4294967295);
        _luaA_pushobject($18, $24);
        __label__ = 2; break;
      case 2: // $25
        var $26=HEAP[$name];
        STACKTOP = __stackBase__;
        return $26;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _findlocal($L, $ci, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $name=__stackBase__+16;
        var $fp=__stackBase__+20;
        var $limit=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$3]=$ci;
        HEAP[$4]=$n;
        var $5=HEAP[$3];
        var $6=_getluaproto($5);
        HEAP[$fp]=$6;
        var $7=HEAP[$fp];
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $9
        var $10=HEAP[$fp];
        var $11=HEAP[$4];
        var $12=HEAP[$2];
        var $13=HEAP[$3];
        var $14=_currentpc($12, $13);
        var $15=_luaF_getlocalname($10, $11, $14);
        HEAP[$name]=$15;
        var $16=((($15))|0)!=0;
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $17
        var $18=HEAP[$name];
        HEAP[$1]=$18;
        __label__ = 10; break;
      case 3: // $19
        var $20=HEAP[$3];
        var $21=HEAP[$2];
        var $22=(($21+20)&4294967295);
        var $23=HEAP[$22];
        var $24=((($20))|0)==((($23))|0);
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $25
        var $26=HEAP[$2];
        var $27=(($26+8)&4294967295);
        var $28=HEAP[$27];
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $29
        var $30=HEAP[$3];
        var $31=(($30+24)&4294967295);
        var $32=(($31+4)&4294967295);
        var $33=HEAP[$32];
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $34
        var $35=__lastLabel__ == 4 ? $28 : ($33);
        HEAP[$limit]=$35;
        var $36=HEAP[$limit];
        var $37=HEAP[$3];
        var $38=(($37)&4294967295);
        var $39=HEAP[$38];
        var $40=($36);
        var $41=($39);
        var $42=((($40) - ($41))&4294967295);
        var $43=((((($42))|0)/12)|0);
        var $44=HEAP[$4];
        var $45=((($43))|0) >= ((($44))|0);
        if ($45) { __label__ = 7; break; } else { __label__ = 9; break; }
      case 7: // $46
        var $47=HEAP[$4];
        var $48=((($47))|0) > 0;
        if ($48) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $49
        HEAP[$1]=((__str20156)&4294967295);
        __label__ = 10; break;
      case 9: // $50
        HEAP[$1]=0;
        __label__ = 10; break;
      case 10: // $51
        var $52=HEAP[$1];
        STACKTOP = __stackBase__;
        return $52;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_setlocal($L, $ar, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $ci=__stackBase__+12;
        var $name=__stackBase__+16;
        var $o2=__stackBase__+20;
        var $o1=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$ar;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=(($4+40)&4294967295);
        var $6=HEAP[$5];
        var $7=HEAP[$2];
        var $8=(($7+96)&4294967295);
        var $9=HEAP[$8];
        var $10=(($6+24*$9)&4294967295);
        HEAP[$ci]=$10;
        var $11=HEAP[$1];
        var $12=HEAP[$ci];
        var $13=HEAP[$3];
        var $14=_findlocal($11, $12, $13);
        HEAP[$name]=$14;
        var $15=HEAP[$name];
        var $16=((($15))|0)!=0;
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $17
        var $18=HEAP[$1];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+-12)&4294967295);
        HEAP[$o2]=$21;
        var $22=HEAP[$ci];
        var $23=(($22)&4294967295);
        var $24=HEAP[$23];
        var $25=HEAP[$3];
        var $26=((($25) - 1)&4294967295);
        var $27=(($24+12*$26)&4294967295);
        HEAP[$o1]=$27;
        var $28=HEAP[$o1];
        var $29=(($28)&4294967295);
        var $30=HEAP[$o2];
        var $31=(($30)&4294967295);
        var $32=$29;
        var $33=$31;
        _llvm_memcpy_p0i8_p0i8_i32($32, $33, 8, 4, 0);
        var $34=HEAP[$o2];
        var $35=(($34+8)&4294967295);
        var $36=HEAP[$35];
        var $37=HEAP[$o1];
        var $38=(($37+8)&4294967295);
        HEAP[$38]=$36;
        __label__ = 2; break;
      case 2: // $39
        var $40=HEAP[$1];
        var $41=(($40+8)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+-12)&4294967295);
        HEAP[$41]=$43;
        var $44=HEAP[$name];
        STACKTOP = __stackBase__;
        return $44;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_getinfo($L, $what, $ar) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $status=__stackBase__+12;
        var $f=__stackBase__+16;
        var $ci=__stackBase__+20;
        var $func=__stackBase__+24;
        var $i_o=__stackBase__+28;
        HEAP[$1]=$L;
        HEAP[$2]=$what;
        HEAP[$3]=$ar;
        HEAP[$f]=0;
        HEAP[$ci]=0;
        var $4=HEAP[$2];
        var $5=HEAP[$4];
        var $6=reSign(($5), 8, 0);
        var $7=((($6))|0)==62;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11+-12)&4294967295);
        HEAP[$func]=$12;
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=(($14+1)&4294967295);
        HEAP[$2]=$15;
        var $16=HEAP[$func];
        var $17=(($16)&4294967295);
        var $18=$17;
        var $19=HEAP[$18];
        var $20=$19;
        HEAP[$f]=$20;
        var $21=HEAP[$1];
        var $22=(($21+8)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23+-12)&4294967295);
        HEAP[$22]=$24;
        __label__ = 5; break;
      case 2: // $25
        var $26=HEAP[$3];
        var $27=(($26+96)&4294967295);
        var $28=HEAP[$27];
        var $29=((($28))|0)!=0;
        if ($29) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $30
        var $31=HEAP[$1];
        var $32=(($31+40)&4294967295);
        var $33=HEAP[$32];
        var $34=HEAP[$3];
        var $35=(($34+96)&4294967295);
        var $36=HEAP[$35];
        var $37=(($33+24*$36)&4294967295);
        HEAP[$ci]=$37;
        var $38=HEAP[$ci];
        var $39=(($38+4)&4294967295);
        var $40=HEAP[$39];
        var $41=(($40)&4294967295);
        var $42=$41;
        var $43=HEAP[$42];
        var $44=$43;
        HEAP[$f]=$44;
        __label__ = 4; break;
      case 4: // $45
        __label__ = 5; break;
      case 5: // $46
        var $47=HEAP[$1];
        var $48=HEAP[$2];
        var $49=HEAP[$3];
        var $50=HEAP[$f];
        var $51=HEAP[$ci];
        var $52=_auxgetinfo($47, $48, $49, $50, $51);
        HEAP[$status]=$52;
        var $53=HEAP[$2];
        var $54=_strchr($53, 102);
        var $55=((($54))|0)!=0;
        if ($55) { __label__ = 6; break; } else { __label__ = 13; break; }
      case 6: // $56
        var $57=HEAP[$f];
        var $58=((($57))|0)==0;
        if ($58) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $59
        var $60=HEAP[$1];
        var $61=(($60+8)&4294967295);
        var $62=HEAP[$61];
        var $63=(($62+8)&4294967295);
        HEAP[$63]=0;
        __label__ = 9; break;
      case 8: // $64
        var $65=HEAP[$1];
        var $66=(($65+8)&4294967295);
        var $67=HEAP[$66];
        HEAP[$i_o]=$67;
        var $68=HEAP[$f];
        var $69=$68;
        var $70=HEAP[$i_o];
        var $71=(($70)&4294967295);
        var $72=$71;
        HEAP[$72]=$69;
        var $73=HEAP[$i_o];
        var $74=(($73+8)&4294967295);
        HEAP[$74]=6;
        __label__ = 9; break;
      case 9: // $75
        var $76=HEAP[$1];
        var $77=(($76+28)&4294967295);
        var $78=HEAP[$77];
        var $79=$78;
        var $80=HEAP[$1];
        var $81=(($80+8)&4294967295);
        var $82=HEAP[$81];
        var $83=$82;
        var $84=($79);
        var $85=($83);
        var $86=((($84) - ($85))&4294967295);
        var $87=((($86))|0) <= 12;
        if ($87) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $88
        var $89=HEAP[$1];
        _luaD_growstack($89, 1);
        __label__ = 12; break;
      case 11: // $90
        __label__ = 12; break;
      case 12: // $91
        var $92=HEAP[$1];
        var $93=(($92+8)&4294967295);
        var $94=HEAP[$93];
        var $95=(($94+12)&4294967295);
        HEAP[$93]=$95;
        __label__ = 13; break;
      case 13: // $96
        var $97=HEAP[$2];
        var $98=_strchr($97, 76);
        var $99=((($98))|0)!=0;
        if ($99) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $100
        var $101=HEAP[$1];
        var $102=HEAP[$f];
        _collectvalidlines($101, $102);
        __label__ = 15; break;
      case 15: // $103
        var $104=HEAP[$status];
        STACKTOP = __stackBase__;
        return $104;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _auxgetinfo($L, $what, $ar, $f, $ci) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $6=__stackBase__+20;
        var $status=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$3]=$what;
        HEAP[$4]=$ar;
        HEAP[$5]=$f;
        HEAP[$6]=$ci;
        HEAP[$status]=1;
        var $7=HEAP[$5];
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$4];
        _info_tailcall($10);
        var $11=HEAP[$status];
        HEAP[$1]=$11;
        __label__ = 22; break;
      case 2: // $12
        __label__ = 3; break;
      case 3: // $13
        var $14=HEAP[$3];
        var $15=HEAP[$14];
        var $16=reSign(($15), 8, 0)!=0;
        if ($16) { __label__ = 4; break; } else { __label__ = 21; break; }
      case 4: // $17
        var $18=HEAP[$3];
        var $19=HEAP[$18];
        var $20=reSign(($19), 8, 0);
        if ($20 == 83) {
          __label__ = 5; break;
        }
        else if ($20 == 108) {
          __label__ = 6; break;
        }
        else if ($20 == 117) {
          __label__ = 10; break;
        }
        else if ($20 == 110) {
          __label__ = 11; break;
        }
        else if ($20 == 76) {
          __label__ = 17; break;
        }
        else if ($20 == 102) {
          __label__ = 17; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 5: // $21
        var $22=HEAP[$4];
        var $23=HEAP[$5];
        _funcinfo($22, $23);
        __label__ = 19; break;
      case 6: // $24
        var $25=HEAP[$6];
        var $26=((($25))|0)!=0;
        if ($26) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $27
        var $28=HEAP[$2];
        var $29=HEAP[$6];
        var $30=_currentline($28, $29);
        __lastLabel__ = 7; __label__ = 9; break;
      case 8: // $31
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $32
        var $33=__lastLabel__ == 7 ? $30 : (-1);
        var $34=HEAP[$4];
        var $35=(($34+20)&4294967295);
        HEAP[$35]=$33;
        __label__ = 19; break;
      case 10: // $36
        var $37=HEAP[$5];
        var $38=$37;
        var $39=(($38+7)&4294967295);
        var $40=HEAP[$39];
        var $41=unSign(($40), 8, 0);
        var $42=HEAP[$4];
        var $43=(($42+24)&4294967295);
        HEAP[$43]=$41;
        __label__ = 19; break;
      case 11: // $44
        var $45=HEAP[$6];
        var $46=((($45))|0)!=0;
        if ($46) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $47
        var $48=HEAP[$2];
        var $49=HEAP[$6];
        var $50=HEAP[$4];
        var $51=(($50+4)&4294967295);
        var $52=_getfuncname($48, $49, $51);
        __lastLabel__ = 12; __label__ = 14; break;
      case 13: // $53
        __lastLabel__ = 13; __label__ = 14; break;
      case 14: // $54
        var $55=__lastLabel__ == 12 ? $52 : (0);
        var $56=HEAP[$4];
        var $57=(($56+8)&4294967295);
        HEAP[$57]=$55;
        var $58=HEAP[$4];
        var $59=(($58+8)&4294967295);
        var $60=HEAP[$59];
        var $61=((($60))|0)==0;
        if ($61) { __label__ = 15; break; } else { __label__ = 16; break; }
      case 15: // $62
        var $63=HEAP[$4];
        var $64=(($63+8)&4294967295);
        HEAP[$64]=((__str13149)&4294967295);
        var $65=HEAP[$4];
        var $66=(($65+4)&4294967295);
        HEAP[$66]=0;
        __label__ = 16; break;
      case 16: // $67
        __label__ = 19; break;
      case 17: // $68
        __label__ = 19; break;
      case 18: // $69
        HEAP[$status]=0;
        __label__ = 19; break;
      case 19: // $70
        __label__ = 20; break;
      case 20: // $71
        var $72=HEAP[$3];
        var $73=(($72+1)&4294967295);
        HEAP[$3]=$73;
        __label__ = 3; break;
      case 21: // $74
        var $75=HEAP[$status];
        HEAP[$1]=$75;
        __label__ = 22; break;
      case 22: // $76
        var $77=HEAP[$1];
        STACKTOP = __stackBase__;
        return $77;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _collectvalidlines($L, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $t=__stackBase__+8;
        var $lineinfo=__stackBase__+12;
        var $i=__stackBase__+16;
        var $i_o=__stackBase__+20;
        var $i_o1=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$f;
        var $3=HEAP[$2];
        var $4=((($3))|0)==0;
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $5
        var $6=HEAP[$2];
        var $7=$6;
        var $8=(($7+6)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $12
        var $13=HEAP[$1];
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+8)&4294967295);
        HEAP[$16]=0;
        __label__ = 8; break;
      case 3: // $17
        var $18=HEAP[$1];
        var $19=_luaH_new($18, 0, 0);
        HEAP[$t]=$19;
        var $20=HEAP[$2];
        var $21=$20;
        var $22=(($21+16)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23+20)&4294967295);
        var $25=HEAP[$24];
        HEAP[$lineinfo]=$25;
        HEAP[$i]=0;
        __label__ = 4; break;
      case 4: // $26
        var $27=HEAP[$i];
        var $28=HEAP[$2];
        var $29=$28;
        var $30=(($29+16)&4294967295);
        var $31=HEAP[$30];
        var $32=(($31+48)&4294967295);
        var $33=HEAP[$32];
        var $34=((($27))|0) < ((($33))|0);
        if ($34) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $35
        var $36=HEAP[$1];
        var $37=HEAP[$t];
        var $38=HEAP[$i];
        var $39=HEAP[$lineinfo];
        var $40=(($39+4*$38)&4294967295);
        var $41=HEAP[$40];
        var $42=_luaH_setnum($36, $37, $41);
        HEAP[$i_o]=$42;
        var $43=HEAP[$i_o];
        var $44=(($43)&4294967295);
        var $45=$44;
        HEAP[$45]=1;
        var $46=HEAP[$i_o];
        var $47=(($46+8)&4294967295);
        HEAP[$47]=1;
        __label__ = 6; break;
      case 6: // $48
        var $49=HEAP[$i];
        var $50=((($49) + 1)&4294967295);
        HEAP[$i]=$50;
        __label__ = 4; break;
      case 7: // $51
        var $52=HEAP[$1];
        var $53=(($52+8)&4294967295);
        var $54=HEAP[$53];
        HEAP[$i_o1]=$54;
        var $55=HEAP[$t];
        var $56=$55;
        var $57=HEAP[$i_o1];
        var $58=(($57)&4294967295);
        var $59=$58;
        HEAP[$59]=$56;
        var $60=HEAP[$i_o1];
        var $61=(($60+8)&4294967295);
        HEAP[$61]=5;
        __label__ = 8; break;
      case 8: // $62
        var $63=HEAP[$1];
        var $64=(($63+28)&4294967295);
        var $65=HEAP[$64];
        var $66=$65;
        var $67=HEAP[$1];
        var $68=(($67+8)&4294967295);
        var $69=HEAP[$68];
        var $70=$69;
        var $71=($66);
        var $72=($70);
        var $73=((($71) - ($72))&4294967295);
        var $74=((($73))|0) <= 12;
        if ($74) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $75
        var $76=HEAP[$1];
        _luaD_growstack($76, 1);
        __label__ = 11; break;
      case 10: // $77
        __label__ = 11; break;
      case 11: // $78
        var $79=HEAP[$1];
        var $80=(($79+8)&4294967295);
        var $81=HEAP[$80];
        var $82=(($81+12)&4294967295);
        HEAP[$80]=$82;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaG_checkopenop($i) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$i;
        var $3=HEAP[$2];
        var $4=((($3))>>>0) >>> 0;
        var $5=($4) & 63;
        if ($5 == 28) {
          __label__ = 1; break;
        }
        else if ($5 == 29) {
          __label__ = 1; break;
        }
        else if ($5 == 30) {
          __label__ = 1; break;
        }
        else if ($5 == 34) {
          __label__ = 1; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $6
        var $7=HEAP[$2];
        var $8=((($7))>>>0) >>> 23;
        var $9=($8) & 511;
        var $10=((($9))|0)==0;
        if ($10) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $11
        HEAP[$1]=0;
        __label__ = 5; break;
      case 3: // $12
        HEAP[$1]=1;
        __label__ = 5; break;
      case 4: // $13
        HEAP[$1]=0;
        __label__ = 5; break;
      case 5: // $14
        var $15=HEAP[$1];
        STACKTOP = __stackBase__;
        return $15;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaG_checkcode($pt) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$pt;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=(($3+44)&4294967295);
    var $5=HEAP[$4];
    var $6=_symbexec($2, $5, 255);
    var $7=((($6))|0)!=0;
    var $8=unSign(($7), 1, 0);
    STACKTOP = __stackBase__;
    return $8;
  }
  

  function _symbexec($pt, $lastpc, $reg) {
    var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 72);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $pc=__stackBase__+16;
        var $last=__stackBase__+20;
        var $i=__stackBase__+24;
        var $op=__stackBase__+28;
        var $a=__stackBase__+32;
        var $b=__stackBase__+36;
        var $c=__stackBase__+40;
        var $dest=__stackBase__+44;
        var $j=__stackBase__+48;
        var $d=__stackBase__+52;
        var $dest1=__stackBase__+56;
        var $nup=__stackBase__+60;
        var $j2=__stackBase__+64;
        var $op1=__stackBase__+68;
        HEAP[$2]=$pt;
        HEAP[$3]=$lastpc;
        HEAP[$4]=$reg;
        var $5=HEAP[$2];
        var $6=(($5+44)&4294967295);
        var $7=HEAP[$6];
        var $8=((($7) - 1)&4294967295);
        HEAP[$last]=$8;
        var $9=HEAP[$2];
        var $10=_precheck($9);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $12
        HEAP[$1]=0;
        __label__ = 146; break;
      case 2: // $13
        HEAP[$pc]=0;
        __label__ = 3; break;
      case 3: // $14
        var $15=HEAP[$pc];
        var $16=HEAP[$3];
        var $17=((($15))|0) < ((($16))|0);
        if ($17) { __label__ = 4; break; } else { __label__ = 145; break; }
      case 4: // $18
        var $19=HEAP[$pc];
        var $20=HEAP[$2];
        var $21=(($20+12)&4294967295);
        var $22=HEAP[$21];
        var $23=(($22+4*$19)&4294967295);
        var $24=HEAP[$23];
        HEAP[$i]=$24;
        var $25=HEAP[$i];
        var $26=((($25))>>>0) >>> 0;
        var $27=($26) & 63;
        HEAP[$op]=$27;
        var $28=HEAP[$i];
        var $29=((($28))>>>0) >>> 6;
        var $30=($29) & 255;
        HEAP[$a]=$30;
        HEAP[$b]=0;
        HEAP[$c]=0;
        var $31=HEAP[$op];
        var $32=((($31))>>>0) < 38;
        if ($32) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $33
        HEAP[$1]=0;
        __label__ = 146; break;
      case 6: // $34
        var $35=HEAP[$a];
        var $36=HEAP[$2];
        var $37=(($36+75)&4294967295);
        var $38=HEAP[$37];
        var $39=unSign(($38), 8, 0);
        var $40=((($35))|0) < ((($39))|0);
        if ($40) { __label__ = 8; break; } else { __label__ = 7; break; }
      case 7: // $41
        HEAP[$1]=0;
        __label__ = 146; break;
      case 8: // $42
        var $43=HEAP[$op];
        var $44=((_luaP_opmodes+$43)&4294967295);
        var $45=HEAP[$44];
        var $46=unSign(($45), 8, 0);
        var $47=($46) & 3;
        if ($47 == 0) {
          __label__ = 9; break;
        }
        else if ($47 == 1) {
          __label__ = 14; break;
        }
        else if ($47 == 2) {
          __label__ = 19; break;
        }
        else {
        __label__ = 36; break;
        }
        
      case 9: // $48
        var $49=HEAP[$i];
        var $50=((($49))>>>0) >>> 23;
        var $51=($50) & 511;
        HEAP[$b]=$51;
        var $52=HEAP[$i];
        var $53=((($52))>>>0) >>> 14;
        var $54=($53) & 511;
        HEAP[$c]=$54;
        var $55=HEAP[$2];
        var $56=HEAP[$b];
        var $57=HEAP[$op];
        var $58=((_luaP_opmodes+$57)&4294967295);
        var $59=HEAP[$58];
        var $60=unSign(($59), 8, 0);
        var $61=((($60))|0) >> 4;
        var $62=($61) & 3;
        var $63=_checkArgMode($55, $56, $62);
        var $64=((($63))|0)!=0;
        if ($64) { __label__ = 11; break; } else { __label__ = 10; break; }
      case 10: // $65
        HEAP[$1]=0;
        __label__ = 146; break;
      case 11: // $66
        var $67=HEAP[$2];
        var $68=HEAP[$c];
        var $69=HEAP[$op];
        var $70=((_luaP_opmodes+$69)&4294967295);
        var $71=HEAP[$70];
        var $72=unSign(($71), 8, 0);
        var $73=((($72))|0) >> 2;
        var $74=($73) & 3;
        var $75=_checkArgMode($67, $68, $74);
        var $76=((($75))|0)!=0;
        if ($76) { __label__ = 13; break; } else { __label__ = 12; break; }
      case 12: // $77
        HEAP[$1]=0;
        __label__ = 146; break;
      case 13: // $78
        __label__ = 36; break;
      case 14: // $79
        var $80=HEAP[$i];
        var $81=((($80))>>>0) >>> 14;
        var $82=($81) & 262143;
        HEAP[$b]=$82;
        var $83=HEAP[$op];
        var $84=((_luaP_opmodes+$83)&4294967295);
        var $85=HEAP[$84];
        var $86=unSign(($85), 8, 0);
        var $87=((($86))|0) >> 4;
        var $88=($87) & 3;
        var $89=((($88))|0)==3;
        if ($89) { __label__ = 15; break; } else { __label__ = 18; break; }
      case 15: // $90
        var $91=HEAP[$b];
        var $92=HEAP[$2];
        var $93=(($92+40)&4294967295);
        var $94=HEAP[$93];
        var $95=((($91))|0) < ((($94))|0);
        if ($95) { __label__ = 17; break; } else { __label__ = 16; break; }
      case 16: // $96
        HEAP[$1]=0;
        __label__ = 146; break;
      case 17: // $97
        __label__ = 18; break;
      case 18: // $98
        __label__ = 36; break;
      case 19: // $99
        var $100=HEAP[$i];
        var $101=((($100))>>>0) >>> 14;
        var $102=($101) & 262143;
        var $103=((($102) - 131071)&4294967295);
        HEAP[$b]=$103;
        var $104=HEAP[$op];
        var $105=((_luaP_opmodes+$104)&4294967295);
        var $106=HEAP[$105];
        var $107=unSign(($106), 8, 0);
        var $108=((($107))|0) >> 4;
        var $109=($108) & 3;
        var $110=((($109))|0)==2;
        if ($110) { __label__ = 20; break; } else { __label__ = 35; break; }
      case 20: // $111
        var $112=HEAP[$pc];
        var $113=((($112) + 1)&4294967295);
        var $114=HEAP[$b];
        var $115=((($113) + ($114))&4294967295);
        HEAP[$dest]=$115;
        var $116=HEAP[$dest];
        var $117=0 <= ((($116))|0);
        if ($117) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $118
        var $119=HEAP[$dest];
        var $120=HEAP[$2];
        var $121=(($120+44)&4294967295);
        var $122=HEAP[$121];
        var $123=((($119))|0) < ((($122))|0);
        if ($123) { __label__ = 23; break; } else { __label__ = 22; break; }
      case 22: // $124
        HEAP[$1]=0;
        __label__ = 146; break;
      case 23: // $125
        var $126=HEAP[$dest];
        var $127=((($126))|0) > 0;
        if ($127) { __label__ = 24; break; } else { __label__ = 34; break; }
      case 24: // $128
        HEAP[$j]=0;
        __label__ = 25; break;
      case 25: // $129
        var $130=HEAP[$j];
        var $131=HEAP[$dest];
        var $132=((($130))|0) < ((($131))|0);
        if ($132) { __label__ = 26; break; } else { __label__ = 31; break; }
      case 26: // $133
        var $134=HEAP[$dest];
        var $135=((($134) - 1)&4294967295);
        var $136=HEAP[$j];
        var $137=((($135) - ($136))&4294967295);
        var $138=HEAP[$2];
        var $139=(($138+12)&4294967295);
        var $140=HEAP[$139];
        var $141=(($140+4*$137)&4294967295);
        var $142=HEAP[$141];
        HEAP[$d]=$142;
        var $143=HEAP[$d];
        var $144=((($143))>>>0) >>> 0;
        var $145=($144) & 63;
        var $146=((($145))|0)==34;
        if ($146) { __label__ = 27; break; } else { __label__ = 28; break; }
      case 27: // $147
        var $148=HEAP[$d];
        var $149=((($148))>>>0) >>> 14;
        var $150=($149) & 511;
        var $151=((($150))|0)==0;
        if ($151) { __label__ = 29; break; } else { __label__ = 28; break; }
      case 28: // $152
        __label__ = 31; break;
      case 29: // $153
        __label__ = 30; break;
      case 30: // $154
        var $155=HEAP[$j];
        var $156=((($155) + 1)&4294967295);
        HEAP[$j]=$156;
        __label__ = 25; break;
      case 31: // $157
        var $158=HEAP[$j];
        var $159=($158) & 1;
        var $160=((($159))|0)==0;
        if ($160) { __label__ = 33; break; } else { __label__ = 32; break; }
      case 32: // $161
        HEAP[$1]=0;
        __label__ = 146; break;
      case 33: // $162
        __label__ = 34; break;
      case 34: // $163
        __label__ = 35; break;
      case 35: // $164
        __label__ = 36; break;
      case 36: // $165
        var $166=HEAP[$op];
        var $167=((_luaP_opmodes+$166)&4294967295);
        var $168=HEAP[$167];
        var $169=unSign(($168), 8, 0);
        var $170=($169) & 64;
        var $171=((($170))|0)!=0;
        if ($171) { __label__ = 37; break; } else { __label__ = 40; break; }
      case 37: // $172
        var $173=HEAP[$a];
        var $174=HEAP[$4];
        var $175=((($173))|0)==((($174))|0);
        if ($175) { __label__ = 38; break; } else { __label__ = 39; break; }
      case 38: // $176
        var $177=HEAP[$pc];
        HEAP[$last]=$177;
        __label__ = 39; break;
      case 39: // $178
        __label__ = 40; break;
      case 40: // $179
        var $180=HEAP[$op];
        var $181=((_luaP_opmodes+$180)&4294967295);
        var $182=HEAP[$181];
        var $183=unSign(($182), 8, 0);
        var $184=($183) & 128;
        var $185=((($184))|0)!=0;
        if ($185) { __label__ = 41; break; } else { __label__ = 46; break; }
      case 41: // $186
        var $187=HEAP[$pc];
        var $188=((($187) + 2)&4294967295);
        var $189=HEAP[$2];
        var $190=(($189+44)&4294967295);
        var $191=HEAP[$190];
        var $192=((($188))|0) < ((($191))|0);
        if ($192) { __label__ = 43; break; } else { __label__ = 42; break; }
      case 42: // $193
        HEAP[$1]=0;
        __label__ = 146; break;
      case 43: // $194
        var $195=HEAP[$pc];
        var $196=((($195) + 1)&4294967295);
        var $197=HEAP[$2];
        var $198=(($197+12)&4294967295);
        var $199=HEAP[$198];
        var $200=(($199+4*$196)&4294967295);
        var $201=HEAP[$200];
        var $202=((($201))>>>0) >>> 0;
        var $203=($202) & 63;
        var $204=((($203))|0)==22;
        if ($204) { __label__ = 45; break; } else { __label__ = 44; break; }
      case 44: // $205
        HEAP[$1]=0;
        __label__ = 146; break;
      case 45: // $206
        __label__ = 46; break;
      case 46: // $207
        var $208=HEAP[$op];
        if ($208 == 2) {
          __label__ = 47; break;
        }
        else if ($208 == 3) {
          __label__ = 55; break;
        }
        else if ($208 == 4) {
          __label__ = 59; break;
        }
        else if ($208 == 8) {
          __label__ = 59; break;
        }
        else if ($208 == 5) {
          __label__ = 62; break;
        }
        else if ($208 == 7) {
          __label__ = 62; break;
        }
        else if ($208 == 11) {
          __label__ = 65; break;
        }
        else if ($208 == 21) {
          __label__ = 70; break;
        }
        else if ($208 == 33) {
          __label__ = 73; break;
        }
        else if ($208 == 31) {
          __label__ = 80; break;
        }
        else if ($208 == 32) {
          __label__ = 80; break;
        }
        else if ($208 == 22) {
          __label__ = 83; break;
        }
        else if ($208 == 28) {
          __label__ = 88; break;
        }
        else if ($208 == 29) {
          __label__ = 88; break;
        }
        else if ($208 == 30) {
          __label__ = 104; break;
        }
        else if ($208 == 34) {
          __label__ = 109; break;
        }
        else if ($208 == 36) {
          __label__ = 118; break;
        }
        else if ($208 == 37) {
          __label__ = 132; break;
        }
        else {
        __label__ = 142; break;
        }
        
      case 47: // $209
        var $210=HEAP[$c];
        var $211=((($210))|0)==1;
        if ($211) { __label__ = 48; break; } else { __label__ = 54; break; }
      case 48: // $212
        var $213=HEAP[$pc];
        var $214=((($213) + 2)&4294967295);
        var $215=HEAP[$2];
        var $216=(($215+44)&4294967295);
        var $217=HEAP[$216];
        var $218=((($214))|0) < ((($217))|0);
        if ($218) { __label__ = 50; break; } else { __label__ = 49; break; }
      case 49: // $219
        HEAP[$1]=0;
        __label__ = 146; break;
      case 50: // $220
        var $221=HEAP[$pc];
        var $222=((($221) + 1)&4294967295);
        var $223=HEAP[$2];
        var $224=(($223+12)&4294967295);
        var $225=HEAP[$224];
        var $226=(($225+4*$222)&4294967295);
        var $227=HEAP[$226];
        var $228=((($227))>>>0) >>> 0;
        var $229=($228) & 63;
        var $230=((($229))|0)!=34;
        if ($230) { __label__ = 53; break; } else { __label__ = 51; break; }
      case 51: // $231
        var $232=HEAP[$pc];
        var $233=((($232) + 1)&4294967295);
        var $234=HEAP[$2];
        var $235=(($234+12)&4294967295);
        var $236=HEAP[$235];
        var $237=(($236+4*$233)&4294967295);
        var $238=HEAP[$237];
        var $239=((($238))>>>0) >>> 14;
        var $240=($239) & 511;
        var $241=((($240))|0)!=0;
        if ($241) { __label__ = 53; break; } else { __label__ = 52; break; }
      case 52: // $242
        HEAP[$1]=0;
        __label__ = 146; break;
      case 53: // $243
        __label__ = 54; break;
      case 54: // $244
        __label__ = 143; break;
      case 55: // $245
        var $246=HEAP[$a];
        var $247=HEAP[$4];
        var $248=((($246))|0) <= ((($247))|0);
        if ($248) { __label__ = 56; break; } else { __label__ = 58; break; }
      case 56: // $249
        var $250=HEAP[$4];
        var $251=HEAP[$b];
        var $252=((($250))|0) <= ((($251))|0);
        if ($252) { __label__ = 57; break; } else { __label__ = 58; break; }
      case 57: // $253
        var $254=HEAP[$pc];
        HEAP[$last]=$254;
        __label__ = 58; break;
      case 58: // $255
        __label__ = 143; break;
      case 59: // $256
        var $257=HEAP[$b];
        var $258=HEAP[$2];
        var $259=(($258+72)&4294967295);
        var $260=HEAP[$259];
        var $261=unSign(($260), 8, 0);
        var $262=((($257))|0) < ((($261))|0);
        if ($262) { __label__ = 61; break; } else { __label__ = 60; break; }
      case 60: // $263
        HEAP[$1]=0;
        __label__ = 146; break;
      case 61: // $264
        __label__ = 143; break;
      case 62: // $265
        var $266=HEAP[$b];
        var $267=HEAP[$2];
        var $268=(($267+8)&4294967295);
        var $269=HEAP[$268];
        var $270=(($269+12*$266)&4294967295);
        var $271=(($270+8)&4294967295);
        var $272=HEAP[$271];
        var $273=((($272))|0)==4;
        if ($273) { __label__ = 64; break; } else { __label__ = 63; break; }
      case 63: // $274
        HEAP[$1]=0;
        __label__ = 146; break;
      case 64: // $275
        __label__ = 143; break;
      case 65: // $276
        var $277=HEAP[$a];
        var $278=((($277) + 1)&4294967295);
        var $279=HEAP[$2];
        var $280=(($279+75)&4294967295);
        var $281=HEAP[$280];
        var $282=unSign(($281), 8, 0);
        var $283=((($278))|0) < ((($282))|0);
        if ($283) { __label__ = 67; break; } else { __label__ = 66; break; }
      case 66: // $284
        HEAP[$1]=0;
        __label__ = 146; break;
      case 67: // $285
        var $286=HEAP[$4];
        var $287=HEAP[$a];
        var $288=((($287) + 1)&4294967295);
        var $289=((($286))|0)==((($288))|0);
        if ($289) { __label__ = 68; break; } else { __label__ = 69; break; }
      case 68: // $290
        var $291=HEAP[$pc];
        HEAP[$last]=$291;
        __label__ = 69; break;
      case 69: // $292
        __label__ = 143; break;
      case 70: // $293
        var $294=HEAP[$b];
        var $295=HEAP[$c];
        var $296=((($294))|0) < ((($295))|0);
        if ($296) { __label__ = 72; break; } else { __label__ = 71; break; }
      case 71: // $297
        HEAP[$1]=0;
        __label__ = 146; break;
      case 72: // $298
        __label__ = 143; break;
      case 73: // $299
        var $300=HEAP[$c];
        var $301=((($300))|0) >= 1;
        if ($301) { __label__ = 75; break; } else { __label__ = 74; break; }
      case 74: // $302
        HEAP[$1]=0;
        __label__ = 146; break;
      case 75: // $303
        var $304=HEAP[$a];
        var $305=((($304) + 2)&4294967295);
        var $306=HEAP[$c];
        var $307=((($305) + ($306))&4294967295);
        var $308=HEAP[$2];
        var $309=(($308+75)&4294967295);
        var $310=HEAP[$309];
        var $311=unSign(($310), 8, 0);
        var $312=((($307))|0) < ((($311))|0);
        if ($312) { __label__ = 77; break; } else { __label__ = 76; break; }
      case 76: // $313
        HEAP[$1]=0;
        __label__ = 146; break;
      case 77: // $314
        var $315=HEAP[$4];
        var $316=HEAP[$a];
        var $317=((($316) + 2)&4294967295);
        var $318=((($315))|0) >= ((($317))|0);
        if ($318) { __label__ = 78; break; } else { __label__ = 79; break; }
      case 78: // $319
        var $320=HEAP[$pc];
        HEAP[$last]=$320;
        __label__ = 79; break;
      case 79: // $321
        __label__ = 143; break;
      case 80: // $322
        var $323=HEAP[$a];
        var $324=((($323) + 3)&4294967295);
        var $325=HEAP[$2];
        var $326=(($325+75)&4294967295);
        var $327=HEAP[$326];
        var $328=unSign(($327), 8, 0);
        var $329=((($324))|0) < ((($328))|0);
        if ($329) { __label__ = 82; break; } else { __label__ = 81; break; }
      case 81: // $330
        HEAP[$1]=0;
        __label__ = 146; break;
      case 82: // $331
        __label__ = 83; break;
      case 83: // $332
        var $333=HEAP[$pc];
        var $334=((($333) + 1)&4294967295);
        var $335=HEAP[$b];
        var $336=((($334) + ($335))&4294967295);
        HEAP[$dest1]=$336;
        var $337=HEAP[$4];
        var $338=((($337))|0)!=255;
        if ($338) { __label__ = 84; break; } else { __label__ = 87; break; }
      case 84: // $339
        var $340=HEAP[$pc];
        var $341=HEAP[$dest1];
        var $342=((($340))|0) < ((($341))|0);
        if ($342) { __label__ = 85; break; } else { __label__ = 87; break; }
      case 85: // $343
        var $344=HEAP[$dest1];
        var $345=HEAP[$3];
        var $346=((($344))|0) <= ((($345))|0);
        if ($346) { __label__ = 86; break; } else { __label__ = 87; break; }
      case 86: // $347
        var $348=HEAP[$b];
        var $349=HEAP[$pc];
        var $350=((($349) + ($348))&4294967295);
        HEAP[$pc]=$350;
        __label__ = 87; break;
      case 87: // $351
        __label__ = 143; break;
      case 88: // $352
        var $353=HEAP[$b];
        var $354=((($353))|0)!=0;
        if ($354) { __label__ = 89; break; } else { __label__ = 92; break; }
      case 89: // $355
        var $356=HEAP[$a];
        var $357=HEAP[$b];
        var $358=((($356) + ($357))&4294967295);
        var $359=((($358) - 1)&4294967295);
        var $360=HEAP[$2];
        var $361=(($360+75)&4294967295);
        var $362=HEAP[$361];
        var $363=unSign(($362), 8, 0);
        var $364=((($359))|0) < ((($363))|0);
        if ($364) { __label__ = 91; break; } else { __label__ = 90; break; }
      case 90: // $365
        HEAP[$1]=0;
        __label__ = 146; break;
      case 91: // $366
        __label__ = 92; break;
      case 92: // $367
        var $368=HEAP[$c];
        var $369=((($368) + -1)&4294967295);
        HEAP[$c]=$369;
        var $370=HEAP[$c];
        var $371=((($370))|0)==-1;
        if ($371) { __label__ = 93; break; } else { __label__ = 96; break; }
      case 93: // $372
        var $373=HEAP[$pc];
        var $374=((($373) + 1)&4294967295);
        var $375=HEAP[$2];
        var $376=(($375+12)&4294967295);
        var $377=HEAP[$376];
        var $378=(($377+4*$374)&4294967295);
        var $379=HEAP[$378];
        var $380=_luaG_checkopenop($379);
        var $381=((($380))|0)!=0;
        if ($381) { __label__ = 95; break; } else { __label__ = 94; break; }
      case 94: // $382
        HEAP[$1]=0;
        __label__ = 146; break;
      case 95: // $383
        __label__ = 101; break;
      case 96: // $384
        var $385=HEAP[$c];
        var $386=((($385))|0)!=0;
        if ($386) { __label__ = 97; break; } else { __label__ = 100; break; }
      case 97: // $387
        var $388=HEAP[$a];
        var $389=HEAP[$c];
        var $390=((($388) + ($389))&4294967295);
        var $391=((($390) - 1)&4294967295);
        var $392=HEAP[$2];
        var $393=(($392+75)&4294967295);
        var $394=HEAP[$393];
        var $395=unSign(($394), 8, 0);
        var $396=((($391))|0) < ((($395))|0);
        if ($396) { __label__ = 99; break; } else { __label__ = 98; break; }
      case 98: // $397
        HEAP[$1]=0;
        __label__ = 146; break;
      case 99: // $398
        __label__ = 100; break;
      case 100: // $399
        __label__ = 101; break;
      case 101: // $400
        var $401=HEAP[$4];
        var $402=HEAP[$a];
        var $403=((($401))|0) >= ((($402))|0);
        if ($403) { __label__ = 102; break; } else { __label__ = 103; break; }
      case 102: // $404
        var $405=HEAP[$pc];
        HEAP[$last]=$405;
        __label__ = 103; break;
      case 103: // $406
        __label__ = 143; break;
      case 104: // $407
        var $408=HEAP[$b];
        var $409=((($408) + -1)&4294967295);
        HEAP[$b]=$409;
        var $410=HEAP[$b];
        var $411=((($410))|0) > 0;
        if ($411) { __label__ = 105; break; } else { __label__ = 108; break; }
      case 105: // $412
        var $413=HEAP[$a];
        var $414=HEAP[$b];
        var $415=((($413) + ($414))&4294967295);
        var $416=((($415) - 1)&4294967295);
        var $417=HEAP[$2];
        var $418=(($417+75)&4294967295);
        var $419=HEAP[$418];
        var $420=unSign(($419), 8, 0);
        var $421=((($416))|0) < ((($420))|0);
        if ($421) { __label__ = 107; break; } else { __label__ = 106; break; }
      case 106: // $422
        HEAP[$1]=0;
        __label__ = 146; break;
      case 107: // $423
        __label__ = 108; break;
      case 108: // $424
        __label__ = 143; break;
      case 109: // $425
        var $426=HEAP[$b];
        var $427=((($426))|0) > 0;
        if ($427) { __label__ = 110; break; } else { __label__ = 113; break; }
      case 110: // $428
        var $429=HEAP[$a];
        var $430=HEAP[$b];
        var $431=((($429) + ($430))&4294967295);
        var $432=HEAP[$2];
        var $433=(($432+75)&4294967295);
        var $434=HEAP[$433];
        var $435=unSign(($434), 8, 0);
        var $436=((($431))|0) < ((($435))|0);
        if ($436) { __label__ = 112; break; } else { __label__ = 111; break; }
      case 111: // $437
        HEAP[$1]=0;
        __label__ = 146; break;
      case 112: // $438
        __label__ = 113; break;
      case 113: // $439
        var $440=HEAP[$c];
        var $441=((($440))|0)==0;
        if ($441) { __label__ = 114; break; } else { __label__ = 117; break; }
      case 114: // $442
        var $443=HEAP[$pc];
        var $444=((($443) + 1)&4294967295);
        HEAP[$pc]=$444;
        var $445=HEAP[$pc];
        var $446=HEAP[$2];
        var $447=(($446+44)&4294967295);
        var $448=HEAP[$447];
        var $449=((($448) - 1)&4294967295);
        var $450=((($445))|0) < ((($449))|0);
        if ($450) { __label__ = 116; break; } else { __label__ = 115; break; }
      case 115: // $451
        HEAP[$1]=0;
        __label__ = 146; break;
      case 116: // $452
        __label__ = 117; break;
      case 117: // $453
        __label__ = 143; break;
      case 118: // $454
        var $455=HEAP[$b];
        var $456=HEAP[$2];
        var $457=(($456+52)&4294967295);
        var $458=HEAP[$457];
        var $459=((($455))|0) < ((($458))|0);
        if ($459) { __label__ = 120; break; } else { __label__ = 119; break; }
      case 119: // $460
        HEAP[$1]=0;
        __label__ = 146; break;
      case 120: // $461
        var $462=HEAP[$b];
        var $463=HEAP[$2];
        var $464=(($463+16)&4294967295);
        var $465=HEAP[$464];
        var $466=(($465+4*$462)&4294967295);
        var $467=HEAP[$466];
        var $468=(($467+72)&4294967295);
        var $469=HEAP[$468];
        var $470=unSign(($469), 8, 0);
        HEAP[$nup]=$470;
        var $471=HEAP[$pc];
        var $472=HEAP[$nup];
        var $473=((($471) + ($472))&4294967295);
        var $474=HEAP[$2];
        var $475=(($474+44)&4294967295);
        var $476=HEAP[$475];
        var $477=((($473))|0) < ((($476))|0);
        if ($477) { __label__ = 122; break; } else { __label__ = 121; break; }
      case 121: // $478
        HEAP[$1]=0;
        __label__ = 146; break;
      case 122: // $479
        HEAP[$j2]=1;
        __label__ = 123; break;
      case 123: // $480
        var $481=HEAP[$j2];
        var $482=HEAP[$nup];
        var $483=((($481))|0) <= ((($482))|0);
        if ($483) { __label__ = 124; break; } else { __label__ = 129; break; }
      case 124: // $484
        var $485=HEAP[$pc];
        var $486=HEAP[$j2];
        var $487=((($485) + ($486))&4294967295);
        var $488=HEAP[$2];
        var $489=(($488+12)&4294967295);
        var $490=HEAP[$489];
        var $491=(($490+4*$487)&4294967295);
        var $492=HEAP[$491];
        var $493=((($492))>>>0) >>> 0;
        var $494=($493) & 63;
        HEAP[$op1]=$494;
        var $495=HEAP[$op1];
        var $496=((($495))|0)==4;
        if ($496) { __label__ = 127; break; } else { __label__ = 125; break; }
      case 125: // $497
        var $498=HEAP[$op1];
        var $499=((($498))|0)==0;
        if ($499) { __label__ = 127; break; } else { __label__ = 126; break; }
      case 126: // $500
        HEAP[$1]=0;
        __label__ = 146; break;
      case 127: // $501
        __label__ = 128; break;
      case 128: // $502
        var $503=HEAP[$j2];
        var $504=((($503) + 1)&4294967295);
        HEAP[$j2]=$504;
        __label__ = 123; break;
      case 129: // $505
        var $506=HEAP[$4];
        var $507=((($506))|0)!=255;
        if ($507) { __label__ = 130; break; } else { __label__ = 131; break; }
      case 130: // $508
        var $509=HEAP[$nup];
        var $510=HEAP[$pc];
        var $511=((($510) + ($509))&4294967295);
        HEAP[$pc]=$511;
        __label__ = 131; break;
      case 131: // $512
        __label__ = 143; break;
      case 132: // $513
        var $514=HEAP[$2];
        var $515=(($514+74)&4294967295);
        var $516=HEAP[$515];
        var $517=unSign(($516), 8, 0);
        var $518=($517) & 2;
        var $519=((($518))|0)!=0;
        if ($519) { __label__ = 133; break; } else { __label__ = 134; break; }
      case 133: // $520
        var $521=HEAP[$2];
        var $522=(($521+74)&4294967295);
        var $523=HEAP[$522];
        var $524=unSign(($523), 8, 0);
        var $525=($524) & 4;
        var $526=((($525))|0)!=0;
        if ($526) { __label__ = 134; break; } else { __label__ = 135; break; }
      case 134: // $527
        HEAP[$1]=0;
        __label__ = 146; break;
      case 135: // $528
        var $529=HEAP[$b];
        var $530=((($529) + -1)&4294967295);
        HEAP[$b]=$530;
        var $531=HEAP[$b];
        var $532=((($531))|0)==-1;
        if ($532) { __label__ = 136; break; } else { __label__ = 139; break; }
      case 136: // $533
        var $534=HEAP[$pc];
        var $535=((($534) + 1)&4294967295);
        var $536=HEAP[$2];
        var $537=(($536+12)&4294967295);
        var $538=HEAP[$537];
        var $539=(($538+4*$535)&4294967295);
        var $540=HEAP[$539];
        var $541=_luaG_checkopenop($540);
        var $542=((($541))|0)!=0;
        if ($542) { __label__ = 138; break; } else { __label__ = 137; break; }
      case 137: // $543
        HEAP[$1]=0;
        __label__ = 146; break;
      case 138: // $544
        __label__ = 139; break;
      case 139: // $545
        var $546=HEAP[$a];
        var $547=HEAP[$b];
        var $548=((($546) + ($547))&4294967295);
        var $549=((($548) - 1)&4294967295);
        var $550=HEAP[$2];
        var $551=(($550+75)&4294967295);
        var $552=HEAP[$551];
        var $553=unSign(($552), 8, 0);
        var $554=((($549))|0) < ((($553))|0);
        if ($554) { __label__ = 141; break; } else { __label__ = 140; break; }
      case 140: // $555
        HEAP[$1]=0;
        __label__ = 146; break;
      case 141: // $556
        __label__ = 143; break;
      case 142: // $557
        __label__ = 143; break;
      case 143: // $558
        __label__ = 144; break;
      case 144: // $559
        var $560=HEAP[$pc];
        var $561=((($560) + 1)&4294967295);
        HEAP[$pc]=$561;
        __label__ = 3; break;
      case 145: // $562
        var $563=HEAP[$last];
        var $564=HEAP[$2];
        var $565=(($564+12)&4294967295);
        var $566=HEAP[$565];
        var $567=(($566+4*$563)&4294967295);
        var $568=HEAP[$567];
        HEAP[$1]=$568;
        __label__ = 146; break;
      case 146: // $569
        var $570=HEAP[$1];
        STACKTOP = __stackBase__;
        return $570;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaG_typeerror($L, $o, $op) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $name=__stackBase__+12;
        var $t=__stackBase__+16;
        var $kind=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$o;
        HEAP[$3]=$op;
        HEAP[$name]=0;
        var $4=HEAP[$2];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((_luaT_typenames+$6*4)&4294967295);
        var $8=HEAP[$7];
        HEAP[$t]=$8;
        var $9=HEAP[$1];
        var $10=(($9+20)&4294967295);
        var $11=HEAP[$10];
        var $12=HEAP[$2];
        var $13=_isinstack($11, $12);
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$1];
        var $17=HEAP[$1];
        var $18=(($17+20)&4294967295);
        var $19=HEAP[$18];
        var $20=HEAP[$2];
        var $21=HEAP[$1];
        var $22=(($21+12)&4294967295);
        var $23=HEAP[$22];
        var $24=($20);
        var $25=($23);
        var $26=((($24) - ($25))&4294967295);
        var $27=((((($26))|0)/12)|0);
        var $28=_getobjname($16, $19, $27, $name);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $29
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $30
        var $31=__lastLabel__ == 1 ? $28 : (0);
        HEAP[$kind]=$31;
        var $32=HEAP[$kind];
        var $33=((($32))|0)!=0;
        if ($33) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $34
        var $35=HEAP[$1];
        var $36=HEAP[$3];
        var $37=HEAP[$kind];
        var $38=HEAP[$name];
        var $39=HEAP[$t];
        _luaG_runerror($35, ((__str136)&4294967295), allocate([$36,0,0,0,$37,0,0,0,$38,0,0,0,$39,0,0,0], ["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 6; break;
      case 5: // $40
        var $41=HEAP[$1];
        var $42=HEAP[$3];
        var $43=HEAP[$t];
        _luaG_runerror($41, ((__str1137)&4294967295), allocate([$42,0,0,0,$43,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 6; break;
      case 6: // $44
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _isinstack($ci, $o) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $p=__stackBase__+12;
        HEAP[$2]=$ci;
        HEAP[$3]=$o;
        var $4=HEAP[$2];
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        HEAP[$p]=$6;
        __label__ = 1; break;
      case 1: // $7
        var $8=HEAP[$p];
        var $9=HEAP[$2];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=((($8))>>>0) < ((($11))>>>0);
        if ($12) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $13
        var $14=HEAP[$3];
        var $15=HEAP[$p];
        var $16=((($14))|0)==((($15))|0);
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        HEAP[$1]=1;
        __label__ = 7; break;
      case 4: // $18
        __label__ = 5; break;
      case 5: // $19
        var $20=HEAP[$p];
        var $21=(($20+12)&4294967295);
        HEAP[$p]=$21;
        __label__ = 1; break;
      case 6: // $22
        HEAP[$1]=0;
        __label__ = 7; break;
      case 7: // $23
        var $24=HEAP[$1];
        STACKTOP = __stackBase__;
        return $24;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getobjname($L, $ci, $stackpos, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $p=__stackBase__+20;
        var $pc=__stackBase__+24;
        var $i=__stackBase__+28;
        var $g=__stackBase__+32;
        var $a=__stackBase__+36;
        var $b=__stackBase__+40;
        var $k=__stackBase__+44;
        var $u=__stackBase__+48;
        var $k1=__stackBase__+52;
        HEAP[$2]=$L;
        HEAP[$3]=$ci;
        HEAP[$4]=$stackpos;
        HEAP[$5]=$name;
        var $6=HEAP[$3];
        var $7=(($6+4)&4294967295);
        var $8=HEAP[$7];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10))|0)==6;
        if ($11) { __label__ = 1; break; } else { __label__ = 17; break; }
      case 1: // $12
        var $13=HEAP[$3];
        var $14=(($13+4)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15)&4294967295);
        var $17=$16;
        var $18=HEAP[$17];
        var $19=$18;
        var $20=$19;
        var $21=(($20+6)&4294967295);
        var $22=HEAP[$21];
        var $23=reSign(($22), 8, 0)!=0;
        if ($23) { __label__ = 17; break; } else { __label__ = 2; break; }
      case 2: // $24
        var $25=HEAP[$3];
        var $26=(($25+4)&4294967295);
        var $27=HEAP[$26];
        var $28=(($27)&4294967295);
        var $29=$28;
        var $30=HEAP[$29];
        var $31=$30;
        var $32=$31;
        var $33=(($32+16)&4294967295);
        var $34=HEAP[$33];
        HEAP[$p]=$34;
        var $35=HEAP[$2];
        var $36=HEAP[$3];
        var $37=_currentpc($35, $36);
        HEAP[$pc]=$37;
        var $38=HEAP[$p];
        var $39=HEAP[$4];
        var $40=((($39) + 1)&4294967295);
        var $41=HEAP[$pc];
        var $42=_luaF_getlocalname($38, $40, $41);
        var $43=HEAP[$5];
        HEAP[$43]=$42;
        var $44=HEAP[$5];
        var $45=HEAP[$44];
        var $46=((($45))|0)!=0;
        if ($46) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $47
        HEAP[$1]=((__str7143)&4294967295);
        __label__ = 18; break;
      case 4: // $48
        var $49=HEAP[$p];
        var $50=HEAP[$pc];
        var $51=HEAP[$4];
        var $52=_symbexec($49, $50, $51);
        HEAP[$i]=$52;
        var $53=HEAP[$i];
        var $54=((($53))>>>0) >>> 0;
        var $55=($54) & 63;
        if ($55 == 5) {
          __label__ = 5; break;
        }
        else if ($55 == 0) {
          __label__ = 6; break;
        }
        else if ($55 == 6) {
          __label__ = 9; break;
        }
        else if ($55 == 4) {
          __label__ = 10; break;
        }
        else if ($55 == 11) {
          __label__ = 14; break;
        }
        else {
        __label__ = 15; break;
        }
        
      case 5: // $56
        var $57=HEAP[$i];
        var $58=((($57))>>>0) >>> 14;
        var $59=($58) & 262143;
        HEAP[$g]=$59;
        var $60=HEAP[$g];
        var $61=HEAP[$p];
        var $62=(($61+8)&4294967295);
        var $63=HEAP[$62];
        var $64=(($63+12*$60)&4294967295);
        var $65=(($64)&4294967295);
        var $66=$65;
        var $67=HEAP[$66];
        var $68=$67;
        var $69=(($68+16)&4294967295);
        var $70=$69;
        var $71=HEAP[$5];
        HEAP[$71]=$70;
        HEAP[$1]=((__str8144)&4294967295);
        __label__ = 18; break;
      case 6: // $72
        var $73=HEAP[$i];
        var $74=((($73))>>>0) >>> 6;
        var $75=($74) & 255;
        HEAP[$a]=$75;
        var $76=HEAP[$i];
        var $77=((($76))>>>0) >>> 23;
        var $78=($77) & 511;
        HEAP[$b]=$78;
        var $79=HEAP[$b];
        var $80=HEAP[$a];
        var $81=((($79))|0) < ((($80))|0);
        if ($81) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $82
        var $83=HEAP[$2];
        var $84=HEAP[$3];
        var $85=HEAP[$b];
        var $86=HEAP[$5];
        var $87=_getobjname($83, $84, $85, $86);
        HEAP[$1]=$87;
        __label__ = 18; break;
      case 8: // $88
        __label__ = 16; break;
      case 9: // $89
        var $90=HEAP[$i];
        var $91=((($90))>>>0) >>> 14;
        var $92=($91) & 511;
        HEAP[$k]=$92;
        var $93=HEAP[$p];
        var $94=HEAP[$k];
        var $95=_kname($93, $94);
        var $96=HEAP[$5];
        HEAP[$96]=$95;
        HEAP[$1]=((__str9145)&4294967295);
        __label__ = 18; break;
      case 10: // $97
        var $98=HEAP[$i];
        var $99=((($98))>>>0) >>> 23;
        var $100=($99) & 511;
        HEAP[$u]=$100;
        var $101=HEAP[$p];
        var $102=(($101+28)&4294967295);
        var $103=HEAP[$102];
        var $104=((($103))|0)!=0;
        if ($104) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $105
        var $106=HEAP[$u];
        var $107=HEAP[$p];
        var $108=(($107+28)&4294967295);
        var $109=HEAP[$108];
        var $110=(($109+4*$106)&4294967295);
        var $111=HEAP[$110];
        var $112=(($111+16)&4294967295);
        var $113=$112;
        __lastLabel__ = 11; __label__ = 13; break;
      case 12: // $114
        __lastLabel__ = 12; __label__ = 13; break;
      case 13: // $115
        var $116=__lastLabel__ == 11 ? $113 : (((__str10146)&4294967295));
        var $117=HEAP[$5];
        HEAP[$117]=$116;
        HEAP[$1]=((__str11147)&4294967295);
        __label__ = 18; break;
      case 14: // $118
        var $119=HEAP[$i];
        var $120=((($119))>>>0) >>> 14;
        var $121=($120) & 511;
        HEAP[$k1]=$121;
        var $122=HEAP[$p];
        var $123=HEAP[$k1];
        var $124=_kname($122, $123);
        var $125=HEAP[$5];
        HEAP[$125]=$124;
        HEAP[$1]=((__str12148)&4294967295);
        __label__ = 18; break;
      case 15: // $126
        __label__ = 16; break;
      case 16: // $127
        __label__ = 17; break;
      case 17: // $128
        HEAP[$1]=0;
        __label__ = 18; break;
      case 18: // $129
        var $130=HEAP[$1];
        STACKTOP = __stackBase__;
        return $130;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaG_runerror($L, $fmt) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $argp=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$fmt;
    var $3=$argp;
    HEAP[$3]=arguments[_luaG_runerror.length];;
    var $4=HEAP[$1];
    var $5=HEAP[$1];
    var $6=HEAP[$2];
    var $7=HEAP[$argp];
    var $8=_luaO_pushvfstring($5, $6, $7);
    _addinfo($4, $8);
    var $9=$argp;
    ;;
    var $10=HEAP[$1];
    _luaG_errormsg($10);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaG_concaterror($L, $p1, $p2) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$p1;
        HEAP[$3]=$p2;
        var $4=HEAP[$2];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==4;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$2];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))|0)==3;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$3];
        HEAP[$2]=$14;
        __label__ = 3; break;
      case 3: // $15
        var $16=HEAP[$1];
        var $17=HEAP[$2];
        _luaG_typeerror($16, $17, ((__str2138)&4294967295));
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaG_aritherror($L, $p1, $p2) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $temp=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$p1;
        HEAP[$3]=$p2;
        var $4=HEAP[$2];
        var $5=_luaV_tonumber($4, $temp);
        var $6=((($5))|0)==0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$2];
        HEAP[$3]=$8;
        __label__ = 2; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$3];
        _luaG_typeerror($10, $11, ((__str3139)&4294967295));
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaG_ordererror($L, $p1, $p2) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $t1=__stackBase__+12;
        var $t2=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$p1;
        HEAP[$3]=$p2;
        var $4=HEAP[$2];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((_luaT_typenames+$6*4)&4294967295);
        var $8=HEAP[$7];
        HEAP[$t1]=$8;
        var $9=HEAP[$3];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=((_luaT_typenames+$11*4)&4294967295);
        var $13=HEAP[$12];
        HEAP[$t2]=$13;
        var $14=HEAP[$t1];
        var $15=(($14+2)&4294967295);
        var $16=HEAP[$15];
        var $17=reSign(($16), 8, 0);
        var $18=HEAP[$t2];
        var $19=(($18+2)&4294967295);
        var $20=HEAP[$19];
        var $21=reSign(($20), 8, 0);
        var $22=((($17))|0)==((($21))|0);
        if ($22) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$t1];
        _luaG_runerror($24, ((__str4140)&4294967295), allocate([$25,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 3; break;
      case 2: // $26
        var $27=HEAP[$1];
        var $28=HEAP[$t1];
        var $29=HEAP[$t2];
        _luaG_runerror($27, ((__str5141)&4294967295), allocate([$28,0,0,0,$29,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $30
        STACKTOP = __stackBase__;
        return 0;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaG_errormsg($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $errfunc=__stackBase__+4;
        var $o2=__stackBase__+8;
        var $o1=__stackBase__+12;
        var $o21=__stackBase__+16;
        var $o12=__stackBase__+20;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+108)&4294967295);
        var $4=HEAP[$3];
        var $5=((($4))|0)!=0;
        if ($5) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 1: // $6
        var $7=HEAP[$1];
        var $8=(($7+32)&4294967295);
        var $9=HEAP[$8];
        var $10=$9;
        var $11=HEAP[$1];
        var $12=(($11+108)&4294967295);
        var $13=HEAP[$12];
        var $14=(($10+$13)&4294967295);
        var $15=$14;
        HEAP[$errfunc]=$15;
        var $16=HEAP[$errfunc];
        var $17=(($16+8)&4294967295);
        var $18=HEAP[$17];
        var $19=((($18))|0)==6;
        if ($19) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $20
        var $21=HEAP[$1];
        _luaD_throw($21, 5);
        __label__ = 3; break;
      case 3: // $22
        var $23=HEAP[$1];
        var $24=(($23+8)&4294967295);
        var $25=HEAP[$24];
        var $26=(($25+-12)&4294967295);
        HEAP[$o2]=$26;
        var $27=HEAP[$1];
        var $28=(($27+8)&4294967295);
        var $29=HEAP[$28];
        HEAP[$o1]=$29;
        var $30=HEAP[$o1];
        var $31=(($30)&4294967295);
        var $32=HEAP[$o2];
        var $33=(($32)&4294967295);
        var $34=$31;
        var $35=$33;
        _llvm_memcpy_p0i8_p0i8_i32($34, $35, 8, 4, 0);
        var $36=HEAP[$o2];
        var $37=(($36+8)&4294967295);
        var $38=HEAP[$37];
        var $39=HEAP[$o1];
        var $40=(($39+8)&4294967295);
        HEAP[$40]=$38;
        var $41=HEAP[$errfunc];
        HEAP[$o21]=$41;
        var $42=HEAP[$1];
        var $43=(($42+8)&4294967295);
        var $44=HEAP[$43];
        var $45=(($44+-12)&4294967295);
        HEAP[$o12]=$45;
        var $46=HEAP[$o12];
        var $47=(($46)&4294967295);
        var $48=HEAP[$o21];
        var $49=(($48)&4294967295);
        var $50=$47;
        var $51=$49;
        _llvm_memcpy_p0i8_p0i8_i32($50, $51, 8, 4, 0);
        var $52=HEAP[$o21];
        var $53=(($52+8)&4294967295);
        var $54=HEAP[$53];
        var $55=HEAP[$o12];
        var $56=(($55+8)&4294967295);
        HEAP[$56]=$54;
        var $57=HEAP[$1];
        var $58=(($57+28)&4294967295);
        var $59=HEAP[$58];
        var $60=$59;
        var $61=HEAP[$1];
        var $62=(($61+8)&4294967295);
        var $63=HEAP[$62];
        var $64=$63;
        var $65=($60);
        var $66=($64);
        var $67=((($65) - ($66))&4294967295);
        var $68=((($67))|0) <= 12;
        if ($68) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $69
        var $70=HEAP[$1];
        _luaD_growstack($70, 1);
        __label__ = 6; break;
      case 5: // $71
        __label__ = 6; break;
      case 6: // $72
        var $73=HEAP[$1];
        var $74=(($73+8)&4294967295);
        var $75=HEAP[$74];
        var $76=(($75+12)&4294967295);
        HEAP[$74]=$76;
        var $77=HEAP[$1];
        var $78=HEAP[$1];
        var $79=(($78+8)&4294967295);
        var $80=HEAP[$79];
        var $81=(($80+-24)&4294967295);
        _luaD_call($77, $81, 1);
        __label__ = 7; break;
      case 7: // $82
        var $83=HEAP[$1];
        _luaD_throw($83, 2);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _addinfo($L, $msg) {
    var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 76);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $ci=__stackBase__+8;
        var $buff=__stackBase__+12;
        var $line=__stackBase__+72;
        HEAP[$1]=$L;
        HEAP[$2]=$msg;
        var $3=HEAP[$1];
        var $4=(($3+20)&4294967295);
        var $5=HEAP[$4];
        HEAP[$ci]=$5;
        var $6=HEAP[$ci];
        var $7=(($6+4)&4294967295);
        var $8=HEAP[$7];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10))|0)==6;
        if ($11) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $12
        var $13=HEAP[$ci];
        var $14=(($13+4)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15)&4294967295);
        var $17=$16;
        var $18=HEAP[$17];
        var $19=$18;
        var $20=$19;
        var $21=(($20+6)&4294967295);
        var $22=HEAP[$21];
        var $23=reSign(($22), 8, 0)!=0;
        if ($23) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$ci];
        var $27=_currentline($25, $26);
        HEAP[$line]=$27;
        var $28=(($buff)&4294967295);
        var $29=HEAP[$ci];
        var $30=_getluaproto($29);
        var $31=(($30+32)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+16)&4294967295);
        var $34=$33;
        _luaO_chunkid($28, $34, 60);
        var $35=HEAP[$1];
        var $36=(($buff)&4294967295);
        var $37=HEAP[$line];
        var $38=HEAP[$2];
        var $39=_luaO_pushfstring($35, ((__str6142)&4294967295), allocate([$36,0,0,0,$37,0,0,0,$38,0,0,0], ["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $40
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _currentline($L, $ci) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $pc=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$ci;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=_currentpc($4, $5);
        HEAP[$pc]=$6;
        var $7=HEAP[$pc];
        var $8=((($7))|0) < 0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        HEAP[$1]=-1;
        __label__ = 6; break;
      case 2: // $10
        var $11=HEAP[$3];
        var $12=(($11+4)&4294967295);
        var $13=HEAP[$12];
        var $14=(($13)&4294967295);
        var $15=$14;
        var $16=HEAP[$15];
        var $17=$16;
        var $18=$17;
        var $19=(($18+16)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+20)&4294967295);
        var $22=HEAP[$21];
        var $23=((($22))|0)!=0;
        if ($23) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $24
        var $25=HEAP[$pc];
        var $26=HEAP[$3];
        var $27=(($26+4)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28)&4294967295);
        var $30=$29;
        var $31=HEAP[$30];
        var $32=$31;
        var $33=$32;
        var $34=(($33+16)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+20)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37+4*$25)&4294967295);
        var $39=HEAP[$38];
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $40
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $41
        var $42=__lastLabel__ == 3 ? $39 : (0);
        HEAP[$1]=$42;
        __label__ = 6; break;
      case 6: // $43
        var $44=HEAP[$1];
        STACKTOP = __stackBase__;
        return $44;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getluaproto($ci) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$ci;
        var $2=HEAP[$1];
        var $3=(($2+4)&4294967295);
        var $4=HEAP[$3];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==6;
        if ($7) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=(($9+4)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11)&4294967295);
        var $13=$12;
        var $14=HEAP[$13];
        var $15=$14;
        var $16=$15;
        var $17=(($16+6)&4294967295);
        var $18=HEAP[$17];
        var $19=reSign(($18), 8, 0)!=0;
        if ($19) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $20
        var $21=HEAP[$1];
        var $22=(($21+4)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23)&4294967295);
        var $25=$24;
        var $26=HEAP[$25];
        var $27=$26;
        var $28=$27;
        var $29=(($28+16)&4294967295);
        var $30=HEAP[$29];
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $31
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $32
        var $33=__lastLabel__ == 2 ? $30 : (0);
        STACKTOP = __stackBase__;
        return $33;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _currentpc($L, $ci) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$L;
        HEAP[$3]=$ci;
        var $4=HEAP[$3];
        var $5=(($4+4)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0)==6;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$3];
        var $12=(($11+4)&4294967295);
        var $13=HEAP[$12];
        var $14=(($13)&4294967295);
        var $15=$14;
        var $16=HEAP[$15];
        var $17=$16;
        var $18=$17;
        var $19=(($18+6)&4294967295);
        var $20=HEAP[$19];
        var $21=reSign(($20), 8, 0)!=0;
        if ($21) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $22
        HEAP[$1]=-1;
        __label__ = 6; break;
      case 3: // $23
        var $24=HEAP[$3];
        var $25=HEAP[$2];
        var $26=(($25+20)&4294967295);
        var $27=HEAP[$26];
        var $28=((($24))|0)==((($27))|0);
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $29
        var $30=HEAP[$2];
        var $31=(($30+24)&4294967295);
        var $32=HEAP[$31];
        var $33=HEAP[$3];
        var $34=(($33+12)&4294967295);
        HEAP[$34]=$32;
        __label__ = 5; break;
      case 5: // $35
        var $36=HEAP[$3];
        var $37=(($36+12)&4294967295);
        var $38=HEAP[$37];
        var $39=HEAP[$3];
        var $40=(($39+4)&4294967295);
        var $41=HEAP[$40];
        var $42=(($41)&4294967295);
        var $43=$42;
        var $44=HEAP[$43];
        var $45=$44;
        var $46=$45;
        var $47=(($46+16)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48+12)&4294967295);
        var $50=HEAP[$49];
        var $51=($38);
        var $52=($50);
        var $53=((($51) - ($52))&4294967295);
        var $54=((((($53))|0)/4)|0);
        var $55=((($54) - 1)&4294967295);
        HEAP[$1]=$55;
        __label__ = 6; break;
      case 6: // $56
        var $57=HEAP[$1];
        STACKTOP = __stackBase__;
        return $57;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _kname($p, $c) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$p;
        HEAP[$3]=$c;
        var $4=HEAP[$3];
        var $5=($4) & 256;
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $7
        var $8=HEAP[$3];
        var $9=($8) & -257;
        var $10=HEAP[$2];
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        var $13=(($12+12*$9)&4294967295);
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        var $16=((($15))|0)==4;
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $17
        var $18=HEAP[$3];
        var $19=($18) & -257;
        var $20=HEAP[$2];
        var $21=(($20+8)&4294967295);
        var $22=HEAP[$21];
        var $23=(($22+12*$19)&4294967295);
        var $24=(($23)&4294967295);
        var $25=$24;
        var $26=HEAP[$25];
        var $27=$26;
        var $28=(($27+16)&4294967295);
        var $29=$28;
        HEAP[$1]=$29;
        __label__ = 4; break;
      case 3: // $30
        HEAP[$1]=((__str10146)&4294967295);
        __label__ = 4; break;
      case 4: // $31
        var $32=HEAP[$1];
        STACKTOP = __stackBase__;
        return $32;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _precheck($pt) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$pt;
        var $3=HEAP[$2];
        var $4=(($3+75)&4294967295);
        var $5=HEAP[$4];
        var $6=unSign(($5), 8, 0);
        var $7=((($6))|0) <= 250;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        HEAP[$1]=0;
        __label__ = 16; break;
      case 2: // $9
        var $10=HEAP[$2];
        var $11=(($10+73)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=HEAP[$2];
        var $15=(($14+74)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        var $18=($17) & 1;
        var $19=((($13) + ($18))&4294967295);
        var $20=HEAP[$2];
        var $21=(($20+75)&4294967295);
        var $22=HEAP[$21];
        var $23=unSign(($22), 8, 0);
        var $24=((($19))|0) <= ((($23))|0);
        if ($24) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $25
        HEAP[$1]=0;
        __label__ = 16; break;
      case 4: // $26
        var $27=HEAP[$2];
        var $28=(($27+74)&4294967295);
        var $29=HEAP[$28];
        var $30=unSign(($29), 8, 0);
        var $31=($30) & 4;
        var $32=((($31))|0)!=0;
        if ($32) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $33
        var $34=HEAP[$2];
        var $35=(($34+74)&4294967295);
        var $36=HEAP[$35];
        var $37=unSign(($36), 8, 0);
        var $38=($37) & 1;
        var $39=((($38))|0)!=0;
        if ($39) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $40
        HEAP[$1]=0;
        __label__ = 16; break;
      case 7: // $41
        var $42=HEAP[$2];
        var $43=(($42+36)&4294967295);
        var $44=HEAP[$43];
        var $45=HEAP[$2];
        var $46=(($45+72)&4294967295);
        var $47=HEAP[$46];
        var $48=unSign(($47), 8, 0);
        var $49=((($44))|0) <= ((($48))|0);
        if ($49) { __label__ = 9; break; } else { __label__ = 8; break; }
      case 8: // $50
        HEAP[$1]=0;
        __label__ = 16; break;
      case 9: // $51
        var $52=HEAP[$2];
        var $53=(($52+48)&4294967295);
        var $54=HEAP[$53];
        var $55=HEAP[$2];
        var $56=(($55+44)&4294967295);
        var $57=HEAP[$56];
        var $58=((($54))|0)==((($57))|0);
        if ($58) { __label__ = 12; break; } else { __label__ = 10; break; }
      case 10: // $59
        var $60=HEAP[$2];
        var $61=(($60+48)&4294967295);
        var $62=HEAP[$61];
        var $63=((($62))|0)==0;
        if ($63) { __label__ = 12; break; } else { __label__ = 11; break; }
      case 11: // $64
        HEAP[$1]=0;
        __label__ = 16; break;
      case 12: // $65
        var $66=HEAP[$2];
        var $67=(($66+44)&4294967295);
        var $68=HEAP[$67];
        var $69=((($68))|0) > 0;
        if ($69) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $70
        var $71=HEAP[$2];
        var $72=(($71+44)&4294967295);
        var $73=HEAP[$72];
        var $74=((($73) - 1)&4294967295);
        var $75=HEAP[$2];
        var $76=(($75+12)&4294967295);
        var $77=HEAP[$76];
        var $78=(($77+4*$74)&4294967295);
        var $79=HEAP[$78];
        var $80=((($79))>>>0) >>> 0;
        var $81=($80) & 63;
        var $82=((($81))|0)==30;
        if ($82) { __label__ = 15; break; } else { __label__ = 14; break; }
      case 14: // $83
        HEAP[$1]=0;
        __label__ = 16; break;
      case 15: // $84
        HEAP[$1]=1;
        __label__ = 16; break;
      case 16: // $85
        var $86=HEAP[$1];
        STACKTOP = __stackBase__;
        return $86;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _checkArgMode($pt, $r, $mode) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$2]=$pt;
        HEAP[$3]=$r;
        HEAP[$4]=$mode;
        var $5=HEAP[$4];
        if ($5 == 0) {
          __label__ = 1; break;
        }
        else if ($5 == 1) {
          __label__ = 4; break;
        }
        else if ($5 == 2) {
          __label__ = 5; break;
        }
        else if ($5 == 3) {
          __label__ = 8; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 1: // $6
        var $7=HEAP[$3];
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $9
        HEAP[$1]=0;
        __label__ = 14; break;
      case 3: // $10
        __label__ = 13; break;
      case 4: // $11
        __label__ = 13; break;
      case 5: // $12
        var $13=HEAP[$3];
        var $14=HEAP[$2];
        var $15=(($14+75)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        var $18=((($13))|0) < ((($17))|0);
        if ($18) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $19
        HEAP[$1]=0;
        __label__ = 14; break;
      case 7: // $20
        __label__ = 13; break;
      case 8: // $21
        var $22=HEAP[$3];
        var $23=($22) & 256;
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $25
        var $26=HEAP[$3];
        var $27=($26) & -257;
        var $28=HEAP[$2];
        var $29=(($28+40)&4294967295);
        var $30=HEAP[$29];
        var $31=((($27))|0) < ((($30))|0);
        if ($31) { __label__ = 12; break; } else { __label__ = 11; break; }
      case 10: // $32
        var $33=HEAP[$3];
        var $34=HEAP[$2];
        var $35=(($34+75)&4294967295);
        var $36=HEAP[$35];
        var $37=unSign(($36), 8, 0);
        var $38=((($33))|0) < ((($37))|0);
        if ($38) { __label__ = 12; break; } else { __label__ = 11; break; }
      case 11: // $39
        HEAP[$1]=0;
        __label__ = 14; break;
      case 12: // $40
        __label__ = 13; break;
      case 13: // $41
        HEAP[$1]=1;
        __label__ = 14; break;
      case 14: // $42
        var $43=HEAP[$1];
        STACKTOP = __stackBase__;
        return $43;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _info_tailcall($ar) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$ar;
    var $2=HEAP[$1];
    var $3=(($2+8)&4294967295);
    HEAP[$3]=((__str13149)&4294967295);
    var $4=HEAP[$1];
    var $5=(($4+4)&4294967295);
    HEAP[$5]=((__str13149)&4294967295);
    var $6=HEAP[$1];
    var $7=(($6+12)&4294967295);
    HEAP[$7]=((__str18154)&4294967295);
    var $8=HEAP[$1];
    var $9=(($8+20)&4294967295);
    HEAP[$9]=-1;
    var $10=HEAP[$1];
    var $11=(($10+28)&4294967295);
    HEAP[$11]=-1;
    var $12=HEAP[$1];
    var $13=(($12+32)&4294967295);
    HEAP[$13]=-1;
    var $14=HEAP[$1];
    var $15=(($14+16)&4294967295);
    HEAP[$15]=((__str19155)&4294967295);
    var $16=HEAP[$1];
    var $17=(($16+36)&4294967295);
    var $18=(($17)&4294967295);
    var $19=HEAP[$1];
    var $20=(($19+16)&4294967295);
    var $21=HEAP[$20];
    _luaO_chunkid($18, $21, 60);
    var $22=HEAP[$1];
    var $23=(($22+24)&4294967295);
    HEAP[$23]=0;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _funcinfo($ar, $cl) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$ar;
        HEAP[$2]=$cl;
        var $3=HEAP[$2];
        var $4=$3;
        var $5=(($4+6)&4294967295);
        var $6=HEAP[$5];
        var $7=reSign(($6), 8, 0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=(($9+16)&4294967295);
        HEAP[$10]=((__str14150)&4294967295);
        var $11=HEAP[$1];
        var $12=(($11+28)&4294967295);
        HEAP[$12]=-1;
        var $13=HEAP[$1];
        var $14=(($13+32)&4294967295);
        HEAP[$14]=-1;
        var $15=HEAP[$1];
        var $16=(($15+12)&4294967295);
        HEAP[$16]=((__str15151)&4294967295);
        __label__ = 6; break;
      case 2: // $17
        var $18=HEAP[$2];
        var $19=$18;
        var $20=(($19+16)&4294967295);
        var $21=HEAP[$20];
        var $22=(($21+32)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23+16)&4294967295);
        var $25=$24;
        var $26=HEAP[$1];
        var $27=(($26+16)&4294967295);
        HEAP[$27]=$25;
        var $28=HEAP[$2];
        var $29=$28;
        var $30=(($29+16)&4294967295);
        var $31=HEAP[$30];
        var $32=(($31+60)&4294967295);
        var $33=HEAP[$32];
        var $34=HEAP[$1];
        var $35=(($34+28)&4294967295);
        HEAP[$35]=$33;
        var $36=HEAP[$2];
        var $37=$36;
        var $38=(($37+16)&4294967295);
        var $39=HEAP[$38];
        var $40=(($39+64)&4294967295);
        var $41=HEAP[$40];
        var $42=HEAP[$1];
        var $43=(($42+32)&4294967295);
        HEAP[$43]=$41;
        var $44=HEAP[$1];
        var $45=(($44+28)&4294967295);
        var $46=HEAP[$45];
        var $47=((($46))|0)==0;
        if ($47) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $48
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $49
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $50
        var $51=__lastLabel__ == 3 ? ((__str16152)&4294967295) : (((__str17153)&4294967295));
        var $52=HEAP[$1];
        var $53=(($52+12)&4294967295);
        HEAP[$53]=$51;
        __label__ = 6; break;
      case 6: // $54
        var $55=HEAP[$1];
        var $56=(($55+36)&4294967295);
        var $57=(($56)&4294967295);
        var $58=HEAP[$1];
        var $59=(($58+16)&4294967295);
        var $60=HEAP[$59];
        _luaO_chunkid($57, $60, 60);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getfuncname($L, $ci, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$ci;
        HEAP[$4]=$name;
        var $5=HEAP[$3];
        var $6=(($5+4)&4294967295);
        var $7=HEAP[$6];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        var $10=((($9))|0)==6;
        if ($10) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $11
        var $12=HEAP[$3];
        var $13=(($12+4)&4294967295);
        var $14=HEAP[$13];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        var $18=$17;
        var $19=$18;
        var $20=(($19+6)&4294967295);
        var $21=HEAP[$20];
        var $22=reSign(($21), 8, 0)!=0;
        if ($22) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $23
        var $24=HEAP[$3];
        var $25=(($24+20)&4294967295);
        var $26=HEAP[$25];
        var $27=((($26))|0) > 0;
        if ($27) { __label__ = 5; break; } else { __label__ = 3; break; }
      case 3: // $28
        var $29=HEAP[$3];
        var $30=(($29+-24)&4294967295);
        var $31=(($30+4)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+8)&4294967295);
        var $34=HEAP[$33];
        var $35=((($34))|0)==6;
        if ($35) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $36
        var $37=HEAP[$3];
        var $38=(($37+-24)&4294967295);
        var $39=(($38+4)&4294967295);
        var $40=HEAP[$39];
        var $41=(($40)&4294967295);
        var $42=$41;
        var $43=HEAP[$42];
        var $44=$43;
        var $45=$44;
        var $46=(($45+6)&4294967295);
        var $47=HEAP[$46];
        var $48=reSign(($47), 8, 0)!=0;
        if ($48) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $49
        HEAP[$1]=0;
        __label__ = 11; break;
      case 6: // $50
        var $51=HEAP[$3];
        var $52=(($51+-24)&4294967295);
        HEAP[$3]=$52;
        var $53=HEAP[$2];
        var $54=HEAP[$3];
        var $55=_currentpc($53, $54);
        var $56=HEAP[$3];
        var $57=(($56+4)&4294967295);
        var $58=HEAP[$57];
        var $59=(($58)&4294967295);
        var $60=$59;
        var $61=HEAP[$60];
        var $62=$61;
        var $63=$62;
        var $64=(($63+16)&4294967295);
        var $65=HEAP[$64];
        var $66=(($65+12)&4294967295);
        var $67=HEAP[$66];
        var $68=(($67+4*$55)&4294967295);
        var $69=HEAP[$68];
        HEAP[$i]=$69;
        var $70=HEAP[$i];
        var $71=((($70))>>>0) >>> 0;
        var $72=($71) & 63;
        var $73=((($72))|0)==28;
        if ($73) { __label__ = 9; break; } else { __label__ = 7; break; }
      case 7: // $74
        var $75=HEAP[$i];
        var $76=((($75))>>>0) >>> 0;
        var $77=($76) & 63;
        var $78=((($77))|0)==29;
        if ($78) { __label__ = 9; break; } else { __label__ = 8; break; }
      case 8: // $79
        var $80=HEAP[$i];
        var $81=((($80))>>>0) >>> 0;
        var $82=($81) & 63;
        var $83=((($82))|0)==33;
        if ($83) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $84
        var $85=HEAP[$2];
        var $86=HEAP[$3];
        var $87=HEAP[$i];
        var $88=((($87))>>>0) >>> 6;
        var $89=($88) & 255;
        var $90=HEAP[$4];
        var $91=_getobjname($85, $86, $89, $90);
        HEAP[$1]=$91;
        __label__ = 11; break;
      case 10: // $92
        HEAP[$1]=0;
        __label__ = 11; break;
      case 11: // $93
        var $94=HEAP[$1];
        STACKTOP = __stackBase__;
        return $94;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_seterrorobj($L, $errcode, $oldtop) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i_o=__stackBase__+12;
        var $i_o1=__stackBase__+16;
        var $o2=__stackBase__+20;
        var $o1=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$errcode;
        HEAP[$3]=$oldtop;
        var $4=HEAP[$2];
        if ($4 == 4) {
          __label__ = 1; break;
        }
        else if ($4 == 5) {
          __label__ = 2; break;
        }
        else if ($4 == 3) {
          __label__ = 3; break;
        }
        else if ($4 == 2) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $5
        var $6=HEAP[$3];
        HEAP[$i_o]=$6;
        var $7=HEAP[$1];
        var $8=_luaS_newlstr($7, ((__str167)&4294967295), 17);
        var $9=$8;
        var $10=HEAP[$i_o];
        var $11=(($10)&4294967295);
        var $12=$11;
        HEAP[$12]=$9;
        var $13=HEAP[$i_o];
        var $14=(($13+8)&4294967295);
        HEAP[$14]=4;
        __label__ = 4; break;
      case 2: // $15
        var $16=HEAP[$3];
        HEAP[$i_o1]=$16;
        var $17=HEAP[$1];
        var $18=_luaS_newlstr($17, ((__str1168)&4294967295), 23);
        var $19=$18;
        var $20=HEAP[$i_o1];
        var $21=(($20)&4294967295);
        var $22=$21;
        HEAP[$22]=$19;
        var $23=HEAP[$i_o1];
        var $24=(($23+8)&4294967295);
        HEAP[$24]=4;
        __label__ = 4; break;
      case 3: // $25
        var $26=HEAP[$1];
        var $27=(($26+8)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28+-12)&4294967295);
        HEAP[$o2]=$29;
        var $30=HEAP[$3];
        HEAP[$o1]=$30;
        var $31=HEAP[$o1];
        var $32=(($31)&4294967295);
        var $33=HEAP[$o2];
        var $34=(($33)&4294967295);
        var $35=$32;
        var $36=$34;
        _llvm_memcpy_p0i8_p0i8_i32($35, $36, 8, 4, 0);
        var $37=HEAP[$o2];
        var $38=(($37+8)&4294967295);
        var $39=HEAP[$38];
        var $40=HEAP[$o1];
        var $41=(($40+8)&4294967295);
        HEAP[$41]=$39;
        __label__ = 4; break;
      case 4: // $42
        var $43=HEAP[$3];
        var $44=(($43+12)&4294967295);
        var $45=HEAP[$1];
        var $46=(($45+8)&4294967295);
        HEAP[$46]=$44;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_throw($L, $errcode) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$errcode;
        var $3=HEAP[$1];
        var $4=(($3+104)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$2];
        var $9=HEAP[$1];
        var $10=(($9+104)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11+160)&4294967295);
        HEAP[$12]=$8;
        var $13=HEAP[$1];
        var $14=(($13+104)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+4)&4294967295);
        var $17=(($16)&4294967295);
        _longjmp($17, 1);
        throw "Reached an unreachable!"
      case 2: // $18
        var $19=HEAP[$2];
        var $20=((($19)) & 255);
        var $21=HEAP[$1];
        var $22=(($21+6)&4294967295);
        HEAP[$22]=$20;
        var $23=HEAP[$1];
        var $24=(($23+16)&4294967295);
        var $25=HEAP[$24];
        var $26=(($25+88)&4294967295);
        var $27=HEAP[$26];
        var $28=((($27))|0)!=0;
        if ($28) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $29
        var $30=HEAP[$1];
        var $31=HEAP[$2];
        _resetstack($30, $31);
        var $32=HEAP[$1];
        var $33=(($32+16)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+88)&4294967295);
        var $36=HEAP[$35];
        var $37=HEAP[$1];
        var $38=FUNCTION_TABLE[$36]($37);
        __label__ = 4; break;
      case 4: // $39
        _exit(1);
        throw "Reached an unreachable!"
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _resetstack($L, $status) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$status;
    var $3=HEAP[$1];
    var $4=(($3+40)&4294967295);
    var $5=HEAP[$4];
    var $6=HEAP[$1];
    var $7=(($6+20)&4294967295);
    HEAP[$7]=$5;
    var $8=HEAP[$1];
    var $9=(($8+20)&4294967295);
    var $10=HEAP[$9];
    var $11=(($10)&4294967295);
    var $12=HEAP[$11];
    var $13=HEAP[$1];
    var $14=(($13+12)&4294967295);
    HEAP[$14]=$12;
    var $15=HEAP[$1];
    var $16=HEAP[$1];
    var $17=(($16+12)&4294967295);
    var $18=HEAP[$17];
    _luaF_close($15, $18);
    var $19=HEAP[$1];
    var $20=HEAP[$2];
    var $21=HEAP[$1];
    var $22=(($21+12)&4294967295);
    var $23=HEAP[$22];
    _luaD_seterrorobj($19, $20, $23);
    var $24=HEAP[$1];
    var $25=(($24+54)&4294967295);
    var $26=HEAP[$25];
    var $27=HEAP[$1];
    var $28=(($27+52)&4294967295);
    HEAP[$28]=$26;
    var $29=HEAP[$1];
    var $30=(($29+57)&4294967295);
    HEAP[$30]=1;
    var $31=HEAP[$1];
    _restore_stack_limit($31);
    var $32=HEAP[$1];
    var $33=(($32+108)&4294967295);
    HEAP[$33]=0;
    var $34=HEAP[$1];
    var $35=(($34+104)&4294967295);
    HEAP[$35]=0;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaD_rawrunprotected($L, $f, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 176; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 176);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $lj=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$f;
        HEAP[$3]=$ud;
        var $4=(($lj+160)&4294967295);
        HEAP[$4]=0;
        var $5=HEAP[$1];
        var $6=(($5+104)&4294967295);
        var $7=HEAP[$6];
        var $8=(($lj)&4294967295);
        HEAP[$8]=$7;
        var $9=HEAP[$1];
        var $10=(($9+104)&4294967295);
        HEAP[$10]=$lj;
        var $11=(($lj+4)&4294967295);
        var $12=(($11)&4294967295);
        var $13=__setjmp($12);
        var $14=((($13))|0)==0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$2];
        var $17=HEAP[$1];
        var $18=HEAP[$3];
        FUNCTION_TABLE[$16]($17, $18);
        __label__ = 2; break;
      case 2: // $19
        var $20=(($lj)&4294967295);
        var $21=HEAP[$20];
        var $22=HEAP[$1];
        var $23=(($22+104)&4294967295);
        HEAP[$23]=$21;
        var $24=(($lj+160)&4294967295);
        var $25=HEAP[$24];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_reallocstack($L, $newsize) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $oldstack=__stackBase__+8;
        var $realsize=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$newsize;
        var $3=HEAP[$1];
        var $4=(($3+32)&4294967295);
        var $5=HEAP[$4];
        HEAP[$oldstack]=$5;
        var $6=HEAP[$2];
        var $7=((($6) + 1)&4294967295);
        var $8=((($7) + 5)&4294967295);
        HEAP[$realsize]=$8;
        var $9=HEAP[$realsize];
        var $10=((($9) + 1)&4294967295);
        var $11=((($10))>>>0) <= 357913941;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$1];
        var $14=HEAP[$1];
        var $15=(($14+32)&4294967295);
        var $16=HEAP[$15];
        var $17=$16;
        var $18=HEAP[$1];
        var $19=(($18+44)&4294967295);
        var $20=HEAP[$19];
        var $21=((($20) * 12)&4294967295);
        var $22=HEAP[$realsize];
        var $23=((($22) * 12)&4294967295);
        var $24=_luaM_realloc_($13, $17, $21, $23);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $25
        var $26=HEAP[$1];
        var $27=_luaM_toobig($26);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $28
        var $29=__lastLabel__ == 1 ? $24 : ($27);
        var $30=$29;
        var $31=HEAP[$1];
        var $32=(($31+32)&4294967295);
        HEAP[$32]=$30;
        var $33=HEAP[$realsize];
        var $34=HEAP[$1];
        var $35=(($34+44)&4294967295);
        HEAP[$35]=$33;
        var $36=HEAP[$1];
        var $37=(($36+32)&4294967295);
        var $38=HEAP[$37];
        var $39=HEAP[$2];
        var $40=(($38+12*$39)&4294967295);
        var $41=HEAP[$1];
        var $42=(($41+28)&4294967295);
        HEAP[$42]=$40;
        var $43=HEAP[$1];
        var $44=HEAP[$oldstack];
        _correctstack($43, $44);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _correctstack($L, $oldstack) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $ci=__stackBase__+8;
        var $up=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$oldstack;
        var $3=HEAP[$1];
        var $4=(($3+8)&4294967295);
        var $5=HEAP[$4];
        var $6=HEAP[$2];
        var $7=($5);
        var $8=($6);
        var $9=((($7) - ($8))&4294967295);
        var $10=((((($9))|0)/12)|0);
        var $11=HEAP[$1];
        var $12=(($11+32)&4294967295);
        var $13=HEAP[$12];
        var $14=(($13+12*$10)&4294967295);
        var $15=HEAP[$1];
        var $16=(($15+8)&4294967295);
        HEAP[$16]=$14;
        var $17=HEAP[$1];
        var $18=(($17+96)&4294967295);
        var $19=HEAP[$18];
        HEAP[$up]=$19;
        __label__ = 1; break;
      case 1: // $20
        var $21=HEAP[$up];
        var $22=((($21))|0)!=0;
        if ($22) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $23
        var $24=HEAP[$up];
        var $25=$24;
        var $26=(($25+8)&4294967295);
        var $27=HEAP[$26];
        var $28=HEAP[$2];
        var $29=($27);
        var $30=($28);
        var $31=((($29) - ($30))&4294967295);
        var $32=((((($31))|0)/12)|0);
        var $33=HEAP[$1];
        var $34=(($33+32)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+12*$32)&4294967295);
        var $37=HEAP[$up];
        var $38=$37;
        var $39=(($38+8)&4294967295);
        HEAP[$39]=$36;
        __label__ = 3; break;
      case 3: // $40
        var $41=HEAP[$up];
        var $42=$41;
        var $43=(($42)&4294967295);
        var $44=HEAP[$43];
        HEAP[$up]=$44;
        __label__ = 1; break;
      case 4: // $45
        var $46=HEAP[$1];
        var $47=(($46+40)&4294967295);
        var $48=HEAP[$47];
        HEAP[$ci]=$48;
        __label__ = 5; break;
      case 5: // $49
        var $50=HEAP[$ci];
        var $51=HEAP[$1];
        var $52=(($51+20)&4294967295);
        var $53=HEAP[$52];
        var $54=((($50))>>>0) <= ((($53))>>>0);
        if ($54) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $55
        var $56=HEAP[$ci];
        var $57=(($56+8)&4294967295);
        var $58=HEAP[$57];
        var $59=HEAP[$2];
        var $60=($58);
        var $61=($59);
        var $62=((($60) - ($61))&4294967295);
        var $63=((((($62))|0)/12)|0);
        var $64=HEAP[$1];
        var $65=(($64+32)&4294967295);
        var $66=HEAP[$65];
        var $67=(($66+12*$63)&4294967295);
        var $68=HEAP[$ci];
        var $69=(($68+8)&4294967295);
        HEAP[$69]=$67;
        var $70=HEAP[$ci];
        var $71=(($70)&4294967295);
        var $72=HEAP[$71];
        var $73=HEAP[$2];
        var $74=($72);
        var $75=($73);
        var $76=((($74) - ($75))&4294967295);
        var $77=((((($76))|0)/12)|0);
        var $78=HEAP[$1];
        var $79=(($78+32)&4294967295);
        var $80=HEAP[$79];
        var $81=(($80+12*$77)&4294967295);
        var $82=HEAP[$ci];
        var $83=(($82)&4294967295);
        HEAP[$83]=$81;
        var $84=HEAP[$ci];
        var $85=(($84+4)&4294967295);
        var $86=HEAP[$85];
        var $87=HEAP[$2];
        var $88=($86);
        var $89=($87);
        var $90=((($88) - ($89))&4294967295);
        var $91=((((($90))|0)/12)|0);
        var $92=HEAP[$1];
        var $93=(($92+32)&4294967295);
        var $94=HEAP[$93];
        var $95=(($94+12*$91)&4294967295);
        var $96=HEAP[$ci];
        var $97=(($96+4)&4294967295);
        HEAP[$97]=$95;
        __label__ = 7; break;
      case 7: // $98
        var $99=HEAP[$ci];
        var $100=(($99+24)&4294967295);
        HEAP[$ci]=$100;
        __label__ = 5; break;
      case 8: // $101
        var $102=HEAP[$1];
        var $103=(($102+12)&4294967295);
        var $104=HEAP[$103];
        var $105=HEAP[$2];
        var $106=($104);
        var $107=($105);
        var $108=((($106) - ($107))&4294967295);
        var $109=((((($108))|0)/12)|0);
        var $110=HEAP[$1];
        var $111=(($110+32)&4294967295);
        var $112=HEAP[$111];
        var $113=(($112+12*$109)&4294967295);
        var $114=HEAP[$1];
        var $115=(($114+12)&4294967295);
        HEAP[$115]=$113;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_reallocCI($L, $newsize) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $oldci=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$newsize;
        var $3=HEAP[$1];
        var $4=(($3+40)&4294967295);
        var $5=HEAP[$4];
        HEAP[$oldci]=$5;
        var $6=HEAP[$2];
        var $7=((($6) + 1)&4294967295);
        var $8=((($7))>>>0) <= 178956970;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$1];
        var $12=(($11+40)&4294967295);
        var $13=HEAP[$12];
        var $14=$13;
        var $15=HEAP[$1];
        var $16=(($15+48)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17) * 24)&4294967295);
        var $19=HEAP[$2];
        var $20=((($19) * 24)&4294967295);
        var $21=_luaM_realloc_($10, $14, $18, $20);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $22
        var $23=HEAP[$1];
        var $24=_luaM_toobig($23);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $25
        var $26=__lastLabel__ == 1 ? $21 : ($24);
        var $27=$26;
        var $28=HEAP[$1];
        var $29=(($28+40)&4294967295);
        HEAP[$29]=$27;
        var $30=HEAP[$2];
        var $31=HEAP[$1];
        var $32=(($31+48)&4294967295);
        HEAP[$32]=$30;
        var $33=HEAP[$1];
        var $34=(($33+20)&4294967295);
        var $35=HEAP[$34];
        var $36=HEAP[$oldci];
        var $37=($35);
        var $38=($36);
        var $39=((($37) - ($38))&4294967295);
        var $40=((((($39))|0)/24)|0);
        var $41=HEAP[$1];
        var $42=(($41+40)&4294967295);
        var $43=HEAP[$42];
        var $44=(($43+24*$40)&4294967295);
        var $45=HEAP[$1];
        var $46=(($45+20)&4294967295);
        HEAP[$46]=$44;
        var $47=HEAP[$1];
        var $48=(($47+40)&4294967295);
        var $49=HEAP[$48];
        var $50=HEAP[$1];
        var $51=(($50+48)&4294967295);
        var $52=HEAP[$51];
        var $53=(($49+24*$52)&4294967295);
        var $54=(($53+-24)&4294967295);
        var $55=HEAP[$1];
        var $56=(($55+36)&4294967295);
        HEAP[$56]=$54;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_growstack($L, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$n;
        var $3=HEAP[$2];
        var $4=HEAP[$1];
        var $5=(($4+44)&4294967295);
        var $6=HEAP[$5];
        var $7=((($3))|0) <= ((($6))|0);
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$1];
        var $11=(($10+44)&4294967295);
        var $12=HEAP[$11];
        var $13=((2 * ($12))&4294967295);
        _luaD_reallocstack($9, $13);
        __label__ = 3; break;
      case 2: // $14
        var $15=HEAP[$1];
        var $16=HEAP[$1];
        var $17=(($16+44)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$2];
        var $20=((($18) + ($19))&4294967295);
        _luaD_reallocstack($15, $20);
        __label__ = 3; break;
      case 3: // $21
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_callhook($L, $event, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 124; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 124);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $hook=__stackBase__+12;
        var $top=__stackBase__+16;
        var $ci_top=__stackBase__+20;
        var $ar=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$event;
        HEAP[$3]=$line;
        var $4=HEAP[$1];
        var $5=(($4+68)&4294967295);
        var $6=HEAP[$5];
        HEAP[$hook]=$6;
        var $7=HEAP[$hook];
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 9; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=(($10+57)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 2; break; } else { __label__ = 9; break; }
      case 2: // $15
        var $16=HEAP[$1];
        var $17=(($16+8)&4294967295);
        var $18=HEAP[$17];
        var $19=$18;
        var $20=HEAP[$1];
        var $21=(($20+32)&4294967295);
        var $22=HEAP[$21];
        var $23=$22;
        var $24=($19);
        var $25=($23);
        var $26=((($24) - ($25))&4294967295);
        HEAP[$top]=$26;
        var $27=HEAP[$1];
        var $28=(($27+20)&4294967295);
        var $29=HEAP[$28];
        var $30=(($29+8)&4294967295);
        var $31=HEAP[$30];
        var $32=$31;
        var $33=HEAP[$1];
        var $34=(($33+32)&4294967295);
        var $35=HEAP[$34];
        var $36=$35;
        var $37=($32);
        var $38=($36);
        var $39=((($37) - ($38))&4294967295);
        HEAP[$ci_top]=$39;
        var $40=HEAP[$2];
        var $41=(($ar)&4294967295);
        HEAP[$41]=$40;
        var $42=HEAP[$3];
        var $43=(($ar+20)&4294967295);
        HEAP[$43]=$42;
        var $44=HEAP[$2];
        var $45=((($44))|0)==4;
        if ($45) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $46
        var $47=(($ar+96)&4294967295);
        HEAP[$47]=0;
        __label__ = 5; break;
      case 4: // $48
        var $49=HEAP[$1];
        var $50=(($49+20)&4294967295);
        var $51=HEAP[$50];
        var $52=HEAP[$1];
        var $53=(($52+40)&4294967295);
        var $54=HEAP[$53];
        var $55=($51);
        var $56=($54);
        var $57=((($55) - ($56))&4294967295);
        var $58=((((($57))|0)/24)|0);
        var $59=(($ar+96)&4294967295);
        HEAP[$59]=$58;
        __label__ = 5; break;
      case 5: // $60
        var $61=HEAP[$1];
        var $62=(($61+28)&4294967295);
        var $63=HEAP[$62];
        var $64=$63;
        var $65=HEAP[$1];
        var $66=(($65+8)&4294967295);
        var $67=HEAP[$66];
        var $68=$67;
        var $69=($64);
        var $70=($68);
        var $71=((($69) - ($70))&4294967295);
        var $72=((($71))|0) <= 240;
        if ($72) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $73
        var $74=HEAP[$1];
        _luaD_growstack($74, 20);
        __label__ = 8; break;
      case 7: // $75
        __label__ = 8; break;
      case 8: // $76
        var $77=HEAP[$1];
        var $78=(($77+8)&4294967295);
        var $79=HEAP[$78];
        var $80=(($79+240)&4294967295);
        var $81=HEAP[$1];
        var $82=(($81+20)&4294967295);
        var $83=HEAP[$82];
        var $84=(($83+8)&4294967295);
        HEAP[$84]=$80;
        var $85=HEAP[$1];
        var $86=(($85+57)&4294967295);
        HEAP[$86]=0;
        var $87=HEAP[$hook];
        var $88=HEAP[$1];
        FUNCTION_TABLE[$87]($88, $ar);
        var $89=HEAP[$1];
        var $90=(($89+57)&4294967295);
        HEAP[$90]=1;
        var $91=HEAP[$1];
        var $92=(($91+32)&4294967295);
        var $93=HEAP[$92];
        var $94=$93;
        var $95=HEAP[$ci_top];
        var $96=(($94+$95)&4294967295);
        var $97=$96;
        var $98=HEAP[$1];
        var $99=(($98+20)&4294967295);
        var $100=HEAP[$99];
        var $101=(($100+8)&4294967295);
        HEAP[$101]=$97;
        var $102=HEAP[$1];
        var $103=(($102+32)&4294967295);
        var $104=HEAP[$103];
        var $105=$104;
        var $106=HEAP[$top];
        var $107=(($105+$106)&4294967295);
        var $108=$107;
        var $109=HEAP[$1];
        var $110=(($109+8)&4294967295);
        HEAP[$110]=$108;
        __label__ = 9; break;
      case 9: // $111
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_precall($L, $func, $nresults) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $cl=__stackBase__+16;
        var $funcr=__stackBase__+20;
        var $ci=__stackBase__+24;
        var $st=__stackBase__+28;
        var $base=__stackBase__+32;
        var $p=__stackBase__+36;
        var $nargs=__stackBase__+40;
        var $ci1=__stackBase__+44;
        var $n=__stackBase__+48;
        HEAP[$2]=$L;
        HEAP[$3]=$func;
        HEAP[$4]=$nresults;
        var $5=HEAP[$3];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        var $8=((($7))|0)==6;
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $9
        var $10=HEAP[$2];
        var $11=HEAP[$3];
        var $12=_tryfuncTM($10, $11);
        HEAP[$3]=$12;
        __label__ = 2; break;
      case 2: // $13
        var $14=HEAP[$3];
        var $15=$14;
        var $16=HEAP[$2];
        var $17=(($16+32)&4294967295);
        var $18=HEAP[$17];
        var $19=$18;
        var $20=($15);
        var $21=($19);
        var $22=((($20) - ($21))&4294967295);
        HEAP[$funcr]=$22;
        var $23=HEAP[$3];
        var $24=(($23)&4294967295);
        var $25=$24;
        var $26=HEAP[$25];
        var $27=$26;
        var $28=$27;
        HEAP[$cl]=$28;
        var $29=HEAP[$2];
        var $30=(($29+24)&4294967295);
        var $31=HEAP[$30];
        var $32=HEAP[$2];
        var $33=(($32+20)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+12)&4294967295);
        HEAP[$35]=$31;
        var $36=HEAP[$cl];
        var $37=(($36+6)&4294967295);
        var $38=HEAP[$37];
        var $39=reSign(($38), 8, 0)!=0;
        if ($39) { __label__ = 21; break; } else { __label__ = 3; break; }
      case 3: // $40
        var $41=HEAP[$cl];
        var $42=(($41+16)&4294967295);
        var $43=HEAP[$42];
        HEAP[$p]=$43;
        var $44=HEAP[$2];
        var $45=(($44+28)&4294967295);
        var $46=HEAP[$45];
        var $47=$46;
        var $48=HEAP[$2];
        var $49=(($48+8)&4294967295);
        var $50=HEAP[$49];
        var $51=$50;
        var $52=($47);
        var $53=($51);
        var $54=((($52) - ($53))&4294967295);
        var $55=HEAP[$p];
        var $56=(($55+75)&4294967295);
        var $57=HEAP[$56];
        var $58=unSign(($57), 8, 0);
        var $59=((($58) * 12)&4294967295);
        var $60=((($54))|0) <= ((($59))|0);
        if ($60) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $61
        var $62=HEAP[$2];
        var $63=HEAP[$p];
        var $64=(($63+75)&4294967295);
        var $65=HEAP[$64];
        var $66=unSign(($65), 8, 0);
        _luaD_growstack($62, $66);
        __label__ = 6; break;
      case 5: // $67
        __label__ = 6; break;
      case 6: // $68
        var $69=HEAP[$2];
        var $70=(($69+32)&4294967295);
        var $71=HEAP[$70];
        var $72=$71;
        var $73=HEAP[$funcr];
        var $74=(($72+$73)&4294967295);
        var $75=$74;
        HEAP[$3]=$75;
        var $76=HEAP[$p];
        var $77=(($76+74)&4294967295);
        var $78=HEAP[$77];
        var $79=reSign(($78), 8, 0)!=0;
        if ($79) { __label__ = 10; break; } else { __label__ = 7; break; }
      case 7: // $80
        var $81=HEAP[$3];
        var $82=(($81+12)&4294967295);
        HEAP[$base]=$82;
        var $83=HEAP[$2];
        var $84=(($83+8)&4294967295);
        var $85=HEAP[$84];
        var $86=HEAP[$base];
        var $87=HEAP[$p];
        var $88=(($87+73)&4294967295);
        var $89=HEAP[$88];
        var $90=unSign(($89), 8, 0);
        var $91=(($86+12*$90)&4294967295);
        var $92=((($85))>>>0) > ((($91))>>>0);
        if ($92) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $93
        var $94=HEAP[$base];
        var $95=HEAP[$p];
        var $96=(($95+73)&4294967295);
        var $97=HEAP[$96];
        var $98=unSign(($97), 8, 0);
        var $99=(($94+12*$98)&4294967295);
        var $100=HEAP[$2];
        var $101=(($100+8)&4294967295);
        HEAP[$101]=$99;
        __label__ = 9; break;
      case 9: // $102
        __label__ = 11; break;
      case 10: // $103
        var $104=HEAP[$2];
        var $105=(($104+8)&4294967295);
        var $106=HEAP[$105];
        var $107=HEAP[$3];
        var $108=($106);
        var $109=($107);
        var $110=((($108) - ($109))&4294967295);
        var $111=((((($110))|0)/12)|0);
        var $112=((($111) - 1)&4294967295);
        HEAP[$nargs]=$112;
        var $113=HEAP[$2];
        var $114=HEAP[$p];
        var $115=HEAP[$nargs];
        var $116=_adjust_varargs($113, $114, $115);
        HEAP[$base]=$116;
        var $117=HEAP[$2];
        var $118=(($117+32)&4294967295);
        var $119=HEAP[$118];
        var $120=$119;
        var $121=HEAP[$funcr];
        var $122=(($120+$121)&4294967295);
        var $123=$122;
        HEAP[$3]=$123;
        __label__ = 11; break;
      case 11: // $124
        var $125=HEAP[$2];
        var $126=(($125+20)&4294967295);
        var $127=HEAP[$126];
        var $128=HEAP[$2];
        var $129=(($128+36)&4294967295);
        var $130=HEAP[$129];
        var $131=((($127))|0)==((($130))|0);
        if ($131) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $132
        var $133=HEAP[$2];
        var $134=_growCI($133);
        __lastLabel__ = 12; __label__ = 14; break;
      case 13: // $135
        var $136=HEAP[$2];
        var $137=(($136+20)&4294967295);
        var $138=HEAP[$137];
        var $139=(($138+24)&4294967295);
        HEAP[$137]=$139;
        __lastLabel__ = 13; __label__ = 14; break;
      case 14: // $140
        var $141=__lastLabel__ == 12 ? $134 : ($139);
        HEAP[$ci]=$141;
        var $142=HEAP[$3];
        var $143=HEAP[$ci];
        var $144=(($143+4)&4294967295);
        HEAP[$144]=$142;
        var $145=HEAP[$base];
        var $146=HEAP[$ci];
        var $147=(($146)&4294967295);
        HEAP[$147]=$145;
        var $148=HEAP[$2];
        var $149=(($148+12)&4294967295);
        HEAP[$149]=$145;
        var $150=HEAP[$2];
        var $151=(($150+12)&4294967295);
        var $152=HEAP[$151];
        var $153=HEAP[$p];
        var $154=(($153+75)&4294967295);
        var $155=HEAP[$154];
        var $156=unSign(($155), 8, 0);
        var $157=(($152+12*$156)&4294967295);
        var $158=HEAP[$ci];
        var $159=(($158+8)&4294967295);
        HEAP[$159]=$157;
        var $160=HEAP[$p];
        var $161=(($160+12)&4294967295);
        var $162=HEAP[$161];
        var $163=HEAP[$2];
        var $164=(($163+24)&4294967295);
        HEAP[$164]=$162;
        var $165=HEAP[$ci];
        var $166=(($165+20)&4294967295);
        HEAP[$166]=0;
        var $167=HEAP[$4];
        var $168=HEAP[$ci];
        var $169=(($168+16)&4294967295);
        HEAP[$169]=$167;
        var $170=HEAP[$2];
        var $171=(($170+8)&4294967295);
        var $172=HEAP[$171];
        HEAP[$st]=$172;
        __label__ = 15; break;
      case 15: // $173
        var $174=HEAP[$st];
        var $175=HEAP[$ci];
        var $176=(($175+8)&4294967295);
        var $177=HEAP[$176];
        var $178=((($174))>>>0) < ((($177))>>>0);
        if ($178) { __label__ = 16; break; } else { __label__ = 18; break; }
      case 16: // $179
        var $180=HEAP[$st];
        var $181=(($180+8)&4294967295);
        HEAP[$181]=0;
        __label__ = 17; break;
      case 17: // $182
        var $183=HEAP[$st];
        var $184=(($183+12)&4294967295);
        HEAP[$st]=$184;
        __label__ = 15; break;
      case 18: // $185
        var $186=HEAP[$ci];
        var $187=(($186+8)&4294967295);
        var $188=HEAP[$187];
        var $189=HEAP[$2];
        var $190=(($189+8)&4294967295);
        HEAP[$190]=$188;
        var $191=HEAP[$2];
        var $192=(($191+56)&4294967295);
        var $193=HEAP[$192];
        var $194=unSign(($193), 8, 0);
        var $195=($194) & 1;
        var $196=((($195))|0)!=0;
        if ($196) { __label__ = 19; break; } else { __label__ = 20; break; }
      case 19: // $197
        var $198=HEAP[$2];
        var $199=(($198+24)&4294967295);
        var $200=HEAP[$199];
        var $201=(($200+4)&4294967295);
        HEAP[$199]=$201;
        var $202=HEAP[$2];
        _luaD_callhook($202, 0, -1);
        var $203=HEAP[$2];
        var $204=(($203+24)&4294967295);
        var $205=HEAP[$204];
        var $206=(($205+-4)&4294967295);
        HEAP[$204]=$206;
        __label__ = 20; break;
      case 20: // $207
        HEAP[$1]=0;
        __label__ = 32; break;
      case 21: // $208
        var $209=HEAP[$2];
        var $210=(($209+28)&4294967295);
        var $211=HEAP[$210];
        var $212=$211;
        var $213=HEAP[$2];
        var $214=(($213+8)&4294967295);
        var $215=HEAP[$214];
        var $216=$215;
        var $217=($212);
        var $218=($216);
        var $219=((($217) - ($218))&4294967295);
        var $220=((($219))|0) <= 240;
        if ($220) { __label__ = 22; break; } else { __label__ = 23; break; }
      case 22: // $221
        var $222=HEAP[$2];
        _luaD_growstack($222, 20);
        __label__ = 24; break;
      case 23: // $223
        __label__ = 24; break;
      case 24: // $224
        var $225=HEAP[$2];
        var $226=(($225+20)&4294967295);
        var $227=HEAP[$226];
        var $228=HEAP[$2];
        var $229=(($228+36)&4294967295);
        var $230=HEAP[$229];
        var $231=((($227))|0)==((($230))|0);
        if ($231) { __label__ = 25; break; } else { __label__ = 26; break; }
      case 25: // $232
        var $233=HEAP[$2];
        var $234=_growCI($233);
        __lastLabel__ = 25; __label__ = 27; break;
      case 26: // $235
        var $236=HEAP[$2];
        var $237=(($236+20)&4294967295);
        var $238=HEAP[$237];
        var $239=(($238+24)&4294967295);
        HEAP[$237]=$239;
        __lastLabel__ = 26; __label__ = 27; break;
      case 27: // $240
        var $241=__lastLabel__ == 25 ? $234 : ($239);
        HEAP[$ci1]=$241;
        var $242=HEAP[$2];
        var $243=(($242+32)&4294967295);
        var $244=HEAP[$243];
        var $245=$244;
        var $246=HEAP[$funcr];
        var $247=(($245+$246)&4294967295);
        var $248=$247;
        var $249=HEAP[$ci1];
        var $250=(($249+4)&4294967295);
        HEAP[$250]=$248;
        var $251=HEAP[$ci1];
        var $252=(($251+4)&4294967295);
        var $253=HEAP[$252];
        var $254=(($253+12)&4294967295);
        var $255=HEAP[$ci1];
        var $256=(($255)&4294967295);
        HEAP[$256]=$254;
        var $257=HEAP[$2];
        var $258=(($257+12)&4294967295);
        HEAP[$258]=$254;
        var $259=HEAP[$2];
        var $260=(($259+8)&4294967295);
        var $261=HEAP[$260];
        var $262=(($261+240)&4294967295);
        var $263=HEAP[$ci1];
        var $264=(($263+8)&4294967295);
        HEAP[$264]=$262;
        var $265=HEAP[$4];
        var $266=HEAP[$ci1];
        var $267=(($266+16)&4294967295);
        HEAP[$267]=$265;
        var $268=HEAP[$2];
        var $269=(($268+56)&4294967295);
        var $270=HEAP[$269];
        var $271=unSign(($270), 8, 0);
        var $272=($271) & 1;
        var $273=((($272))|0)!=0;
        if ($273) { __label__ = 28; break; } else { __label__ = 29; break; }
      case 28: // $274
        var $275=HEAP[$2];
        _luaD_callhook($275, 0, -1);
        __label__ = 29; break;
      case 29: // $276
        var $277=HEAP[$2];
        var $278=(($277+20)&4294967295);
        var $279=HEAP[$278];
        var $280=(($279+4)&4294967295);
        var $281=HEAP[$280];
        var $282=(($281)&4294967295);
        var $283=$282;
        var $284=HEAP[$283];
        var $285=$284;
        var $286=$285;
        var $287=(($286+16)&4294967295);
        var $288=HEAP[$287];
        var $289=HEAP[$2];
        var $290=FUNCTION_TABLE[$288]($289);
        HEAP[$n]=$290;
        var $291=HEAP[$n];
        var $292=((($291))|0) < 0;
        if ($292) { __label__ = 30; break; } else { __label__ = 31; break; }
      case 30: // $293
        HEAP[$1]=2;
        __label__ = 32; break;
      case 31: // $294
        var $295=HEAP[$2];
        var $296=HEAP[$2];
        var $297=(($296+8)&4294967295);
        var $298=HEAP[$297];
        var $299=HEAP[$n];
        var $300=((0 - ($299))&4294967295);
        var $301=(($298+12*$300)&4294967295);
        var $302=_luaD_poscall($295, $301);
        HEAP[$1]=1;
        __label__ = 32; break;
      case 32: // $303
        var $304=HEAP[$1];
        STACKTOP = __stackBase__;
        return $304;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tryfuncTM($L, $func) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $tm=__stackBase__+8;
        var $p=__stackBase__+12;
        var $funcr=__stackBase__+16;
        var $o2=__stackBase__+20;
        var $o1=__stackBase__+24;
        var $o21=__stackBase__+28;
        var $o12=__stackBase__+32;
        HEAP[$1]=$L;
        HEAP[$2]=$func;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_luaT_gettmbyobj($3, $4, 16);
        HEAP[$tm]=$5;
        var $6=HEAP[$2];
        var $7=$6;
        var $8=HEAP[$1];
        var $9=(($8+32)&4294967295);
        var $10=HEAP[$9];
        var $11=$10;
        var $12=($7);
        var $13=($11);
        var $14=((($12) - ($13))&4294967295);
        HEAP[$funcr]=$14;
        var $15=HEAP[$tm];
        var $16=(($15+8)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17))|0)==6;
        if ($18) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $19
        var $20=HEAP[$1];
        var $21=HEAP[$2];
        _luaG_typeerror($20, $21, ((__str8175)&4294967295));
        __label__ = 2; break;
      case 2: // $22
        var $23=HEAP[$1];
        var $24=(($23+8)&4294967295);
        var $25=HEAP[$24];
        HEAP[$p]=$25;
        __label__ = 3; break;
      case 3: // $26
        var $27=HEAP[$p];
        var $28=HEAP[$2];
        var $29=((($27))>>>0) > ((($28))>>>0);
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $30
        var $31=HEAP[$p];
        var $32=(($31+-12)&4294967295);
        HEAP[$o2]=$32;
        var $33=HEAP[$p];
        HEAP[$o1]=$33;
        var $34=HEAP[$o1];
        var $35=(($34)&4294967295);
        var $36=HEAP[$o2];
        var $37=(($36)&4294967295);
        var $38=$35;
        var $39=$37;
        _llvm_memcpy_p0i8_p0i8_i32($38, $39, 8, 4, 0);
        var $40=HEAP[$o2];
        var $41=(($40+8)&4294967295);
        var $42=HEAP[$41];
        var $43=HEAP[$o1];
        var $44=(($43+8)&4294967295);
        HEAP[$44]=$42;
        __label__ = 5; break;
      case 5: // $45
        var $46=HEAP[$p];
        var $47=(($46+-12)&4294967295);
        HEAP[$p]=$47;
        __label__ = 3; break;
      case 6: // $48
        var $49=HEAP[$1];
        var $50=(($49+28)&4294967295);
        var $51=HEAP[$50];
        var $52=$51;
        var $53=HEAP[$1];
        var $54=(($53+8)&4294967295);
        var $55=HEAP[$54];
        var $56=$55;
        var $57=($52);
        var $58=($56);
        var $59=((($57) - ($58))&4294967295);
        var $60=((($59))|0) <= 12;
        if ($60) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $61
        var $62=HEAP[$1];
        _luaD_growstack($62, 1);
        __label__ = 9; break;
      case 8: // $63
        __label__ = 9; break;
      case 9: // $64
        var $65=HEAP[$1];
        var $66=(($65+8)&4294967295);
        var $67=HEAP[$66];
        var $68=(($67+12)&4294967295);
        HEAP[$66]=$68;
        var $69=HEAP[$1];
        var $70=(($69+32)&4294967295);
        var $71=HEAP[$70];
        var $72=$71;
        var $73=HEAP[$funcr];
        var $74=(($72+$73)&4294967295);
        var $75=$74;
        HEAP[$2]=$75;
        var $76=HEAP[$tm];
        HEAP[$o21]=$76;
        var $77=HEAP[$2];
        HEAP[$o12]=$77;
        var $78=HEAP[$o12];
        var $79=(($78)&4294967295);
        var $80=HEAP[$o21];
        var $81=(($80)&4294967295);
        var $82=$79;
        var $83=$81;
        _llvm_memcpy_p0i8_p0i8_i32($82, $83, 8, 4, 0);
        var $84=HEAP[$o21];
        var $85=(($84+8)&4294967295);
        var $86=HEAP[$85];
        var $87=HEAP[$o12];
        var $88=(($87+8)&4294967295);
        HEAP[$88]=$86;
        var $89=HEAP[$2];
        STACKTOP = __stackBase__;
        return $89;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _adjust_varargs($L, $p, $actual) {
    var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $nfixargs=__stackBase__+16;
        var $htab=__stackBase__+20;
        var $base=__stackBase__+24;
        var $fixed=__stackBase__+28;
        var $nvar=__stackBase__+32;
        var $o2=__stackBase__+36;
        var $o1=__stackBase__+40;
        var $i_o=__stackBase__+44;
        var $o21=__stackBase__+48;
        var $o12=__stackBase__+52;
        var $i_o3=__stackBase__+56;
        HEAP[$1]=$L;
        HEAP[$2]=$p;
        HEAP[$3]=$actual;
        var $4=HEAP[$2];
        var $5=(($4+73)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        HEAP[$nfixargs]=$7;
        HEAP[$htab]=0;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$3];
        var $10=HEAP[$nfixargs];
        var $11=((($9))|0) < ((($10))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $12
        var $13=HEAP[$1];
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+12)&4294967295);
        HEAP[$14]=$16;
        var $17=(($15+8)&4294967295);
        HEAP[$17]=0;
        __label__ = 3; break;
      case 3: // $18
        var $19=HEAP[$3];
        var $20=((($19) + 1)&4294967295);
        HEAP[$3]=$20;
        __label__ = 1; break;
      case 4: // $21
        var $22=HEAP[$2];
        var $23=(($22+74)&4294967295);
        var $24=HEAP[$23];
        var $25=unSign(($24), 8, 0);
        var $26=($25) & 4;
        var $27=((($26))|0)!=0;
        if ($27) { __label__ = 5; break; } else { __label__ = 12; break; }
      case 5: // $28
        var $29=HEAP[$3];
        var $30=HEAP[$nfixargs];
        var $31=((($29) - ($30))&4294967295);
        HEAP[$nvar]=$31;
        var $32=HEAP[$1];
        var $33=(($32+16)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+68)&4294967295);
        var $36=HEAP[$35];
        var $37=HEAP[$1];
        var $38=(($37+16)&4294967295);
        var $39=HEAP[$38];
        var $40=(($39+64)&4294967295);
        var $41=HEAP[$40];
        var $42=((($36))>>>0) >= ((($41))>>>0);
        if ($42) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $43
        var $44=HEAP[$1];
        _luaC_step($44);
        __label__ = 7; break;
      case 7: // $45
        var $46=HEAP[$1];
        var $47=HEAP[$nvar];
        var $48=_luaH_new($46, $47, 1);
        HEAP[$htab]=$48;
        HEAP[$i]=0;
        __label__ = 8; break;
      case 8: // $49
        var $50=HEAP[$i];
        var $51=HEAP[$nvar];
        var $52=((($50))|0) < ((($51))|0);
        if ($52) { __label__ = 9; break; } else { __label__ = 11; break; }
      case 9: // $53
        var $54=HEAP[$1];
        var $55=(($54+8)&4294967295);
        var $56=HEAP[$55];
        var $57=HEAP[$nvar];
        var $58=((0 - ($57))&4294967295);
        var $59=(($56+12*$58)&4294967295);
        var $60=HEAP[$i];
        var $61=(($59+12*$60)&4294967295);
        HEAP[$o2]=$61;
        var $62=HEAP[$1];
        var $63=HEAP[$htab];
        var $64=HEAP[$i];
        var $65=((($64) + 1)&4294967295);
        var $66=_luaH_setnum($62, $63, $65);
        HEAP[$o1]=$66;
        var $67=HEAP[$o1];
        var $68=(($67)&4294967295);
        var $69=HEAP[$o2];
        var $70=(($69)&4294967295);
        var $71=$68;
        var $72=$70;
        _llvm_memcpy_p0i8_p0i8_i32($71, $72, 8, 4, 0);
        var $73=HEAP[$o2];
        var $74=(($73+8)&4294967295);
        var $75=HEAP[$74];
        var $76=HEAP[$o1];
        var $77=(($76+8)&4294967295);
        HEAP[$77]=$75;
        __label__ = 10; break;
      case 10: // $78
        var $79=HEAP[$i];
        var $80=((($79) + 1)&4294967295);
        HEAP[$i]=$80;
        __label__ = 8; break;
      case 11: // $81
        var $82=HEAP[$1];
        var $83=HEAP[$htab];
        var $84=HEAP[$1];
        var $85=_luaS_newlstr($84, ((__str7174)&4294967295), 1);
        var $86=_luaH_setstr($82, $83, $85);
        HEAP[$i_o]=$86;
        var $87=HEAP[$nvar];
        var $88=((($87))|0);
        var $89=HEAP[$i_o];
        var $90=(($89)&4294967295);
        var $91=$90;
        HEAP[$91]=$88;
        var $92=HEAP[$i_o];
        var $93=(($92+8)&4294967295);
        HEAP[$93]=3;
        __label__ = 12; break;
      case 12: // $94
        var $95=HEAP[$1];
        var $96=(($95+8)&4294967295);
        var $97=HEAP[$96];
        var $98=HEAP[$3];
        var $99=((0 - ($98))&4294967295);
        var $100=(($97+12*$99)&4294967295);
        HEAP[$fixed]=$100;
        var $101=HEAP[$1];
        var $102=(($101+8)&4294967295);
        var $103=HEAP[$102];
        HEAP[$base]=$103;
        HEAP[$i]=0;
        __label__ = 13; break;
      case 13: // $104
        var $105=HEAP[$i];
        var $106=HEAP[$nfixargs];
        var $107=((($105))|0) < ((($106))|0);
        if ($107) { __label__ = 14; break; } else { __label__ = 16; break; }
      case 14: // $108
        var $109=HEAP[$fixed];
        var $110=HEAP[$i];
        var $111=(($109+12*$110)&4294967295);
        HEAP[$o21]=$111;
        var $112=HEAP[$1];
        var $113=(($112+8)&4294967295);
        var $114=HEAP[$113];
        var $115=(($114+12)&4294967295);
        HEAP[$113]=$115;
        HEAP[$o12]=$114;
        var $116=HEAP[$o12];
        var $117=(($116)&4294967295);
        var $118=HEAP[$o21];
        var $119=(($118)&4294967295);
        var $120=$117;
        var $121=$119;
        _llvm_memcpy_p0i8_p0i8_i32($120, $121, 8, 4, 0);
        var $122=HEAP[$o21];
        var $123=(($122+8)&4294967295);
        var $124=HEAP[$123];
        var $125=HEAP[$o12];
        var $126=(($125+8)&4294967295);
        HEAP[$126]=$124;
        var $127=HEAP[$fixed];
        var $128=HEAP[$i];
        var $129=(($127+12*$128)&4294967295);
        var $130=(($129+8)&4294967295);
        HEAP[$130]=0;
        __label__ = 15; break;
      case 15: // $131
        var $132=HEAP[$i];
        var $133=((($132) + 1)&4294967295);
        HEAP[$i]=$133;
        __label__ = 13; break;
      case 16: // $134
        var $135=HEAP[$htab];
        var $136=((($135))|0)!=0;
        if ($136) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $137
        var $138=HEAP[$1];
        var $139=(($138+8)&4294967295);
        var $140=HEAP[$139];
        var $141=(($140+12)&4294967295);
        HEAP[$139]=$141;
        HEAP[$i_o3]=$140;
        var $142=HEAP[$htab];
        var $143=$142;
        var $144=HEAP[$i_o3];
        var $145=(($144)&4294967295);
        var $146=$145;
        HEAP[$146]=$143;
        var $147=HEAP[$i_o3];
        var $148=(($147+8)&4294967295);
        HEAP[$148]=5;
        __label__ = 18; break;
      case 18: // $149
        var $150=HEAP[$base];
        STACKTOP = __stackBase__;
        return $150;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _growCI($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+48)&4294967295);
        var $4=HEAP[$3];
        var $5=((($4))|0) > 20000;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$1];
        _luaD_throw($7, 5);
        __label__ = 5; break;
      case 2: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$1];
        var $11=(($10+48)&4294967295);
        var $12=HEAP[$11];
        var $13=((2 * ($12))&4294967295);
        _luaD_reallocCI($9, $13);
        var $14=HEAP[$1];
        var $15=(($14+48)&4294967295);
        var $16=HEAP[$15];
        var $17=((($16))|0) > 20000;
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $18
        var $19=HEAP[$1];
        _luaG_runerror($19, ((__str6173)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 4; break;
      case 4: // $20
        __label__ = 5; break;
      case 5: // $21
        var $22=HEAP[$1];
        var $23=(($22+20)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+24)&4294967295);
        HEAP[$23]=$25;
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_poscall($L, $firstResult) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $res=__stackBase__+8;
        var $wanted=__stackBase__+12;
        var $i=__stackBase__+16;
        var $ci=__stackBase__+20;
        var $o2=__stackBase__+24;
        var $o1=__stackBase__+28;
        HEAP[$1]=$L;
        HEAP[$2]=$firstResult;
        var $3=HEAP[$1];
        var $4=(($3+56)&4294967295);
        var $5=HEAP[$4];
        var $6=unSign(($5), 8, 0);
        var $7=($6) & 2;
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$2];
        var $12=_callrethooks($10, $11);
        HEAP[$2]=$12;
        __label__ = 2; break;
      case 2: // $13
        var $14=HEAP[$1];
        var $15=(($14+20)&4294967295);
        var $16=HEAP[$15];
        var $17=(($16+-24)&4294967295);
        HEAP[$15]=$17;
        HEAP[$ci]=$16;
        var $18=HEAP[$ci];
        var $19=(($18+4)&4294967295);
        var $20=HEAP[$19];
        HEAP[$res]=$20;
        var $21=HEAP[$ci];
        var $22=(($21+16)&4294967295);
        var $23=HEAP[$22];
        HEAP[$wanted]=$23;
        var $24=HEAP[$ci];
        var $25=(($24+-24)&4294967295);
        var $26=(($25)&4294967295);
        var $27=HEAP[$26];
        var $28=HEAP[$1];
        var $29=(($28+12)&4294967295);
        HEAP[$29]=$27;
        var $30=HEAP[$ci];
        var $31=(($30+-24)&4294967295);
        var $32=(($31+12)&4294967295);
        var $33=HEAP[$32];
        var $34=HEAP[$1];
        var $35=(($34+24)&4294967295);
        HEAP[$35]=$33;
        var $36=HEAP[$wanted];
        HEAP[$i]=$36;
        __label__ = 3; break;
      case 3: // $37
        var $38=HEAP[$i];
        var $39=((($38))|0)!=0;
        if ($39) { __lastLabel__ = 3; __label__ = 4; break; } else { __lastLabel__ = 3; __label__ = 5; break; }
      case 4: // $40
        var $41=HEAP[$2];
        var $42=HEAP[$1];
        var $43=(($42+8)&4294967295);
        var $44=HEAP[$43];
        var $45=((($41))>>>0) < ((($44))>>>0);
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $46
        var $47=__lastLabel__ == 3 ? 0 : ($45);
        if ($47) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $48
        var $49=HEAP[$2];
        var $50=(($49+12)&4294967295);
        HEAP[$2]=$50;
        HEAP[$o2]=$49;
        var $51=HEAP[$res];
        var $52=(($51+12)&4294967295);
        HEAP[$res]=$52;
        HEAP[$o1]=$51;
        var $53=HEAP[$o1];
        var $54=(($53)&4294967295);
        var $55=HEAP[$o2];
        var $56=(($55)&4294967295);
        var $57=$54;
        var $58=$56;
        _llvm_memcpy_p0i8_p0i8_i32($57, $58, 8, 4, 0);
        var $59=HEAP[$o2];
        var $60=(($59+8)&4294967295);
        var $61=HEAP[$60];
        var $62=HEAP[$o1];
        var $63=(($62+8)&4294967295);
        HEAP[$63]=$61;
        __label__ = 7; break;
      case 7: // $64
        var $65=HEAP[$i];
        var $66=((($65) + -1)&4294967295);
        HEAP[$i]=$66;
        __label__ = 3; break;
      case 8: // $67
        __label__ = 9; break;
      case 9: // $68
        var $69=HEAP[$i];
        var $70=((($69) + -1)&4294967295);
        HEAP[$i]=$70;
        var $71=((($69))|0) > 0;
        if ($71) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $72
        var $73=HEAP[$res];
        var $74=(($73+12)&4294967295);
        HEAP[$res]=$74;
        var $75=(($73+8)&4294967295);
        HEAP[$75]=0;
        __label__ = 9; break;
      case 11: // $76
        var $77=HEAP[$res];
        var $78=HEAP[$1];
        var $79=(($78+8)&4294967295);
        HEAP[$79]=$77;
        var $80=HEAP[$wanted];
        var $81=((($80) - -1)&4294967295);
        STACKTOP = __stackBase__;
        return $81;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _callrethooks($L, $firstResult) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fr=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$firstResult;
        var $3=HEAP[$2];
        var $4=$3;
        var $5=HEAP[$1];
        var $6=(($5+32)&4294967295);
        var $7=HEAP[$6];
        var $8=$7;
        var $9=($4);
        var $10=($8);
        var $11=((($9) - ($10))&4294967295);
        HEAP[$fr]=$11;
        var $12=HEAP[$1];
        _luaD_callhook($12, 1, -1);
        var $13=HEAP[$1];
        var $14=(($13+20)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+4)&4294967295);
        var $17=HEAP[$16];
        var $18=(($17)&4294967295);
        var $19=$18;
        var $20=HEAP[$19];
        var $21=$20;
        var $22=$21;
        var $23=(($22+6)&4294967295);
        var $24=HEAP[$23];
        var $25=reSign(($24), 8, 0)!=0;
        if ($25) { __label__ = 7; break; } else { __label__ = 1; break; }
      case 1: // $26
        __label__ = 2; break;
      case 2: // $27
        var $28=HEAP[$1];
        var $29=(($28+56)&4294967295);
        var $30=HEAP[$29];
        var $31=unSign(($30), 8, 0);
        var $32=($31) & 2;
        var $33=((($32))|0)!=0;
        if ($33) { __lastLabel__ = 2; __label__ = 3; break; } else { __lastLabel__ = 2; __label__ = 4; break; }
      case 3: // $34
        var $35=HEAP[$1];
        var $36=(($35+20)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37+20)&4294967295);
        var $39=HEAP[$38];
        var $40=((($39) + -1)&4294967295);
        HEAP[$38]=$40;
        var $41=((($39))|0)!=0;
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $42
        var $43=__lastLabel__ == 2 ? 0 : ($41);
        if ($43) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $44
        var $45=HEAP[$1];
        _luaD_callhook($45, 4, -1);
        __label__ = 2; break;
      case 6: // $46
        __label__ = 7; break;
      case 7: // $47
        var $48=HEAP[$1];
        var $49=(($48+32)&4294967295);
        var $50=HEAP[$49];
        var $51=$50;
        var $52=HEAP[$fr];
        var $53=(($51+$52)&4294967295);
        var $54=$53;
        STACKTOP = __stackBase__;
        return $54;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_call($L, $func, $nResults) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$func;
        HEAP[$3]=$nResults;
        var $4=HEAP[$1];
        var $5=(($4+52)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6) + 1)&65535);
        HEAP[$5]=$7;
        var $8=unSign(($7), 16, 0);
        var $9=((($8))|0) >= 200;
        if ($9) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 1: // $10
        var $11=HEAP[$1];
        var $12=(($11+52)&4294967295);
        var $13=HEAP[$12];
        var $14=unSign(($13), 16, 0);
        var $15=((($14))|0)==200;
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $16
        var $17=HEAP[$1];
        _luaG_runerror($17, ((__str2169)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 6; break;
      case 3: // $18
        var $19=HEAP[$1];
        var $20=(($19+52)&4294967295);
        var $21=HEAP[$20];
        var $22=unSign(($21), 16, 0);
        var $23=((($22))|0) >= 225;
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $24
        var $25=HEAP[$1];
        _luaD_throw($25, 5);
        __label__ = 5; break;
      case 5: // $26
        __label__ = 6; break;
      case 6: // $27
        __label__ = 7; break;
      case 7: // $28
        var $29=HEAP[$1];
        var $30=HEAP[$2];
        var $31=HEAP[$3];
        var $32=_luaD_precall($29, $30, $31);
        var $33=((($32))|0)==0;
        if ($33) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $34
        var $35=HEAP[$1];
        _luaV_execute($35, 1);
        __label__ = 9; break;
      case 9: // $36
        var $37=HEAP[$1];
        var $38=(($37+52)&4294967295);
        var $39=HEAP[$38];
        var $40=((($39) + -1)&65535);
        HEAP[$38]=$40;
        var $41=HEAP[$1];
        var $42=(($41+16)&4294967295);
        var $43=HEAP[$42];
        var $44=(($43+68)&4294967295);
        var $45=HEAP[$44];
        var $46=HEAP[$1];
        var $47=(($46+16)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48+64)&4294967295);
        var $50=HEAP[$49];
        var $51=((($45))>>>0) >= ((($50))>>>0);
        if ($51) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $52
        var $53=HEAP[$1];
        _luaC_step($53);
        __label__ = 11; break;
      case 11: // $54
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_resume($L, $nargs) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $status=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$nargs;
        var $4=HEAP[$2];
        var $5=(($4+6)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        var $8=((($7))|0)!=1;
        if ($8) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $9
        var $10=HEAP[$2];
        var $11=(($10+6)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $15
        var $16=HEAP[$2];
        var $17=(($16+20)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$2];
        var $20=(($19+40)&4294967295);
        var $21=HEAP[$20];
        var $22=((($18))|0)!=((($21))|0);
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $23
        var $24=HEAP[$2];
        var $25=_resume_error($24, ((__str3170)&4294967295));
        HEAP[$1]=$25;
        __label__ = 10; break;
      case 4: // $26
        var $27=HEAP[$2];
        var $28=(($27+52)&4294967295);
        var $29=HEAP[$28];
        var $30=unSign(($29), 16, 0);
        var $31=((($30))|0) >= 200;
        if ($31) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $32
        var $33=HEAP[$2];
        var $34=_resume_error($33, ((__str2169)&4294967295));
        HEAP[$1]=$34;
        __label__ = 10; break;
      case 6: // $35
        var $36=HEAP[$2];
        var $37=HEAP[$2];
        var $38=(($37+52)&4294967295);
        var $39=HEAP[$38];
        var $40=((($39) + 1)&65535);
        HEAP[$38]=$40;
        var $41=HEAP[$2];
        var $42=(($41+54)&4294967295);
        HEAP[$42]=$40;
        var $43=HEAP[$2];
        var $44=HEAP[$2];
        var $45=(($44+8)&4294967295);
        var $46=HEAP[$45];
        var $47=HEAP[$3];
        var $48=((0 - ($47))&4294967295);
        var $49=(($46+12*$48)&4294967295);
        var $50=$49;
        var $51=_luaD_rawrunprotected($43, 30, $50);
        HEAP[$status]=$51;
        var $52=HEAP[$status];
        var $53=((($52))|0)!=0;
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $54
        var $55=HEAP[$status];
        var $56=((($55)) & 255);
        var $57=HEAP[$2];
        var $58=(($57+6)&4294967295);
        HEAP[$58]=$56;
        var $59=HEAP[$2];
        var $60=HEAP[$status];
        var $61=HEAP[$2];
        var $62=(($61+8)&4294967295);
        var $63=HEAP[$62];
        _luaD_seterrorobj($59, $60, $63);
        var $64=HEAP[$2];
        var $65=(($64+8)&4294967295);
        var $66=HEAP[$65];
        var $67=HEAP[$2];
        var $68=(($67+20)&4294967295);
        var $69=HEAP[$68];
        var $70=(($69+8)&4294967295);
        HEAP[$70]=$66;
        __label__ = 9; break;
      case 8: // $71
        var $72=HEAP[$2];
        var $73=(($72+6)&4294967295);
        var $74=HEAP[$73];
        var $75=unSign(($74), 8, 0);
        HEAP[$status]=$75;
        __label__ = 9; break;
      case 9: // $76
        var $77=HEAP[$2];
        var $78=(($77+52)&4294967295);
        var $79=HEAP[$78];
        var $80=((($79) + -1)&65535);
        HEAP[$78]=$80;
        var $81=HEAP[$status];
        HEAP[$1]=$81;
        __label__ = 10; break;
      case 10: // $82
        var $83=HEAP[$1];
        STACKTOP = __stackBase__;
        return $83;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _resume_error($L, $msg) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i_o=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$msg;
        var $3=HEAP[$1];
        var $4=(($3+20)&4294967295);
        var $5=HEAP[$4];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=HEAP[$1];
        var $9=(($8+8)&4294967295);
        HEAP[$9]=$7;
        var $10=HEAP[$1];
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        HEAP[$i_o]=$12;
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=HEAP[$2];
        var $16=_strlen($15);
        var $17=_luaS_newlstr($13, $14, $16);
        var $18=$17;
        var $19=HEAP[$i_o];
        var $20=(($19)&4294967295);
        var $21=$20;
        HEAP[$21]=$18;
        var $22=HEAP[$i_o];
        var $23=(($22+8)&4294967295);
        HEAP[$23]=4;
        var $24=HEAP[$1];
        var $25=(($24+28)&4294967295);
        var $26=HEAP[$25];
        var $27=$26;
        var $28=HEAP[$1];
        var $29=(($28+8)&4294967295);
        var $30=HEAP[$29];
        var $31=$30;
        var $32=($27);
        var $33=($31);
        var $34=((($32) - ($33))&4294967295);
        var $35=((($34))|0) <= 12;
        if ($35) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $36
        var $37=HEAP[$1];
        _luaD_growstack($37, 1);
        __label__ = 3; break;
      case 2: // $38
        __label__ = 3; break;
      case 3: // $39
        var $40=HEAP[$1];
        var $41=(($40+8)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+12)&4294967295);
        HEAP[$41]=$43;
        STACKTOP = __stackBase__;
        return 2;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _resume($L, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $firstArg=__stackBase__+8;
        var $ci=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$ud;
        var $3=HEAP[$2];
        var $4=$3;
        HEAP[$firstArg]=$4;
        var $5=HEAP[$1];
        var $6=(($5+20)&4294967295);
        var $7=HEAP[$6];
        HEAP[$ci]=$7;
        var $8=HEAP[$1];
        var $9=(($8+6)&4294967295);
        var $10=HEAP[$9];
        var $11=unSign(($10), 8, 0);
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $13
        var $14=HEAP[$1];
        var $15=HEAP[$firstArg];
        var $16=(($15+-12)&4294967295);
        var $17=_luaD_precall($14, $16, -1);
        var $18=((($17))|0)!=0;
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $19
        __label__ = 11; break;
      case 3: // $20
        __label__ = 10; break;
      case 4: // $21
        var $22=HEAP[$1];
        var $23=(($22+6)&4294967295);
        HEAP[$23]=0;
        var $24=HEAP[$ci];
        var $25=(($24+4)&4294967295);
        var $26=HEAP[$25];
        var $27=(($26)&4294967295);
        var $28=$27;
        var $29=HEAP[$28];
        var $30=$29;
        var $31=$30;
        var $32=(($31+6)&4294967295);
        var $33=HEAP[$32];
        var $34=reSign(($33), 8, 0)!=0;
        if ($34) { __label__ = 5; break; } else { __label__ = 8; break; }
      case 5: // $35
        var $36=HEAP[$1];
        var $37=HEAP[$firstArg];
        var $38=_luaD_poscall($36, $37);
        var $39=((($38))|0)!=0;
        if ($39) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $40
        var $41=HEAP[$1];
        var $42=(($41+20)&4294967295);
        var $43=HEAP[$42];
        var $44=(($43+8)&4294967295);
        var $45=HEAP[$44];
        var $46=HEAP[$1];
        var $47=(($46+8)&4294967295);
        HEAP[$47]=$45;
        __label__ = 7; break;
      case 7: // $48
        __label__ = 9; break;
      case 8: // $49
        var $50=HEAP[$1];
        var $51=(($50+20)&4294967295);
        var $52=HEAP[$51];
        var $53=(($52)&4294967295);
        var $54=HEAP[$53];
        var $55=HEAP[$1];
        var $56=(($55+12)&4294967295);
        HEAP[$56]=$54;
        __label__ = 9; break;
      case 9: // $57
        __label__ = 10; break;
      case 10: // $58
        var $59=HEAP[$1];
        var $60=HEAP[$1];
        var $61=(($60+20)&4294967295);
        var $62=HEAP[$61];
        var $63=HEAP[$1];
        var $64=(($63+40)&4294967295);
        var $65=HEAP[$64];
        var $66=($62);
        var $67=($65);
        var $68=((($66) - ($67))&4294967295);
        var $69=((((($68))|0)/24)|0);
        _luaV_execute($59, $69);
        __label__ = 11; break;
      case 11: // $70
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lua_yield($L, $nresults) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$nresults;
        var $3=HEAP[$1];
        var $4=HEAP[$1];
        var $5=(($4+52)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 16, 0);
        var $8=HEAP[$1];
        var $9=(($8+54)&4294967295);
        var $10=HEAP[$9];
        var $11=unSign(($10), 16, 0);
        var $12=((($7))|0) > ((($11))|0);
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        var $14=HEAP[$1];
        _luaG_runerror($14, ((__str4171)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $15
        var $16=HEAP[$1];
        var $17=(($16+8)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$2];
        var $20=((0 - ($19))&4294967295);
        var $21=(($18+12*$20)&4294967295);
        var $22=HEAP[$1];
        var $23=(($22+12)&4294967295);
        HEAP[$23]=$21;
        var $24=HEAP[$1];
        var $25=(($24+6)&4294967295);
        HEAP[$25]=1;
        STACKTOP = __stackBase__;
        return -1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_pcall($L, $func, $u, $old_top, $ef) {
    var __stackBase__  = STACKTOP; STACKTOP += 39; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 39);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $status=__stackBase__+20;
        var $oldnCcalls=__stackBase__+24;
        var $old_ci=__stackBase__+26;
        var $old_allowhooks=__stackBase__+30;
        var $old_errfunc=__stackBase__+31;
        var $oldtop=__stackBase__+35;
        HEAP[$1]=$L;
        HEAP[$2]=$func;
        HEAP[$3]=$u;
        HEAP[$4]=$old_top;
        HEAP[$5]=$ef;
        var $6=HEAP[$1];
        var $7=(($6+52)&4294967295);
        var $8=HEAP[$7];
        HEAP[$oldnCcalls]=$8;
        var $9=HEAP[$1];
        var $10=(($9+20)&4294967295);
        var $11=HEAP[$10];
        var $12=$11;
        var $13=HEAP[$1];
        var $14=(($13+40)&4294967295);
        var $15=HEAP[$14];
        var $16=$15;
        var $17=($12);
        var $18=($16);
        var $19=((($17) - ($18))&4294967295);
        HEAP[$old_ci]=$19;
        var $20=HEAP[$1];
        var $21=(($20+57)&4294967295);
        var $22=HEAP[$21];
        HEAP[$old_allowhooks]=$22;
        var $23=HEAP[$1];
        var $24=(($23+108)&4294967295);
        var $25=HEAP[$24];
        HEAP[$old_errfunc]=$25;
        var $26=HEAP[$5];
        var $27=HEAP[$1];
        var $28=(($27+108)&4294967295);
        HEAP[$28]=$26;
        var $29=HEAP[$1];
        var $30=HEAP[$2];
        var $31=HEAP[$3];
        var $32=_luaD_rawrunprotected($29, $30, $31);
        HEAP[$status]=$32;
        var $33=HEAP[$status];
        var $34=((($33))|0)!=0;
        if ($34) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $35
        var $36=HEAP[$1];
        var $37=(($36+32)&4294967295);
        var $38=HEAP[$37];
        var $39=$38;
        var $40=HEAP[$4];
        var $41=(($39+$40)&4294967295);
        var $42=$41;
        HEAP[$oldtop]=$42;
        var $43=HEAP[$1];
        var $44=HEAP[$oldtop];
        _luaF_close($43, $44);
        var $45=HEAP[$1];
        var $46=HEAP[$status];
        var $47=HEAP[$oldtop];
        _luaD_seterrorobj($45, $46, $47);
        var $48=HEAP[$oldnCcalls];
        var $49=HEAP[$1];
        var $50=(($49+52)&4294967295);
        HEAP[$50]=$48;
        var $51=HEAP[$1];
        var $52=(($51+40)&4294967295);
        var $53=HEAP[$52];
        var $54=$53;
        var $55=HEAP[$old_ci];
        var $56=(($54+$55)&4294967295);
        var $57=$56;
        var $58=HEAP[$1];
        var $59=(($58+20)&4294967295);
        HEAP[$59]=$57;
        var $60=HEAP[$1];
        var $61=(($60+20)&4294967295);
        var $62=HEAP[$61];
        var $63=(($62)&4294967295);
        var $64=HEAP[$63];
        var $65=HEAP[$1];
        var $66=(($65+12)&4294967295);
        HEAP[$66]=$64;
        var $67=HEAP[$1];
        var $68=(($67+20)&4294967295);
        var $69=HEAP[$68];
        var $70=(($69+12)&4294967295);
        var $71=HEAP[$70];
        var $72=HEAP[$1];
        var $73=(($72+24)&4294967295);
        HEAP[$73]=$71;
        var $74=HEAP[$old_allowhooks];
        var $75=HEAP[$1];
        var $76=(($75+57)&4294967295);
        HEAP[$76]=$74;
        var $77=HEAP[$1];
        _restore_stack_limit($77);
        __label__ = 2; break;
      case 2: // $78
        var $79=HEAP[$old_errfunc];
        var $80=HEAP[$1];
        var $81=(($80+108)&4294967295);
        HEAP[$81]=$79;
        var $82=HEAP[$status];
        STACKTOP = __stackBase__;
        return $82;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _restore_stack_limit($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $inuse=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+48)&4294967295);
        var $4=HEAP[$3];
        var $5=((($4))|0) > 20000;
        if ($5) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $6
        var $7=HEAP[$1];
        var $8=(($7+20)&4294967295);
        var $9=HEAP[$8];
        var $10=HEAP[$1];
        var $11=(($10+40)&4294967295);
        var $12=HEAP[$11];
        var $13=($9);
        var $14=($12);
        var $15=((($13) - ($14))&4294967295);
        var $16=((((($15))|0)/24)|0);
        HEAP[$inuse]=$16;
        var $17=HEAP[$inuse];
        var $18=((($17) + 1)&4294967295);
        var $19=((($18))|0) < 20000;
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $20
        var $21=HEAP[$1];
        _luaD_reallocCI($21, 20000);
        __label__ = 3; break;
      case 3: // $22
        __label__ = 4; break;
      case 4: // $23
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaD_protectedparser($L, $z, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $p=__stackBase__+12;
    var $status=__stackBase__+32;
    HEAP[$1]=$L;
    HEAP[$2]=$z;
    HEAP[$3]=$name;
    var $4=HEAP[$2];
    var $5=(($p)&4294967295);
    HEAP[$5]=$4;
    var $6=HEAP[$3];
    var $7=(($p+16)&4294967295);
    HEAP[$7]=$6;
    var $8=(($p+4)&4294967295);
    var $9=(($8)&4294967295);
    HEAP[$9]=0;
    var $10=(($p+4)&4294967295);
    var $11=(($10+8)&4294967295);
    HEAP[$11]=0;
    var $12=HEAP[$1];
    var $13=$p;
    var $14=HEAP[$1];
    var $15=(($14+8)&4294967295);
    var $16=HEAP[$15];
    var $17=$16;
    var $18=HEAP[$1];
    var $19=(($18+32)&4294967295);
    var $20=HEAP[$19];
    var $21=$20;
    var $22=($17);
    var $23=($21);
    var $24=((($22) - ($23))&4294967295);
    var $25=HEAP[$1];
    var $26=(($25+108)&4294967295);
    var $27=HEAP[$26];
    var $28=_luaD_pcall($12, 32, $13, $24, $27);
    HEAP[$status]=$28;
    var $29=HEAP[$1];
    var $30=(($p+4)&4294967295);
    var $31=(($30)&4294967295);
    var $32=HEAP[$31];
    var $33=(($p+4)&4294967295);
    var $34=(($33+8)&4294967295);
    var $35=HEAP[$34];
    var $36=((($35) * 1)&4294967295);
    var $37=_luaM_realloc_($29, $32, $36, 0);
    var $38=(($p+4)&4294967295);
    var $39=(($38)&4294967295);
    HEAP[$39]=$37;
    var $40=(($p+4)&4294967295);
    var $41=(($40+8)&4294967295);
    HEAP[$41]=0;
    var $42=HEAP[$status];
    STACKTOP = __stackBase__;
    return $42;
  }
  

  function _f_parser($L, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $tf=__stackBase__+12;
        var $cl=__stackBase__+16;
        var $p=__stackBase__+20;
        var $c=__stackBase__+24;
        var $i_o=__stackBase__+28;
        HEAP[$1]=$L;
        HEAP[$2]=$ud;
        var $3=HEAP[$2];
        var $4=$3;
        HEAP[$p]=$4;
        var $5=HEAP[$p];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=_luaZ_lookahead($7);
        HEAP[$c]=$8;
        var $9=HEAP[$1];
        var $10=(($9+16)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11+68)&4294967295);
        var $13=HEAP[$12];
        var $14=HEAP[$1];
        var $15=(($14+16)&4294967295);
        var $16=HEAP[$15];
        var $17=(($16+64)&4294967295);
        var $18=HEAP[$17];
        var $19=((($13))>>>0) >= ((($18))>>>0);
        if ($19) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $20
        var $21=HEAP[$1];
        _luaC_step($21);
        __label__ = 2; break;
      case 2: // $22
        var $23=HEAP[$c];
        var $24=HEAP[((__str5172)&4294967295)];
        var $25=reSign(($24), 8, 0);
        var $26=((($23))|0)==((($25))|0);
        if ($26) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $27
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $28
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $29
        var $30=__lastLabel__ == 3 ? 34 : (36);
        var $31=HEAP[$1];
        var $32=HEAP[$p];
        var $33=(($32)&4294967295);
        var $34=HEAP[$33];
        var $35=HEAP[$p];
        var $36=(($35+4)&4294967295);
        var $37=HEAP[$p];
        var $38=(($37+16)&4294967295);
        var $39=HEAP[$38];
        var $40=FUNCTION_TABLE[$30]($31, $34, $36, $39);
        HEAP[$tf]=$40;
        var $41=HEAP[$1];
        var $42=HEAP[$tf];
        var $43=(($42+72)&4294967295);
        var $44=HEAP[$43];
        var $45=unSign(($44), 8, 0);
        var $46=HEAP[$1];
        var $47=(($46+72)&4294967295);
        var $48=(($47)&4294967295);
        var $49=$48;
        var $50=HEAP[$49];
        var $51=$50;
        var $52=_luaF_newLclosure($41, $45, $51);
        HEAP[$cl]=$52;
        var $53=HEAP[$tf];
        var $54=HEAP[$cl];
        var $55=$54;
        var $56=(($55+16)&4294967295);
        HEAP[$56]=$53;
        HEAP[$i]=0;
        __label__ = 6; break;
      case 6: // $57
        var $58=HEAP[$i];
        var $59=HEAP[$tf];
        var $60=(($59+72)&4294967295);
        var $61=HEAP[$60];
        var $62=unSign(($61), 8, 0);
        var $63=((($58))|0) < ((($62))|0);
        if ($63) { __label__ = 7; break; } else { __label__ = 9; break; }
      case 7: // $64
        var $65=HEAP[$1];
        var $66=_luaF_newupval($65);
        var $67=HEAP[$i];
        var $68=HEAP[$cl];
        var $69=$68;
        var $70=(($69+20)&4294967295);
        var $71=(($70+$67*4)&4294967295);
        HEAP[$71]=$66;
        __label__ = 8; break;
      case 8: // $72
        var $73=HEAP[$i];
        var $74=((($73) + 1)&4294967295);
        HEAP[$i]=$74;
        __label__ = 6; break;
      case 9: // $75
        var $76=HEAP[$1];
        var $77=(($76+8)&4294967295);
        var $78=HEAP[$77];
        HEAP[$i_o]=$78;
        var $79=HEAP[$cl];
        var $80=$79;
        var $81=HEAP[$i_o];
        var $82=(($81)&4294967295);
        var $83=$82;
        HEAP[$83]=$80;
        var $84=HEAP[$i_o];
        var $85=(($84+8)&4294967295);
        HEAP[$85]=6;
        var $86=HEAP[$1];
        var $87=(($86+28)&4294967295);
        var $88=HEAP[$87];
        var $89=$88;
        var $90=HEAP[$1];
        var $91=(($90+8)&4294967295);
        var $92=HEAP[$91];
        var $93=$92;
        var $94=($89);
        var $95=($93);
        var $96=((($94) - ($95))&4294967295);
        var $97=((($96))|0) <= 12;
        if ($97) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $98
        var $99=HEAP[$1];
        _luaD_growstack($99, 1);
        __label__ = 12; break;
      case 11: // $100
        __label__ = 12; break;
      case 12: // $101
        var $102=HEAP[$1];
        var $103=(($102+8)&4294967295);
        var $104=HEAP[$103];
        var $105=(($104+12)&4294967295);
        HEAP[$103]=$105;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaU_dump($L, $f, $w, $data, $strip) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    var $5=__stackBase__+16;
    var $D=__stackBase__+20;
    HEAP[$1]=$L;
    HEAP[$2]=$f;
    HEAP[$3]=$w;
    HEAP[$4]=$data;
    HEAP[$5]=$strip;
    var $6=HEAP[$1];
    var $7=(($D)&4294967295);
    HEAP[$7]=$6;
    var $8=HEAP[$3];
    var $9=(($D+4)&4294967295);
    HEAP[$9]=$8;
    var $10=HEAP[$4];
    var $11=(($D+8)&4294967295);
    HEAP[$11]=$10;
    var $12=HEAP[$5];
    var $13=(($D+12)&4294967295);
    HEAP[$13]=$12;
    var $14=(($D+16)&4294967295);
    HEAP[$14]=0;
    _DumpHeader($D);
    var $15=HEAP[$2];
    _DumpFunction($15, 0, $D);
    var $16=(($D+16)&4294967295);
    var $17=HEAP[$16];
    STACKTOP = __stackBase__;
    return $17;
  }
  

  function _DumpHeader($D) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $h=__stackBase__+4;
    HEAP[$1]=$D;
    var $2=(($h)&4294967295);
    _luaU_header($2);
    var $3=(($h)&4294967295);
    var $4=HEAP[$1];
    _DumpBlock($3, 12, $4);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _DumpFunction($f, $p, $D) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$f;
        HEAP[$2]=$p;
        HEAP[$3]=$D;
        var $4=HEAP[$1];
        var $5=(($4+32)&4294967295);
        var $6=HEAP[$5];
        var $7=HEAP[$2];
        var $8=((($6))|0)==((($7))|0);
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $9
        var $10=HEAP[$3];
        var $11=(($10+12)&4294967295);
        var $12=HEAP[$11];
        var $13=((($12))|0)!=0;
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $14
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $15
        var $16=HEAP[$1];
        var $17=(($16+32)&4294967295);
        var $18=HEAP[$17];
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $19
        var $20=__lastLabel__ == 2 ? 0 : ($18);
        var $21=HEAP[$3];
        _DumpString($20, $21);
        var $22=HEAP[$1];
        var $23=(($22+60)&4294967295);
        var $24=HEAP[$23];
        var $25=HEAP[$3];
        _DumpInt($24, $25);
        var $26=HEAP[$1];
        var $27=(($26+64)&4294967295);
        var $28=HEAP[$27];
        var $29=HEAP[$3];
        _DumpInt($28, $29);
        var $30=HEAP[$1];
        var $31=(($30+72)&4294967295);
        var $32=HEAP[$31];
        var $33=unSign(($32), 8, 0);
        var $34=HEAP[$3];
        _DumpChar($33, $34);
        var $35=HEAP[$1];
        var $36=(($35+73)&4294967295);
        var $37=HEAP[$36];
        var $38=unSign(($37), 8, 0);
        var $39=HEAP[$3];
        _DumpChar($38, $39);
        var $40=HEAP[$1];
        var $41=(($40+74)&4294967295);
        var $42=HEAP[$41];
        var $43=unSign(($42), 8, 0);
        var $44=HEAP[$3];
        _DumpChar($43, $44);
        var $45=HEAP[$1];
        var $46=(($45+75)&4294967295);
        var $47=HEAP[$46];
        var $48=unSign(($47), 8, 0);
        var $49=HEAP[$3];
        _DumpChar($48, $49);
        var $50=HEAP[$1];
        var $51=(($50+12)&4294967295);
        var $52=HEAP[$51];
        var $53=$52;
        var $54=HEAP[$1];
        var $55=(($54+44)&4294967295);
        var $56=HEAP[$55];
        var $57=HEAP[$3];
        _DumpVector($53, $56, 4, $57);
        var $58=HEAP[$1];
        var $59=HEAP[$3];
        _DumpConstants($58, $59);
        var $60=HEAP[$1];
        var $61=HEAP[$3];
        _DumpDebug($60, $61);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _DumpString($s, $D) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $size=__stackBase__+8;
        var $size1=__stackBase__+12;
        HEAP[$1]=$s;
        HEAP[$2]=$D;
        var $3=HEAP[$1];
        var $4=((($3))|0)==0;
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $5
        var $6=HEAP[$1];
        var $7=(($6+16)&4294967295);
        var $8=$7;
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $10
        HEAP[$size]=0;
        var $11=$size;
        var $12=HEAP[$2];
        _DumpBlock($11, 4, $12);
        __label__ = 4; break;
      case 3: // $13
        var $14=HEAP[$1];
        var $15=$14;
        var $16=(($15+12)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17) + 1)&4294967295);
        HEAP[$size1]=$18;
        var $19=$size1;
        var $20=HEAP[$2];
        _DumpBlock($19, 4, $20);
        var $21=HEAP[$1];
        var $22=(($21+16)&4294967295);
        var $23=$22;
        var $24=HEAP[$size1];
        var $25=HEAP[$2];
        _DumpBlock($23, $24, $25);
        __label__ = 4; break;
      case 4: // $26
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _DumpInt($x, $D) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$x;
    HEAP[$2]=$D;
    var $3=$1;
    var $4=HEAP[$2];
    _DumpBlock($3, 4, $4);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _DumpChar($y, $D) {
    var __stackBase__  = STACKTOP; STACKTOP += 9; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 9);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $x=__stackBase__+8;
    HEAP[$1]=$y;
    HEAP[$2]=$D;
    var $3=HEAP[$1];
    var $4=((($3)) & 255);
    HEAP[$x]=$4;
    var $5=HEAP[$2];
    _DumpBlock($x, 1, $5);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _DumpVector($b, $n, $size, $D) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    HEAP[$1]=$b;
    HEAP[$2]=$n;
    HEAP[$3]=$size;
    HEAP[$4]=$D;
    var $5=HEAP[$2];
    var $6=HEAP[$4];
    _DumpInt($5, $6);
    var $7=HEAP[$1];
    var $8=HEAP[$2];
    var $9=HEAP[$3];
    var $10=((($8) * ($9))&4294967295);
    var $11=HEAP[$4];
    _DumpBlock($7, $10, $11);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _DumpConstants($f, $D) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $n=__stackBase__+12;
        var $o=__stackBase__+16;
        HEAP[$1]=$f;
        HEAP[$2]=$D;
        var $3=HEAP[$1];
        var $4=(($3+40)&4294967295);
        var $5=HEAP[$4];
        HEAP[$n]=$5;
        var $6=HEAP[$n];
        var $7=HEAP[$2];
        _DumpInt($6, $7);
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$i];
        var $10=HEAP[$n];
        var $11=((($9))|0) < ((($10))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 10; break; }
      case 2: // $12
        var $13=HEAP[$i];
        var $14=HEAP[$1];
        var $15=(($14+8)&4294967295);
        var $16=HEAP[$15];
        var $17=(($16+12*$13)&4294967295);
        HEAP[$o]=$17;
        var $18=HEAP[$o];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        var $21=HEAP[$2];
        _DumpChar($20, $21);
        var $22=HEAP[$o];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        if ($24 == 0) {
          __label__ = 3; break;
        }
        else if ($24 == 1) {
          __label__ = 4; break;
        }
        else if ($24 == 3) {
          __label__ = 5; break;
        }
        else if ($24 == 4) {
          __label__ = 6; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 3: // $25
        __label__ = 8; break;
      case 4: // $26
        var $27=HEAP[$o];
        var $28=(($27)&4294967295);
        var $29=$28;
        var $30=HEAP[$29];
        var $31=HEAP[$2];
        _DumpChar($30, $31);
        __label__ = 8; break;
      case 5: // $32
        var $33=HEAP[$o];
        var $34=(($33)&4294967295);
        var $35=$34;
        var $36=HEAP[$35];
        var $37=HEAP[$2];
        _DumpNumber($36, $37);
        __label__ = 8; break;
      case 6: // $38
        var $39=HEAP[$o];
        var $40=(($39)&4294967295);
        var $41=$40;
        var $42=HEAP[$41];
        var $43=$42;
        var $44=HEAP[$2];
        _DumpString($43, $44);
        __label__ = 8; break;
      case 7: // $45
        __label__ = 8; break;
      case 8: // $46
        __label__ = 9; break;
      case 9: // $47
        var $48=HEAP[$i];
        var $49=((($48) + 1)&4294967295);
        HEAP[$i]=$49;
        __label__ = 1; break;
      case 10: // $50
        var $51=HEAP[$1];
        var $52=(($51+52)&4294967295);
        var $53=HEAP[$52];
        HEAP[$n]=$53;
        var $54=HEAP[$n];
        var $55=HEAP[$2];
        _DumpInt($54, $55);
        HEAP[$i]=0;
        __label__ = 11; break;
      case 11: // $56
        var $57=HEAP[$i];
        var $58=HEAP[$n];
        var $59=((($57))|0) < ((($58))|0);
        if ($59) { __label__ = 12; break; } else { __label__ = 14; break; }
      case 12: // $60
        var $61=HEAP[$i];
        var $62=HEAP[$1];
        var $63=(($62+16)&4294967295);
        var $64=HEAP[$63];
        var $65=(($64+4*$61)&4294967295);
        var $66=HEAP[$65];
        var $67=HEAP[$1];
        var $68=(($67+32)&4294967295);
        var $69=HEAP[$68];
        var $70=HEAP[$2];
        _DumpFunction($66, $69, $70);
        __label__ = 13; break;
      case 13: // $71
        var $72=HEAP[$i];
        var $73=((($72) + 1)&4294967295);
        HEAP[$i]=$73;
        __label__ = 11; break;
      case 14: // $74
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _DumpDebug($f, $D) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $n=__stackBase__+12;
        HEAP[$1]=$f;
        HEAP[$2]=$D;
        var $3=HEAP[$2];
        var $4=(($3+12)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $8
        var $9=HEAP[$1];
        var $10=(($9+48)&4294967295);
        var $11=HEAP[$10];
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $12
        var $13=__lastLabel__ == 1 ? 0 : ($11);
        HEAP[$n]=$13;
        var $14=HEAP[$1];
        var $15=(($14+20)&4294967295);
        var $16=HEAP[$15];
        var $17=$16;
        var $18=HEAP[$n];
        var $19=HEAP[$2];
        _DumpVector($17, $18, 4, $19);
        var $20=HEAP[$2];
        var $21=(($20+12)&4294967295);
        var $22=HEAP[$21];
        var $23=((($22))|0)!=0;
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $24
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $25
        var $26=HEAP[$1];
        var $27=(($26+56)&4294967295);
        var $28=HEAP[$27];
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $29
        var $30=__lastLabel__ == 4 ? 0 : ($28);
        HEAP[$n]=$30;
        var $31=HEAP[$n];
        var $32=HEAP[$2];
        _DumpInt($31, $32);
        HEAP[$i]=0;
        __label__ = 7; break;
      case 7: // $33
        var $34=HEAP[$i];
        var $35=HEAP[$n];
        var $36=((($34))|0) < ((($35))|0);
        if ($36) { __label__ = 8; break; } else { __label__ = 10; break; }
      case 8: // $37
        var $38=HEAP[$i];
        var $39=HEAP[$1];
        var $40=(($39+24)&4294967295);
        var $41=HEAP[$40];
        var $42=(($41+12*$38)&4294967295);
        var $43=(($42)&4294967295);
        var $44=HEAP[$43];
        var $45=HEAP[$2];
        _DumpString($44, $45);
        var $46=HEAP[$i];
        var $47=HEAP[$1];
        var $48=(($47+24)&4294967295);
        var $49=HEAP[$48];
        var $50=(($49+12*$46)&4294967295);
        var $51=(($50+4)&4294967295);
        var $52=HEAP[$51];
        var $53=HEAP[$2];
        _DumpInt($52, $53);
        var $54=HEAP[$i];
        var $55=HEAP[$1];
        var $56=(($55+24)&4294967295);
        var $57=HEAP[$56];
        var $58=(($57+12*$54)&4294967295);
        var $59=(($58+8)&4294967295);
        var $60=HEAP[$59];
        var $61=HEAP[$2];
        _DumpInt($60, $61);
        __label__ = 9; break;
      case 9: // $62
        var $63=HEAP[$i];
        var $64=((($63) + 1)&4294967295);
        HEAP[$i]=$64;
        __label__ = 7; break;
      case 10: // $65
        var $66=HEAP[$2];
        var $67=(($66+12)&4294967295);
        var $68=HEAP[$67];
        var $69=((($68))|0)!=0;
        if ($69) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $70
        __lastLabel__ = 11; __label__ = 13; break;
      case 12: // $71
        var $72=HEAP[$1];
        var $73=(($72+36)&4294967295);
        var $74=HEAP[$73];
        __lastLabel__ = 12; __label__ = 13; break;
      case 13: // $75
        var $76=__lastLabel__ == 11 ? 0 : ($74);
        HEAP[$n]=$76;
        var $77=HEAP[$n];
        var $78=HEAP[$2];
        _DumpInt($77, $78);
        HEAP[$i]=0;
        __label__ = 14; break;
      case 14: // $79
        var $80=HEAP[$i];
        var $81=HEAP[$n];
        var $82=((($80))|0) < ((($81))|0);
        if ($82) { __label__ = 15; break; } else { __label__ = 17; break; }
      case 15: // $83
        var $84=HEAP[$i];
        var $85=HEAP[$1];
        var $86=(($85+28)&4294967295);
        var $87=HEAP[$86];
        var $88=(($87+4*$84)&4294967295);
        var $89=HEAP[$88];
        var $90=HEAP[$2];
        _DumpString($89, $90);
        __label__ = 16; break;
      case 16: // $91
        var $92=HEAP[$i];
        var $93=((($92) + 1)&4294967295);
        HEAP[$i]=$93;
        __label__ = 14; break;
      case 17: // $94
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _DumpNumber($x, $D) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+8;
    HEAP[$1]=$x;
    HEAP[$2]=$D;
    var $3=$1;
    var $4=HEAP[$2];
    _DumpBlock($3, 8, $4);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _DumpBlock($b, $size, $D) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$b;
        HEAP[$2]=$size;
        HEAP[$3]=$D;
        var $4=HEAP[$3];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$3];
        var $10=(($9+4)&4294967295);
        var $11=HEAP[$10];
        var $12=HEAP[$3];
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=HEAP[$1];
        var $16=HEAP[$2];
        var $17=HEAP[$3];
        var $18=(($17+8)&4294967295);
        var $19=HEAP[$18];
        var $20=FUNCTION_TABLE[$11]($14, $15, $16, $19);
        var $21=HEAP[$3];
        var $22=(($21+16)&4294967295);
        HEAP[$22]=$20;
        __label__ = 2; break;
      case 2: // $23
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaF_newCclosure($L, $nelems, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $c=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$nelems;
    HEAP[$3]=$e;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    var $6=((($5) - 1)&4294967295);
    var $7=((12 * ($6))&4294967295);
    var $8=((32 + ($7))&4294967295);
    var $9=_luaM_realloc_($4, 0, 0, $8);
    var $10=$9;
    HEAP[$c]=$10;
    var $11=HEAP[$1];
    var $12=HEAP[$c];
    var $13=$12;
    _luaC_link($11, $13, 6);
    var $14=HEAP[$c];
    var $15=$14;
    var $16=(($15+6)&4294967295);
    HEAP[$16]=1;
    var $17=HEAP[$3];
    var $18=HEAP[$c];
    var $19=$18;
    var $20=(($19+12)&4294967295);
    HEAP[$20]=$17;
    var $21=HEAP[$2];
    var $22=((($21)) & 255);
    var $23=HEAP[$c];
    var $24=$23;
    var $25=(($24+7)&4294967295);
    HEAP[$25]=$22;
    var $26=HEAP[$c];
    STACKTOP = __stackBase__;
    return $26;
  }
  

  function _luaF_newLclosure($L, $nelems, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $c=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$nelems;
        HEAP[$3]=$e;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=((($5) - 1)&4294967295);
        var $7=((4 * ($6))&4294967295);
        var $8=((24 + ($7))&4294967295);
        var $9=_luaM_realloc_($4, 0, 0, $8);
        var $10=$9;
        HEAP[$c]=$10;
        var $11=HEAP[$1];
        var $12=HEAP[$c];
        var $13=$12;
        _luaC_link($11, $13, 6);
        var $14=HEAP[$c];
        var $15=$14;
        var $16=(($15+6)&4294967295);
        HEAP[$16]=0;
        var $17=HEAP[$3];
        var $18=HEAP[$c];
        var $19=$18;
        var $20=(($19+12)&4294967295);
        HEAP[$20]=$17;
        var $21=HEAP[$2];
        var $22=((($21)) & 255);
        var $23=HEAP[$c];
        var $24=$23;
        var $25=(($24+7)&4294967295);
        HEAP[$25]=$22;
        __label__ = 1; break;
      case 1: // $26
        var $27=HEAP[$2];
        var $28=((($27) + -1)&4294967295);
        HEAP[$2]=$28;
        var $29=((($27))|0)!=0;
        if ($29) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $30
        var $31=HEAP[$2];
        var $32=HEAP[$c];
        var $33=$32;
        var $34=(($33+20)&4294967295);
        var $35=(($34+$31*4)&4294967295);
        HEAP[$35]=0;
        __label__ = 1; break;
      case 3: // $36
        var $37=HEAP[$c];
        STACKTOP = __stackBase__;
        return $37;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaF_newupval($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $uv=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaM_realloc_($2, 0, 0, 24);
    var $4=$3;
    HEAP[$uv]=$4;
    var $5=HEAP[$1];
    var $6=HEAP[$uv];
    var $7=$6;
    _luaC_link($5, $7, 10);
    var $8=HEAP[$uv];
    var $9=(($8+12)&4294967295);
    var $10=$9;
    var $11=HEAP[$uv];
    var $12=(($11+8)&4294967295);
    HEAP[$12]=$10;
    var $13=HEAP[$uv];
    var $14=(($13+8)&4294967295);
    var $15=HEAP[$14];
    var $16=(($15+8)&4294967295);
    HEAP[$16]=0;
    var $17=HEAP[$uv];
    STACKTOP = __stackBase__;
    return $17;
  }
  

  function _luaF_findupval($L, $level) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $g=__stackBase__+12;
        var $pp=__stackBase__+16;
        var $p=__stackBase__+20;
        var $uv=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$3]=$level;
        var $4=HEAP[$2];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        HEAP[$g]=$6;
        var $7=HEAP[$2];
        var $8=(($7+96)&4294967295);
        HEAP[$pp]=$8;
        __label__ = 1; break;
      case 1: // $9
        var $10=HEAP[$pp];
        var $11=HEAP[$10];
        var $12=((($11))|0)!=0;
        if ($12) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$pp];
        var $15=HEAP[$14];
        var $16=$15;
        HEAP[$p]=$16;
        var $17=(($16+8)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$3];
        var $20=((($18))>>>0) >= ((($19))>>>0);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $21
        var $22=__lastLabel__ == 1 ? 0 : ($20);
        if ($22) { __label__ = 4; break; } else { __label__ = 9; break; }
      case 4: // $23
        var $24=HEAP[$p];
        var $25=(($24+8)&4294967295);
        var $26=HEAP[$25];
        var $27=HEAP[$3];
        var $28=((($26))|0)==((($27))|0);
        if ($28) { __label__ = 5; break; } else { __label__ = 8; break; }
      case 5: // $29
        var $30=HEAP[$p];
        var $31=$30;
        var $32=$31;
        var $33=(($32+5)&4294967295);
        var $34=HEAP[$33];
        var $35=unSign(($34), 8, 0);
        var $36=HEAP[$g];
        var $37=(($36+20)&4294967295);
        var $38=HEAP[$37];
        var $39=unSign(($38), 8, 0);
        var $40=($39) ^ 3;
        var $41=($35) & ($40);
        var $42=($41) & 3;
        var $43=((($42))|0)!=0;
        if ($43) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $44
        var $45=HEAP[$p];
        var $46=$45;
        var $47=$46;
        var $48=(($47+5)&4294967295);
        var $49=HEAP[$48];
        var $50=unSign(($49), 8, 0);
        var $51=($50) ^ 3;
        var $52=((($51)) & 255);
        HEAP[$48]=$52;
        __label__ = 7; break;
      case 7: // $53
        var $54=HEAP[$p];
        HEAP[$1]=$54;
        __label__ = 10; break;
      case 8: // $55
        var $56=HEAP[$p];
        var $57=(($56)&4294967295);
        HEAP[$pp]=$57;
        __label__ = 1; break;
      case 9: // $58
        var $59=HEAP[$2];
        var $60=_luaM_realloc_($59, 0, 0, 24);
        var $61=$60;
        HEAP[$uv]=$61;
        var $62=HEAP[$uv];
        var $63=(($62+4)&4294967295);
        HEAP[$63]=10;
        var $64=HEAP[$g];
        var $65=(($64+20)&4294967295);
        var $66=HEAP[$65];
        var $67=unSign(($66), 8, 0);
        var $68=($67) & 3;
        var $69=((($68)) & 255);
        var $70=HEAP[$uv];
        var $71=(($70+5)&4294967295);
        HEAP[$71]=$69;
        var $72=HEAP[$3];
        var $73=HEAP[$uv];
        var $74=(($73+8)&4294967295);
        HEAP[$74]=$72;
        var $75=HEAP[$pp];
        var $76=HEAP[$75];
        var $77=HEAP[$uv];
        var $78=(($77)&4294967295);
        HEAP[$78]=$76;
        var $79=HEAP[$uv];
        var $80=$79;
        var $81=HEAP[$pp];
        HEAP[$81]=$80;
        var $82=HEAP[$g];
        var $83=(($82+108)&4294967295);
        var $84=HEAP[$uv];
        var $85=(($84+12)&4294967295);
        var $86=$85;
        var $87=(($86)&4294967295);
        HEAP[$87]=$83;
        var $88=HEAP[$g];
        var $89=(($88+108)&4294967295);
        var $90=(($89+12)&4294967295);
        var $91=$90;
        var $92=(($91+4)&4294967295);
        var $93=HEAP[$92];
        var $94=HEAP[$uv];
        var $95=(($94+12)&4294967295);
        var $96=$95;
        var $97=(($96+4)&4294967295);
        HEAP[$97]=$93;
        var $98=HEAP[$uv];
        var $99=HEAP[$uv];
        var $100=(($99+12)&4294967295);
        var $101=$100;
        var $102=(($101+4)&4294967295);
        var $103=HEAP[$102];
        var $104=(($103+12)&4294967295);
        var $105=$104;
        var $106=(($105)&4294967295);
        HEAP[$106]=$98;
        var $107=HEAP[$uv];
        var $108=HEAP[$g];
        var $109=(($108+108)&4294967295);
        var $110=(($109+12)&4294967295);
        var $111=$110;
        var $112=(($111+4)&4294967295);
        HEAP[$112]=$107;
        var $113=HEAP[$uv];
        HEAP[$1]=$113;
        __label__ = 10; break;
      case 10: // $114
        var $115=HEAP[$1];
        STACKTOP = __stackBase__;
        return $115;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaF_freeupval($L, $uv) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$uv;
        var $3=HEAP[$2];
        var $4=(($3+8)&4294967295);
        var $5=HEAP[$4];
        var $6=HEAP[$2];
        var $7=(($6+12)&4294967295);
        var $8=$7;
        var $9=((($5))|0)!=((($8))|0);
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$2];
        _unlinkupval($11);
        __label__ = 2; break;
      case 2: // $12
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=$14;
        var $16=_luaM_realloc_($13, $15, 24, 0);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unlinkupval($uv) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$uv;
    var $2=HEAP[$1];
    var $3=(($2+12)&4294967295);
    var $4=$3;
    var $5=(($4)&4294967295);
    var $6=HEAP[$5];
    var $7=HEAP[$1];
    var $8=(($7+12)&4294967295);
    var $9=$8;
    var $10=(($9+4)&4294967295);
    var $11=HEAP[$10];
    var $12=(($11+12)&4294967295);
    var $13=$12;
    var $14=(($13)&4294967295);
    HEAP[$14]=$6;
    var $15=HEAP[$1];
    var $16=(($15+12)&4294967295);
    var $17=$16;
    var $18=(($17+4)&4294967295);
    var $19=HEAP[$18];
    var $20=HEAP[$1];
    var $21=(($20+12)&4294967295);
    var $22=$21;
    var $23=(($22)&4294967295);
    var $24=HEAP[$23];
    var $25=(($24+12)&4294967295);
    var $26=$25;
    var $27=(($26+4)&4294967295);
    HEAP[$27]=$19;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaF_close($L, $level) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $uv=__stackBase__+8;
        var $g=__stackBase__+12;
        var $o=__stackBase__+16;
        var $o2=__stackBase__+20;
        var $o1=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$level;
        var $3=HEAP[$1];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        HEAP[$g]=$5;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$1];
        var $8=(($7+96)&4294967295);
        var $9=HEAP[$8];
        var $10=((($9))|0)!=0;
        if ($10) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$1];
        var $13=(($12+96)&4294967295);
        var $14=HEAP[$13];
        var $15=$14;
        HEAP[$uv]=$15;
        var $16=(($15+8)&4294967295);
        var $17=HEAP[$16];
        var $18=HEAP[$2];
        var $19=((($17))>>>0) >= ((($18))>>>0);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $20
        var $21=__lastLabel__ == 1 ? 0 : ($19);
        if ($21) { __label__ = 4; break; } else { __label__ = 8; break; }
      case 4: // $22
        var $23=HEAP[$uv];
        var $24=$23;
        HEAP[$o]=$24;
        var $25=HEAP[$uv];
        var $26=(($25)&4294967295);
        var $27=HEAP[$26];
        var $28=HEAP[$1];
        var $29=(($28+96)&4294967295);
        HEAP[$29]=$27;
        var $30=HEAP[$o];
        var $31=$30;
        var $32=(($31+5)&4294967295);
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=HEAP[$g];
        var $36=(($35+20)&4294967295);
        var $37=HEAP[$36];
        var $38=unSign(($37), 8, 0);
        var $39=($38) ^ 3;
        var $40=($34) & ($39);
        var $41=($40) & 3;
        var $42=((($41))|0)!=0;
        if ($42) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $43
        var $44=HEAP[$1];
        var $45=HEAP[$uv];
        _luaF_freeupval($44, $45);
        __label__ = 7; break;
      case 6: // $46
        var $47=HEAP[$uv];
        _unlinkupval($47);
        var $48=HEAP[$uv];
        var $49=(($48+8)&4294967295);
        var $50=HEAP[$49];
        HEAP[$o2]=$50;
        var $51=HEAP[$uv];
        var $52=(($51+12)&4294967295);
        var $53=$52;
        HEAP[$o1]=$53;
        var $54=HEAP[$o1];
        var $55=(($54)&4294967295);
        var $56=HEAP[$o2];
        var $57=(($56)&4294967295);
        var $58=$55;
        var $59=$57;
        _llvm_memcpy_p0i8_p0i8_i32($58, $59, 8, 4, 0);
        var $60=HEAP[$o2];
        var $61=(($60+8)&4294967295);
        var $62=HEAP[$61];
        var $63=HEAP[$o1];
        var $64=(($63+8)&4294967295);
        HEAP[$64]=$62;
        var $65=HEAP[$uv];
        var $66=(($65+12)&4294967295);
        var $67=$66;
        var $68=HEAP[$uv];
        var $69=(($68+8)&4294967295);
        HEAP[$69]=$67;
        var $70=HEAP[$1];
        var $71=HEAP[$uv];
        _luaC_linkupval($70, $71);
        __label__ = 7; break;
      case 7: // $72
        __label__ = 1; break;
      case 8: // $73
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaF_newproto($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $f=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaM_realloc_($2, 0, 0, 76);
    var $4=$3;
    HEAP[$f]=$4;
    var $5=HEAP[$1];
    var $6=HEAP[$f];
    var $7=$6;
    _luaC_link($5, $7, 9);
    var $8=HEAP[$f];
    var $9=(($8+8)&4294967295);
    HEAP[$9]=0;
    var $10=HEAP[$f];
    var $11=(($10+40)&4294967295);
    HEAP[$11]=0;
    var $12=HEAP[$f];
    var $13=(($12+16)&4294967295);
    HEAP[$13]=0;
    var $14=HEAP[$f];
    var $15=(($14+52)&4294967295);
    HEAP[$15]=0;
    var $16=HEAP[$f];
    var $17=(($16+12)&4294967295);
    HEAP[$17]=0;
    var $18=HEAP[$f];
    var $19=(($18+44)&4294967295);
    HEAP[$19]=0;
    var $20=HEAP[$f];
    var $21=(($20+48)&4294967295);
    HEAP[$21]=0;
    var $22=HEAP[$f];
    var $23=(($22+36)&4294967295);
    HEAP[$23]=0;
    var $24=HEAP[$f];
    var $25=(($24+72)&4294967295);
    HEAP[$25]=0;
    var $26=HEAP[$f];
    var $27=(($26+28)&4294967295);
    HEAP[$27]=0;
    var $28=HEAP[$f];
    var $29=(($28+73)&4294967295);
    HEAP[$29]=0;
    var $30=HEAP[$f];
    var $31=(($30+74)&4294967295);
    HEAP[$31]=0;
    var $32=HEAP[$f];
    var $33=(($32+75)&4294967295);
    HEAP[$33]=0;
    var $34=HEAP[$f];
    var $35=(($34+20)&4294967295);
    HEAP[$35]=0;
    var $36=HEAP[$f];
    var $37=(($36+56)&4294967295);
    HEAP[$37]=0;
    var $38=HEAP[$f];
    var $39=(($38+24)&4294967295);
    HEAP[$39]=0;
    var $40=HEAP[$f];
    var $41=(($40+60)&4294967295);
    HEAP[$41]=0;
    var $42=HEAP[$f];
    var $43=(($42+64)&4294967295);
    HEAP[$43]=0;
    var $44=HEAP[$f];
    var $45=(($44+32)&4294967295);
    HEAP[$45]=0;
    var $46=HEAP[$f];
    STACKTOP = __stackBase__;
    return $46;
  }
  

  function _luaF_freeproto($L, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$f;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=(($4+12)&4294967295);
    var $6=HEAP[$5];
    var $7=$6;
    var $8=HEAP[$2];
    var $9=(($8+44)&4294967295);
    var $10=HEAP[$9];
    var $11=((($10) * 4)&4294967295);
    var $12=_luaM_realloc_($3, $7, $11, 0);
    var $13=HEAP[$1];
    var $14=HEAP[$2];
    var $15=(($14+16)&4294967295);
    var $16=HEAP[$15];
    var $17=$16;
    var $18=HEAP[$2];
    var $19=(($18+52)&4294967295);
    var $20=HEAP[$19];
    var $21=((($20) * 4)&4294967295);
    var $22=_luaM_realloc_($13, $17, $21, 0);
    var $23=HEAP[$1];
    var $24=HEAP[$2];
    var $25=(($24+8)&4294967295);
    var $26=HEAP[$25];
    var $27=$26;
    var $28=HEAP[$2];
    var $29=(($28+40)&4294967295);
    var $30=HEAP[$29];
    var $31=((($30) * 12)&4294967295);
    var $32=_luaM_realloc_($23, $27, $31, 0);
    var $33=HEAP[$1];
    var $34=HEAP[$2];
    var $35=(($34+20)&4294967295);
    var $36=HEAP[$35];
    var $37=$36;
    var $38=HEAP[$2];
    var $39=(($38+48)&4294967295);
    var $40=HEAP[$39];
    var $41=((($40) * 4)&4294967295);
    var $42=_luaM_realloc_($33, $37, $41, 0);
    var $43=HEAP[$1];
    var $44=HEAP[$2];
    var $45=(($44+24)&4294967295);
    var $46=HEAP[$45];
    var $47=$46;
    var $48=HEAP[$2];
    var $49=(($48+56)&4294967295);
    var $50=HEAP[$49];
    var $51=((($50) * 12)&4294967295);
    var $52=_luaM_realloc_($43, $47, $51, 0);
    var $53=HEAP[$1];
    var $54=HEAP[$2];
    var $55=(($54+28)&4294967295);
    var $56=HEAP[$55];
    var $57=$56;
    var $58=HEAP[$2];
    var $59=(($58+36)&4294967295);
    var $60=HEAP[$59];
    var $61=((($60) * 4)&4294967295);
    var $62=_luaM_realloc_($53, $57, $61, 0);
    var $63=HEAP[$1];
    var $64=HEAP[$2];
    var $65=$64;
    var $66=_luaM_realloc_($63, $65, 76, 0);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaF_freeclosure($L, $c) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $size=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$c;
        var $3=HEAP[$2];
        var $4=$3;
        var $5=(($4+6)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$2];
        var $11=$10;
        var $12=(($11+7)&4294967295);
        var $13=HEAP[$12];
        var $14=unSign(($13), 8, 0);
        var $15=((($14) - 1)&4294967295);
        var $16=((12 * ($15))&4294967295);
        var $17=((32 + ($16))&4294967295);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $18
        var $19=HEAP[$2];
        var $20=$19;
        var $21=(($20+7)&4294967295);
        var $22=HEAP[$21];
        var $23=unSign(($22), 8, 0);
        var $24=((($23) - 1)&4294967295);
        var $25=((4 * ($24))&4294967295);
        var $26=((24 + ($25))&4294967295);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $27
        var $28=__lastLabel__ == 1 ? $17 : ($26);
        HEAP[$size]=$28;
        var $29=HEAP[$1];
        var $30=HEAP[$2];
        var $31=$30;
        var $32=HEAP[$size];
        var $33=_luaM_realloc_($29, $31, $32, 0);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaF_getlocalname($f, $local_number, $pc) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        HEAP[$2]=$f;
        HEAP[$3]=$local_number;
        HEAP[$4]=$pc;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$i];
        var $7=HEAP[$2];
        var $8=(($7+56)&4294967295);
        var $9=HEAP[$8];
        var $10=((($6))|0) < ((($9))|0);
        if ($10) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$i];
        var $13=HEAP[$2];
        var $14=(($13+24)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+12*$12)&4294967295);
        var $17=(($16+4)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$4];
        var $20=((($18))|0) <= ((($19))|0);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $21
        var $22=__lastLabel__ == 1 ? 0 : ($20);
        if ($22) { __label__ = 4; break; } else { __label__ = 10; break; }
      case 4: // $23
        var $24=HEAP[$4];
        var $25=HEAP[$i];
        var $26=HEAP[$2];
        var $27=(($26+24)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28+12*$25)&4294967295);
        var $30=(($29+8)&4294967295);
        var $31=HEAP[$30];
        var $32=((($24))|0) < ((($31))|0);
        if ($32) { __label__ = 5; break; } else { __label__ = 8; break; }
      case 5: // $33
        var $34=HEAP[$3];
        var $35=((($34) + -1)&4294967295);
        HEAP[$3]=$35;
        var $36=HEAP[$3];
        var $37=((($36))|0)==0;
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $38
        var $39=HEAP[$i];
        var $40=HEAP[$2];
        var $41=(($40+24)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+12*$39)&4294967295);
        var $44=(($43)&4294967295);
        var $45=HEAP[$44];
        var $46=(($45+16)&4294967295);
        var $47=$46;
        HEAP[$1]=$47;
        __label__ = 11; break;
      case 7: // $48
        __label__ = 8; break;
      case 8: // $49
        __label__ = 9; break;
      case 9: // $50
        var $51=HEAP[$i];
        var $52=((($51) + 1)&4294967295);
        HEAP[$i]=$52;
        __label__ = 1; break;
      case 10: // $53
        HEAP[$1]=0;
        __label__ = 11; break;
      case 11: // $54
        var $55=HEAP[$1];
        STACKTOP = __stackBase__;
        return $55;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaC_separateudata($L, $all) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $g=__stackBase__+8;
        var $deadmem=__stackBase__+12;
        var $p=__stackBase__+16;
        var $curr=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$all;
        var $3=HEAP[$1];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        HEAP[$g]=$5;
        HEAP[$deadmem]=0;
        var $6=HEAP[$g];
        var $7=(($6+104)&4294967295);
        var $8=HEAP[$7];
        var $9=(($8)&4294967295);
        HEAP[$p]=$9;
        __label__ = 1; break;
      case 1: // $10
        var $11=HEAP[$p];
        var $12=HEAP[$11];
        HEAP[$curr]=$12;
        var $13=((($12))|0)!=0;
        if ($13) { __label__ = 2; break; } else { __label__ = 20; break; }
      case 2: // $14
        var $15=HEAP[$curr];
        var $16=$15;
        var $17=(($16+5)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=($19) & 3;
        var $21=((($20))|0)!=0;
        if ($21) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $22
        var $23=HEAP[$2];
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $25
        var $26=HEAP[$curr];
        var $27=$26;
        var $28=$27;
        var $29=(($28+5)&4294967295);
        var $30=HEAP[$29];
        var $31=unSign(($30), 8, 0);
        var $32=($31) & 8;
        var $33=((($32))|0)!=0;
        if ($33) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $34
        var $35=HEAP[$curr];
        var $36=$35;
        var $37=(($36)&4294967295);
        HEAP[$p]=$37;
        __label__ = 19; break;
      case 6: // $38
        var $39=HEAP[$curr];
        var $40=$39;
        var $41=$40;
        var $42=(($41+8)&4294967295);
        var $43=HEAP[$42];
        var $44=((($43))|0)==0;
        if ($44) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $45
        __lastLabel__ = 7; __label__ = 12; break;
      case 8: // $46
        var $47=HEAP[$curr];
        var $48=$47;
        var $49=$48;
        var $50=(($49+8)&4294967295);
        var $51=HEAP[$50];
        var $52=(($51+6)&4294967295);
        var $53=HEAP[$52];
        var $54=unSign(($53), 8, 0);
        var $55=($54) & 4;
        var $56=((($55))|0)!=0;
        if ($56) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $57
        __lastLabel__ = 9; __label__ = 11; break;
      case 10: // $58
        var $59=HEAP[$curr];
        var $60=$59;
        var $61=$60;
        var $62=(($61+8)&4294967295);
        var $63=HEAP[$62];
        var $64=HEAP[$1];
        var $65=(($64+16)&4294967295);
        var $66=HEAP[$65];
        var $67=(($66+168)&4294967295);
        var $68=(($67+8)&4294967295);
        var $69=HEAP[$68];
        var $70=_luaT_gettm($63, 2, $69);
        __lastLabel__ = 10; __label__ = 11; break;
      case 11: // $71
        var $72=__lastLabel__ == 9 ? 0 : ($70);
        __lastLabel__ = 11; __label__ = 12; break;
      case 12: // $73
        var $74=__lastLabel__ == 7 ? 0 : ($72);
        var $75=((($74))|0)==0;
        if ($75) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $76
        var $77=HEAP[$curr];
        var $78=$77;
        var $79=$78;
        var $80=(($79+5)&4294967295);
        var $81=HEAP[$80];
        var $82=unSign(($81), 8, 0);
        var $83=($82) | 8;
        var $84=((($83)) & 255);
        HEAP[$80]=$84;
        var $85=HEAP[$curr];
        var $86=$85;
        var $87=(($86)&4294967295);
        HEAP[$p]=$87;
        __label__ = 18; break;
      case 14: // $88
        var $89=HEAP[$curr];
        var $90=$89;
        var $91=$90;
        var $92=(($91+16)&4294967295);
        var $93=HEAP[$92];
        var $94=((20 + ($93))&4294967295);
        var $95=HEAP[$deadmem];
        var $96=((($95) + ($94))&4294967295);
        HEAP[$deadmem]=$96;
        var $97=HEAP[$curr];
        var $98=$97;
        var $99=$98;
        var $100=(($99+5)&4294967295);
        var $101=HEAP[$100];
        var $102=unSign(($101), 8, 0);
        var $103=($102) | 8;
        var $104=((($103)) & 255);
        HEAP[$100]=$104;
        var $105=HEAP[$curr];
        var $106=$105;
        var $107=(($106)&4294967295);
        var $108=HEAP[$107];
        var $109=HEAP[$p];
        HEAP[$109]=$108;
        var $110=HEAP[$g];
        var $111=(($110+48)&4294967295);
        var $112=HEAP[$111];
        var $113=((($112))|0)==0;
        if ($113) { __label__ = 15; break; } else { __label__ = 16; break; }
      case 15: // $114
        var $115=HEAP[$curr];
        var $116=HEAP[$curr];
        var $117=$116;
        var $118=(($117)&4294967295);
        HEAP[$118]=$115;
        var $119=HEAP[$g];
        var $120=(($119+48)&4294967295);
        HEAP[$120]=$115;
        __label__ = 17; break;
      case 16: // $121
        var $122=HEAP[$g];
        var $123=(($122+48)&4294967295);
        var $124=HEAP[$123];
        var $125=$124;
        var $126=(($125)&4294967295);
        var $127=HEAP[$126];
        var $128=HEAP[$curr];
        var $129=$128;
        var $130=(($129)&4294967295);
        HEAP[$130]=$127;
        var $131=HEAP[$curr];
        var $132=HEAP[$g];
        var $133=(($132+48)&4294967295);
        var $134=HEAP[$133];
        var $135=$134;
        var $136=(($135)&4294967295);
        HEAP[$136]=$131;
        var $137=HEAP[$curr];
        var $138=HEAP[$g];
        var $139=(($138+48)&4294967295);
        HEAP[$139]=$137;
        __label__ = 17; break;
      case 17: // $140
        __label__ = 18; break;
      case 18: // $141
        __label__ = 19; break;
      case 19: // $142
        __label__ = 1; break;
      case 20: // $143
        var $144=HEAP[$deadmem];
        STACKTOP = __stackBase__;
        return $144;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaC_callGCTM($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$1];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        var $6=(($5+48)&4294967295);
        var $7=HEAP[$6];
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $9
        var $10=HEAP[$1];
        _GCTM($10);
        __label__ = 1; break;
      case 3: // $11
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _GCTM($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 37; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 37);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $g=__stackBase__+4;
        var $o=__stackBase__+8;
        var $udata=__stackBase__+12;
        var $tm=__stackBase__+16;
        var $oldah=__stackBase__+20;
        var $oldt=__stackBase__+21;
        var $o2=__stackBase__+25;
        var $o1=__stackBase__+29;
        var $i_o=__stackBase__+33;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=HEAP[$3];
        HEAP[$g]=$4;
        var $5=HEAP[$g];
        var $6=(($5+48)&4294967295);
        var $7=HEAP[$6];
        var $8=$7;
        var $9=(($8)&4294967295);
        var $10=HEAP[$9];
        HEAP[$o]=$10;
        var $11=HEAP[$o];
        var $12=$11;
        HEAP[$udata]=$12;
        var $13=HEAP[$o];
        var $14=HEAP[$g];
        var $15=(($14+48)&4294967295);
        var $16=HEAP[$15];
        var $17=((($13))|0)==((($16))|0);
        if ($17) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $18
        var $19=HEAP[$g];
        var $20=(($19+48)&4294967295);
        HEAP[$20]=0;
        __label__ = 3; break;
      case 2: // $21
        var $22=HEAP[$udata];
        var $23=$22;
        var $24=(($23)&4294967295);
        var $25=HEAP[$24];
        var $26=HEAP[$g];
        var $27=(($26+48)&4294967295);
        var $28=HEAP[$27];
        var $29=$28;
        var $30=(($29)&4294967295);
        HEAP[$30]=$25;
        __label__ = 3; break;
      case 3: // $31
        var $32=HEAP[$g];
        var $33=(($32+104)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34)&4294967295);
        var $36=HEAP[$35];
        var $37=HEAP[$udata];
        var $38=$37;
        var $39=(($38)&4294967295);
        HEAP[$39]=$36;
        var $40=HEAP[$o];
        var $41=HEAP[$g];
        var $42=(($41+104)&4294967295);
        var $43=HEAP[$42];
        var $44=(($43)&4294967295);
        HEAP[$44]=$40;
        var $45=HEAP[$o];
        var $46=$45;
        var $47=(($46+5)&4294967295);
        var $48=HEAP[$47];
        var $49=unSign(($48), 8, 0);
        var $50=($49) & 248;
        var $51=HEAP[$g];
        var $52=(($51+20)&4294967295);
        var $53=HEAP[$52];
        var $54=unSign(($53), 8, 0);
        var $55=($54) & 3;
        var $56=((($55)) & 255);
        var $57=unSign(($56), 8, 0);
        var $58=($50) | ($57);
        var $59=((($58)) & 255);
        var $60=HEAP[$o];
        var $61=$60;
        var $62=(($61+5)&4294967295);
        HEAP[$62]=$59;
        var $63=HEAP[$udata];
        var $64=$63;
        var $65=(($64+8)&4294967295);
        var $66=HEAP[$65];
        var $67=((($66))|0)==0;
        if ($67) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $68
        __lastLabel__ = 4; __label__ = 9; break;
      case 5: // $69
        var $70=HEAP[$udata];
        var $71=$70;
        var $72=(($71+8)&4294967295);
        var $73=HEAP[$72];
        var $74=(($73+6)&4294967295);
        var $75=HEAP[$74];
        var $76=unSign(($75), 8, 0);
        var $77=($76) & 4;
        var $78=((($77))|0)!=0;
        if ($78) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $79
        __lastLabel__ = 6; __label__ = 8; break;
      case 7: // $80
        var $81=HEAP[$udata];
        var $82=$81;
        var $83=(($82+8)&4294967295);
        var $84=HEAP[$83];
        var $85=HEAP[$1];
        var $86=(($85+16)&4294967295);
        var $87=HEAP[$86];
        var $88=(($87+168)&4294967295);
        var $89=(($88+8)&4294967295);
        var $90=HEAP[$89];
        var $91=_luaT_gettm($84, 2, $90);
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $92
        var $93=__lastLabel__ == 6 ? 0 : ($91);
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $94
        var $95=__lastLabel__ == 4 ? 0 : ($93);
        HEAP[$tm]=$95;
        var $96=HEAP[$tm];
        var $97=((($96))|0)!=0;
        if ($97) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $98
        var $99=HEAP[$1];
        var $100=(($99+57)&4294967295);
        var $101=HEAP[$100];
        HEAP[$oldah]=$101;
        var $102=HEAP[$g];
        var $103=(($102+64)&4294967295);
        var $104=HEAP[$103];
        HEAP[$oldt]=$104;
        var $105=HEAP[$1];
        var $106=(($105+57)&4294967295);
        HEAP[$106]=0;
        var $107=HEAP[$g];
        var $108=(($107+68)&4294967295);
        var $109=HEAP[$108];
        var $110=((2 * ($109))&4294967295);
        var $111=HEAP[$g];
        var $112=(($111+64)&4294967295);
        HEAP[$112]=$110;
        var $113=HEAP[$tm];
        HEAP[$o2]=$113;
        var $114=HEAP[$1];
        var $115=(($114+8)&4294967295);
        var $116=HEAP[$115];
        HEAP[$o1]=$116;
        var $117=HEAP[$o1];
        var $118=(($117)&4294967295);
        var $119=HEAP[$o2];
        var $120=(($119)&4294967295);
        var $121=$118;
        var $122=$120;
        _llvm_memcpy_p0i8_p0i8_i32($121, $122, 8, 4, 0);
        var $123=HEAP[$o2];
        var $124=(($123+8)&4294967295);
        var $125=HEAP[$124];
        var $126=HEAP[$o1];
        var $127=(($126+8)&4294967295);
        HEAP[$127]=$125;
        var $128=HEAP[$1];
        var $129=(($128+8)&4294967295);
        var $130=HEAP[$129];
        var $131=(($130+12)&4294967295);
        HEAP[$i_o]=$131;
        var $132=HEAP[$udata];
        var $133=$132;
        var $134=HEAP[$i_o];
        var $135=(($134)&4294967295);
        var $136=$135;
        HEAP[$136]=$133;
        var $137=HEAP[$i_o];
        var $138=(($137+8)&4294967295);
        HEAP[$138]=7;
        var $139=HEAP[$1];
        var $140=(($139+8)&4294967295);
        var $141=HEAP[$140];
        var $142=(($141+24)&4294967295);
        HEAP[$140]=$142;
        var $143=HEAP[$1];
        var $144=HEAP[$1];
        var $145=(($144+8)&4294967295);
        var $146=HEAP[$145];
        var $147=(($146+-24)&4294967295);
        _luaD_call($143, $147, 0);
        var $148=HEAP[$oldah];
        var $149=HEAP[$1];
        var $150=(($149+57)&4294967295);
        HEAP[$150]=$148;
        var $151=HEAP[$oldt];
        var $152=HEAP[$g];
        var $153=(($152+64)&4294967295);
        HEAP[$153]=$151;
        __label__ = 11; break;
      case 11: // $154
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaC_freeall($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $g=__stackBase__+4;
        var $i=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=HEAP[$3];
        HEAP[$g]=$4;
        var $5=HEAP[$g];
        var $6=(($5+20)&4294967295);
        HEAP[$6]=67;
        var $7=HEAP[$1];
        var $8=HEAP[$g];
        var $9=(($8+28)&4294967295);
        var $10=_sweeplist($7, $9, -3);
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $11
        var $12=HEAP[$i];
        var $13=HEAP[$g];
        var $14=(($13)&4294967295);
        var $15=(($14+8)&4294967295);
        var $16=HEAP[$15];
        var $17=((($12))|0) < ((($16))|0);
        if ($17) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$i];
        var $21=HEAP[$g];
        var $22=(($21)&4294967295);
        var $23=(($22)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+4*$20)&4294967295);
        var $26=_sweeplist($19, $25, -3);
        __label__ = 3; break;
      case 3: // $27
        var $28=HEAP[$i];
        var $29=((($28) + 1)&4294967295);
        HEAP[$i]=$29;
        __label__ = 1; break;
      case 4: // $30
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sweeplist($L, $p, $count) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $curr=__stackBase__+12;
        var $g=__stackBase__+16;
        var $deadmask=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$p;
        HEAP[$3]=$count;
        var $4=HEAP[$1];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        HEAP[$g]=$6;
        var $7=HEAP[$g];
        var $8=(($7+20)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=($10) ^ 3;
        HEAP[$deadmask]=$11;
        __label__ = 1; break;
      case 1: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$13];
        HEAP[$curr]=$14;
        var $15=((($14))|0)!=0;
        if ($15) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $16
        var $17=HEAP[$3];
        var $18=((($17) + -1)&4294967295);
        HEAP[$3]=$18;
        var $19=((($17))>>>0) > 0;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $20
        var $21=__lastLabel__ == 1 ? 0 : ($19);
        if ($21) { __label__ = 4; break; } else { __label__ = 12; break; }
      case 4: // $22
        var $23=HEAP[$curr];
        var $24=$23;
        var $25=(($24+4)&4294967295);
        var $26=HEAP[$25];
        var $27=unSign(($26), 8, 0);
        var $28=((($27))|0)==8;
        if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $29
        var $30=HEAP[$1];
        var $31=HEAP[$curr];
        var $32=$31;
        var $33=(($32+96)&4294967295);
        var $34=_sweeplist($30, $33, -3);
        __label__ = 6; break;
      case 6: // $35
        var $36=HEAP[$curr];
        var $37=$36;
        var $38=(($37+5)&4294967295);
        var $39=HEAP[$38];
        var $40=unSign(($39), 8, 0);
        var $41=($40) ^ 3;
        var $42=HEAP[$deadmask];
        var $43=($41) & ($42);
        var $44=((($43))|0)!=0;
        if ($44) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $45
        var $46=HEAP[$curr];
        var $47=$46;
        var $48=(($47+5)&4294967295);
        var $49=HEAP[$48];
        var $50=unSign(($49), 8, 0);
        var $51=($50) & 248;
        var $52=HEAP[$g];
        var $53=(($52+20)&4294967295);
        var $54=HEAP[$53];
        var $55=unSign(($54), 8, 0);
        var $56=($55) & 3;
        var $57=((($56)) & 255);
        var $58=unSign(($57), 8, 0);
        var $59=($51) | ($58);
        var $60=((($59)) & 255);
        var $61=HEAP[$curr];
        var $62=$61;
        var $63=(($62+5)&4294967295);
        HEAP[$63]=$60;
        var $64=HEAP[$curr];
        var $65=$64;
        var $66=(($65)&4294967295);
        HEAP[$2]=$66;
        __label__ = 11; break;
      case 8: // $67
        var $68=HEAP[$curr];
        var $69=$68;
        var $70=(($69)&4294967295);
        var $71=HEAP[$70];
        var $72=HEAP[$2];
        HEAP[$72]=$71;
        var $73=HEAP[$curr];
        var $74=HEAP[$g];
        var $75=(($74+28)&4294967295);
        var $76=HEAP[$75];
        var $77=((($73))|0)==((($76))|0);
        if ($77) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $78
        var $79=HEAP[$curr];
        var $80=$79;
        var $81=(($80)&4294967295);
        var $82=HEAP[$81];
        var $83=HEAP[$g];
        var $84=(($83+28)&4294967295);
        HEAP[$84]=$82;
        __label__ = 10; break;
      case 10: // $85
        var $86=HEAP[$1];
        var $87=HEAP[$curr];
        _freeobj($86, $87);
        __label__ = 11; break;
      case 11: // $88
        __label__ = 1; break;
      case 12: // $89
        var $90=HEAP[$2];
        STACKTOP = __stackBase__;
        return $90;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaC_step($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $g=__stackBase__+4;
        var $lim=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=HEAP[$3];
        HEAP[$g]=$4;
        var $5=HEAP[$g];
        var $6=(($5+84)&4294967295);
        var $7=HEAP[$6];
        var $8=((10 * ($7))&4294967295);
        HEAP[$lim]=$8;
        var $9=HEAP[$lim];
        var $10=((($9))|0)==0;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        HEAP[$lim]=2147483646;
        __label__ = 2; break;
      case 2: // $12
        var $13=HEAP[$g];
        var $14=(($13+68)&4294967295);
        var $15=HEAP[$14];
        var $16=HEAP[$g];
        var $17=(($16+64)&4294967295);
        var $18=HEAP[$17];
        var $19=((($15) - ($18))&4294967295);
        var $20=HEAP[$g];
        var $21=(($20+76)&4294967295);
        var $22=HEAP[$21];
        var $23=((($22) + ($19))&4294967295);
        HEAP[$21]=$23;
        __label__ = 3; break;
      case 3: // $24
        var $25=HEAP[$1];
        var $26=_singlestep($25);
        var $27=HEAP[$lim];
        var $28=((($27) - ($26))&4294967295);
        HEAP[$lim]=$28;
        var $29=HEAP[$g];
        var $30=(($29+21)&4294967295);
        var $31=HEAP[$30];
        var $32=unSign(($31), 8, 0);
        var $33=((($32))|0)==0;
        if ($33) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $34
        __label__ = 7; break;
      case 5: // $35
        __label__ = 6; break;
      case 6: // $36
        var $37=HEAP[$lim];
        var $38=((($37))|0) > 0;
        if ($38) { __label__ = 3; break; } else { __label__ = 7; break; }
      case 7: // $39
        var $40=HEAP[$g];
        var $41=(($40+21)&4294967295);
        var $42=HEAP[$41];
        var $43=unSign(($42), 8, 0);
        var $44=((($43))|0)!=0;
        if ($44) { __label__ = 8; break; } else { __label__ = 12; break; }
      case 8: // $45
        var $46=HEAP[$g];
        var $47=(($46+76)&4294967295);
        var $48=HEAP[$47];
        var $49=((($48))>>>0) < 1024;
        if ($49) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $50
        var $51=HEAP[$g];
        var $52=(($51+68)&4294967295);
        var $53=HEAP[$52];
        var $54=((($53) + 1024)&4294967295);
        var $55=HEAP[$g];
        var $56=(($55+64)&4294967295);
        HEAP[$56]=$54;
        __label__ = 11; break;
      case 10: // $57
        var $58=HEAP[$g];
        var $59=(($58+76)&4294967295);
        var $60=HEAP[$59];
        var $61=((($60) - 1024)&4294967295);
        HEAP[$59]=$61;
        var $62=HEAP[$g];
        var $63=(($62+68)&4294967295);
        var $64=HEAP[$63];
        var $65=HEAP[$g];
        var $66=(($65+64)&4294967295);
        HEAP[$66]=$64;
        __label__ = 11; break;
      case 11: // $67
        __label__ = 13; break;
      case 12: // $68
        var $69=HEAP[$g];
        var $70=(($69+72)&4294967295);
        var $71=HEAP[$70];
        var $72=Math.floor(((($71))>>>0)/100);
        var $73=HEAP[$g];
        var $74=(($73+80)&4294967295);
        var $75=HEAP[$74];
        var $76=((($72) * ($75))&4294967295);
        var $77=HEAP[$g];
        var $78=(($77+64)&4294967295);
        HEAP[$78]=$76;
        __label__ = 13; break;
      case 13: // $79
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _singlestep($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $g=__stackBase__+8;
        var $old=__stackBase__+12;
        var $old1=__stackBase__+16;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        HEAP[$g]=$5;
        var $6=HEAP[$g];
        var $7=(($6+21)&4294967295);
        var $8=HEAP[$7];
        var $9=unSign(($8), 8, 0);
        if ($9 == 0) {
          __label__ = 1; break;
        }
        else if ($9 == 1) {
          __label__ = 2; break;
        }
        else if ($9 == 2) {
          __label__ = 5; break;
        }
        else if ($9 == 3) {
          __label__ = 8; break;
        }
        else if ($9 == 4) {
          __label__ = 11; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 1: // $10
        var $11=HEAP[$2];
        _markroot($11);
        HEAP[$1]=0;
        __label__ = 17; break;
      case 2: // $12
        var $13=HEAP[$g];
        var $14=(($13+36)&4294967295);
        var $15=HEAP[$14];
        var $16=((($15))|0)!=0;
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        var $18=HEAP[$g];
        var $19=_propagatemark($18);
        HEAP[$1]=$19;
        __label__ = 17; break;
      case 4: // $20
        var $21=HEAP[$2];
        _atomic($21);
        HEAP[$1]=0;
        __label__ = 17; break;
      case 5: // $22
        var $23=HEAP[$g];
        var $24=(($23+68)&4294967295);
        var $25=HEAP[$24];
        HEAP[$old]=$25;
        var $26=HEAP[$2];
        var $27=HEAP[$g];
        var $28=(($27+24)&4294967295);
        var $29=HEAP[$28];
        var $30=((($29) + 1)&4294967295);
        HEAP[$28]=$30;
        var $31=HEAP[$g];
        var $32=(($31)&4294967295);
        var $33=(($32)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+4*$29)&4294967295);
        var $36=_sweeplist($26, $35, -3);
        var $37=HEAP[$g];
        var $38=(($37+24)&4294967295);
        var $39=HEAP[$38];
        var $40=HEAP[$g];
        var $41=(($40)&4294967295);
        var $42=(($41+8)&4294967295);
        var $43=HEAP[$42];
        var $44=((($39))|0) >= ((($43))|0);
        if ($44) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $45
        var $46=HEAP[$g];
        var $47=(($46+21)&4294967295);
        HEAP[$47]=3;
        __label__ = 7; break;
      case 7: // $48
        var $49=HEAP[$old];
        var $50=HEAP[$g];
        var $51=(($50+68)&4294967295);
        var $52=HEAP[$51];
        var $53=((($49) - ($52))&4294967295);
        var $54=HEAP[$g];
        var $55=(($54+72)&4294967295);
        var $56=HEAP[$55];
        var $57=((($56) - ($53))&4294967295);
        HEAP[$55]=$57;
        HEAP[$1]=10;
        __label__ = 17; break;
      case 8: // $58
        var $59=HEAP[$g];
        var $60=(($59+68)&4294967295);
        var $61=HEAP[$60];
        HEAP[$old1]=$61;
        var $62=HEAP[$2];
        var $63=HEAP[$g];
        var $64=(($63+32)&4294967295);
        var $65=HEAP[$64];
        var $66=_sweeplist($62, $65, 40);
        var $67=HEAP[$g];
        var $68=(($67+32)&4294967295);
        HEAP[$68]=$66;
        var $69=HEAP[$g];
        var $70=(($69+32)&4294967295);
        var $71=HEAP[$70];
        var $72=HEAP[$71];
        var $73=((($72))|0)==0;
        if ($73) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $74
        var $75=HEAP[$2];
        _checkSizes($75);
        var $76=HEAP[$g];
        var $77=(($76+21)&4294967295);
        HEAP[$77]=4;
        __label__ = 10; break;
      case 10: // $78
        var $79=HEAP[$old1];
        var $80=HEAP[$g];
        var $81=(($80+68)&4294967295);
        var $82=HEAP[$81];
        var $83=((($79) - ($82))&4294967295);
        var $84=HEAP[$g];
        var $85=(($84+72)&4294967295);
        var $86=HEAP[$85];
        var $87=((($86) - ($83))&4294967295);
        HEAP[$85]=$87;
        HEAP[$1]=400;
        __label__ = 17; break;
      case 11: // $88
        var $89=HEAP[$g];
        var $90=(($89+48)&4294967295);
        var $91=HEAP[$90];
        var $92=((($91))|0)!=0;
        if ($92) { __label__ = 12; break; } else { __label__ = 15; break; }
      case 12: // $93
        var $94=HEAP[$2];
        _GCTM($94);
        var $95=HEAP[$g];
        var $96=(($95+72)&4294967295);
        var $97=HEAP[$96];
        var $98=((($97))>>>0) > 100;
        if ($98) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $99
        var $100=HEAP[$g];
        var $101=(($100+72)&4294967295);
        var $102=HEAP[$101];
        var $103=((($102) - 100)&4294967295);
        HEAP[$101]=$103;
        __label__ = 14; break;
      case 14: // $104
        HEAP[$1]=100;
        __label__ = 17; break;
      case 15: // $105
        var $106=HEAP[$g];
        var $107=(($106+21)&4294967295);
        HEAP[$107]=0;
        var $108=HEAP[$g];
        var $109=(($108+76)&4294967295);
        HEAP[$109]=0;
        HEAP[$1]=0;
        __label__ = 17; break;
      case 16: // $110
        HEAP[$1]=0;
        __label__ = 17; break;
      case 17: // $111
        var $112=HEAP[$1];
        STACKTOP = __stackBase__;
        return $112;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaC_fullgc($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $g=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=HEAP[$3];
        HEAP[$g]=$4;
        var $5=HEAP[$g];
        var $6=(($5+21)&4294967295);
        var $7=HEAP[$6];
        var $8=unSign(($7), 8, 0);
        var $9=((($8))|0) <= 1;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$g];
        var $12=(($11+24)&4294967295);
        HEAP[$12]=0;
        var $13=HEAP[$g];
        var $14=(($13+28)&4294967295);
        var $15=HEAP[$g];
        var $16=(($15+32)&4294967295);
        HEAP[$16]=$14;
        var $17=HEAP[$g];
        var $18=(($17+36)&4294967295);
        HEAP[$18]=0;
        var $19=HEAP[$g];
        var $20=(($19+40)&4294967295);
        HEAP[$20]=0;
        var $21=HEAP[$g];
        var $22=(($21+44)&4294967295);
        HEAP[$22]=0;
        var $23=HEAP[$g];
        var $24=(($23+21)&4294967295);
        HEAP[$24]=2;
        __label__ = 2; break;
      case 2: // $25
        __label__ = 3; break;
      case 3: // $26
        var $27=HEAP[$g];
        var $28=(($27+21)&4294967295);
        var $29=HEAP[$28];
        var $30=unSign(($29), 8, 0);
        var $31=((($30))|0)!=4;
        if ($31) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $32
        var $33=HEAP[$1];
        var $34=_singlestep($33);
        __label__ = 3; break;
      case 5: // $35
        var $36=HEAP[$1];
        _markroot($36);
        __label__ = 6; break;
      case 6: // $37
        var $38=HEAP[$g];
        var $39=(($38+21)&4294967295);
        var $40=HEAP[$39];
        var $41=unSign(($40), 8, 0);
        var $42=((($41))|0)!=0;
        if ($42) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $43
        var $44=HEAP[$1];
        var $45=_singlestep($44);
        __label__ = 6; break;
      case 8: // $46
        var $47=HEAP[$g];
        var $48=(($47+72)&4294967295);
        var $49=HEAP[$48];
        var $50=Math.floor(((($49))>>>0)/100);
        var $51=HEAP[$g];
        var $52=(($51+80)&4294967295);
        var $53=HEAP[$52];
        var $54=((($50) * ($53))&4294967295);
        var $55=HEAP[$g];
        var $56=(($55+64)&4294967295);
        HEAP[$56]=$54;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _markroot($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $g=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=HEAP[$3];
        HEAP[$g]=$4;
        var $5=HEAP[$g];
        var $6=(($5+36)&4294967295);
        HEAP[$6]=0;
        var $7=HEAP[$g];
        var $8=(($7+40)&4294967295);
        HEAP[$8]=0;
        var $9=HEAP[$g];
        var $10=(($9+44)&4294967295);
        HEAP[$10]=0;
        var $11=HEAP[$g];
        var $12=(($11+104)&4294967295);
        var $13=HEAP[$12];
        var $14=$13;
        var $15=$14;
        var $16=(($15+5)&4294967295);
        var $17=HEAP[$16];
        var $18=unSign(($17), 8, 0);
        var $19=($18) & 3;
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $21
        var $22=HEAP[$g];
        var $23=HEAP[$g];
        var $24=(($23+104)&4294967295);
        var $25=HEAP[$24];
        var $26=$25;
        _reallymarkobject($22, $26);
        __label__ = 2; break;
      case 2: // $27
        var $28=HEAP[$g];
        var $29=(($28+104)&4294967295);
        var $30=HEAP[$29];
        var $31=(($30+72)&4294967295);
        var $32=(($31+8)&4294967295);
        var $33=HEAP[$32];
        var $34=((($33))|0) >= 4;
        if ($34) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $35
        var $36=HEAP[$g];
        var $37=(($36+104)&4294967295);
        var $38=HEAP[$37];
        var $39=(($38+72)&4294967295);
        var $40=(($39)&4294967295);
        var $41=$40;
        var $42=HEAP[$41];
        var $43=$42;
        var $44=(($43+5)&4294967295);
        var $45=HEAP[$44];
        var $46=unSign(($45), 8, 0);
        var $47=($46) & 3;
        var $48=((($47))|0)!=0;
        if ($48) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $49
        var $50=HEAP[$g];
        var $51=HEAP[$g];
        var $52=(($51+104)&4294967295);
        var $53=HEAP[$52];
        var $54=(($53+72)&4294967295);
        var $55=(($54)&4294967295);
        var $56=$55;
        var $57=HEAP[$56];
        _reallymarkobject($50, $57);
        __label__ = 5; break;
      case 5: // $58
        var $59=HEAP[$1];
        var $60=(($59+16)&4294967295);
        var $61=HEAP[$60];
        var $62=(($61+92)&4294967295);
        var $63=(($62+8)&4294967295);
        var $64=HEAP[$63];
        var $65=((($64))|0) >= 4;
        if ($65) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $66
        var $67=HEAP[$1];
        var $68=(($67+16)&4294967295);
        var $69=HEAP[$68];
        var $70=(($69+92)&4294967295);
        var $71=(($70)&4294967295);
        var $72=$71;
        var $73=HEAP[$72];
        var $74=$73;
        var $75=(($74+5)&4294967295);
        var $76=HEAP[$75];
        var $77=unSign(($76), 8, 0);
        var $78=($77) & 3;
        var $79=((($78))|0)!=0;
        if ($79) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $80
        var $81=HEAP[$g];
        var $82=HEAP[$1];
        var $83=(($82+16)&4294967295);
        var $84=HEAP[$83];
        var $85=(($84+92)&4294967295);
        var $86=(($85)&4294967295);
        var $87=$86;
        var $88=HEAP[$87];
        _reallymarkobject($81, $88);
        __label__ = 8; break;
      case 8: // $89
        var $90=HEAP[$g];
        _markmt($90);
        var $91=HEAP[$g];
        var $92=(($91+21)&4294967295);
        HEAP[$92]=1;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaC_barrierf($L, $o, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $g=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$o;
        HEAP[$3]=$v;
        var $4=HEAP[$1];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        HEAP[$g]=$6;
        var $7=HEAP[$g];
        var $8=(($7+21)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=((($10))|0)==1;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$g];
        var $14=HEAP[$3];
        _reallymarkobject($13, $14);
        __label__ = 3; break;
      case 2: // $15
        var $16=HEAP[$2];
        var $17=$16;
        var $18=(($17+5)&4294967295);
        var $19=HEAP[$18];
        var $20=unSign(($19), 8, 0);
        var $21=($20) & 248;
        var $22=HEAP[$g];
        var $23=(($22+20)&4294967295);
        var $24=HEAP[$23];
        var $25=unSign(($24), 8, 0);
        var $26=($25) & 3;
        var $27=((($26)) & 255);
        var $28=unSign(($27), 8, 0);
        var $29=($21) | ($28);
        var $30=((($29)) & 255);
        var $31=HEAP[$2];
        var $32=$31;
        var $33=(($32+5)&4294967295);
        HEAP[$33]=$30;
        __label__ = 3; break;
      case 3: // $34
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _reallymarkobject($g, $o) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $mt=__stackBase__+8;
        var $uv=__stackBase__+12;
        HEAP[$1]=$g;
        HEAP[$2]=$o;
        var $3=HEAP[$2];
        var $4=$3;
        var $5=(($4+5)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        var $8=($7) & 252;
        var $9=((($8)) & 255);
        HEAP[$5]=$9;
        var $10=HEAP[$2];
        var $11=$10;
        var $12=(($11+4)&4294967295);
        var $13=HEAP[$12];
        var $14=unSign(($13), 8, 0);
        if ($14 == 4) {
          __label__ = 1; break;
        }
        else if ($14 == 7) {
          __label__ = 2; break;
        }
        else if ($14 == 10) {
          __label__ = 9; break;
        }
        else if ($14 == 6) {
          __label__ = 15; break;
        }
        else if ($14 == 5) {
          __label__ = 16; break;
        }
        else if ($14 == 8) {
          __label__ = 17; break;
        }
        else if ($14 == 9) {
          __label__ = 18; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 1: // $15
        __label__ = 20; break;
      case 2: // $16
        var $17=HEAP[$2];
        var $18=$17;
        var $19=$18;
        var $20=(($19+8)&4294967295);
        var $21=HEAP[$20];
        HEAP[$mt]=$21;
        var $22=HEAP[$2];
        var $23=$22;
        var $24=(($23+5)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=($26) | 4;
        var $28=((($27)) & 255);
        HEAP[$24]=$28;
        var $29=HEAP[$mt];
        var $30=((($29))|0)!=0;
        if ($30) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $31
        var $32=HEAP[$mt];
        var $33=$32;
        var $34=$33;
        var $35=(($34+5)&4294967295);
        var $36=HEAP[$35];
        var $37=unSign(($36), 8, 0);
        var $38=($37) & 3;
        var $39=((($38))|0)!=0;
        if ($39) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $40
        var $41=HEAP[$1];
        var $42=HEAP[$mt];
        var $43=$42;
        _reallymarkobject($41, $43);
        __label__ = 5; break;
      case 5: // $44
        __label__ = 6; break;
      case 6: // $45
        var $46=HEAP[$2];
        var $47=$46;
        var $48=$47;
        var $49=(($48+12)&4294967295);
        var $50=HEAP[$49];
        var $51=$50;
        var $52=$51;
        var $53=(($52+5)&4294967295);
        var $54=HEAP[$53];
        var $55=unSign(($54), 8, 0);
        var $56=($55) & 3;
        var $57=((($56))|0)!=0;
        if ($57) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $58
        var $59=HEAP[$1];
        var $60=HEAP[$2];
        var $61=$60;
        var $62=$61;
        var $63=(($62+12)&4294967295);
        var $64=HEAP[$63];
        var $65=$64;
        _reallymarkobject($59, $65);
        __label__ = 8; break;
      case 8: // $66
        __label__ = 20; break;
      case 9: // $67
        var $68=HEAP[$2];
        var $69=$68;
        HEAP[$uv]=$69;
        var $70=HEAP[$uv];
        var $71=(($70+8)&4294967295);
        var $72=HEAP[$71];
        var $73=(($72+8)&4294967295);
        var $74=HEAP[$73];
        var $75=((($74))|0) >= 4;
        if ($75) { __label__ = 10; break; } else { __label__ = 12; break; }
      case 10: // $76
        var $77=HEAP[$uv];
        var $78=(($77+8)&4294967295);
        var $79=HEAP[$78];
        var $80=(($79)&4294967295);
        var $81=$80;
        var $82=HEAP[$81];
        var $83=$82;
        var $84=(($83+5)&4294967295);
        var $85=HEAP[$84];
        var $86=unSign(($85), 8, 0);
        var $87=($86) & 3;
        var $88=((($87))|0)!=0;
        if ($88) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $89
        var $90=HEAP[$1];
        var $91=HEAP[$uv];
        var $92=(($91+8)&4294967295);
        var $93=HEAP[$92];
        var $94=(($93)&4294967295);
        var $95=$94;
        var $96=HEAP[$95];
        _reallymarkobject($90, $96);
        __label__ = 12; break;
      case 12: // $97
        var $98=HEAP[$uv];
        var $99=(($98+8)&4294967295);
        var $100=HEAP[$99];
        var $101=HEAP[$uv];
        var $102=(($101+12)&4294967295);
        var $103=$102;
        var $104=((($100))|0)==((($103))|0);
        if ($104) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $105
        var $106=HEAP[$2];
        var $107=$106;
        var $108=(($107+5)&4294967295);
        var $109=HEAP[$108];
        var $110=unSign(($109), 8, 0);
        var $111=($110) | 4;
        var $112=((($111)) & 255);
        HEAP[$108]=$112;
        __label__ = 14; break;
      case 14: // $113
        __label__ = 20; break;
      case 15: // $114
        var $115=HEAP[$1];
        var $116=(($115+36)&4294967295);
        var $117=HEAP[$116];
        var $118=HEAP[$2];
        var $119=$118;
        var $120=$119;
        var $121=(($120+8)&4294967295);
        HEAP[$121]=$117;
        var $122=HEAP[$2];
        var $123=HEAP[$1];
        var $124=(($123+36)&4294967295);
        HEAP[$124]=$122;
        __label__ = 20; break;
      case 16: // $125
        var $126=HEAP[$1];
        var $127=(($126+36)&4294967295);
        var $128=HEAP[$127];
        var $129=HEAP[$2];
        var $130=$129;
        var $131=(($130+24)&4294967295);
        HEAP[$131]=$128;
        var $132=HEAP[$2];
        var $133=HEAP[$1];
        var $134=(($133+36)&4294967295);
        HEAP[$134]=$132;
        __label__ = 20; break;
      case 17: // $135
        var $136=HEAP[$1];
        var $137=(($136+36)&4294967295);
        var $138=HEAP[$137];
        var $139=HEAP[$2];
        var $140=$139;
        var $141=(($140+100)&4294967295);
        HEAP[$141]=$138;
        var $142=HEAP[$2];
        var $143=HEAP[$1];
        var $144=(($143+36)&4294967295);
        HEAP[$144]=$142;
        __label__ = 20; break;
      case 18: // $145
        var $146=HEAP[$1];
        var $147=(($146+36)&4294967295);
        var $148=HEAP[$147];
        var $149=HEAP[$2];
        var $150=$149;
        var $151=(($150+68)&4294967295);
        HEAP[$151]=$148;
        var $152=HEAP[$2];
        var $153=HEAP[$1];
        var $154=(($153+36)&4294967295);
        HEAP[$154]=$152;
        __label__ = 20; break;
      case 19: // $155
        __label__ = 20; break;
      case 20: // $156
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaC_barrierback($L, $t) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $g=__stackBase__+8;
    var $o=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$t;
    var $3=HEAP[$1];
    var $4=(($3+16)&4294967295);
    var $5=HEAP[$4];
    HEAP[$g]=$5;
    var $6=HEAP[$2];
    var $7=$6;
    HEAP[$o]=$7;
    var $8=HEAP[$o];
    var $9=$8;
    var $10=(($9+5)&4294967295);
    var $11=HEAP[$10];
    var $12=unSign(($11), 8, 0);
    var $13=($12) & 251;
    var $14=((($13)) & 255);
    HEAP[$10]=$14;
    var $15=HEAP[$g];
    var $16=(($15+40)&4294967295);
    var $17=HEAP[$16];
    var $18=HEAP[$2];
    var $19=(($18+24)&4294967295);
    HEAP[$19]=$17;
    var $20=HEAP[$o];
    var $21=HEAP[$g];
    var $22=(($21+40)&4294967295);
    HEAP[$22]=$20;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaC_link($L, $o, $tt) {
    var __stackBase__  = STACKTOP; STACKTOP += 13; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 13);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $g=__stackBase__+9;
    HEAP[$1]=$L;
    HEAP[$2]=$o;
    HEAP[$3]=$tt;
    var $4=HEAP[$1];
    var $5=(($4+16)&4294967295);
    var $6=HEAP[$5];
    HEAP[$g]=$6;
    var $7=HEAP[$g];
    var $8=(($7+28)&4294967295);
    var $9=HEAP[$8];
    var $10=HEAP[$2];
    var $11=$10;
    var $12=(($11)&4294967295);
    HEAP[$12]=$9;
    var $13=HEAP[$2];
    var $14=HEAP[$g];
    var $15=(($14+28)&4294967295);
    HEAP[$15]=$13;
    var $16=HEAP[$g];
    var $17=(($16+20)&4294967295);
    var $18=HEAP[$17];
    var $19=unSign(($18), 8, 0);
    var $20=($19) & 3;
    var $21=((($20)) & 255);
    var $22=HEAP[$2];
    var $23=$22;
    var $24=(($23+5)&4294967295);
    HEAP[$24]=$21;
    var $25=HEAP[$3];
    var $26=HEAP[$2];
    var $27=$26;
    var $28=(($27+4)&4294967295);
    HEAP[$28]=$25;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaC_linkupval($L, $uv) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $g=__stackBase__+8;
        var $o=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$uv;
        var $3=HEAP[$1];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        HEAP[$g]=$5;
        var $6=HEAP[$2];
        var $7=$6;
        HEAP[$o]=$7;
        var $8=HEAP[$g];
        var $9=(($8+28)&4294967295);
        var $10=HEAP[$9];
        var $11=HEAP[$o];
        var $12=$11;
        var $13=(($12)&4294967295);
        HEAP[$13]=$10;
        var $14=HEAP[$o];
        var $15=HEAP[$g];
        var $16=(($15+28)&4294967295);
        HEAP[$16]=$14;
        var $17=HEAP[$o];
        var $18=$17;
        var $19=(($18+5)&4294967295);
        var $20=HEAP[$19];
        var $21=unSign(($20), 8, 0);
        var $22=($21) & 4;
        var $23=((($22))|0)!=0;
        if ($23) { __label__ = 10; break; } else { __label__ = 1; break; }
      case 1: // $24
        var $25=HEAP[$o];
        var $26=$25;
        var $27=(($26+5)&4294967295);
        var $28=HEAP[$27];
        var $29=unSign(($28), 8, 0);
        var $30=($29) & 3;
        var $31=((($30))|0)!=0;
        if ($31) { __label__ = 10; break; } else { __label__ = 2; break; }
      case 2: // $32
        var $33=HEAP[$g];
        var $34=(($33+21)&4294967295);
        var $35=HEAP[$34];
        var $36=unSign(($35), 8, 0);
        var $37=((($36))|0)==1;
        if ($37) { __label__ = 3; break; } else { __label__ = 8; break; }
      case 3: // $38
        var $39=HEAP[$o];
        var $40=$39;
        var $41=(($40+5)&4294967295);
        var $42=HEAP[$41];
        var $43=unSign(($42), 8, 0);
        var $44=($43) | 4;
        var $45=((($44)) & 255);
        HEAP[$41]=$45;
        var $46=HEAP[$2];
        var $47=(($46+8)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48+8)&4294967295);
        var $50=HEAP[$49];
        var $51=((($50))|0) >= 4;
        if ($51) { __label__ = 4; break; } else { __label__ = 7; break; }
      case 4: // $52
        var $53=HEAP[$2];
        var $54=(($53+8)&4294967295);
        var $55=HEAP[$54];
        var $56=(($55)&4294967295);
        var $57=$56;
        var $58=HEAP[$57];
        var $59=$58;
        var $60=(($59+5)&4294967295);
        var $61=HEAP[$60];
        var $62=unSign(($61), 8, 0);
        var $63=($62) & 3;
        var $64=((($63))|0)!=0;
        if ($64) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $65
        var $66=HEAP[$2];
        var $67=$66;
        var $68=$67;
        var $69=(($68+5)&4294967295);
        var $70=HEAP[$69];
        var $71=unSign(($70), 8, 0);
        var $72=($71) & 4;
        var $73=((($72))|0)!=0;
        if ($73) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $74
        var $75=HEAP[$1];
        var $76=HEAP[$2];
        var $77=$76;
        var $78=HEAP[$2];
        var $79=(($78+8)&4294967295);
        var $80=HEAP[$79];
        var $81=(($80)&4294967295);
        var $82=$81;
        var $83=HEAP[$82];
        _luaC_barrierf($75, $77, $83);
        __label__ = 7; break;
      case 7: // $84
        __label__ = 9; break;
      case 8: // $85
        var $86=HEAP[$o];
        var $87=$86;
        var $88=(($87+5)&4294967295);
        var $89=HEAP[$88];
        var $90=unSign(($89), 8, 0);
        var $91=($90) & 248;
        var $92=HEAP[$g];
        var $93=(($92+20)&4294967295);
        var $94=HEAP[$93];
        var $95=unSign(($94), 8, 0);
        var $96=($95) & 3;
        var $97=((($96)) & 255);
        var $98=unSign(($97), 8, 0);
        var $99=($91) | ($98);
        var $100=((($99)) & 255);
        var $101=HEAP[$o];
        var $102=$101;
        var $103=(($102+5)&4294967295);
        HEAP[$103]=$100;
        __label__ = 9; break;
      case 9: // $104
        __label__ = 10; break;
      case 10: // $105
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _markmt($g) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        HEAP[$1]=$g;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$i];
        var $4=((($3))|0) < 9;
        if ($4) { __label__ = 2; break; } else { __label__ = 8; break; }
      case 2: // $5
        var $6=HEAP[$i];
        var $7=HEAP[$1];
        var $8=(($7+132)&4294967295);
        var $9=(($8+$6*4)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $12
        var $13=HEAP[$i];
        var $14=HEAP[$1];
        var $15=(($14+132)&4294967295);
        var $16=(($15+$13*4)&4294967295);
        var $17=HEAP[$16];
        var $18=$17;
        var $19=$18;
        var $20=(($19+5)&4294967295);
        var $21=HEAP[$20];
        var $22=unSign(($21), 8, 0);
        var $23=($22) & 3;
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $25
        var $26=HEAP[$1];
        var $27=HEAP[$i];
        var $28=HEAP[$1];
        var $29=(($28+132)&4294967295);
        var $30=(($29+$27*4)&4294967295);
        var $31=HEAP[$30];
        var $32=$31;
        _reallymarkobject($26, $32);
        __label__ = 5; break;
      case 5: // $33
        __label__ = 6; break;
      case 6: // $34
        __label__ = 7; break;
      case 7: // $35
        var $36=HEAP[$i];
        var $37=((($36) + 1)&4294967295);
        HEAP[$i]=$37;
        __label__ = 1; break;
      case 8: // $38
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _propagatemark($g) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        var $h=__stackBase__+12;
        var $cl=__stackBase__+16;
        var $th=__stackBase__+20;
        var $p=__stackBase__+24;
        HEAP[$2]=$g;
        var $3=HEAP[$2];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$o]=$5;
        var $6=HEAP[$o];
        var $7=$6;
        var $8=(($7+5)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=($10) | 4;
        var $12=((($11)) & 255);
        HEAP[$8]=$12;
        var $13=HEAP[$o];
        var $14=$13;
        var $15=(($14+4)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        if ($17 == 5) {
          __label__ = 1; break;
        }
        else if ($17 == 6) {
          __label__ = 4; break;
        }
        else if ($17 == 8) {
          __label__ = 8; break;
        }
        else if ($17 == 9) {
          __label__ = 9; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 1: // $18
        var $19=HEAP[$o];
        var $20=$19;
        HEAP[$h]=$20;
        var $21=HEAP[$h];
        var $22=(($21+24)&4294967295);
        var $23=HEAP[$22];
        var $24=HEAP[$2];
        var $25=(($24+36)&4294967295);
        HEAP[$25]=$23;
        var $26=HEAP[$2];
        var $27=HEAP[$h];
        var $28=_traversetable($26, $27);
        var $29=((($28))|0)!=0;
        if ($29) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $30
        var $31=HEAP[$o];
        var $32=$31;
        var $33=(($32+5)&4294967295);
        var $34=HEAP[$33];
        var $35=unSign(($34), 8, 0);
        var $36=($35) & 251;
        var $37=((($36)) & 255);
        HEAP[$33]=$37;
        __label__ = 3; break;
      case 3: // $38
        var $39=HEAP[$h];
        var $40=(($39+28)&4294967295);
        var $41=HEAP[$40];
        var $42=((12 * ($41))&4294967295);
        var $43=((32 + ($42))&4294967295);
        var $44=HEAP[$h];
        var $45=(($44+7)&4294967295);
        var $46=HEAP[$45];
        var $47=unSign(($46), 8, 0);
        var $48=1 << ($47);
        var $49=((28 * ($48))&4294967295);
        var $50=((($43) + ($49))&4294967295);
        HEAP[$1]=$50;
        __label__ = 11; break;
      case 4: // $51
        var $52=HEAP[$o];
        var $53=$52;
        HEAP[$cl]=$53;
        var $54=HEAP[$cl];
        var $55=$54;
        var $56=(($55+8)&4294967295);
        var $57=HEAP[$56];
        var $58=HEAP[$2];
        var $59=(($58+36)&4294967295);
        HEAP[$59]=$57;
        var $60=HEAP[$2];
        var $61=HEAP[$cl];
        _traverseclosure($60, $61);
        var $62=HEAP[$cl];
        var $63=$62;
        var $64=(($63+6)&4294967295);
        var $65=HEAP[$64];
        var $66=unSign(($65), 8, 0);
        var $67=((($66))|0)!=0;
        if ($67) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $68
        var $69=HEAP[$cl];
        var $70=$69;
        var $71=(($70+7)&4294967295);
        var $72=HEAP[$71];
        var $73=unSign(($72), 8, 0);
        var $74=((($73) - 1)&4294967295);
        var $75=((12 * ($74))&4294967295);
        var $76=((32 + ($75))&4294967295);
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $77
        var $78=HEAP[$cl];
        var $79=$78;
        var $80=(($79+7)&4294967295);
        var $81=HEAP[$80];
        var $82=unSign(($81), 8, 0);
        var $83=((($82) - 1)&4294967295);
        var $84=((4 * ($83))&4294967295);
        var $85=((24 + ($84))&4294967295);
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $86
        var $87=__lastLabel__ == 5 ? $76 : ($85);
        HEAP[$1]=$87;
        __label__ = 11; break;
      case 8: // $88
        var $89=HEAP[$o];
        var $90=$89;
        HEAP[$th]=$90;
        var $91=HEAP[$th];
        var $92=(($91+100)&4294967295);
        var $93=HEAP[$92];
        var $94=HEAP[$2];
        var $95=(($94+36)&4294967295);
        HEAP[$95]=$93;
        var $96=HEAP[$2];
        var $97=(($96+40)&4294967295);
        var $98=HEAP[$97];
        var $99=HEAP[$th];
        var $100=(($99+100)&4294967295);
        HEAP[$100]=$98;
        var $101=HEAP[$o];
        var $102=HEAP[$2];
        var $103=(($102+40)&4294967295);
        HEAP[$103]=$101;
        var $104=HEAP[$o];
        var $105=$104;
        var $106=(($105+5)&4294967295);
        var $107=HEAP[$106];
        var $108=unSign(($107), 8, 0);
        var $109=($108) & 251;
        var $110=((($109)) & 255);
        HEAP[$106]=$110;
        var $111=HEAP[$2];
        var $112=HEAP[$th];
        _traversestack($111, $112);
        var $113=HEAP[$th];
        var $114=(($113+44)&4294967295);
        var $115=HEAP[$114];
        var $116=((12 * ($115))&4294967295);
        var $117=((112 + ($116))&4294967295);
        var $118=HEAP[$th];
        var $119=(($118+48)&4294967295);
        var $120=HEAP[$119];
        var $121=((24 * ($120))&4294967295);
        var $122=((($117) + ($121))&4294967295);
        HEAP[$1]=$122;
        __label__ = 11; break;
      case 9: // $123
        var $124=HEAP[$o];
        var $125=$124;
        HEAP[$p]=$125;
        var $126=HEAP[$p];
        var $127=(($126+68)&4294967295);
        var $128=HEAP[$127];
        var $129=HEAP[$2];
        var $130=(($129+36)&4294967295);
        HEAP[$130]=$128;
        var $131=HEAP[$2];
        var $132=HEAP[$p];
        _traverseproto($131, $132);
        var $133=HEAP[$p];
        var $134=(($133+44)&4294967295);
        var $135=HEAP[$134];
        var $136=((4 * ($135))&4294967295);
        var $137=((76 + ($136))&4294967295);
        var $138=HEAP[$p];
        var $139=(($138+52)&4294967295);
        var $140=HEAP[$139];
        var $141=((4 * ($140))&4294967295);
        var $142=((($137) + ($141))&4294967295);
        var $143=HEAP[$p];
        var $144=(($143+40)&4294967295);
        var $145=HEAP[$144];
        var $146=((12 * ($145))&4294967295);
        var $147=((($142) + ($146))&4294967295);
        var $148=HEAP[$p];
        var $149=(($148+48)&4294967295);
        var $150=HEAP[$149];
        var $151=((4 * ($150))&4294967295);
        var $152=((($147) + ($151))&4294967295);
        var $153=HEAP[$p];
        var $154=(($153+56)&4294967295);
        var $155=HEAP[$154];
        var $156=((12 * ($155))&4294967295);
        var $157=((($152) + ($156))&4294967295);
        var $158=HEAP[$p];
        var $159=(($158+36)&4294967295);
        var $160=HEAP[$159];
        var $161=((4 * ($160))&4294967295);
        var $162=((($157) + ($161))&4294967295);
        HEAP[$1]=$162;
        __label__ = 11; break;
      case 10: // $163
        HEAP[$1]=0;
        __label__ = 11; break;
      case 11: // $164
        var $165=HEAP[$1];
        STACKTOP = __stackBase__;
        return $165;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _atomic($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $g=__stackBase__+4;
        var $udsize=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=HEAP[$3];
        HEAP[$g]=$4;
        var $5=HEAP[$g];
        _remarkupvals($5);
        var $6=HEAP[$g];
        var $7=_propagateall($6);
        var $8=HEAP[$g];
        var $9=(($8+44)&4294967295);
        var $10=HEAP[$9];
        var $11=HEAP[$g];
        var $12=(($11+36)&4294967295);
        HEAP[$12]=$10;
        var $13=HEAP[$g];
        var $14=(($13+44)&4294967295);
        HEAP[$14]=0;
        var $15=HEAP[$1];
        var $16=$15;
        var $17=$16;
        var $18=(($17+5)&4294967295);
        var $19=HEAP[$18];
        var $20=unSign(($19), 8, 0);
        var $21=($20) & 3;
        var $22=((($21))|0)!=0;
        if ($22) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $23
        var $24=HEAP[$g];
        var $25=HEAP[$1];
        var $26=$25;
        _reallymarkobject($24, $26);
        __label__ = 2; break;
      case 2: // $27
        var $28=HEAP[$g];
        _markmt($28);
        var $29=HEAP[$g];
        var $30=_propagateall($29);
        var $31=HEAP[$g];
        var $32=(($31+40)&4294967295);
        var $33=HEAP[$32];
        var $34=HEAP[$g];
        var $35=(($34+36)&4294967295);
        HEAP[$35]=$33;
        var $36=HEAP[$g];
        var $37=(($36+40)&4294967295);
        HEAP[$37]=0;
        var $38=HEAP[$g];
        var $39=_propagateall($38);
        var $40=HEAP[$1];
        var $41=_luaC_separateudata($40, 0);
        HEAP[$udsize]=$41;
        var $42=HEAP[$g];
        _marktmu($42);
        var $43=HEAP[$g];
        var $44=_propagateall($43);
        var $45=HEAP[$udsize];
        var $46=((($45) + ($44))&4294967295);
        HEAP[$udsize]=$46;
        var $47=HEAP[$g];
        var $48=(($47+44)&4294967295);
        var $49=HEAP[$48];
        _cleartable($49);
        var $50=HEAP[$g];
        var $51=(($50+20)&4294967295);
        var $52=HEAP[$51];
        var $53=unSign(($52), 8, 0);
        var $54=($53) ^ 3;
        var $55=((($54)) & 255);
        var $56=HEAP[$g];
        var $57=(($56+20)&4294967295);
        HEAP[$57]=$55;
        var $58=HEAP[$g];
        var $59=(($58+24)&4294967295);
        HEAP[$59]=0;
        var $60=HEAP[$g];
        var $61=(($60+28)&4294967295);
        var $62=HEAP[$g];
        var $63=(($62+32)&4294967295);
        HEAP[$63]=$61;
        var $64=HEAP[$g];
        var $65=(($64+21)&4294967295);
        HEAP[$65]=2;
        var $66=HEAP[$g];
        var $67=(($66+68)&4294967295);
        var $68=HEAP[$67];
        var $69=HEAP[$udsize];
        var $70=((($68) - ($69))&4294967295);
        var $71=HEAP[$g];
        var $72=(($71+72)&4294967295);
        HEAP[$72]=$70;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _checkSizes($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $g=__stackBase__+4;
        var $newsize=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=HEAP[$3];
        HEAP[$g]=$4;
        var $5=HEAP[$g];
        var $6=(($5)&4294967295);
        var $7=(($6+4)&4294967295);
        var $8=HEAP[$7];
        var $9=HEAP[$g];
        var $10=(($9)&4294967295);
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        var $13=((((($12))|0)/4)|0);
        var $14=((($8))>>>0) < ((($13))>>>0);
        if ($14) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $15
        var $16=HEAP[$g];
        var $17=(($16)&4294967295);
        var $18=(($17+8)&4294967295);
        var $19=HEAP[$18];
        var $20=((($19))|0) > 64;
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $21
        var $22=HEAP[$1];
        var $23=HEAP[$g];
        var $24=(($23)&4294967295);
        var $25=(($24+8)&4294967295);
        var $26=HEAP[$25];
        var $27=((((($26))|0)/2)|0);
        _luaS_resize($22, $27);
        __label__ = 3; break;
      case 3: // $28
        var $29=HEAP[$g];
        var $30=(($29+52)&4294967295);
        var $31=(($30+8)&4294967295);
        var $32=HEAP[$31];
        var $33=((($32))>>>0) > 64;
        if ($33) { __label__ = 4; break; } else { __label__ = 8; break; }
      case 4: // $34
        var $35=HEAP[$g];
        var $36=(($35+52)&4294967295);
        var $37=(($36+8)&4294967295);
        var $38=HEAP[$37];
        var $39=Math.floor(((($38))>>>0)/2);
        HEAP[$newsize]=$39;
        var $40=HEAP[$newsize];
        var $41=((($40) + 1)&4294967295);
        var $42=((($41))>>>0) <= 4294967293;
        if ($42) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $43
        var $44=HEAP[$1];
        var $45=HEAP[$g];
        var $46=(($45+52)&4294967295);
        var $47=(($46)&4294967295);
        var $48=HEAP[$47];
        var $49=HEAP[$g];
        var $50=(($49+52)&4294967295);
        var $51=(($50+8)&4294967295);
        var $52=HEAP[$51];
        var $53=((($52) * 1)&4294967295);
        var $54=HEAP[$newsize];
        var $55=((($54) * 1)&4294967295);
        var $56=_luaM_realloc_($44, $48, $53, $55);
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $57
        var $58=HEAP[$1];
        var $59=_luaM_toobig($58);
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $60
        var $61=__lastLabel__ == 5 ? $56 : ($59);
        var $62=HEAP[$g];
        var $63=(($62+52)&4294967295);
        var $64=(($63)&4294967295);
        HEAP[$64]=$61;
        var $65=HEAP[$newsize];
        var $66=HEAP[$g];
        var $67=(($66+52)&4294967295);
        var $68=(($67+8)&4294967295);
        HEAP[$68]=$65;
        __label__ = 8; break;
      case 8: // $69
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _remarkupvals($g) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $uv=__stackBase__+4;
        HEAP[$1]=$g;
        var $2=HEAP[$1];
        var $3=(($2+108)&4294967295);
        var $4=(($3+12)&4294967295);
        var $5=$4;
        var $6=(($5+4)&4294967295);
        var $7=HEAP[$6];
        HEAP[$uv]=$7;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$uv];
        var $10=HEAP[$1];
        var $11=(($10+108)&4294967295);
        var $12=((($9))|0)!=((($11))|0);
        if ($12) { __label__ = 2; break; } else { __label__ = 10; break; }
      case 2: // $13
        var $14=HEAP[$uv];
        var $15=$14;
        var $16=$15;
        var $17=(($16+5)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=($19) & 4;
        var $21=((($20))|0)!=0;
        if ($21) { __label__ = 8; break; } else { __label__ = 3; break; }
      case 3: // $22
        var $23=HEAP[$uv];
        var $24=$23;
        var $25=$24;
        var $26=(($25+5)&4294967295);
        var $27=HEAP[$26];
        var $28=unSign(($27), 8, 0);
        var $29=($28) & 3;
        var $30=((($29))|0)!=0;
        if ($30) { __label__ = 8; break; } else { __label__ = 4; break; }
      case 4: // $31
        var $32=HEAP[$uv];
        var $33=(($32+8)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+8)&4294967295);
        var $36=HEAP[$35];
        var $37=((($36))|0) >= 4;
        if ($37) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $38
        var $39=HEAP[$uv];
        var $40=(($39+8)&4294967295);
        var $41=HEAP[$40];
        var $42=(($41)&4294967295);
        var $43=$42;
        var $44=HEAP[$43];
        var $45=$44;
        var $46=(($45+5)&4294967295);
        var $47=HEAP[$46];
        var $48=unSign(($47), 8, 0);
        var $49=($48) & 3;
        var $50=((($49))|0)!=0;
        if ($50) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $51
        var $52=HEAP[$1];
        var $53=HEAP[$uv];
        var $54=(($53+8)&4294967295);
        var $55=HEAP[$54];
        var $56=(($55)&4294967295);
        var $57=$56;
        var $58=HEAP[$57];
        _reallymarkobject($52, $58);
        __label__ = 7; break;
      case 7: // $59
        __label__ = 8; break;
      case 8: // $60
        __label__ = 9; break;
      case 9: // $61
        var $62=HEAP[$uv];
        var $63=(($62+12)&4294967295);
        var $64=$63;
        var $65=(($64+4)&4294967295);
        var $66=HEAP[$65];
        HEAP[$uv]=$66;
        __label__ = 1; break;
      case 10: // $67
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _propagateall($g) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $m=__stackBase__+4;
        HEAP[$1]=$g;
        HEAP[$m]=0;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $7
        var $8=HEAP[$1];
        var $9=_propagatemark($8);
        var $10=HEAP[$m];
        var $11=((($10) + ($9))&4294967295);
        HEAP[$m]=$11;
        __label__ = 1; break;
      case 3: // $12
        var $13=HEAP[$m];
        STACKTOP = __stackBase__;
        return $13;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _marktmu($g) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $u=__stackBase__+4;
        HEAP[$1]=$g;
        var $2=HEAP[$1];
        var $3=(($2+48)&4294967295);
        var $4=HEAP[$3];
        HEAP[$u]=$4;
        var $5=HEAP[$u];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 1; break; } else { __label__ = 5; break; }
      case 1: // $7
        __label__ = 2; break;
      case 2: // $8
        var $9=HEAP[$u];
        var $10=$9;
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        HEAP[$u]=$12;
        var $13=HEAP[$u];
        var $14=$13;
        var $15=(($14+5)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        var $18=($17) & 248;
        var $19=HEAP[$1];
        var $20=(($19+20)&4294967295);
        var $21=HEAP[$20];
        var $22=unSign(($21), 8, 0);
        var $23=($22) & 3;
        var $24=((($23)) & 255);
        var $25=unSign(($24), 8, 0);
        var $26=($18) | ($25);
        var $27=((($26)) & 255);
        var $28=HEAP[$u];
        var $29=$28;
        var $30=(($29+5)&4294967295);
        HEAP[$30]=$27;
        var $31=HEAP[$1];
        var $32=HEAP[$u];
        _reallymarkobject($31, $32);
        __label__ = 3; break;
      case 3: // $33
        var $34=HEAP[$u];
        var $35=HEAP[$1];
        var $36=(($35+48)&4294967295);
        var $37=HEAP[$36];
        var $38=((($34))|0)!=((($37))|0);
        if ($38) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 4: // $39
        __label__ = 5; break;
      case 5: // $40
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cleartable($l) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $h=__stackBase__+4;
        var $i=__stackBase__+8;
        var $o=__stackBase__+12;
        var $n=__stackBase__+16;
        HEAP[$1]=$l;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$1];
        var $4=((($3))|0)!=0;
        if ($4) { __label__ = 2; break; } else { __label__ = 17; break; }
      case 2: // $5
        var $6=HEAP[$1];
        var $7=$6;
        HEAP[$h]=$7;
        var $8=HEAP[$h];
        var $9=(($8+28)&4294967295);
        var $10=HEAP[$9];
        HEAP[$i]=$10;
        var $11=HEAP[$h];
        var $12=(($11+5)&4294967295);
        var $13=HEAP[$12];
        var $14=unSign(($13), 8, 0);
        var $15=($14) & 16;
        var $16=((($15))|0)!=0;
        if ($16) { __label__ = 3; break; } else { __label__ = 9; break; }
      case 3: // $17
        __label__ = 4; break;
      case 4: // $18
        var $19=HEAP[$i];
        var $20=((($19) + -1)&4294967295);
        HEAP[$i]=$20;
        var $21=((($19))|0)!=0;
        if ($21) { __label__ = 5; break; } else { __label__ = 8; break; }
      case 5: // $22
        var $23=HEAP[$i];
        var $24=HEAP[$h];
        var $25=(($24+12)&4294967295);
        var $26=HEAP[$25];
        var $27=(($26+12*$23)&4294967295);
        HEAP[$o]=$27;
        var $28=HEAP[$o];
        var $29=_iscleared($28, 0);
        var $30=((($29))|0)!=0;
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $31
        var $32=HEAP[$o];
        var $33=(($32+8)&4294967295);
        HEAP[$33]=0;
        __label__ = 7; break;
      case 7: // $34
        __label__ = 4; break;
      case 8: // $35
        __label__ = 9; break;
      case 9: // $36
        var $37=HEAP[$h];
        var $38=(($37+7)&4294967295);
        var $39=HEAP[$38];
        var $40=unSign(($39), 8, 0);
        var $41=1 << ($40);
        HEAP[$i]=$41;
        __label__ = 10; break;
      case 10: // $42
        var $43=HEAP[$i];
        var $44=((($43) + -1)&4294967295);
        HEAP[$i]=$44;
        var $45=((($43))|0)!=0;
        if ($45) { __label__ = 11; break; } else { __label__ = 16; break; }
      case 11: // $46
        var $47=HEAP[$i];
        var $48=HEAP[$h];
        var $49=(($48+16)&4294967295);
        var $50=HEAP[$49];
        var $51=(($50+28*$47)&4294967295);
        HEAP[$n]=$51;
        var $52=HEAP[$n];
        var $53=(($52)&4294967295);
        var $54=(($53+8)&4294967295);
        var $55=HEAP[$54];
        var $56=((($55))|0)==0;
        if ($56) { __label__ = 15; break; } else { __label__ = 12; break; }
      case 12: // $57
        var $58=HEAP[$n];
        var $59=(($58+12)&4294967295);
        var $60=$59;
        var $61=_iscleared($60, 1);
        var $62=((($61))|0)!=0;
        if ($62) { __label__ = 14; break; } else { __label__ = 13; break; }
      case 13: // $63
        var $64=HEAP[$n];
        var $65=(($64)&4294967295);
        var $66=_iscleared($65, 0);
        var $67=((($66))|0)!=0;
        if ($67) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $68
        var $69=HEAP[$n];
        var $70=(($69)&4294967295);
        var $71=(($70+8)&4294967295);
        HEAP[$71]=0;
        var $72=HEAP[$n];
        _removeentry($72);
        __label__ = 15; break;
      case 15: // $73
        __label__ = 10; break;
      case 16: // $74
        var $75=HEAP[$h];
        var $76=(($75+24)&4294967295);
        var $77=HEAP[$76];
        HEAP[$1]=$77;
        __label__ = 1; break;
      case 17: // $78
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iscleared($o, $iskey) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$o;
        HEAP[$3]=$iskey;
        var $4=HEAP[$2];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0) >= 4;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        HEAP[$1]=0;
        __label__ = 11; break;
      case 2: // $9
        var $10=HEAP[$2];
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        var $13=((($12))|0)==4;
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $14
        var $15=HEAP[$2];
        var $16=(($15)&4294967295);
        var $17=$16;
        var $18=HEAP[$17];
        var $19=$18;
        var $20=$19;
        var $21=(($20+5)&4294967295);
        var $22=HEAP[$21];
        var $23=unSign(($22), 8, 0);
        var $24=($23) & 252;
        var $25=((($24)) & 255);
        HEAP[$21]=$25;
        HEAP[$1]=0;
        __label__ = 11; break;
      case 4: // $26
        var $27=HEAP[$2];
        var $28=(($27)&4294967295);
        var $29=$28;
        var $30=HEAP[$29];
        var $31=$30;
        var $32=(($31+5)&4294967295);
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=($34) & 3;
        var $36=((($35))|0)!=0;
        if ($36) { __lastLabel__ = 4; __label__ = 10; break; } else { __lastLabel__ = 4; __label__ = 5; break; }
      case 5: // $37
        var $38=HEAP[$2];
        var $39=(($38+8)&4294967295);
        var $40=HEAP[$39];
        var $41=((($40))|0)==7;
        if ($41) { __lastLabel__ = 5; __label__ = 6; break; } else { __lastLabel__ = 5; __label__ = 9; break; }
      case 6: // $42
        var $43=HEAP[$3];
        var $44=((($43))|0)!=0;
        if ($44) { __lastLabel__ = 6; __label__ = 8; break; } else { __lastLabel__ = 6; __label__ = 7; break; }
      case 7: // $45
        var $46=HEAP[$2];
        var $47=(($46)&4294967295);
        var $48=$47;
        var $49=HEAP[$48];
        var $50=$49;
        var $51=$50;
        var $52=(($51+5)&4294967295);
        var $53=HEAP[$52];
        var $54=unSign(($53), 8, 0);
        var $55=($54) & 8;
        var $56=((($55))|0)!=0;
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $57
        var $58=__lastLabel__ == 6 ? 0 : ($56);
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $59
        var $60=__lastLabel__ == 5 ? 0 : ($58);
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $61
        var $62=__lastLabel__ == 4 ? 1 : ($60);
        var $63=unSign(($62), 1, 0);
        HEAP[$1]=$63;
        __label__ = 11; break;
      case 11: // $64
        var $65=HEAP[$1];
        STACKTOP = __stackBase__;
        return $65;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _removeentry($n) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$n;
        var $2=HEAP[$1];
        var $3=(($2+12)&4294967295);
        var $4=$3;
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0) >= 4;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=(($9+12)&4294967295);
        var $11=$10;
        var $12=(($11+8)&4294967295);
        HEAP[$12]=11;
        __label__ = 2; break;
      case 2: // $13
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _traversetable($g, $h) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $weakkey=__stackBase__+16;
        var $weakvalue=__stackBase__+20;
        var $mode=__stackBase__+24;
        var $n=__stackBase__+28;
        HEAP[$2]=$g;
        HEAP[$3]=$h;
        HEAP[$weakkey]=0;
        HEAP[$weakvalue]=0;
        var $4=HEAP[$3];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $8
        var $9=HEAP[$3];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=$11;
        var $13=$12;
        var $14=(($13+5)&4294967295);
        var $15=HEAP[$14];
        var $16=unSign(($15), 8, 0);
        var $17=($16) & 3;
        var $18=((($17))|0)!=0;
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $19
        var $20=HEAP[$2];
        var $21=HEAP[$3];
        var $22=(($21+8)&4294967295);
        var $23=HEAP[$22];
        var $24=$23;
        _reallymarkobject($20, $24);
        __label__ = 3; break;
      case 3: // $25
        __label__ = 4; break;
      case 4: // $26
        var $27=HEAP[$3];
        var $28=(($27+8)&4294967295);
        var $29=HEAP[$28];
        var $30=((($29))|0)==0;
        if ($30) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $31
        __lastLabel__ = 5; __label__ = 10; break;
      case 6: // $32
        var $33=HEAP[$3];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+6)&4294967295);
        var $37=HEAP[$36];
        var $38=unSign(($37), 8, 0);
        var $39=($38) & 8;
        var $40=((($39))|0)!=0;
        if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $41
        __lastLabel__ = 7; __label__ = 9; break;
      case 8: // $42
        var $43=HEAP[$3];
        var $44=(($43+8)&4294967295);
        var $45=HEAP[$44];
        var $46=HEAP[$2];
        var $47=(($46+168)&4294967295);
        var $48=(($47+12)&4294967295);
        var $49=HEAP[$48];
        var $50=_luaT_gettm($45, 3, $49);
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $51
        var $52=__lastLabel__ == 7 ? 0 : ($50);
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $53
        var $54=__lastLabel__ == 5 ? 0 : ($52);
        HEAP[$mode]=$54;
        var $55=HEAP[$mode];
        var $56=((($55))|0)!=0;
        if ($56) { __label__ = 11; break; } else { __label__ = 16; break; }
      case 11: // $57
        var $58=HEAP[$mode];
        var $59=(($58+8)&4294967295);
        var $60=HEAP[$59];
        var $61=((($60))|0)==4;
        if ($61) { __label__ = 12; break; } else { __label__ = 16; break; }
      case 12: // $62
        var $63=HEAP[$mode];
        var $64=(($63)&4294967295);
        var $65=$64;
        var $66=HEAP[$65];
        var $67=$66;
        var $68=(($67+16)&4294967295);
        var $69=$68;
        var $70=_strchr($69, 107);
        var $71=((($70))|0)!=0;
        var $72=unSign(($71), 1, 0);
        HEAP[$weakkey]=$72;
        var $73=HEAP[$mode];
        var $74=(($73)&4294967295);
        var $75=$74;
        var $76=HEAP[$75];
        var $77=$76;
        var $78=(($77+16)&4294967295);
        var $79=$78;
        var $80=_strchr($79, 118);
        var $81=((($80))|0)!=0;
        var $82=unSign(($81), 1, 0);
        HEAP[$weakvalue]=$82;
        var $83=HEAP[$weakkey];
        var $84=((($83))|0)!=0;
        if ($84) { __label__ = 14; break; } else { __label__ = 13; break; }
      case 13: // $85
        var $86=HEAP[$weakvalue];
        var $87=((($86))|0)!=0;
        if ($87) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $88
        var $89=HEAP[$3];
        var $90=(($89+5)&4294967295);
        var $91=HEAP[$90];
        var $92=unSign(($91), 8, 0);
        var $93=($92) & -25;
        var $94=((($93)) & 255);
        HEAP[$90]=$94;
        var $95=HEAP[$weakkey];
        var $96=($95) << 3;
        var $97=HEAP[$weakvalue];
        var $98=($97) << 4;
        var $99=($96) | ($98);
        var $100=((($99)) & 255);
        var $101=unSign(($100), 8, 0);
        var $102=HEAP[$3];
        var $103=(($102+5)&4294967295);
        var $104=HEAP[$103];
        var $105=unSign(($104), 8, 0);
        var $106=($105) | ($101);
        var $107=((($106)) & 255);
        HEAP[$103]=$107;
        var $108=HEAP[$2];
        var $109=(($108+44)&4294967295);
        var $110=HEAP[$109];
        var $111=HEAP[$3];
        var $112=(($111+24)&4294967295);
        HEAP[$112]=$110;
        var $113=HEAP[$3];
        var $114=$113;
        var $115=HEAP[$2];
        var $116=(($115+44)&4294967295);
        HEAP[$116]=$114;
        __label__ = 15; break;
      case 15: // $117
        __label__ = 16; break;
      case 16: // $118
        var $119=HEAP[$weakkey];
        var $120=((($119))|0)!=0;
        if ($120) { __label__ = 17; break; } else { __label__ = 19; break; }
      case 17: // $121
        var $122=HEAP[$weakvalue];
        var $123=((($122))|0)!=0;
        if ($123) { __label__ = 18; break; } else { __label__ = 19; break; }
      case 18: // $124
        HEAP[$1]=1;
        __label__ = 46; break;
      case 19: // $125
        var $126=HEAP[$weakvalue];
        var $127=((($126))|0)!=0;
        if ($127) { __label__ = 27; break; } else { __label__ = 20; break; }
      case 20: // $128
        var $129=HEAP[$3];
        var $130=(($129+28)&4294967295);
        var $131=HEAP[$130];
        HEAP[$i]=$131;
        __label__ = 21; break;
      case 21: // $132
        var $133=HEAP[$i];
        var $134=((($133) + -1)&4294967295);
        HEAP[$i]=$134;
        var $135=((($133))|0)!=0;
        if ($135) { __label__ = 22; break; } else { __label__ = 26; break; }
      case 22: // $136
        var $137=HEAP[$i];
        var $138=HEAP[$3];
        var $139=(($138+12)&4294967295);
        var $140=HEAP[$139];
        var $141=(($140+12*$137)&4294967295);
        var $142=(($141+8)&4294967295);
        var $143=HEAP[$142];
        var $144=((($143))|0) >= 4;
        if ($144) { __label__ = 23; break; } else { __label__ = 25; break; }
      case 23: // $145
        var $146=HEAP[$i];
        var $147=HEAP[$3];
        var $148=(($147+12)&4294967295);
        var $149=HEAP[$148];
        var $150=(($149+12*$146)&4294967295);
        var $151=(($150)&4294967295);
        var $152=$151;
        var $153=HEAP[$152];
        var $154=$153;
        var $155=(($154+5)&4294967295);
        var $156=HEAP[$155];
        var $157=unSign(($156), 8, 0);
        var $158=($157) & 3;
        var $159=((($158))|0)!=0;
        if ($159) { __label__ = 24; break; } else { __label__ = 25; break; }
      case 24: // $160
        var $161=HEAP[$2];
        var $162=HEAP[$i];
        var $163=HEAP[$3];
        var $164=(($163+12)&4294967295);
        var $165=HEAP[$164];
        var $166=(($165+12*$162)&4294967295);
        var $167=(($166)&4294967295);
        var $168=$167;
        var $169=HEAP[$168];
        _reallymarkobject($161, $169);
        __label__ = 25; break;
      case 25: // $170
        __label__ = 21; break;
      case 26: // $171
        __label__ = 27; break;
      case 27: // $172
        var $173=HEAP[$3];
        var $174=(($173+7)&4294967295);
        var $175=HEAP[$174];
        var $176=unSign(($175), 8, 0);
        var $177=1 << ($176);
        HEAP[$i]=$177;
        __label__ = 28; break;
      case 28: // $178
        var $179=HEAP[$i];
        var $180=((($179) + -1)&4294967295);
        HEAP[$i]=$180;
        var $181=((($179))|0)!=0;
        if ($181) { __label__ = 29; break; } else { __label__ = 43; break; }
      case 29: // $182
        var $183=HEAP[$i];
        var $184=HEAP[$3];
        var $185=(($184+16)&4294967295);
        var $186=HEAP[$185];
        var $187=(($186+28*$183)&4294967295);
        HEAP[$n]=$187;
        var $188=HEAP[$n];
        var $189=(($188)&4294967295);
        var $190=(($189+8)&4294967295);
        var $191=HEAP[$190];
        var $192=((($191))|0)==0;
        if ($192) { __label__ = 30; break; } else { __label__ = 31; break; }
      case 30: // $193
        var $194=HEAP[$n];
        _removeentry($194);
        __label__ = 42; break;
      case 31: // $195
        var $196=HEAP[$weakkey];
        var $197=((($196))|0)!=0;
        if ($197) { __label__ = 36; break; } else { __label__ = 32; break; }
      case 32: // $198
        var $199=HEAP[$n];
        var $200=(($199+12)&4294967295);
        var $201=$200;
        var $202=(($201+8)&4294967295);
        var $203=HEAP[$202];
        var $204=((($203))|0) >= 4;
        if ($204) { __label__ = 33; break; } else { __label__ = 35; break; }
      case 33: // $205
        var $206=HEAP[$n];
        var $207=(($206+12)&4294967295);
        var $208=$207;
        var $209=(($208)&4294967295);
        var $210=$209;
        var $211=HEAP[$210];
        var $212=$211;
        var $213=(($212+5)&4294967295);
        var $214=HEAP[$213];
        var $215=unSign(($214), 8, 0);
        var $216=($215) & 3;
        var $217=((($216))|0)!=0;
        if ($217) { __label__ = 34; break; } else { __label__ = 35; break; }
      case 34: // $218
        var $219=HEAP[$2];
        var $220=HEAP[$n];
        var $221=(($220+12)&4294967295);
        var $222=$221;
        var $223=(($222)&4294967295);
        var $224=$223;
        var $225=HEAP[$224];
        _reallymarkobject($219, $225);
        __label__ = 35; break;
      case 35: // $226
        __label__ = 36; break;
      case 36: // $227
        var $228=HEAP[$weakvalue];
        var $229=((($228))|0)!=0;
        if ($229) { __label__ = 41; break; } else { __label__ = 37; break; }
      case 37: // $230
        var $231=HEAP[$n];
        var $232=(($231)&4294967295);
        var $233=(($232+8)&4294967295);
        var $234=HEAP[$233];
        var $235=((($234))|0) >= 4;
        if ($235) { __label__ = 38; break; } else { __label__ = 40; break; }
      case 38: // $236
        var $237=HEAP[$n];
        var $238=(($237)&4294967295);
        var $239=(($238)&4294967295);
        var $240=$239;
        var $241=HEAP[$240];
        var $242=$241;
        var $243=(($242+5)&4294967295);
        var $244=HEAP[$243];
        var $245=unSign(($244), 8, 0);
        var $246=($245) & 3;
        var $247=((($246))|0)!=0;
        if ($247) { __label__ = 39; break; } else { __label__ = 40; break; }
      case 39: // $248
        var $249=HEAP[$2];
        var $250=HEAP[$n];
        var $251=(($250)&4294967295);
        var $252=(($251)&4294967295);
        var $253=$252;
        var $254=HEAP[$253];
        _reallymarkobject($249, $254);
        __label__ = 40; break;
      case 40: // $255
        __label__ = 41; break;
      case 41: // $256
        __label__ = 42; break;
      case 42: // $257
        __label__ = 28; break;
      case 43: // $258
        var $259=HEAP[$weakkey];
        var $260=((($259))|0)!=0;
        if ($260) { __lastLabel__ = 43; __label__ = 45; break; } else { __lastLabel__ = 43; __label__ = 44; break; }
      case 44: // $261
        var $262=HEAP[$weakvalue];
        var $263=((($262))|0)!=0;
        __lastLabel__ = 44; __label__ = 45; break;
      case 45: // $264
        var $265=__lastLabel__ == 43 ? 1 : ($263);
        var $266=unSign(($265), 1, 0);
        HEAP[$1]=$266;
        __label__ = 46; break;
      case 46: // $267
        var $268=HEAP[$1];
        STACKTOP = __stackBase__;
        return $268;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _traverseclosure($g, $cl) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $i1=__stackBase__+12;
        HEAP[$1]=$g;
        HEAP[$2]=$cl;
        var $3=HEAP[$2];
        var $4=$3;
        var $5=(($4+12)&4294967295);
        var $6=HEAP[$5];
        var $7=$6;
        var $8=$7;
        var $9=(($8+5)&4294967295);
        var $10=HEAP[$9];
        var $11=unSign(($10), 8, 0);
        var $12=($11) & 3;
        var $13=((($12))|0)!=0;
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $14
        var $15=HEAP[$1];
        var $16=HEAP[$2];
        var $17=$16;
        var $18=(($17+12)&4294967295);
        var $19=HEAP[$18];
        var $20=$19;
        _reallymarkobject($15, $20);
        __label__ = 2; break;
      case 2: // $21
        var $22=HEAP[$2];
        var $23=$22;
        var $24=(($23+6)&4294967295);
        var $25=HEAP[$24];
        var $26=reSign(($25), 8, 0)!=0;
        if ($26) { __label__ = 3; break; } else { __label__ = 11; break; }
      case 3: // $27
        HEAP[$i]=0;
        __label__ = 4; break;
      case 4: // $28
        var $29=HEAP[$i];
        var $30=HEAP[$2];
        var $31=$30;
        var $32=(($31+7)&4294967295);
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=((($29))|0) < ((($34))|0);
        if ($35) { __label__ = 5; break; } else { __label__ = 10; break; }
      case 5: // $36
        var $37=HEAP[$i];
        var $38=HEAP[$2];
        var $39=$38;
        var $40=(($39+20)&4294967295);
        var $41=(($40+$37*12)&4294967295);
        var $42=(($41+8)&4294967295);
        var $43=HEAP[$42];
        var $44=((($43))|0) >= 4;
        if ($44) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $45
        var $46=HEAP[$i];
        var $47=HEAP[$2];
        var $48=$47;
        var $49=(($48+20)&4294967295);
        var $50=(($49+$46*12)&4294967295);
        var $51=(($50)&4294967295);
        var $52=$51;
        var $53=HEAP[$52];
        var $54=$53;
        var $55=(($54+5)&4294967295);
        var $56=HEAP[$55];
        var $57=unSign(($56), 8, 0);
        var $58=($57) & 3;
        var $59=((($58))|0)!=0;
        if ($59) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $60
        var $61=HEAP[$1];
        var $62=HEAP[$i];
        var $63=HEAP[$2];
        var $64=$63;
        var $65=(($64+20)&4294967295);
        var $66=(($65+$62*12)&4294967295);
        var $67=(($66)&4294967295);
        var $68=$67;
        var $69=HEAP[$68];
        _reallymarkobject($61, $69);
        __label__ = 8; break;
      case 8: // $70
        __label__ = 9; break;
      case 9: // $71
        var $72=HEAP[$i];
        var $73=((($72) + 1)&4294967295);
        HEAP[$i]=$73;
        __label__ = 4; break;
      case 10: // $74
        __label__ = 20; break;
      case 11: // $75
        var $76=HEAP[$2];
        var $77=$76;
        var $78=(($77+16)&4294967295);
        var $79=HEAP[$78];
        var $80=$79;
        var $81=$80;
        var $82=(($81+5)&4294967295);
        var $83=HEAP[$82];
        var $84=unSign(($83), 8, 0);
        var $85=($84) & 3;
        var $86=((($85))|0)!=0;
        if ($86) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $87
        var $88=HEAP[$1];
        var $89=HEAP[$2];
        var $90=$89;
        var $91=(($90+16)&4294967295);
        var $92=HEAP[$91];
        var $93=$92;
        _reallymarkobject($88, $93);
        __label__ = 13; break;
      case 13: // $94
        HEAP[$i1]=0;
        __label__ = 14; break;
      case 14: // $95
        var $96=HEAP[$i1];
        var $97=HEAP[$2];
        var $98=$97;
        var $99=(($98+7)&4294967295);
        var $100=HEAP[$99];
        var $101=unSign(($100), 8, 0);
        var $102=((($96))|0) < ((($101))|0);
        if ($102) { __label__ = 15; break; } else { __label__ = 19; break; }
      case 15: // $103
        var $104=HEAP[$i1];
        var $105=HEAP[$2];
        var $106=$105;
        var $107=(($106+20)&4294967295);
        var $108=(($107+$104*4)&4294967295);
        var $109=HEAP[$108];
        var $110=$109;
        var $111=$110;
        var $112=(($111+5)&4294967295);
        var $113=HEAP[$112];
        var $114=unSign(($113), 8, 0);
        var $115=($114) & 3;
        var $116=((($115))|0)!=0;
        if ($116) { __label__ = 16; break; } else { __label__ = 17; break; }
      case 16: // $117
        var $118=HEAP[$1];
        var $119=HEAP[$i1];
        var $120=HEAP[$2];
        var $121=$120;
        var $122=(($121+20)&4294967295);
        var $123=(($122+$119*4)&4294967295);
        var $124=HEAP[$123];
        var $125=$124;
        _reallymarkobject($118, $125);
        __label__ = 17; break;
      case 17: // $126
        __label__ = 18; break;
      case 18: // $127
        var $128=HEAP[$i1];
        var $129=((($128) + 1)&4294967295);
        HEAP[$i1]=$129;
        __label__ = 14; break;
      case 19: // $130
        __label__ = 20; break;
      case 20: // $131
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _traversestack($g, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        var $lim=__stackBase__+12;
        var $ci=__stackBase__+16;
        HEAP[$1]=$g;
        HEAP[$2]=$l;
        var $3=HEAP[$2];
        var $4=(($3+72)&4294967295);
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0) >= 4;
        if ($7) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $8
        var $9=HEAP[$2];
        var $10=(($9+72)&4294967295);
        var $11=(($10)&4294967295);
        var $12=$11;
        var $13=HEAP[$12];
        var $14=$13;
        var $15=(($14+5)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        var $18=($17) & 3;
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $20
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=(($22+72)&4294967295);
        var $24=(($23)&4294967295);
        var $25=$24;
        var $26=HEAP[$25];
        _reallymarkobject($21, $26);
        __label__ = 3; break;
      case 3: // $27
        var $28=HEAP[$2];
        var $29=(($28+8)&4294967295);
        var $30=HEAP[$29];
        HEAP[$lim]=$30;
        var $31=HEAP[$2];
        var $32=(($31+40)&4294967295);
        var $33=HEAP[$32];
        HEAP[$ci]=$33;
        __label__ = 4; break;
      case 4: // $34
        var $35=HEAP[$ci];
        var $36=HEAP[$2];
        var $37=(($36+20)&4294967295);
        var $38=HEAP[$37];
        var $39=((($35))>>>0) <= ((($38))>>>0);
        if ($39) { __label__ = 5; break; } else { __label__ = 9; break; }
      case 5: // $40
        var $41=HEAP[$lim];
        var $42=HEAP[$ci];
        var $43=(($42+8)&4294967295);
        var $44=HEAP[$43];
        var $45=((($41))>>>0) < ((($44))>>>0);
        if ($45) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $46
        var $47=HEAP[$ci];
        var $48=(($47+8)&4294967295);
        var $49=HEAP[$48];
        HEAP[$lim]=$49;
        __label__ = 7; break;
      case 7: // $50
        __label__ = 8; break;
      case 8: // $51
        var $52=HEAP[$ci];
        var $53=(($52+24)&4294967295);
        HEAP[$ci]=$53;
        __label__ = 4; break;
      case 9: // $54
        var $55=HEAP[$2];
        var $56=(($55+32)&4294967295);
        var $57=HEAP[$56];
        HEAP[$o]=$57;
        __label__ = 10; break;
      case 10: // $58
        var $59=HEAP[$o];
        var $60=HEAP[$2];
        var $61=(($60+8)&4294967295);
        var $62=HEAP[$61];
        var $63=((($59))>>>0) < ((($62))>>>0);
        if ($63) { __label__ = 11; break; } else { __label__ = 16; break; }
      case 11: // $64
        var $65=HEAP[$o];
        var $66=(($65+8)&4294967295);
        var $67=HEAP[$66];
        var $68=((($67))|0) >= 4;
        if ($68) { __label__ = 12; break; } else { __label__ = 14; break; }
      case 12: // $69
        var $70=HEAP[$o];
        var $71=(($70)&4294967295);
        var $72=$71;
        var $73=HEAP[$72];
        var $74=$73;
        var $75=(($74+5)&4294967295);
        var $76=HEAP[$75];
        var $77=unSign(($76), 8, 0);
        var $78=($77) & 3;
        var $79=((($78))|0)!=0;
        if ($79) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $80
        var $81=HEAP[$1];
        var $82=HEAP[$o];
        var $83=(($82)&4294967295);
        var $84=$83;
        var $85=HEAP[$84];
        _reallymarkobject($81, $85);
        __label__ = 14; break;
      case 14: // $86
        __label__ = 15; break;
      case 15: // $87
        var $88=HEAP[$o];
        var $89=(($88+12)&4294967295);
        HEAP[$o]=$89;
        __label__ = 10; break;
      case 16: // $90
        __label__ = 17; break;
      case 17: // $91
        var $92=HEAP[$o];
        var $93=HEAP[$lim];
        var $94=((($92))>>>0) <= ((($93))>>>0);
        if ($94) { __label__ = 18; break; } else { __label__ = 20; break; }
      case 18: // $95
        var $96=HEAP[$o];
        var $97=(($96+8)&4294967295);
        HEAP[$97]=0;
        __label__ = 19; break;
      case 19: // $98
        var $99=HEAP[$o];
        var $100=(($99+12)&4294967295);
        HEAP[$o]=$100;
        __label__ = 17; break;
      case 20: // $101
        var $102=HEAP[$2];
        var $103=HEAP[$lim];
        _checkstacksizes($102, $103);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _traverseproto($g, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        HEAP[$1]=$g;
        HEAP[$2]=$f;
        var $3=HEAP[$2];
        var $4=(($3+32)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$2];
        var $9=(($8+32)&4294967295);
        var $10=HEAP[$9];
        var $11=$10;
        var $12=(($11+5)&4294967295);
        var $13=HEAP[$12];
        var $14=unSign(($13), 8, 0);
        var $15=($14) & 252;
        var $16=((($15)) & 255);
        HEAP[$12]=$16;
        __label__ = 2; break;
      case 2: // $17
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $18
        var $19=HEAP[$i];
        var $20=HEAP[$2];
        var $21=(($20+40)&4294967295);
        var $22=HEAP[$21];
        var $23=((($19))|0) < ((($22))|0);
        if ($23) { __label__ = 4; break; } else { __label__ = 9; break; }
      case 4: // $24
        var $25=HEAP[$i];
        var $26=HEAP[$2];
        var $27=(($26+8)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28+12*$25)&4294967295);
        var $30=(($29+8)&4294967295);
        var $31=HEAP[$30];
        var $32=((($31))|0) >= 4;
        if ($32) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $33
        var $34=HEAP[$i];
        var $35=HEAP[$2];
        var $36=(($35+8)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37+12*$34)&4294967295);
        var $39=(($38)&4294967295);
        var $40=$39;
        var $41=HEAP[$40];
        var $42=$41;
        var $43=(($42+5)&4294967295);
        var $44=HEAP[$43];
        var $45=unSign(($44), 8, 0);
        var $46=($45) & 3;
        var $47=((($46))|0)!=0;
        if ($47) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $48
        var $49=HEAP[$1];
        var $50=HEAP[$i];
        var $51=HEAP[$2];
        var $52=(($51+8)&4294967295);
        var $53=HEAP[$52];
        var $54=(($53+12*$50)&4294967295);
        var $55=(($54)&4294967295);
        var $56=$55;
        var $57=HEAP[$56];
        _reallymarkobject($49, $57);
        __label__ = 7; break;
      case 7: // $58
        __label__ = 8; break;
      case 8: // $59
        var $60=HEAP[$i];
        var $61=((($60) + 1)&4294967295);
        HEAP[$i]=$61;
        __label__ = 3; break;
      case 9: // $62
        HEAP[$i]=0;
        __label__ = 10; break;
      case 10: // $63
        var $64=HEAP[$i];
        var $65=HEAP[$2];
        var $66=(($65+36)&4294967295);
        var $67=HEAP[$66];
        var $68=((($64))|0) < ((($67))|0);
        if ($68) { __label__ = 11; break; } else { __label__ = 15; break; }
      case 11: // $69
        var $70=HEAP[$i];
        var $71=HEAP[$2];
        var $72=(($71+28)&4294967295);
        var $73=HEAP[$72];
        var $74=(($73+4*$70)&4294967295);
        var $75=HEAP[$74];
        var $76=((($75))|0)!=0;
        if ($76) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $77
        var $78=HEAP[$i];
        var $79=HEAP[$2];
        var $80=(($79+28)&4294967295);
        var $81=HEAP[$80];
        var $82=(($81+4*$78)&4294967295);
        var $83=HEAP[$82];
        var $84=$83;
        var $85=(($84+5)&4294967295);
        var $86=HEAP[$85];
        var $87=unSign(($86), 8, 0);
        var $88=($87) & 252;
        var $89=((($88)) & 255);
        HEAP[$85]=$89;
        __label__ = 13; break;
      case 13: // $90
        __label__ = 14; break;
      case 14: // $91
        var $92=HEAP[$i];
        var $93=((($92) + 1)&4294967295);
        HEAP[$i]=$93;
        __label__ = 10; break;
      case 15: // $94
        HEAP[$i]=0;
        __label__ = 16; break;
      case 16: // $95
        var $96=HEAP[$i];
        var $97=HEAP[$2];
        var $98=(($97+52)&4294967295);
        var $99=HEAP[$98];
        var $100=((($96))|0) < ((($99))|0);
        if ($100) { __label__ = 17; break; } else { __label__ = 23; break; }
      case 17: // $101
        var $102=HEAP[$i];
        var $103=HEAP[$2];
        var $104=(($103+16)&4294967295);
        var $105=HEAP[$104];
        var $106=(($105+4*$102)&4294967295);
        var $107=HEAP[$106];
        var $108=((($107))|0)!=0;
        if ($108) { __label__ = 18; break; } else { __label__ = 21; break; }
      case 18: // $109
        var $110=HEAP[$i];
        var $111=HEAP[$2];
        var $112=(($111+16)&4294967295);
        var $113=HEAP[$112];
        var $114=(($113+4*$110)&4294967295);
        var $115=HEAP[$114];
        var $116=$115;
        var $117=$116;
        var $118=(($117+5)&4294967295);
        var $119=HEAP[$118];
        var $120=unSign(($119), 8, 0);
        var $121=($120) & 3;
        var $122=((($121))|0)!=0;
        if ($122) { __label__ = 19; break; } else { __label__ = 20; break; }
      case 19: // $123
        var $124=HEAP[$1];
        var $125=HEAP[$i];
        var $126=HEAP[$2];
        var $127=(($126+16)&4294967295);
        var $128=HEAP[$127];
        var $129=(($128+4*$125)&4294967295);
        var $130=HEAP[$129];
        var $131=$130;
        _reallymarkobject($124, $131);
        __label__ = 20; break;
      case 20: // $132
        __label__ = 21; break;
      case 21: // $133
        __label__ = 22; break;
      case 22: // $134
        var $135=HEAP[$i];
        var $136=((($135) + 1)&4294967295);
        HEAP[$i]=$136;
        __label__ = 16; break;
      case 23: // $137
        HEAP[$i]=0;
        __label__ = 24; break;
      case 24: // $138
        var $139=HEAP[$i];
        var $140=HEAP[$2];
        var $141=(($140+56)&4294967295);
        var $142=HEAP[$141];
        var $143=((($139))|0) < ((($142))|0);
        if ($143) { __label__ = 25; break; } else { __label__ = 29; break; }
      case 25: // $144
        var $145=HEAP[$i];
        var $146=HEAP[$2];
        var $147=(($146+24)&4294967295);
        var $148=HEAP[$147];
        var $149=(($148+12*$145)&4294967295);
        var $150=(($149)&4294967295);
        var $151=HEAP[$150];
        var $152=((($151))|0)!=0;
        if ($152) { __label__ = 26; break; } else { __label__ = 27; break; }
      case 26: // $153
        var $154=HEAP[$i];
        var $155=HEAP[$2];
        var $156=(($155+24)&4294967295);
        var $157=HEAP[$156];
        var $158=(($157+12*$154)&4294967295);
        var $159=(($158)&4294967295);
        var $160=HEAP[$159];
        var $161=$160;
        var $162=(($161+5)&4294967295);
        var $163=HEAP[$162];
        var $164=unSign(($163), 8, 0);
        var $165=($164) & 252;
        var $166=((($165)) & 255);
        HEAP[$162]=$166;
        __label__ = 27; break;
      case 27: // $167
        __label__ = 28; break;
      case 28: // $168
        var $169=HEAP[$i];
        var $170=((($169) + 1)&4294967295);
        HEAP[$i]=$170;
        __label__ = 24; break;
      case 29: // $171
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _checkstacksizes($L, $max) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $ci_used=__stackBase__+8;
        var $s_used=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$max;
        var $3=HEAP[$1];
        var $4=(($3+20)&4294967295);
        var $5=HEAP[$4];
        var $6=HEAP[$1];
        var $7=(($6+40)&4294967295);
        var $8=HEAP[$7];
        var $9=($5);
        var $10=($8);
        var $11=((($9) - ($10))&4294967295);
        var $12=((((($11))|0)/24)|0);
        HEAP[$ci_used]=$12;
        var $13=HEAP[$2];
        var $14=HEAP[$1];
        var $15=(($14+32)&4294967295);
        var $16=HEAP[$15];
        var $17=($13);
        var $18=($16);
        var $19=((($17) - ($18))&4294967295);
        var $20=((((($19))|0)/12)|0);
        HEAP[$s_used]=$20;
        var $21=HEAP[$1];
        var $22=(($21+48)&4294967295);
        var $23=HEAP[$22];
        var $24=((($23))|0) > 20000;
        if ($24) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $25
        __label__ = 8; break;
      case 2: // $26
        var $27=HEAP[$ci_used];
        var $28=((4 * ($27))&4294967295);
        var $29=HEAP[$1];
        var $30=(($29+48)&4294967295);
        var $31=HEAP[$30];
        var $32=((($28))|0) < ((($31))|0);
        if ($32) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $33
        var $34=HEAP[$1];
        var $35=(($34+48)&4294967295);
        var $36=HEAP[$35];
        var $37=16 < ((($36))|0);
        if ($37) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $38
        var $39=HEAP[$1];
        var $40=HEAP[$1];
        var $41=(($40+48)&4294967295);
        var $42=HEAP[$41];
        var $43=((((($42))|0)/2)|0);
        _luaD_reallocCI($39, $43);
        __label__ = 5; break;
      case 5: // $44
        var $45=HEAP[$s_used];
        var $46=((4 * ($45))&4294967295);
        var $47=HEAP[$1];
        var $48=(($47+44)&4294967295);
        var $49=HEAP[$48];
        var $50=((($46))|0) < ((($49))|0);
        if ($50) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $51
        var $52=HEAP[$1];
        var $53=(($52+44)&4294967295);
        var $54=HEAP[$53];
        var $55=90 < ((($54))|0);
        if ($55) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $56
        var $57=HEAP[$1];
        var $58=HEAP[$1];
        var $59=(($58+44)&4294967295);
        var $60=HEAP[$59];
        var $61=((((($60))|0)/2)|0);
        _luaD_reallocstack($57, $61);
        __label__ = 8; break;
      case 8: // $62
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _freeobj($L, $o) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$o;
        var $3=HEAP[$2];
        var $4=$3;
        var $5=(($4+4)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        if ($7 == 9) {
          __label__ = 1; break;
        }
        else if ($7 == 6) {
          __label__ = 2; break;
        }
        else if ($7 == 10) {
          __label__ = 3; break;
        }
        else if ($7 == 5) {
          __label__ = 4; break;
        }
        else if ($7 == 8) {
          __label__ = 5; break;
        }
        else if ($7 == 4) {
          __label__ = 6; break;
        }
        else if ($7 == 7) {
          __label__ = 7; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$2];
        var $11=$10;
        _luaF_freeproto($9, $11);
        __label__ = 9; break;
      case 2: // $12
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=$14;
        _luaF_freeclosure($13, $15);
        __label__ = 9; break;
      case 3: // $16
        var $17=HEAP[$1];
        var $18=HEAP[$2];
        var $19=$18;
        _luaF_freeupval($17, $19);
        __label__ = 9; break;
      case 4: // $20
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=$22;
        _luaH_free($21, $23);
        __label__ = 9; break;
      case 5: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$2];
        var $27=$26;
        _luaE_freethread($25, $27);
        __label__ = 9; break;
      case 6: // $28
        var $29=HEAP[$1];
        var $30=(($29+16)&4294967295);
        var $31=HEAP[$30];
        var $32=(($31)&4294967295);
        var $33=(($32+4)&4294967295);
        var $34=HEAP[$33];
        var $35=((($34) + -1)&4294967295);
        HEAP[$33]=$35;
        var $36=HEAP[$1];
        var $37=HEAP[$2];
        var $38=$37;
        var $39=HEAP[$2];
        var $40=$39;
        var $41=$40;
        var $42=(($41+12)&4294967295);
        var $43=HEAP[$42];
        var $44=((($43) + 1)&4294967295);
        var $45=((($44) * 1)&4294967295);
        var $46=((16 + ($45))&4294967295);
        var $47=_luaM_realloc_($36, $38, $46, 0);
        __label__ = 9; break;
      case 7: // $48
        var $49=HEAP[$1];
        var $50=HEAP[$2];
        var $51=$50;
        var $52=HEAP[$2];
        var $53=$52;
        var $54=$53;
        var $55=(($54+16)&4294967295);
        var $56=HEAP[$55];
        var $57=((20 + ($56))&4294967295);
        var $58=_luaM_realloc_($49, $51, $57, 0);
        __label__ = 9; break;
      case 8: // $59
        __label__ = 9; break;
      case 9: // $60
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaL_openlibs($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $lib=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$lib]=((_lualibs)&4294967295);
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$lib];
        var $4=(($3+4)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$lib];
        var $10=(($9+4)&4294967295);
        var $11=HEAP[$10];
        _lua_pushcclosure($8, $11, 0);
        var $12=HEAP[$1];
        var $13=HEAP[$lib];
        var $14=(($13)&4294967295);
        var $15=HEAP[$14];
        _lua_pushstring($12, $15);
        var $16=HEAP[$1];
        _lua_call($16, 1, 0);
        __label__ = 3; break;
      case 3: // $17
        var $18=HEAP[$lib];
        var $19=(($18+8)&4294967295);
        HEAP[$lib]=$19;
        __label__ = 1; break;
      case 4: // $20
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaopen_io($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _createmeta($2);
    var $3=HEAP[$1];
    _newfenv($3, 38);
    var $4=HEAP[$1];
    _lua_replace($4, -10001);
    var $5=HEAP[$1];
    _luaL_register($5, ((__str203)&4294967295), ((_iolib)&4294967295));
    var $6=HEAP[$1];
    _newfenv($6, 40);
    var $7=HEAP[$1];
    var $8=HEAP[_stdin];
    _createstdfile($7, $8, 1, ((__str1204)&4294967295));
    var $9=HEAP[$1];
    var $10=HEAP[_stdout];
    _createstdfile($9, $10, 2, ((__str2205)&4294967295));
    var $11=HEAP[$1];
    var $12=HEAP[_stderr];
    _createstdfile($11, $12, 0, ((__str3206)&4294967295));
    var $13=HEAP[$1];
    _lua_settop($13, -2);
    var $14=HEAP[$1];
    _lua_getfield($14, -1, ((__str4207)&4294967295));
    var $15=HEAP[$1];
    _newfenv($15, 42);
    var $16=HEAP[$1];
    var $17=_lua_setfenv($16, -2);
    var $18=HEAP[$1];
    _lua_settop($18, -2);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _createmeta($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_newmetatable($2, ((__str5208)&4294967295));
    var $4=HEAP[$1];
    _lua_pushvalue($4, -1);
    var $5=HEAP[$1];
    _lua_setfield($5, -2, ((__str33236)&4294967295));
    var $6=HEAP[$1];
    _luaL_register($6, 0, ((_flib)&4294967295));
    STACKTOP = __stackBase__;
    return;
  }
  

  function _newfenv($L, $cls) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$cls;
    var $3=HEAP[$1];
    _lua_createtable($3, 0, 1);
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    _lua_pushcclosure($4, $5, 0);
    var $6=HEAP[$1];
    _lua_setfield($6, -2, ((__str32235)&4294967295));
    STACKTOP = __stackBase__;
    return;
  }
  

  function _io_fclose($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $p=__stackBase__+4;
    var $ok=__stackBase__+8;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checkudata($2, 1, ((__str5208)&4294967295));
    var $4=$3;
    HEAP[$p]=$4;
    var $5=HEAP[$p];
    var $6=HEAP[$5];
    var $7=_fclose($6);
    var $8=((($7))|0)==0;
    var $9=unSign(($8), 1, 0);
    HEAP[$ok]=$9;
    var $10=HEAP[$p];
    HEAP[$10]=0;
    var $11=HEAP[$1];
    var $12=HEAP[$ok];
    var $13=_pushresult($11, $12, 0);
    STACKTOP = __stackBase__;
    return $13;
  }
  

  function _io_noclose($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _lua_pushnil($2);
    var $3=HEAP[$1];
    _lua_pushlstring($3, ((__str8211)&4294967295), 26);
    STACKTOP = __stackBase__;
    return 2;
  }
  

  function _createstdfile($L, $f, $k, $fname) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$f;
        HEAP[$3]=$k;
        HEAP[$4]=$fname;
        var $5=HEAP[$2];
        var $6=HEAP[$1];
        var $7=_newfile($6);
        HEAP[$7]=$5;
        var $8=HEAP[$3];
        var $9=((($8))|0) > 0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$1];
        _lua_pushvalue($11, -1);
        var $12=HEAP[$1];
        var $13=HEAP[$3];
        _lua_rawseti($12, -10001, $13);
        __label__ = 2; break;
      case 2: // $14
        var $15=HEAP[$1];
        _lua_pushvalue($15, -2);
        var $16=HEAP[$1];
        var $17=_lua_setfenv($16, -2);
        var $18=HEAP[$1];
        var $19=HEAP[$4];
        _lua_setfield($18, -3, $19);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_pclose($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $p=__stackBase__+4;
    var $ok=__stackBase__+8;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checkudata($2, 1, ((__str5208)&4294967295));
    var $4=$3;
    HEAP[$p]=$4;
    var $5=HEAP[$1];
    var $6=HEAP[$p];
    var $7=HEAP[$6];
    HEAP[$ok]=0;
    var $8=HEAP[$p];
    HEAP[$8]=0;
    var $9=HEAP[$1];
    var $10=HEAP[$ok];
    var $11=_pushresult($9, $10, 0);
    STACKTOP = __stackBase__;
    return $11;
  }
  

  function _pushresult($L, $i, $filename) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $en=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$i;
        HEAP[$4]=$filename;
        var $5=___errno_location();
        var $6=HEAP[$5];
        HEAP[$en]=$6;
        var $7=HEAP[$3];
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$2];
        _lua_pushboolean($10, 1);
        HEAP[$1]=1;
        __label__ = 6; break;
      case 2: // $11
        var $12=HEAP[$2];
        _lua_pushnil($12);
        var $13=HEAP[$4];
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $15
        var $16=HEAP[$2];
        var $17=HEAP[$4];
        var $18=HEAP[$en];
        var $19=_strerror($18);
        var $20=_lua_pushfstring($16, ((__str6209)&4294967295), allocate([$17,0,0,0,$19,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 5; break;
      case 4: // $21
        var $22=HEAP[$2];
        var $23=HEAP[$en];
        var $24=_strerror($23);
        var $25=_lua_pushfstring($22, ((__str7210)&4294967295), allocate([$24,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 5; break;
      case 5: // $26
        var $27=HEAP[$2];
        var $28=HEAP[$en];
        _lua_pushinteger($27, $28);
        HEAP[$1]=3;
        __label__ = 6; break;
      case 6: // $29
        var $30=HEAP[$1];
        STACKTOP = __stackBase__;
        return $30;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newfile($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $pf=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_lua_newuserdata($2, 4);
    var $4=$3;
    HEAP[$pf]=$4;
    var $5=HEAP[$pf];
    HEAP[$5]=0;
    var $6=HEAP[$1];
    _lua_getfield($6, -10000, ((__str5208)&4294967295));
    var $7=HEAP[$1];
    var $8=_lua_setmetatable($7, -2);
    var $9=HEAP[$pf];
    STACKTOP = __stackBase__;
    return $9;
  }
  

  function _io_close($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_type($2, 1);
        var $4=((($3))|0)==-1;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$1];
        _lua_rawgeti($6, -10001, 2);
        __label__ = 2; break;
      case 2: // $7
        var $8=HEAP[$1];
        var $9=_tofile($8);
        var $10=HEAP[$1];
        var $11=_aux_close($10);
        STACKTOP = __stackBase__;
        return $11;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_flush($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_getiofile($3, 2);
    var $5=_fflush($4);
    var $6=((($5))|0)==0;
    var $7=unSign(($6), 1, 0);
    var $8=_pushresult($2, $7, 0);
    STACKTOP = __stackBase__;
    return $8;
  }
  

  function _io_input($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_g_iofile($2, 1, ((__str27230)&4294967295));
    STACKTOP = __stackBase__;
    return $3;
  }
  

  function _io_lines($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $filename=__stackBase__+8;
        var $pf=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_lua_type($3, 1);
        var $5=((($4))|0) <= 0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$2];
        _lua_rawgeti($7, -10001, 1);
        var $8=HEAP[$2];
        var $9=_f_lines($8);
        HEAP[$1]=$9;
        __label__ = 5; break;
      case 2: // $10
        var $11=HEAP[$2];
        var $12=_luaL_checklstring($11, 1, 0);
        HEAP[$filename]=$12;
        var $13=HEAP[$2];
        var $14=_newfile($13);
        HEAP[$pf]=$14;
        var $15=HEAP[$filename];
        var $16=_fopen($15, ((__str27230)&4294967295));
        var $17=HEAP[$pf];
        HEAP[$17]=$16;
        var $18=HEAP[$pf];
        var $19=HEAP[$18];
        var $20=((($19))|0)==0;
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $21
        var $22=HEAP[$2];
        var $23=HEAP[$filename];
        _fileerror($22, 1, $23);
        __label__ = 4; break;
      case 4: // $24
        var $25=HEAP[$2];
        var $26=HEAP[$2];
        var $27=_lua_gettop($26);
        _aux_lines($25, $27, 1);
        HEAP[$1]=1;
        __label__ = 5; break;
      case 5: // $28
        var $29=HEAP[$1];
        STACKTOP = __stackBase__;
        return $29;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_open($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $filename=__stackBase__+4;
        var $mode=__stackBase__+8;
        var $pf=__stackBase__+12;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, 0);
        HEAP[$filename]=$3;
        var $4=HEAP[$1];
        var $5=_luaL_optlstring($4, 2, ((__str27230)&4294967295), 0);
        HEAP[$mode]=$5;
        var $6=HEAP[$1];
        var $7=_newfile($6);
        HEAP[$pf]=$7;
        var $8=HEAP[$filename];
        var $9=HEAP[$mode];
        var $10=_fopen($8, $9);
        var $11=HEAP[$pf];
        HEAP[$11]=$10;
        var $12=HEAP[$pf];
        var $13=HEAP[$12];
        var $14=((($13))|0)==0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$1];
        var $17=HEAP[$filename];
        var $18=_pushresult($16, 0, $17);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $19
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $20
        var $21=__lastLabel__ == 1 ? $18 : (1);
        STACKTOP = __stackBase__;
        return $21;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_output($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_g_iofile($2, 2, ((__str29232)&4294967295));
    STACKTOP = __stackBase__;
    return $3;
  }
  

  function _io_popen($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $filename=__stackBase__+4;
        var $mode=__stackBase__+8;
        var $pf=__stackBase__+12;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, 0);
        HEAP[$filename]=$3;
        var $4=HEAP[$1];
        var $5=_luaL_optlstring($4, 2, ((__str27230)&4294967295), 0);
        HEAP[$mode]=$5;
        var $6=HEAP[$1];
        var $7=_newfile($6);
        HEAP[$pf]=$7;
        var $8=HEAP[$filename];
        var $9=HEAP[$mode];
        var $10=HEAP[$1];
        var $11=_luaL_error($10, ((__str28231)&4294967295), allocate(1, "i32", ALLOC_STACK));
        var $12=HEAP[$pf];
        HEAP[$12]=0;
        var $13=HEAP[$pf];
        var $14=HEAP[$13];
        var $15=((($14))|0)==0;
        if ($15) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $16
        var $17=HEAP[$1];
        var $18=HEAP[$filename];
        var $19=_pushresult($17, 0, $18);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $20
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $21
        var $22=__lastLabel__ == 1 ? $19 : (1);
        STACKTOP = __stackBase__;
        return $22;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_read($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_getiofile($3, 1);
    var $5=_g_read($2, $4, 1);
    STACKTOP = __stackBase__;
    return $5;
  }
  

  function _io_tmpfile($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $pf=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_newfile($2);
        HEAP[$pf]=$3;
        var $4=_tmpfile();
        var $5=HEAP[$pf];
        HEAP[$5]=$4;
        var $6=HEAP[$pf];
        var $7=HEAP[$6];
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=_pushresult($10, 0, 0);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $12
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $13
        var $14=__lastLabel__ == 1 ? $11 : (1);
        STACKTOP = __stackBase__;
        return $14;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_type($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $ud=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        _luaL_checkany($2, 1);
        var $3=HEAP[$1];
        var $4=_lua_touserdata($3, 1);
        HEAP[$ud]=$4;
        var $5=HEAP[$1];
        _lua_getfield($5, -10000, ((__str5208)&4294967295));
        var $6=HEAP[$ud];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 3; break; } else { __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=_lua_getmetatable($9, 1);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $12
        var $13=HEAP[$1];
        var $14=_lua_rawequal($13, -2, -1);
        var $15=((($14))|0)!=0;
        if ($15) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $16
        var $17=HEAP[$1];
        _lua_pushnil($17);
        __label__ = 8; break;
      case 4: // $18
        var $19=HEAP[$ud];
        var $20=$19;
        var $21=HEAP[$20];
        var $22=((($21))|0)==0;
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $23
        var $24=HEAP[$1];
        _lua_pushlstring($24, ((__str21224)&4294967295), 11);
        __label__ = 7; break;
      case 6: // $25
        var $26=HEAP[$1];
        _lua_pushlstring($26, ((__str22225)&4294967295), 4);
        __label__ = 7; break;
      case 7: // $27
        __label__ = 8; break;
      case 8: // $28
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_write($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_getiofile($3, 2);
    var $5=_g_write($2, $4, 1);
    STACKTOP = __stackBase__;
    return $5;
  }
  

  function _g_write($L, $f, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $nargs=__stackBase__+12;
        var $status=__stackBase__+16;
        var $l=__stackBase__+20;
        var $s=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$f;
        HEAP[$3]=$arg;
        var $4=HEAP[$1];
        var $5=_lua_gettop($4);
        var $6=((($5) - 1)&4294967295);
        HEAP[$nargs]=$6;
        HEAP[$status]=1;
        __label__ = 1; break;
      case 1: // $7
        var $8=HEAP[$nargs];
        var $9=((($8) + -1)&4294967295);
        HEAP[$nargs]=$9;
        var $10=((($8))|0)!=0;
        if ($10) { __label__ = 2; break; } else { __label__ = 11; break; }
      case 2: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$3];
        var $14=_lua_type($12, $13);
        var $15=((($14))|0)==3;
        if ($15) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $16
        var $17=HEAP[$status];
        var $18=((($17))|0)!=0;
        if ($18) { __lastLabel__ = 3; __label__ = 4; break; } else { __lastLabel__ = 3; __label__ = 5; break; }
      case 4: // $19
        var $20=HEAP[$2];
        var $21=HEAP[$1];
        var $22=HEAP[$3];
        var $23=_lua_tonumber($21, $22);
        var $24=_fprintf($20, ((__str20223)&4294967295), allocate([$23,0,0,0,0,0,0,0], ["double",0,0,0,0,0,0,0], ALLOC_STACK));
        var $25=((($24))|0) > 0;
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $26
        var $27=__lastLabel__ == 3 ? 0 : ($25);
        var $28=unSign(($27), 1, 0);
        HEAP[$status]=$28;
        __label__ = 9; break;
      case 6: // $29
        var $30=HEAP[$1];
        var $31=HEAP[$3];
        var $32=_luaL_checklstring($30, $31, $l);
        HEAP[$s]=$32;
        var $33=HEAP[$status];
        var $34=((($33))|0)!=0;
        if ($34) { __lastLabel__ = 6; __label__ = 7; break; } else { __lastLabel__ = 6; __label__ = 8; break; }
      case 7: // $35
        var $36=HEAP[$s];
        var $37=HEAP[$l];
        var $38=HEAP[$2];
        var $39=_fwrite($36, 1, $37, $38);
        var $40=HEAP[$l];
        var $41=((($39))|0)==((($40))|0);
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $42
        var $43=__lastLabel__ == 6 ? 0 : ($41);
        var $44=unSign(($43), 1, 0);
        HEAP[$status]=$44;
        __label__ = 9; break;
      case 9: // $45
        __label__ = 10; break;
      case 10: // $46
        var $47=HEAP[$3];
        var $48=((($47) + 1)&4294967295);
        HEAP[$3]=$48;
        __label__ = 1; break;
      case 11: // $49
        var $50=HEAP[$1];
        var $51=HEAP[$status];
        var $52=_pushresult($50, $51, 0);
        STACKTOP = __stackBase__;
        return $52;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getiofile($L, $findex) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $f=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$findex;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        _lua_rawgeti($3, -10001, $4);
        var $5=HEAP[$1];
        var $6=_lua_touserdata($5, -1);
        var $7=$6;
        var $8=HEAP[$7];
        HEAP[$f]=$8;
        var $9=HEAP[$f];
        var $10=((($9))|0)==0;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$2];
        var $14=((($13) - 1)&4294967295);
        var $15=((_fnames+$14*4)&4294967295);
        var $16=HEAP[$15];
        var $17=_luaL_error($12, ((__str19222)&4294967295), allocate([$16,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $18
        var $19=HEAP[$f];
        STACKTOP = __stackBase__;
        return $19;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _g_read($L, $f, $first) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $nargs=__stackBase__+16;
        var $success=__stackBase__+20;
        var $n=__stackBase__+24;
        var $l=__stackBase__+28;
        var $p=__stackBase__+32;
        HEAP[$2]=$L;
        HEAP[$3]=$f;
        HEAP[$4]=$first;
        var $5=HEAP[$2];
        var $6=_lua_gettop($5);
        var $7=((($6) - 1)&4294967295);
        HEAP[$nargs]=$7;
        var $8=HEAP[$3];
        _clearerr($8);
        var $9=HEAP[$nargs];
        var $10=((($9))|0)==0;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=HEAP[$2];
        var $13=HEAP[$3];
        var $14=_read_line($12, $13);
        HEAP[$success]=$14;
        var $15=HEAP[$4];
        var $16=((($15) + 1)&4294967295);
        HEAP[$n]=$16;
        __label__ = 23; break;
      case 2: // $17
        var $18=HEAP[$2];
        var $19=HEAP[$nargs];
        var $20=((($19) + 20)&4294967295);
        _luaL_checkstack($18, $20, ((__str23226)&4294967295));
        HEAP[$success]=1;
        var $21=HEAP[$4];
        HEAP[$n]=$21;
        __label__ = 3; break;
      case 3: // $22
        var $23=HEAP[$nargs];
        var $24=((($23) + -1)&4294967295);
        HEAP[$nargs]=$24;
        var $25=((($23))|0)!=0;
        if ($25) { __lastLabel__ = 3; __label__ = 4; break; } else { __lastLabel__ = 3; __label__ = 5; break; }
      case 4: // $26
        var $27=HEAP[$success];
        var $28=((($27))|0)!=0;
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $29
        var $30=__lastLabel__ == 3 ? 0 : ($28);
        if ($30) { __label__ = 6; break; } else { __label__ = 22; break; }
      case 6: // $31
        var $32=HEAP[$2];
        var $33=HEAP[$n];
        var $34=_lua_type($32, $33);
        var $35=((($34))|0)==3;
        if ($35) { __label__ = 7; break; } else { __label__ = 11; break; }
      case 7: // $36
        var $37=HEAP[$2];
        var $38=HEAP[$n];
        var $39=_lua_tointeger($37, $38);
        HEAP[$l]=$39;
        var $40=HEAP[$l];
        var $41=((($40))|0)==0;
        if ($41) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $42
        var $43=HEAP[$2];
        var $44=HEAP[$3];
        var $45=_test_eof($43, $44);
        __lastLabel__ = 8; __label__ = 10; break;
      case 9: // $46
        var $47=HEAP[$2];
        var $48=HEAP[$3];
        var $49=HEAP[$l];
        var $50=_read_chars($47, $48, $49);
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $51
        var $52=__lastLabel__ == 8 ? $45 : ($50);
        HEAP[$success]=$52;
        __label__ = 20; break;
      case 11: // $53
        var $54=HEAP[$2];
        var $55=HEAP[$n];
        var $56=_lua_tolstring($54, $55, 0);
        HEAP[$p]=$56;
        var $57=HEAP[$p];
        var $58=((($57))|0)!=0;
        if ($58) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $59
        var $60=HEAP[$p];
        var $61=(($60)&4294967295);
        var $62=HEAP[$61];
        var $63=reSign(($62), 8, 0);
        var $64=((($63))|0)==42;
        if ($64) { __lastLabel__ = 12; __label__ = 14; break; } else { __lastLabel__ = 12; __label__ = 13; break; }
      case 13: // $65
        var $66=HEAP[$2];
        var $67=HEAP[$n];
        var $68=_luaL_argerror($66, $67, ((__str24227)&4294967295));
        var $69=((($68))|0)!=0;
        __lastLabel__ = 13; __label__ = 14; break;
      case 14: // $70
        var $71=__lastLabel__ == 12 ? 1 : ($69);
        var $72=unSign(($71), 1, 0);
        var $73=HEAP[$p];
        var $74=(($73+1)&4294967295);
        var $75=HEAP[$74];
        var $76=reSign(($75), 8, 0);
        if ($76 == 110) {
          __label__ = 15; break;
        }
        else if ($76 == 108) {
          __label__ = 16; break;
        }
        else if ($76 == 97) {
          __label__ = 17; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 15: // $77
        var $78=HEAP[$2];
        var $79=HEAP[$3];
        var $80=_read_number($78, $79);
        HEAP[$success]=$80;
        __label__ = 19; break;
      case 16: // $81
        var $82=HEAP[$2];
        var $83=HEAP[$3];
        var $84=_read_line($82, $83);
        HEAP[$success]=$84;
        __label__ = 19; break;
      case 17: // $85
        var $86=HEAP[$2];
        var $87=HEAP[$3];
        var $88=_read_chars($86, $87, -1);
        HEAP[$success]=1;
        __label__ = 19; break;
      case 18: // $89
        var $90=HEAP[$2];
        var $91=HEAP[$n];
        var $92=_luaL_argerror($90, $91, ((__str25228)&4294967295));
        HEAP[$1]=$92;
        __label__ = 28; break;
      case 19: // $93
        __label__ = 20; break;
      case 20: // $94
        __label__ = 21; break;
      case 21: // $95
        var $96=HEAP[$n];
        var $97=((($96) + 1)&4294967295);
        HEAP[$n]=$97;
        __label__ = 3; break;
      case 22: // $98
        __label__ = 23; break;
      case 23: // $99
        var $100=HEAP[$3];
        var $101=_ferror($100);
        var $102=((($101))|0)!=0;
        if ($102) { __label__ = 24; break; } else { __label__ = 25; break; }
      case 24: // $103
        var $104=HEAP[$2];
        var $105=_pushresult($104, 0, 0);
        HEAP[$1]=$105;
        __label__ = 28; break;
      case 25: // $106
        var $107=HEAP[$success];
        var $108=((($107))|0)!=0;
        if ($108) { __label__ = 27; break; } else { __label__ = 26; break; }
      case 26: // $109
        var $110=HEAP[$2];
        _lua_settop($110, -2);
        var $111=HEAP[$2];
        _lua_pushnil($111);
        __label__ = 27; break;
      case 27: // $112
        var $113=HEAP[$n];
        var $114=HEAP[$4];
        var $115=((($113) - ($114))&4294967295);
        HEAP[$1]=$115;
        __label__ = 28; break;
      case 28: // $116
        var $117=HEAP[$1];
        STACKTOP = __stackBase__;
        return $117;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_line($L, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 8224; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8224);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $b=__stackBase__+12;
        var $l=__stackBase__+8216;
        var $p=__stackBase__+8220;
        HEAP[$2]=$L;
        HEAP[$3]=$f;
        var $4=HEAP[$2];
        _luaL_buffinit($4, $b);
        __label__ = 1; break;
      case 1: // $5
        var $6=_luaL_prepbuffer($b);
        HEAP[$p]=$6;
        var $7=HEAP[$p];
        var $8=HEAP[$3];
        var $9=_fgets($7, 8192, $8);
        var $10=((($9))|0)==0;
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $11
        _luaL_pushresult($b);
        var $12=HEAP[$2];
        var $13=_lua_objlen($12, -1);
        var $14=((($13))>>>0) > 0;
        var $15=unSign(($14), 1, 0);
        HEAP[$1]=$15;
        __label__ = 8; break;
      case 3: // $16
        var $17=HEAP[$p];
        var $18=_strlen($17);
        HEAP[$l]=$18;
        var $19=HEAP[$l];
        var $20=((($19))|0)==0;
        if ($20) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $21
        var $22=HEAP[$l];
        var $23=((($22) - 1)&4294967295);
        var $24=HEAP[$p];
        var $25=(($24+$23)&4294967295);
        var $26=HEAP[$25];
        var $27=reSign(($26), 8, 0);
        var $28=((($27))|0)!=10;
        if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $29
        var $30=HEAP[$l];
        var $31=(($b)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+$30)&4294967295);
        HEAP[$31]=$33;
        __label__ = 7; break;
      case 6: // $34
        var $35=HEAP[$l];
        var $36=((($35) - 1)&4294967295);
        var $37=(($b)&4294967295);
        var $38=HEAP[$37];
        var $39=(($38+$36)&4294967295);
        HEAP[$37]=$39;
        _luaL_pushresult($b);
        HEAP[$1]=1;
        __label__ = 8; break;
      case 7: // $40
        __label__ = 1; break;
      case 8: // $41
        var $42=HEAP[$1];
        STACKTOP = __stackBase__;
        return $42;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _test_eof($L, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $c=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$f;
    var $3=HEAP[$2];
    var $4=__IO_getc($3);
    HEAP[$c]=$4;
    var $5=HEAP[$c];
    var $6=HEAP[$2];
    var $7=_ungetc($5, $6);
    var $8=HEAP[$1];
    _lua_pushlstring($8, 0, 0);
    var $9=HEAP[$c];
    var $10=((($9))|0)!=-1;
    var $11=unSign(($10), 1, 0);
    STACKTOP = __stackBase__;
    return $11;
  }
  

  function _read_chars($L, $f, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 8228; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8228);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $rlen=__stackBase__+12;
        var $nr=__stackBase__+16;
        var $b=__stackBase__+20;
        var $p=__stackBase__+8224;
        HEAP[$1]=$L;
        HEAP[$2]=$f;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        _luaL_buffinit($4, $b);
        HEAP[$rlen]=8192;
        __label__ = 1; break;
      case 1: // $5
        var $6=_luaL_prepbuffer($b);
        HEAP[$p]=$6;
        var $7=HEAP[$rlen];
        var $8=HEAP[$3];
        var $9=((($7))>>>0) > ((($8))>>>0);
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $10
        var $11=HEAP[$3];
        HEAP[$rlen]=$11;
        __label__ = 3; break;
      case 3: // $12
        var $13=HEAP[$p];
        var $14=HEAP[$rlen];
        var $15=HEAP[$2];
        var $16=_fread($13, 1, $14, $15);
        HEAP[$nr]=$16;
        var $17=HEAP[$nr];
        var $18=(($b)&4294967295);
        var $19=HEAP[$18];
        var $20=(($19+$17)&4294967295);
        HEAP[$18]=$20;
        var $21=HEAP[$nr];
        var $22=HEAP[$3];
        var $23=((($22) - ($21))&4294967295);
        HEAP[$3]=$23;
        __label__ = 4; break;
      case 4: // $24
        var $25=HEAP[$3];
        var $26=((($25))>>>0) > 0;
        if ($26) { __lastLabel__ = 4; __label__ = 5; break; } else { __lastLabel__ = 4; __label__ = 6; break; }
      case 5: // $27
        var $28=HEAP[$nr];
        var $29=HEAP[$rlen];
        var $30=((($28))|0)==((($29))|0);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $31
        var $32=__lastLabel__ == 4 ? 0 : ($30);
        if ($32) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 7: // $33
        _luaL_pushresult($b);
        var $34=HEAP[$3];
        var $35=((($34))|0)==0;
        if ($35) { __lastLabel__ = 7; __label__ = 9; break; } else { __lastLabel__ = 7; __label__ = 8; break; }
      case 8: // $36
        var $37=HEAP[$1];
        var $38=_lua_objlen($37, -1);
        var $39=((($38))>>>0) > 0;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $40
        var $41=__lastLabel__ == 7 ? 1 : ($39);
        var $42=unSign(($41), 1, 0);
        STACKTOP = __stackBase__;
        return $42;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_number($L, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $d=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$f;
        var $4=HEAP[$3];
        var $5=___isoc99_fscanf($4, ((__str26229)&4294967295), allocate([$d,0,0,0], ["double*",0,0,0], ALLOC_STACK));
        var $6=((($5))|0)==1;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$2];
        var $9=HEAP[$d];
        _lua_pushnumber($8, $9);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 2: // $10
        HEAP[$1]=0;
        __label__ = 3; break;
      case 3: // $11
        var $12=HEAP[$1];
        STACKTOP = __stackBase__;
        return $12;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _g_iofile($L, $f, $mode) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $filename=__stackBase__+12;
        var $pf=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$f;
        HEAP[$3]=$mode;
        var $4=HEAP[$1];
        var $5=_lua_type($4, 1);
        var $6=((($5))|0) <= 0;
        if ($6) { __label__ = 7; break; } else { __label__ = 1; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=_lua_tolstring($8, 1, 0);
        HEAP[$filename]=$9;
        var $10=HEAP[$filename];
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $12
        var $13=HEAP[$1];
        var $14=_newfile($13);
        HEAP[$pf]=$14;
        var $15=HEAP[$filename];
        var $16=HEAP[$3];
        var $17=_fopen($15, $16);
        var $18=HEAP[$pf];
        HEAP[$18]=$17;
        var $19=HEAP[$pf];
        var $20=HEAP[$19];
        var $21=((($20))|0)==0;
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $22
        var $23=HEAP[$1];
        var $24=HEAP[$filename];
        _fileerror($23, 1, $24);
        __label__ = 4; break;
      case 4: // $25
        __label__ = 6; break;
      case 5: // $26
        var $27=HEAP[$1];
        var $28=_tofile($27);
        var $29=HEAP[$1];
        _lua_pushvalue($29, 1);
        __label__ = 6; break;
      case 6: // $30
        var $31=HEAP[$1];
        var $32=HEAP[$2];
        _lua_rawseti($31, -10001, $32);
        __label__ = 7; break;
      case 7: // $33
        var $34=HEAP[$1];
        var $35=HEAP[$2];
        _lua_rawgeti($34, -10001, $35);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileerror($L, $arg, $filename) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$arg;
    HEAP[$3]=$filename;
    var $4=HEAP[$1];
    var $5=HEAP[$3];
    var $6=___errno_location();
    var $7=HEAP[$6];
    var $8=_strerror($7);
    var $9=_lua_pushfstring($4, ((__str6209)&4294967295), allocate([$5,0,0,0,$8,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
    var $10=HEAP[$1];
    var $11=HEAP[$2];
    var $12=HEAP[$1];
    var $13=_lua_tolstring($12, -1, 0);
    var $14=_luaL_argerror($10, $11, $13);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _tofile($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $f=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checkudata($2, 1, ((__str5208)&4294967295));
        var $4=$3;
        HEAP[$f]=$4;
        var $5=HEAP[$f];
        var $6=HEAP[$5];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=_luaL_error($9, ((__str30233)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $11
        var $12=HEAP[$f];
        var $13=HEAP[$12];
        STACKTOP = __stackBase__;
        return $13;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _f_lines($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_tofile($2);
    var $4=HEAP[$1];
    _aux_lines($4, 1, 0);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _aux_lines($L, $idx, $toclose) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$idx;
    HEAP[$3]=$toclose;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    _lua_pushvalue($4, $5);
    var $6=HEAP[$1];
    var $7=HEAP[$3];
    _lua_pushboolean($6, $7);
    var $8=HEAP[$1];
    _lua_pushcclosure($8, 44, 2);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _io_readline($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $f=__stackBase__+8;
        var $sucess=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_lua_touserdata($3, -10003);
        var $5=$4;
        var $6=HEAP[$5];
        HEAP[$f]=$6;
        var $7=HEAP[$f];
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$2];
        var $11=_luaL_error($10, ((__str31234)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$f];
        var $15=_read_line($13, $14);
        HEAP[$sucess]=$15;
        var $16=HEAP[$f];
        var $17=_ferror($16);
        var $18=((($17))|0)!=0;
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $19
        var $20=HEAP[$2];
        var $21=___errno_location();
        var $22=HEAP[$21];
        var $23=_strerror($22);
        var $24=_luaL_error($20, ((__str7210)&4294967295), allocate([$23,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$24;
        __label__ = 9; break;
      case 4: // $25
        var $26=HEAP[$sucess];
        var $27=((($26))|0)!=0;
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $28
        HEAP[$1]=1;
        __label__ = 9; break;
      case 6: // $29
        var $30=HEAP[$2];
        var $31=_lua_toboolean($30, -10004);
        var $32=((($31))|0)!=0;
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $33
        var $34=HEAP[$2];
        _lua_settop($34, 0);
        var $35=HEAP[$2];
        _lua_pushvalue($35, -10003);
        var $36=HEAP[$2];
        var $37=_aux_close($36);
        __label__ = 8; break;
      case 8: // $38
        HEAP[$1]=0;
        __label__ = 9; break;
      case 9: // $39
        var $40=HEAP[$1];
        STACKTOP = __stackBase__;
        return $40;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _aux_close($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _lua_getfenv($2, 1);
    var $3=HEAP[$1];
    _lua_getfield($3, -1, ((__str32235)&4294967295));
    var $4=HEAP[$1];
    var $5=_lua_tocfunction($4, -1);
    var $6=HEAP[$1];
    var $7=FUNCTION_TABLE[$5]($6);
    STACKTOP = __stackBase__;
    return $7;
  }
  

  function _f_flush($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_tofile($3);
    var $5=_fflush($4);
    var $6=((($5))|0)==0;
    var $7=unSign(($6), 1, 0);
    var $8=_pushresult($2, $7, 0);
    STACKTOP = __stackBase__;
    return $8;
  }
  

  function _f_read($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_tofile($3);
    var $5=_g_read($2, $4, 2);
    STACKTOP = __stackBase__;
    return $5;
  }
  

  function _f_seek($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $f=__stackBase__+8;
        var $op=__stackBase__+12;
        var $offset=__stackBase__+16;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_tofile($3);
        HEAP[$f]=$4;
        var $5=HEAP[$2];
        var $6=_luaL_checkoption($5, 2, ((__str44247)&4294967295), ((_f_seek_modenames)&4294967295));
        HEAP[$op]=$6;
        var $7=HEAP[$2];
        var $8=_luaL_optinteger($7, 3, 0);
        HEAP[$offset]=$8;
        var $9=HEAP[$f];
        var $10=HEAP[$offset];
        var $11=HEAP[$op];
        var $12=((_f_seek_mode+$11*4)&4294967295);
        var $13=HEAP[$12];
        var $14=_fseek($9, $10, $13);
        HEAP[$op]=$14;
        var $15=HEAP[$op];
        var $16=((($15))|0)!=0;
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $17
        var $18=HEAP[$2];
        var $19=_pushresult($18, 0, 0);
        HEAP[$1]=$19;
        __label__ = 3; break;
      case 2: // $20
        var $21=HEAP[$2];
        var $22=HEAP[$f];
        var $23=_ftell($22);
        _lua_pushinteger($21, $23);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 3: // $24
        var $25=HEAP[$1];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _f_setvbuf($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
  
    var $1=__stackBase__;
    var $f=__stackBase__+4;
    var $op=__stackBase__+8;
    var $sz=__stackBase__+12;
    var $res=__stackBase__+16;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_tofile($2);
    HEAP[$f]=$3;
    var $4=HEAP[$1];
    var $5=_luaL_checkoption($4, 2, 0, ((_f_setvbuf_modenames)&4294967295));
    HEAP[$op]=$5;
    var $6=HEAP[$1];
    var $7=_luaL_optinteger($6, 3, 8192);
    HEAP[$sz]=$7;
    var $8=HEAP[$f];
    var $9=HEAP[$op];
    var $10=((_f_setvbuf_mode+$9*4)&4294967295);
    var $11=HEAP[$10];
    var $12=HEAP[$sz];
    var $13=_setvbuf($8, 0, $11, $12);
    HEAP[$res]=$13;
    var $14=HEAP[$1];
    var $15=HEAP[$res];
    var $16=((($15))|0)==0;
    var $17=unSign(($16), 1, 0);
    var $18=_pushresult($14, $17, 0);
    STACKTOP = __stackBase__;
    return $18;
  }
  

  function _f_write($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_tofile($3);
    var $5=_g_write($2, $4, 2);
    STACKTOP = __stackBase__;
    return $5;
  }
  

  function _io_gc($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $f=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checkudata($2, 1, ((__str5208)&4294967295));
        var $4=$3;
        var $5=HEAP[$4];
        HEAP[$f]=$5;
        var $6=HEAP[$f];
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=_aux_close($9);
        __label__ = 2; break;
      case 2: // $11
        STACKTOP = __stackBase__;
        return 0;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_tostring($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $f=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checkudata($2, 1, ((__str5208)&4294967295));
        var $4=$3;
        var $5=HEAP[$4];
        HEAP[$f]=$5;
        var $6=HEAP[$f];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        _lua_pushlstring($9, ((__str38241)&4294967295), 13);
        __label__ = 3; break;
      case 2: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$f];
        var $13=_lua_pushfstring($11, ((__str39242)&4294967295), allocate([$12,0,0,0], ["%struct._IO_FILE*",0,0,0], ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $14
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaX_init($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        var $ts=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$i];
        var $4=((($3))|0) < 21;
        if ($4) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $5
        var $6=HEAP[$1];
        var $7=HEAP[$i];
        var $8=((_luaX_tokens+$7*4)&4294967295);
        var $9=HEAP[$8];
        var $10=HEAP[$i];
        var $11=((_luaX_tokens+$10*4)&4294967295);
        var $12=HEAP[$11];
        var $13=_strlen($12);
        var $14=_luaS_newlstr($6, $9, $13);
        HEAP[$ts]=$14;
        var $15=HEAP[$ts];
        var $16=$15;
        var $17=(($16+5)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=($19) | 32;
        var $21=((($20)) & 255);
        HEAP[$17]=$21;
        var $22=HEAP[$i];
        var $23=((($22) + 1)&4294967295);
        var $24=((($23)) & 255);
        var $25=HEAP[$ts];
        var $26=$25;
        var $27=(($26+6)&4294967295);
        HEAP[$27]=$24;
        __label__ = 3; break;
      case 3: // $28
        var $29=HEAP[$i];
        var $30=((($29) + 1)&4294967295);
        HEAP[$i]=$30;
        __label__ = 1; break;
      case 4: // $31
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaX_token2str($ls, $token) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$ls;
        HEAP[$3]=$token;
        var $4=HEAP[$3];
        var $5=((($4))|0) < 257;
        if ($5) { __label__ = 1; break; } else { __label__ = 5; break; }
      case 1: // $6
        var $7=HEAP[$3];
        var $8=___ctype_b_loc();
        var $9=HEAP[$8];
        var $10=(($9+2*$7)&4294967295);
        var $11=HEAP[$10];
        var $12=unSign(($11), 16, 0);
        var $13=($12) & 2;
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        var $16=HEAP[$2];
        var $17=(($16+40)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$3];
        var $20=_luaO_pushfstring($18, ((__str31281)&4294967295), allocate([$19,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $21
        var $22=HEAP[$2];
        var $23=(($22+40)&4294967295);
        var $24=HEAP[$23];
        var $25=HEAP[$3];
        var $26=_luaO_pushfstring($24, ((__str32282)&4294967295), allocate([$25,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $27
        var $28=__lastLabel__ == 2 ? $20 : ($26);
        HEAP[$1]=$28;
        __label__ = 6; break;
      case 5: // $29
        var $30=HEAP[$3];
        var $31=((($30) - 257)&4294967295);
        var $32=((_luaX_tokens+$31*4)&4294967295);
        var $33=HEAP[$32];
        HEAP[$1]=$33;
        __label__ = 6; break;
      case 6: // $34
        var $35=HEAP[$1];
        STACKTOP = __stackBase__;
        return $35;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaX_lexerror($ls, $msg, $token) {
    var __stackBase__  = STACKTOP; STACKTOP += 92; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 92);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $buff=__stackBase__+12;
        HEAP[$1]=$ls;
        HEAP[$2]=$msg;
        HEAP[$3]=$token;
        var $4=(($buff)&4294967295);
        var $5=HEAP[$1];
        var $6=(($5+52)&4294967295);
        var $7=HEAP[$6];
        var $8=(($7+16)&4294967295);
        var $9=$8;
        _luaO_chunkid($4, $9, 80);
        var $10=HEAP[$1];
        var $11=(($10+40)&4294967295);
        var $12=HEAP[$11];
        var $13=(($buff)&4294967295);
        var $14=HEAP[$1];
        var $15=(($14+4)&4294967295);
        var $16=HEAP[$15];
        var $17=HEAP[$2];
        var $18=_luaO_pushfstring($12, ((__str33283)&4294967295), allocate([$13,0,0,0,$16,0,0,0,$17,0,0,0], ["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        HEAP[$2]=$18;
        var $19=HEAP[$3];
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $21
        var $22=HEAP[$1];
        var $23=(($22+40)&4294967295);
        var $24=HEAP[$23];
        var $25=HEAP[$2];
        var $26=HEAP[$1];
        var $27=HEAP[$3];
        var $28=_txtToken($26, $27);
        var $29=_luaO_pushfstring($24, ((__str34284)&4294967295), allocate([$25,0,0,0,$28,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $30
        var $31=HEAP[$1];
        var $32=(($31+40)&4294967295);
        var $33=HEAP[$32];
        _luaD_throw($33, 3);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _txtToken($ls, $token) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$ls;
        HEAP[$3]=$token;
        var $4=HEAP[$3];
        if ($4 == 285) {
          __label__ = 1; break;
        }
        else if ($4 == 286) {
          __label__ = 1; break;
        }
        else if ($4 == 284) {
          __label__ = 1; break;
        }
        else {
        __label__ = 2; break;
        }
        
      case 1: // $5
        var $6=HEAP[$2];
        _save($6, 0);
        var $7=HEAP[$2];
        var $8=(($7+48)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        HEAP[$1]=$11;
        __label__ = 3; break;
      case 2: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$3];
        var $15=_luaX_token2str($13, $14);
        HEAP[$1]=$15;
        __label__ = 3; break;
      case 3: // $16
        var $17=HEAP[$1];
        STACKTOP = __stackBase__;
        return $17;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaX_syntaxerror($ls, $msg) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$ls;
    HEAP[$2]=$msg;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=HEAP[$1];
    var $6=(($5+12)&4294967295);
    var $7=(($6)&4294967295);
    var $8=HEAP[$7];
    _luaX_lexerror($3, $4, $8);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaX_newstring($ls, $str, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $L=__stackBase__+12;
        var $ts=__stackBase__+16;
        var $o=__stackBase__+20;
        var $i_o=__stackBase__+24;
        HEAP[$1]=$ls;
        HEAP[$2]=$str;
        HEAP[$3]=$l;
        var $4=HEAP[$1];
        var $5=(($4+40)&4294967295);
        var $6=HEAP[$5];
        HEAP[$L]=$6;
        var $7=HEAP[$L];
        var $8=HEAP[$2];
        var $9=HEAP[$3];
        var $10=_luaS_newlstr($7, $8, $9);
        HEAP[$ts]=$10;
        var $11=HEAP[$L];
        var $12=HEAP[$1];
        var $13=(($12+36)&4294967295);
        var $14=HEAP[$13];
        var $15=(($14+4)&4294967295);
        var $16=HEAP[$15];
        var $17=HEAP[$ts];
        var $18=_luaH_setstr($11, $16, $17);
        HEAP[$o]=$18;
        var $19=HEAP[$o];
        var $20=(($19+8)&4294967295);
        var $21=HEAP[$20];
        var $22=((($21))|0)==0;
        if ($22) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $23
        var $24=HEAP[$o];
        HEAP[$i_o]=$24;
        var $25=HEAP[$i_o];
        var $26=(($25)&4294967295);
        var $27=$26;
        HEAP[$27]=1;
        var $28=HEAP[$i_o];
        var $29=(($28+8)&4294967295);
        HEAP[$29]=1;
        __label__ = 2; break;
      case 2: // $30
        var $31=HEAP[$ts];
        STACKTOP = __stackBase__;
        return $31;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaX_setinput($L, $ls, $z, $source) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$ls;
        HEAP[$3]=$z;
        HEAP[$4]=$source;
        var $5=HEAP[$2];
        var $6=(($5+56)&4294967295);
        HEAP[$6]=46;
        var $7=HEAP[$1];
        var $8=HEAP[$2];
        var $9=(($8+40)&4294967295);
        HEAP[$9]=$7;
        var $10=HEAP[$2];
        var $11=(($10+24)&4294967295);
        var $12=(($11)&4294967295);
        HEAP[$12]=287;
        var $13=HEAP[$3];
        var $14=HEAP[$2];
        var $15=(($14+44)&4294967295);
        HEAP[$15]=$13;
        var $16=HEAP[$2];
        var $17=(($16+36)&4294967295);
        HEAP[$17]=0;
        var $18=HEAP[$2];
        var $19=(($18+4)&4294967295);
        HEAP[$19]=1;
        var $20=HEAP[$2];
        var $21=(($20+8)&4294967295);
        HEAP[$21]=1;
        var $22=HEAP[$4];
        var $23=HEAP[$2];
        var $24=(($23+52)&4294967295);
        HEAP[$24]=$22;
        var $25=HEAP[$2];
        var $26=(($25+40)&4294967295);
        var $27=HEAP[$26];
        var $28=HEAP[$2];
        var $29=(($28+48)&4294967295);
        var $30=HEAP[$29];
        var $31=(($30)&4294967295);
        var $32=HEAP[$31];
        var $33=HEAP[$2];
        var $34=(($33+48)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+8)&4294967295);
        var $37=HEAP[$36];
        var $38=((($37) * 1)&4294967295);
        var $39=_luaM_realloc_($27, $32, $38, 32);
        var $40=HEAP[$2];
        var $41=(($40+48)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42)&4294967295);
        HEAP[$43]=$39;
        var $44=HEAP[$2];
        var $45=(($44+48)&4294967295);
        var $46=HEAP[$45];
        var $47=(($46+8)&4294967295);
        HEAP[$47]=32;
        var $48=HEAP[$2];
        var $49=(($48+44)&4294967295);
        var $50=HEAP[$49];
        var $51=(($50)&4294967295);
        var $52=HEAP[$51];
        var $53=((($52) + -1)&4294967295);
        HEAP[$51]=$53;
        var $54=((($52))>>>0) > 0;
        if ($54) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $55
        var $56=HEAP[$2];
        var $57=(($56+44)&4294967295);
        var $58=HEAP[$57];
        var $59=(($58+4)&4294967295);
        var $60=HEAP[$59];
        var $61=(($60+1)&4294967295);
        HEAP[$59]=$61;
        var $62=HEAP[$60];
        var $63=unSign(($62), 8, 0);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $64
        var $65=HEAP[$2];
        var $66=(($65+44)&4294967295);
        var $67=HEAP[$66];
        var $68=_luaZ_fill($67);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $69
        var $70=__lastLabel__ == 1 ? $63 : ($68);
        var $71=HEAP[$2];
        var $72=(($71)&4294967295);
        HEAP[$72]=$70;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaX_next($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        var $3=(($2+4)&4294967295);
        var $4=HEAP[$3];
        var $5=HEAP[$1];
        var $6=(($5+8)&4294967295);
        HEAP[$6]=$4;
        var $7=HEAP[$1];
        var $8=(($7+24)&4294967295);
        var $9=(($8)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10))|0)!=287;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$1];
        var $14=(($13+12)&4294967295);
        var $15=HEAP[$1];
        var $16=(($15+24)&4294967295);
        var $17=$14;
        var $18=$16;
        _llvm_memcpy_p0i8_p0i8_i32($17, $18, 12, 4, 0);
        var $19=HEAP[$1];
        var $20=(($19+24)&4294967295);
        var $21=(($20)&4294967295);
        HEAP[$21]=287;
        __label__ = 3; break;
      case 2: // $22
        var $23=HEAP[$1];
        var $24=HEAP[$1];
        var $25=(($24+12)&4294967295);
        var $26=(($25+4)&4294967295);
        var $27=_llex($23, $26);
        var $28=HEAP[$1];
        var $29=(($28+12)&4294967295);
        var $30=(($29)&4294967295);
        HEAP[$30]=$27;
        __label__ = 3; break;
      case 3: // $31
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _llex($ls, $seminfo) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $sep=__stackBase__+12;
        var $sep1=__stackBase__+16;
        var $ts=__stackBase__+20;
        var $c=__stackBase__+24;
        HEAP[$2]=$ls;
        HEAP[$3]=$seminfo;
        var $4=HEAP[$2];
        var $5=(($4+48)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+4)&4294967295);
        HEAP[$7]=0;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$2];
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        if ($11 == 10) {
          __label__ = 2; break;
        }
        else if ($11 == 13) {
          __label__ = 2; break;
        }
        else if ($11 == 45) {
          __label__ = 3; break;
        }
        else if ($11 == 91) {
          __label__ = 25; break;
        }
        else if ($11 == 61) {
          __label__ = 32; break;
        }
        else if ($11 == 60) {
          __label__ = 41; break;
        }
        else if ($11 == 62) {
          __label__ = 50; break;
        }
        else if ($11 == 126) {
          __label__ = 59; break;
        }
        else if ($11 == 34) {
          __label__ = 68; break;
        }
        else if ($11 == 39) {
          __label__ = 68; break;
        }
        else if ($11 == 46) {
          __label__ = 69; break;
        }
        else if ($11 == -1) {
          __label__ = 79; break;
        }
        else {
        __label__ = 80; break;
        }
        
      case 2: // $12
        var $13=HEAP[$2];
        _inclinenumber($13);
        __label__ = 1; break;
      case 3: // $14
        var $15=HEAP[$2];
        var $16=(($15+44)&4294967295);
        var $17=HEAP[$16];
        var $18=(($17)&4294967295);
        var $19=HEAP[$18];
        var $20=((($19) + -1)&4294967295);
        HEAP[$18]=$20;
        var $21=((($19))>>>0) > 0;
        if ($21) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $22
        var $23=HEAP[$2];
        var $24=(($23+44)&4294967295);
        var $25=HEAP[$24];
        var $26=(($25+4)&4294967295);
        var $27=HEAP[$26];
        var $28=(($27+1)&4294967295);
        HEAP[$26]=$28;
        var $29=HEAP[$27];
        var $30=unSign(($29), 8, 0);
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $31
        var $32=HEAP[$2];
        var $33=(($32+44)&4294967295);
        var $34=HEAP[$33];
        var $35=_luaZ_fill($34);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $36
        var $37=__lastLabel__ == 4 ? $30 : ($35);
        var $38=HEAP[$2];
        var $39=(($38)&4294967295);
        HEAP[$39]=$37;
        var $40=HEAP[$2];
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        var $43=((($42))|0)!=45;
        if ($43) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $44
        HEAP[$1]=45;
        __label__ = 104; break;
      case 8: // $45
        var $46=HEAP[$2];
        var $47=(($46+44)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48)&4294967295);
        var $50=HEAP[$49];
        var $51=((($50) + -1)&4294967295);
        HEAP[$49]=$51;
        var $52=((($50))>>>0) > 0;
        if ($52) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $53
        var $54=HEAP[$2];
        var $55=(($54+44)&4294967295);
        var $56=HEAP[$55];
        var $57=(($56+4)&4294967295);
        var $58=HEAP[$57];
        var $59=(($58+1)&4294967295);
        HEAP[$57]=$59;
        var $60=HEAP[$58];
        var $61=unSign(($60), 8, 0);
        __lastLabel__ = 9; __label__ = 11; break;
      case 10: // $62
        var $63=HEAP[$2];
        var $64=(($63+44)&4294967295);
        var $65=HEAP[$64];
        var $66=_luaZ_fill($65);
        __lastLabel__ = 10; __label__ = 11; break;
      case 11: // $67
        var $68=__lastLabel__ == 9 ? $61 : ($66);
        var $69=HEAP[$2];
        var $70=(($69)&4294967295);
        HEAP[$70]=$68;
        var $71=HEAP[$2];
        var $72=(($71)&4294967295);
        var $73=HEAP[$72];
        var $74=((($73))|0)==91;
        if ($74) { __label__ = 12; break; } else { __label__ = 15; break; }
      case 12: // $75
        var $76=HEAP[$2];
        var $77=_skip_sep($76);
        HEAP[$sep]=$77;
        var $78=HEAP[$2];
        var $79=(($78+48)&4294967295);
        var $80=HEAP[$79];
        var $81=(($80+4)&4294967295);
        HEAP[$81]=0;
        var $82=HEAP[$sep];
        var $83=((($82))|0) >= 0;
        if ($83) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $84
        var $85=HEAP[$2];
        var $86=HEAP[$sep];
        _read_long_string($85, 0, $86);
        var $87=HEAP[$2];
        var $88=(($87+48)&4294967295);
        var $89=HEAP[$88];
        var $90=(($89+4)&4294967295);
        HEAP[$90]=0;
        __label__ = 1; break;
      case 14: // $91
        __label__ = 15; break;
      case 15: // $92
        __label__ = 16; break;
      case 16: // $93
        var $94=HEAP[$2];
        var $95=(($94)&4294967295);
        var $96=HEAP[$95];
        var $97=((($96))|0)==10;
        if ($97) { __lastLabel__ = 16; __label__ = 19; break; } else { __lastLabel__ = 16; __label__ = 17; break; }
      case 17: // $98
        var $99=HEAP[$2];
        var $100=(($99)&4294967295);
        var $101=HEAP[$100];
        var $102=((($101))|0)==13;
        if ($102) { __lastLabel__ = 17; __label__ = 19; break; } else { __lastLabel__ = 17; __label__ = 18; break; }
      case 18: // $103
        var $104=HEAP[$2];
        var $105=(($104)&4294967295);
        var $106=HEAP[$105];
        var $107=((($106))|0)!=-1;
        __lastLabel__ = 18; __label__ = 19; break;
      case 19: // $108
        var $109=__lastLabel__ == 17 ? 0 : (__lastLabel__ == 16 ? 0 : ($107));
        if ($109) { __label__ = 20; break; } else { __label__ = 24; break; }
      case 20: // $110
        var $111=HEAP[$2];
        var $112=(($111+44)&4294967295);
        var $113=HEAP[$112];
        var $114=(($113)&4294967295);
        var $115=HEAP[$114];
        var $116=((($115) + -1)&4294967295);
        HEAP[$114]=$116;
        var $117=((($115))>>>0) > 0;
        if ($117) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $118
        var $119=HEAP[$2];
        var $120=(($119+44)&4294967295);
        var $121=HEAP[$120];
        var $122=(($121+4)&4294967295);
        var $123=HEAP[$122];
        var $124=(($123+1)&4294967295);
        HEAP[$122]=$124;
        var $125=HEAP[$123];
        var $126=unSign(($125), 8, 0);
        __lastLabel__ = 21; __label__ = 23; break;
      case 22: // $127
        var $128=HEAP[$2];
        var $129=(($128+44)&4294967295);
        var $130=HEAP[$129];
        var $131=_luaZ_fill($130);
        __lastLabel__ = 22; __label__ = 23; break;
      case 23: // $132
        var $133=__lastLabel__ == 21 ? $126 : ($131);
        var $134=HEAP[$2];
        var $135=(($134)&4294967295);
        HEAP[$135]=$133;
        __label__ = 16; break;
      case 24: // $136
        __label__ = 1; break;
      case 25: // $137
        var $138=HEAP[$2];
        var $139=_skip_sep($138);
        HEAP[$sep1]=$139;
        var $140=HEAP[$sep1];
        var $141=((($140))|0) >= 0;
        if ($141) { __label__ = 26; break; } else { __label__ = 27; break; }
      case 26: // $142
        var $143=HEAP[$2];
        var $144=HEAP[$3];
        var $145=HEAP[$sep1];
        _read_long_string($143, $144, $145);
        HEAP[$1]=286;
        __label__ = 104; break;
      case 27: // $146
        var $147=HEAP[$sep1];
        var $148=((($147))|0)==-1;
        if ($148) { __label__ = 28; break; } else { __label__ = 29; break; }
      case 28: // $149
        HEAP[$1]=91;
        __label__ = 104; break;
      case 29: // $150
        var $151=HEAP[$2];
        _luaX_lexerror($151, ((__str35285)&4294967295), 286);
        __label__ = 30; break;
      case 30: // $152
        __label__ = 31; break;
      case 31: // $153
        __label__ = 32; break;
      case 32: // $154
        var $155=HEAP[$2];
        var $156=(($155+44)&4294967295);
        var $157=HEAP[$156];
        var $158=(($157)&4294967295);
        var $159=HEAP[$158];
        var $160=((($159) + -1)&4294967295);
        HEAP[$158]=$160;
        var $161=((($159))>>>0) > 0;
        if ($161) { __label__ = 33; break; } else { __label__ = 34; break; }
      case 33: // $162
        var $163=HEAP[$2];
        var $164=(($163+44)&4294967295);
        var $165=HEAP[$164];
        var $166=(($165+4)&4294967295);
        var $167=HEAP[$166];
        var $168=(($167+1)&4294967295);
        HEAP[$166]=$168;
        var $169=HEAP[$167];
        var $170=unSign(($169), 8, 0);
        __lastLabel__ = 33; __label__ = 35; break;
      case 34: // $171
        var $172=HEAP[$2];
        var $173=(($172+44)&4294967295);
        var $174=HEAP[$173];
        var $175=_luaZ_fill($174);
        __lastLabel__ = 34; __label__ = 35; break;
      case 35: // $176
        var $177=__lastLabel__ == 33 ? $170 : ($175);
        var $178=HEAP[$2];
        var $179=(($178)&4294967295);
        HEAP[$179]=$177;
        var $180=HEAP[$2];
        var $181=(($180)&4294967295);
        var $182=HEAP[$181];
        var $183=((($182))|0)!=61;
        if ($183) { __label__ = 36; break; } else { __label__ = 37; break; }
      case 36: // $184
        HEAP[$1]=61;
        __label__ = 104; break;
      case 37: // $185
        var $186=HEAP[$2];
        var $187=(($186+44)&4294967295);
        var $188=HEAP[$187];
        var $189=(($188)&4294967295);
        var $190=HEAP[$189];
        var $191=((($190) + -1)&4294967295);
        HEAP[$189]=$191;
        var $192=((($190))>>>0) > 0;
        if ($192) { __label__ = 38; break; } else { __label__ = 39; break; }
      case 38: // $193
        var $194=HEAP[$2];
        var $195=(($194+44)&4294967295);
        var $196=HEAP[$195];
        var $197=(($196+4)&4294967295);
        var $198=HEAP[$197];
        var $199=(($198+1)&4294967295);
        HEAP[$197]=$199;
        var $200=HEAP[$198];
        var $201=unSign(($200), 8, 0);
        __lastLabel__ = 38; __label__ = 40; break;
      case 39: // $202
        var $203=HEAP[$2];
        var $204=(($203+44)&4294967295);
        var $205=HEAP[$204];
        var $206=_luaZ_fill($205);
        __lastLabel__ = 39; __label__ = 40; break;
      case 40: // $207
        var $208=__lastLabel__ == 38 ? $201 : ($206);
        var $209=HEAP[$2];
        var $210=(($209)&4294967295);
        HEAP[$210]=$208;
        HEAP[$1]=280;
        __label__ = 104; break;
      case 41: // $211
        var $212=HEAP[$2];
        var $213=(($212+44)&4294967295);
        var $214=HEAP[$213];
        var $215=(($214)&4294967295);
        var $216=HEAP[$215];
        var $217=((($216) + -1)&4294967295);
        HEAP[$215]=$217;
        var $218=((($216))>>>0) > 0;
        if ($218) { __label__ = 42; break; } else { __label__ = 43; break; }
      case 42: // $219
        var $220=HEAP[$2];
        var $221=(($220+44)&4294967295);
        var $222=HEAP[$221];
        var $223=(($222+4)&4294967295);
        var $224=HEAP[$223];
        var $225=(($224+1)&4294967295);
        HEAP[$223]=$225;
        var $226=HEAP[$224];
        var $227=unSign(($226), 8, 0);
        __lastLabel__ = 42; __label__ = 44; break;
      case 43: // $228
        var $229=HEAP[$2];
        var $230=(($229+44)&4294967295);
        var $231=HEAP[$230];
        var $232=_luaZ_fill($231);
        __lastLabel__ = 43; __label__ = 44; break;
      case 44: // $233
        var $234=__lastLabel__ == 42 ? $227 : ($232);
        var $235=HEAP[$2];
        var $236=(($235)&4294967295);
        HEAP[$236]=$234;
        var $237=HEAP[$2];
        var $238=(($237)&4294967295);
        var $239=HEAP[$238];
        var $240=((($239))|0)!=61;
        if ($240) { __label__ = 45; break; } else { __label__ = 46; break; }
      case 45: // $241
        HEAP[$1]=60;
        __label__ = 104; break;
      case 46: // $242
        var $243=HEAP[$2];
        var $244=(($243+44)&4294967295);
        var $245=HEAP[$244];
        var $246=(($245)&4294967295);
        var $247=HEAP[$246];
        var $248=((($247) + -1)&4294967295);
        HEAP[$246]=$248;
        var $249=((($247))>>>0) > 0;
        if ($249) { __label__ = 47; break; } else { __label__ = 48; break; }
      case 47: // $250
        var $251=HEAP[$2];
        var $252=(($251+44)&4294967295);
        var $253=HEAP[$252];
        var $254=(($253+4)&4294967295);
        var $255=HEAP[$254];
        var $256=(($255+1)&4294967295);
        HEAP[$254]=$256;
        var $257=HEAP[$255];
        var $258=unSign(($257), 8, 0);
        __lastLabel__ = 47; __label__ = 49; break;
      case 48: // $259
        var $260=HEAP[$2];
        var $261=(($260+44)&4294967295);
        var $262=HEAP[$261];
        var $263=_luaZ_fill($262);
        __lastLabel__ = 48; __label__ = 49; break;
      case 49: // $264
        var $265=__lastLabel__ == 47 ? $258 : ($263);
        var $266=HEAP[$2];
        var $267=(($266)&4294967295);
        HEAP[$267]=$265;
        HEAP[$1]=282;
        __label__ = 104; break;
      case 50: // $268
        var $269=HEAP[$2];
        var $270=(($269+44)&4294967295);
        var $271=HEAP[$270];
        var $272=(($271)&4294967295);
        var $273=HEAP[$272];
        var $274=((($273) + -1)&4294967295);
        HEAP[$272]=$274;
        var $275=((($273))>>>0) > 0;
        if ($275) { __label__ = 51; break; } else { __label__ = 52; break; }
      case 51: // $276
        var $277=HEAP[$2];
        var $278=(($277+44)&4294967295);
        var $279=HEAP[$278];
        var $280=(($279+4)&4294967295);
        var $281=HEAP[$280];
        var $282=(($281+1)&4294967295);
        HEAP[$280]=$282;
        var $283=HEAP[$281];
        var $284=unSign(($283), 8, 0);
        __lastLabel__ = 51; __label__ = 53; break;
      case 52: // $285
        var $286=HEAP[$2];
        var $287=(($286+44)&4294967295);
        var $288=HEAP[$287];
        var $289=_luaZ_fill($288);
        __lastLabel__ = 52; __label__ = 53; break;
      case 53: // $290
        var $291=__lastLabel__ == 51 ? $284 : ($289);
        var $292=HEAP[$2];
        var $293=(($292)&4294967295);
        HEAP[$293]=$291;
        var $294=HEAP[$2];
        var $295=(($294)&4294967295);
        var $296=HEAP[$295];
        var $297=((($296))|0)!=61;
        if ($297) { __label__ = 54; break; } else { __label__ = 55; break; }
      case 54: // $298
        HEAP[$1]=62;
        __label__ = 104; break;
      case 55: // $299
        var $300=HEAP[$2];
        var $301=(($300+44)&4294967295);
        var $302=HEAP[$301];
        var $303=(($302)&4294967295);
        var $304=HEAP[$303];
        var $305=((($304) + -1)&4294967295);
        HEAP[$303]=$305;
        var $306=((($304))>>>0) > 0;
        if ($306) { __label__ = 56; break; } else { __label__ = 57; break; }
      case 56: // $307
        var $308=HEAP[$2];
        var $309=(($308+44)&4294967295);
        var $310=HEAP[$309];
        var $311=(($310+4)&4294967295);
        var $312=HEAP[$311];
        var $313=(($312+1)&4294967295);
        HEAP[$311]=$313;
        var $314=HEAP[$312];
        var $315=unSign(($314), 8, 0);
        __lastLabel__ = 56; __label__ = 58; break;
      case 57: // $316
        var $317=HEAP[$2];
        var $318=(($317+44)&4294967295);
        var $319=HEAP[$318];
        var $320=_luaZ_fill($319);
        __lastLabel__ = 57; __label__ = 58; break;
      case 58: // $321
        var $322=__lastLabel__ == 56 ? $315 : ($320);
        var $323=HEAP[$2];
        var $324=(($323)&4294967295);
        HEAP[$324]=$322;
        HEAP[$1]=281;
        __label__ = 104; break;
      case 59: // $325
        var $326=HEAP[$2];
        var $327=(($326+44)&4294967295);
        var $328=HEAP[$327];
        var $329=(($328)&4294967295);
        var $330=HEAP[$329];
        var $331=((($330) + -1)&4294967295);
        HEAP[$329]=$331;
        var $332=((($330))>>>0) > 0;
        if ($332) { __label__ = 60; break; } else { __label__ = 61; break; }
      case 60: // $333
        var $334=HEAP[$2];
        var $335=(($334+44)&4294967295);
        var $336=HEAP[$335];
        var $337=(($336+4)&4294967295);
        var $338=HEAP[$337];
        var $339=(($338+1)&4294967295);
        HEAP[$337]=$339;
        var $340=HEAP[$338];
        var $341=unSign(($340), 8, 0);
        __lastLabel__ = 60; __label__ = 62; break;
      case 61: // $342
        var $343=HEAP[$2];
        var $344=(($343+44)&4294967295);
        var $345=HEAP[$344];
        var $346=_luaZ_fill($345);
        __lastLabel__ = 61; __label__ = 62; break;
      case 62: // $347
        var $348=__lastLabel__ == 60 ? $341 : ($346);
        var $349=HEAP[$2];
        var $350=(($349)&4294967295);
        HEAP[$350]=$348;
        var $351=HEAP[$2];
        var $352=(($351)&4294967295);
        var $353=HEAP[$352];
        var $354=((($353))|0)!=61;
        if ($354) { __label__ = 63; break; } else { __label__ = 64; break; }
      case 63: // $355
        HEAP[$1]=126;
        __label__ = 104; break;
      case 64: // $356
        var $357=HEAP[$2];
        var $358=(($357+44)&4294967295);
        var $359=HEAP[$358];
        var $360=(($359)&4294967295);
        var $361=HEAP[$360];
        var $362=((($361) + -1)&4294967295);
        HEAP[$360]=$362;
        var $363=((($361))>>>0) > 0;
        if ($363) { __label__ = 65; break; } else { __label__ = 66; break; }
      case 65: // $364
        var $365=HEAP[$2];
        var $366=(($365+44)&4294967295);
        var $367=HEAP[$366];
        var $368=(($367+4)&4294967295);
        var $369=HEAP[$368];
        var $370=(($369+1)&4294967295);
        HEAP[$368]=$370;
        var $371=HEAP[$369];
        var $372=unSign(($371), 8, 0);
        __lastLabel__ = 65; __label__ = 67; break;
      case 66: // $373
        var $374=HEAP[$2];
        var $375=(($374+44)&4294967295);
        var $376=HEAP[$375];
        var $377=_luaZ_fill($376);
        __lastLabel__ = 66; __label__ = 67; break;
      case 67: // $378
        var $379=__lastLabel__ == 65 ? $372 : ($377);
        var $380=HEAP[$2];
        var $381=(($380)&4294967295);
        HEAP[$381]=$379;
        HEAP[$1]=283;
        __label__ = 104; break;
      case 68: // $382
        var $383=HEAP[$2];
        var $384=HEAP[$2];
        var $385=(($384)&4294967295);
        var $386=HEAP[$385];
        var $387=HEAP[$3];
        _read_string($383, $386, $387);
        HEAP[$1]=286;
        __label__ = 104; break;
      case 69: // $388
        var $389=HEAP[$2];
        var $390=HEAP[$2];
        var $391=(($390)&4294967295);
        var $392=HEAP[$391];
        _save($389, $392);
        var $393=HEAP[$2];
        var $394=(($393+44)&4294967295);
        var $395=HEAP[$394];
        var $396=(($395)&4294967295);
        var $397=HEAP[$396];
        var $398=((($397) + -1)&4294967295);
        HEAP[$396]=$398;
        var $399=((($397))>>>0) > 0;
        if ($399) { __label__ = 70; break; } else { __label__ = 71; break; }
      case 70: // $400
        var $401=HEAP[$2];
        var $402=(($401+44)&4294967295);
        var $403=HEAP[$402];
        var $404=(($403+4)&4294967295);
        var $405=HEAP[$404];
        var $406=(($405+1)&4294967295);
        HEAP[$404]=$406;
        var $407=HEAP[$405];
        var $408=unSign(($407), 8, 0);
        __lastLabel__ = 70; __label__ = 72; break;
      case 71: // $409
        var $410=HEAP[$2];
        var $411=(($410+44)&4294967295);
        var $412=HEAP[$411];
        var $413=_luaZ_fill($412);
        __lastLabel__ = 71; __label__ = 72; break;
      case 72: // $414
        var $415=__lastLabel__ == 70 ? $408 : ($413);
        var $416=HEAP[$2];
        var $417=(($416)&4294967295);
        HEAP[$417]=$415;
        var $418=HEAP[$2];
        var $419=_check_next($418, ((__str36286)&4294967295));
        var $420=((($419))|0)!=0;
        if ($420) { __label__ = 73; break; } else { __label__ = 76; break; }
      case 73: // $421
        var $422=HEAP[$2];
        var $423=_check_next($422, ((__str36286)&4294967295));
        var $424=((($423))|0)!=0;
        if ($424) { __label__ = 74; break; } else { __label__ = 75; break; }
      case 74: // $425
        HEAP[$1]=279;
        __label__ = 104; break;
      case 75: // $426
        HEAP[$1]=278;
        __label__ = 104; break;
      case 76: // $427
        var $428=HEAP[$2];
        var $429=(($428)&4294967295);
        var $430=HEAP[$429];
        var $431=___ctype_b_loc();
        var $432=HEAP[$431];
        var $433=(($432+2*$430)&4294967295);
        var $434=HEAP[$433];
        var $435=unSign(($434), 16, 0);
        var $436=($435) & 2048;
        var $437=((($436))|0)!=0;
        if ($437) { __label__ = 78; break; } else { __label__ = 77; break; }
      case 77: // $438
        HEAP[$1]=46;
        __label__ = 104; break;
      case 78: // $439
        var $440=HEAP[$2];
        var $441=HEAP[$3];
        _read_numeral($440, $441);
        HEAP[$1]=284;
        __label__ = 104; break;
      case 79: // $442
        HEAP[$1]=287;
        __label__ = 104; break;
      case 80: // $443
        var $444=HEAP[$2];
        var $445=(($444)&4294967295);
        var $446=HEAP[$445];
        var $447=___ctype_b_loc();
        var $448=HEAP[$447];
        var $449=(($448+2*$446)&4294967295);
        var $450=HEAP[$449];
        var $451=unSign(($450), 16, 0);
        var $452=($451) & 8192;
        var $453=((($452))|0)!=0;
        if ($453) { __label__ = 81; break; } else { __label__ = 85; break; }
      case 81: // $454
        var $455=HEAP[$2];
        var $456=(($455+44)&4294967295);
        var $457=HEAP[$456];
        var $458=(($457)&4294967295);
        var $459=HEAP[$458];
        var $460=((($459) + -1)&4294967295);
        HEAP[$458]=$460;
        var $461=((($459))>>>0) > 0;
        if ($461) { __label__ = 82; break; } else { __label__ = 83; break; }
      case 82: // $462
        var $463=HEAP[$2];
        var $464=(($463+44)&4294967295);
        var $465=HEAP[$464];
        var $466=(($465+4)&4294967295);
        var $467=HEAP[$466];
        var $468=(($467+1)&4294967295);
        HEAP[$466]=$468;
        var $469=HEAP[$467];
        var $470=unSign(($469), 8, 0);
        __lastLabel__ = 82; __label__ = 84; break;
      case 83: // $471
        var $472=HEAP[$2];
        var $473=(($472+44)&4294967295);
        var $474=HEAP[$473];
        var $475=_luaZ_fill($474);
        __lastLabel__ = 83; __label__ = 84; break;
      case 84: // $476
        var $477=__lastLabel__ == 82 ? $470 : ($475);
        var $478=HEAP[$2];
        var $479=(($478)&4294967295);
        HEAP[$479]=$477;
        __label__ = 1; break;
      case 85: // $480
        var $481=HEAP[$2];
        var $482=(($481)&4294967295);
        var $483=HEAP[$482];
        var $484=___ctype_b_loc();
        var $485=HEAP[$484];
        var $486=(($485+2*$483)&4294967295);
        var $487=HEAP[$486];
        var $488=unSign(($487), 16, 0);
        var $489=($488) & 2048;
        var $490=((($489))|0)!=0;
        if ($490) { __label__ = 86; break; } else { __label__ = 87; break; }
      case 86: // $491
        var $492=HEAP[$2];
        var $493=HEAP[$3];
        _read_numeral($492, $493);
        HEAP[$1]=284;
        __label__ = 104; break;
      case 87: // $494
        var $495=HEAP[$2];
        var $496=(($495)&4294967295);
        var $497=HEAP[$496];
        var $498=___ctype_b_loc();
        var $499=HEAP[$498];
        var $500=(($499+2*$497)&4294967295);
        var $501=HEAP[$500];
        var $502=unSign(($501), 16, 0);
        var $503=($502) & 1024;
        var $504=((($503))|0)!=0;
        if ($504) { __label__ = 89; break; } else { __label__ = 88; break; }
      case 88: // $505
        var $506=HEAP[$2];
        var $507=(($506)&4294967295);
        var $508=HEAP[$507];
        var $509=((($508))|0)==95;
        if ($509) { __label__ = 89; break; } else { __label__ = 100; break; }
      case 89: // $510
        __label__ = 90; break;
      case 90: // $511
        var $512=HEAP[$2];
        var $513=HEAP[$2];
        var $514=(($513)&4294967295);
        var $515=HEAP[$514];
        _save($512, $515);
        var $516=HEAP[$2];
        var $517=(($516+44)&4294967295);
        var $518=HEAP[$517];
        var $519=(($518)&4294967295);
        var $520=HEAP[$519];
        var $521=((($520) + -1)&4294967295);
        HEAP[$519]=$521;
        var $522=((($520))>>>0) > 0;
        if ($522) { __label__ = 91; break; } else { __label__ = 92; break; }
      case 91: // $523
        var $524=HEAP[$2];
        var $525=(($524+44)&4294967295);
        var $526=HEAP[$525];
        var $527=(($526+4)&4294967295);
        var $528=HEAP[$527];
        var $529=(($528+1)&4294967295);
        HEAP[$527]=$529;
        var $530=HEAP[$528];
        var $531=unSign(($530), 8, 0);
        __lastLabel__ = 91; __label__ = 93; break;
      case 92: // $532
        var $533=HEAP[$2];
        var $534=(($533+44)&4294967295);
        var $535=HEAP[$534];
        var $536=_luaZ_fill($535);
        __lastLabel__ = 92; __label__ = 93; break;
      case 93: // $537
        var $538=__lastLabel__ == 91 ? $531 : ($536);
        var $539=HEAP[$2];
        var $540=(($539)&4294967295);
        HEAP[$540]=$538;
        __label__ = 94; break;
      case 94: // $541
        var $542=HEAP[$2];
        var $543=(($542)&4294967295);
        var $544=HEAP[$543];
        var $545=___ctype_b_loc();
        var $546=HEAP[$545];
        var $547=(($546+2*$544)&4294967295);
        var $548=HEAP[$547];
        var $549=unSign(($548), 16, 0);
        var $550=($549) & 8;
        var $551=((($550))|0)!=0;
        if ($551) { __lastLabel__ = 94; __label__ = 96; break; } else { __lastLabel__ = 94; __label__ = 95; break; }
      case 95: // $552
        var $553=HEAP[$2];
        var $554=(($553)&4294967295);
        var $555=HEAP[$554];
        var $556=((($555))|0)==95;
        __lastLabel__ = 95; __label__ = 96; break;
      case 96: // $557
        var $558=__lastLabel__ == 94 ? 1 : ($556);
        if ($558) { __label__ = 90; break; } else { __label__ = 97; break; }
      case 97: // $559
        var $560=HEAP[$2];
        var $561=HEAP[$2];
        var $562=(($561+48)&4294967295);
        var $563=HEAP[$562];
        var $564=(($563)&4294967295);
        var $565=HEAP[$564];
        var $566=HEAP[$2];
        var $567=(($566+48)&4294967295);
        var $568=HEAP[$567];
        var $569=(($568+4)&4294967295);
        var $570=HEAP[$569];
        var $571=_luaX_newstring($560, $565, $570);
        HEAP[$ts]=$571;
        var $572=HEAP[$ts];
        var $573=$572;
        var $574=(($573+6)&4294967295);
        var $575=HEAP[$574];
        var $576=unSign(($575), 8, 0);
        var $577=((($576))|0) > 0;
        if ($577) { __label__ = 98; break; } else { __label__ = 99; break; }
      case 98: // $578
        var $579=HEAP[$ts];
        var $580=$579;
        var $581=(($580+6)&4294967295);
        var $582=HEAP[$581];
        var $583=unSign(($582), 8, 0);
        var $584=((($583) - 1)&4294967295);
        var $585=((($584) + 257)&4294967295);
        HEAP[$1]=$585;
        __label__ = 104; break;
      case 99: // $586
        var $587=HEAP[$ts];
        var $588=HEAP[$3];
        var $589=$588;
        HEAP[$589]=$587;
        HEAP[$1]=285;
        __label__ = 104; break;
      case 100: // $590
        var $591=HEAP[$2];
        var $592=(($591)&4294967295);
        var $593=HEAP[$592];
        HEAP[$c]=$593;
        var $594=HEAP[$2];
        var $595=(($594+44)&4294967295);
        var $596=HEAP[$595];
        var $597=(($596)&4294967295);
        var $598=HEAP[$597];
        var $599=((($598) + -1)&4294967295);
        HEAP[$597]=$599;
        var $600=((($598))>>>0) > 0;
        if ($600) { __label__ = 101; break; } else { __label__ = 102; break; }
      case 101: // $601
        var $602=HEAP[$2];
        var $603=(($602+44)&4294967295);
        var $604=HEAP[$603];
        var $605=(($604+4)&4294967295);
        var $606=HEAP[$605];
        var $607=(($606+1)&4294967295);
        HEAP[$605]=$607;
        var $608=HEAP[$606];
        var $609=unSign(($608), 8, 0);
        __lastLabel__ = 101; __label__ = 103; break;
      case 102: // $610
        var $611=HEAP[$2];
        var $612=(($611+44)&4294967295);
        var $613=HEAP[$612];
        var $614=_luaZ_fill($613);
        __lastLabel__ = 102; __label__ = 103; break;
      case 103: // $615
        var $616=__lastLabel__ == 101 ? $609 : ($614);
        var $617=HEAP[$2];
        var $618=(($617)&4294967295);
        HEAP[$618]=$616;
        var $619=HEAP[$c];
        HEAP[$1]=$619;
        __label__ = 104; break;
      case 104: // $620
        var $621=HEAP[$1];
        STACKTOP = __stackBase__;
        return $621;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaX_lookahead($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$ls;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=(($3+24)&4294967295);
    var $5=(($4+4)&4294967295);
    var $6=_llex($2, $5);
    var $7=HEAP[$1];
    var $8=(($7+24)&4294967295);
    var $9=(($8)&4294967295);
    HEAP[$9]=$6;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _inclinenumber($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $old=__stackBase__+4;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        var $3=(($2)&4294967295);
        var $4=HEAP[$3];
        HEAP[$old]=$4;
        var $5=HEAP[$1];
        var $6=(($5+44)&4294967295);
        var $7=HEAP[$6];
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=((($9) + -1)&4294967295);
        HEAP[$8]=$10;
        var $11=((($9))>>>0) > 0;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$1];
        var $14=(($13+44)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+4)&4294967295);
        var $17=HEAP[$16];
        var $18=(($17+1)&4294967295);
        HEAP[$16]=$18;
        var $19=HEAP[$17];
        var $20=unSign(($19), 8, 0);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $21
        var $22=HEAP[$1];
        var $23=(($22+44)&4294967295);
        var $24=HEAP[$23];
        var $25=_luaZ_fill($24);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $26
        var $27=__lastLabel__ == 1 ? $20 : ($25);
        var $28=HEAP[$1];
        var $29=(($28)&4294967295);
        HEAP[$29]=$27;
        var $30=HEAP[$1];
        var $31=(($30)&4294967295);
        var $32=HEAP[$31];
        var $33=((($32))|0)==10;
        if ($33) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $34
        var $35=HEAP[$1];
        var $36=(($35)&4294967295);
        var $37=HEAP[$36];
        var $38=((($37))|0)==13;
        if ($38) { __label__ = 5; break; } else { __label__ = 10; break; }
      case 5: // $39
        var $40=HEAP[$1];
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        var $43=HEAP[$old];
        var $44=((($42))|0)!=((($43))|0);
        if ($44) { __label__ = 6; break; } else { __label__ = 10; break; }
      case 6: // $45
        var $46=HEAP[$1];
        var $47=(($46+44)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48)&4294967295);
        var $50=HEAP[$49];
        var $51=((($50) + -1)&4294967295);
        HEAP[$49]=$51;
        var $52=((($50))>>>0) > 0;
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $53
        var $54=HEAP[$1];
        var $55=(($54+44)&4294967295);
        var $56=HEAP[$55];
        var $57=(($56+4)&4294967295);
        var $58=HEAP[$57];
        var $59=(($58+1)&4294967295);
        HEAP[$57]=$59;
        var $60=HEAP[$58];
        var $61=unSign(($60), 8, 0);
        __lastLabel__ = 7; __label__ = 9; break;
      case 8: // $62
        var $63=HEAP[$1];
        var $64=(($63+44)&4294967295);
        var $65=HEAP[$64];
        var $66=_luaZ_fill($65);
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $67
        var $68=__lastLabel__ == 7 ? $61 : ($66);
        var $69=HEAP[$1];
        var $70=(($69)&4294967295);
        HEAP[$70]=$68;
        __label__ = 10; break;
      case 10: // $71
        var $72=HEAP[$1];
        var $73=(($72+4)&4294967295);
        var $74=HEAP[$73];
        var $75=((($74) + 1)&4294967295);
        HEAP[$73]=$75;
        var $76=((($75))|0) >= 2147483645;
        if ($76) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $77
        var $78=HEAP[$1];
        _luaX_syntaxerror($78, ((__str46296)&4294967295));
        __label__ = 12; break;
      case 12: // $79
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _skip_sep($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $count=__stackBase__+4;
        var $s=__stackBase__+8;
        HEAP[$1]=$ls;
        HEAP[$count]=0;
        var $2=HEAP[$1];
        var $3=(($2)&4294967295);
        var $4=HEAP[$3];
        HEAP[$s]=$4;
        var $5=HEAP[$1];
        var $6=HEAP[$1];
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        _save($5, $8);
        var $9=HEAP[$1];
        var $10=(($9+44)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13) + -1)&4294967295);
        HEAP[$12]=$14;
        var $15=((($13))>>>0) > 0;
        if ($15) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $16
        var $17=HEAP[$1];
        var $18=(($17+44)&4294967295);
        var $19=HEAP[$18];
        var $20=(($19+4)&4294967295);
        var $21=HEAP[$20];
        var $22=(($21+1)&4294967295);
        HEAP[$20]=$22;
        var $23=HEAP[$21];
        var $24=unSign(($23), 8, 0);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $25
        var $26=HEAP[$1];
        var $27=(($26+44)&4294967295);
        var $28=HEAP[$27];
        var $29=_luaZ_fill($28);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $30
        var $31=__lastLabel__ == 1 ? $24 : ($29);
        var $32=HEAP[$1];
        var $33=(($32)&4294967295);
        HEAP[$33]=$31;
        __label__ = 4; break;
      case 4: // $34
        var $35=HEAP[$1];
        var $36=(($35)&4294967295);
        var $37=HEAP[$36];
        var $38=((($37))|0)==61;
        if ($38) { __label__ = 5; break; } else { __label__ = 9; break; }
      case 5: // $39
        var $40=HEAP[$1];
        var $41=HEAP[$1];
        var $42=(($41)&4294967295);
        var $43=HEAP[$42];
        _save($40, $43);
        var $44=HEAP[$1];
        var $45=(($44+44)&4294967295);
        var $46=HEAP[$45];
        var $47=(($46)&4294967295);
        var $48=HEAP[$47];
        var $49=((($48) + -1)&4294967295);
        HEAP[$47]=$49;
        var $50=((($48))>>>0) > 0;
        if ($50) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $51
        var $52=HEAP[$1];
        var $53=(($52+44)&4294967295);
        var $54=HEAP[$53];
        var $55=(($54+4)&4294967295);
        var $56=HEAP[$55];
        var $57=(($56+1)&4294967295);
        HEAP[$55]=$57;
        var $58=HEAP[$56];
        var $59=unSign(($58), 8, 0);
        __lastLabel__ = 6; __label__ = 8; break;
      case 7: // $60
        var $61=HEAP[$1];
        var $62=(($61+44)&4294967295);
        var $63=HEAP[$62];
        var $64=_luaZ_fill($63);
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $65
        var $66=__lastLabel__ == 6 ? $59 : ($64);
        var $67=HEAP[$1];
        var $68=(($67)&4294967295);
        HEAP[$68]=$66;
        var $69=HEAP[$count];
        var $70=((($69) + 1)&4294967295);
        HEAP[$count]=$70;
        __label__ = 4; break;
      case 9: // $71
        var $72=HEAP[$1];
        var $73=(($72)&4294967295);
        var $74=HEAP[$73];
        var $75=HEAP[$s];
        var $76=((($74))|0)==((($75))|0);
        if ($76) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $77
        var $78=HEAP[$count];
        __lastLabel__ = 10; __label__ = 12; break;
      case 11: // $79
        var $80=HEAP[$count];
        var $81=((0 - ($80))&4294967295);
        var $82=((($81) - 1)&4294967295);
        __lastLabel__ = 11; __label__ = 12; break;
      case 12: // $83
        var $84=__lastLabel__ == 10 ? $78 : ($82);
        STACKTOP = __stackBase__;
        return $84;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_long_string($ls, $seminfo, $sep) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $cont=__stackBase__+12;
        HEAP[$1]=$ls;
        HEAP[$2]=$seminfo;
        HEAP[$3]=$sep;
        HEAP[$cont]=0;
        var $4=HEAP[$cont];
        var $5=HEAP[$1];
        var $6=HEAP[$1];
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        _save($5, $8);
        var $9=HEAP[$1];
        var $10=(($9+44)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13) + -1)&4294967295);
        HEAP[$12]=$14;
        var $15=((($13))>>>0) > 0;
        if ($15) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $16
        var $17=HEAP[$1];
        var $18=(($17+44)&4294967295);
        var $19=HEAP[$18];
        var $20=(($19+4)&4294967295);
        var $21=HEAP[$20];
        var $22=(($21+1)&4294967295);
        HEAP[$20]=$22;
        var $23=HEAP[$21];
        var $24=unSign(($23), 8, 0);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $25
        var $26=HEAP[$1];
        var $27=(($26+44)&4294967295);
        var $28=HEAP[$27];
        var $29=_luaZ_fill($28);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $30
        var $31=__lastLabel__ == 1 ? $24 : ($29);
        var $32=HEAP[$1];
        var $33=(($32)&4294967295);
        HEAP[$33]=$31;
        var $34=HEAP[$1];
        var $35=(($34)&4294967295);
        var $36=HEAP[$35];
        var $37=((($36))|0)==10;
        if ($37) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $38
        var $39=HEAP[$1];
        var $40=(($39)&4294967295);
        var $41=HEAP[$40];
        var $42=((($41))|0)==13;
        if ($42) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $43
        var $44=HEAP[$1];
        _inclinenumber($44);
        __label__ = 6; break;
      case 6: // $45
        __label__ = 7; break;
      case 7: // $46
        var $47=HEAP[$1];
        var $48=(($47)&4294967295);
        var $49=HEAP[$48];
        if ($49 == -1) {
          __label__ = 8; break;
        }
        else if ($49 == 91) {
          __label__ = 12; break;
        }
        else if ($49 == 93) {
          __label__ = 20; break;
        }
        else if ($49 == 10) {
          __label__ = 26; break;
        }
        else if ($49 == 13) {
          __label__ = 26; break;
        }
        else {
        __label__ = 29; break;
        }
        
      case 8: // $50
        var $51=HEAP[$1];
        var $52=HEAP[$2];
        var $53=((($52))|0)!=0;
        if ($53) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $54
        __lastLabel__ = 9; __label__ = 11; break;
      case 10: // $55
        __lastLabel__ = 10; __label__ = 11; break;
      case 11: // $56
        var $57=__lastLabel__ == 9 ? ((__str43293)&4294967295) : (((__str44294)&4294967295));
        _luaX_lexerror($51, $57, 287);
        __label__ = 39; break;
      case 12: // $58
        var $59=HEAP[$1];
        var $60=_skip_sep($59);
        var $61=HEAP[$3];
        var $62=((($60))|0)==((($61))|0);
        if ($62) { __label__ = 13; break; } else { __label__ = 19; break; }
      case 13: // $63
        var $64=HEAP[$1];
        var $65=HEAP[$1];
        var $66=(($65)&4294967295);
        var $67=HEAP[$66];
        _save($64, $67);
        var $68=HEAP[$1];
        var $69=(($68+44)&4294967295);
        var $70=HEAP[$69];
        var $71=(($70)&4294967295);
        var $72=HEAP[$71];
        var $73=((($72) + -1)&4294967295);
        HEAP[$71]=$73;
        var $74=((($72))>>>0) > 0;
        if ($74) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $75
        var $76=HEAP[$1];
        var $77=(($76+44)&4294967295);
        var $78=HEAP[$77];
        var $79=(($78+4)&4294967295);
        var $80=HEAP[$79];
        var $81=(($80+1)&4294967295);
        HEAP[$79]=$81;
        var $82=HEAP[$80];
        var $83=unSign(($82), 8, 0);
        __lastLabel__ = 14; __label__ = 16; break;
      case 15: // $84
        var $85=HEAP[$1];
        var $86=(($85+44)&4294967295);
        var $87=HEAP[$86];
        var $88=_luaZ_fill($87);
        __lastLabel__ = 15; __label__ = 16; break;
      case 16: // $89
        var $90=__lastLabel__ == 14 ? $83 : ($88);
        var $91=HEAP[$1];
        var $92=(($91)&4294967295);
        HEAP[$92]=$90;
        var $93=HEAP[$cont];
        var $94=((($93) + 1)&4294967295);
        HEAP[$cont]=$94;
        var $95=HEAP[$3];
        var $96=((($95))|0)==0;
        if ($96) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $97
        var $98=HEAP[$1];
        _luaX_lexerror($98, ((__str45295)&4294967295), 91);
        __label__ = 18; break;
      case 18: // $99
        __label__ = 19; break;
      case 19: // $100
        __label__ = 39; break;
      case 20: // $101
        var $102=HEAP[$1];
        var $103=_skip_sep($102);
        var $104=HEAP[$3];
        var $105=((($103))|0)==((($104))|0);
        if ($105) { __label__ = 21; break; } else { __label__ = 25; break; }
      case 21: // $106
        var $107=HEAP[$1];
        var $108=HEAP[$1];
        var $109=(($108)&4294967295);
        var $110=HEAP[$109];
        _save($107, $110);
        var $111=HEAP[$1];
        var $112=(($111+44)&4294967295);
        var $113=HEAP[$112];
        var $114=(($113)&4294967295);
        var $115=HEAP[$114];
        var $116=((($115) + -1)&4294967295);
        HEAP[$114]=$116;
        var $117=((($115))>>>0) > 0;
        if ($117) { __label__ = 22; break; } else { __label__ = 23; break; }
      case 22: // $118
        var $119=HEAP[$1];
        var $120=(($119+44)&4294967295);
        var $121=HEAP[$120];
        var $122=(($121+4)&4294967295);
        var $123=HEAP[$122];
        var $124=(($123+1)&4294967295);
        HEAP[$122]=$124;
        var $125=HEAP[$123];
        var $126=unSign(($125), 8, 0);
        __lastLabel__ = 22; __label__ = 24; break;
      case 23: // $127
        var $128=HEAP[$1];
        var $129=(($128+44)&4294967295);
        var $130=HEAP[$129];
        var $131=_luaZ_fill($130);
        __lastLabel__ = 23; __label__ = 24; break;
      case 24: // $132
        var $133=__lastLabel__ == 22 ? $126 : ($131);
        var $134=HEAP[$1];
        var $135=(($134)&4294967295);
        HEAP[$135]=$133;
        __label__ = 40; break;
      case 25: // $136
        __label__ = 39; break;
      case 26: // $137
        var $138=HEAP[$1];
        _save($138, 10);
        var $139=HEAP[$1];
        _inclinenumber($139);
        var $140=HEAP[$2];
        var $141=((($140))|0)!=0;
        if ($141) { __label__ = 28; break; } else { __label__ = 27; break; }
      case 27: // $142
        var $143=HEAP[$1];
        var $144=(($143+48)&4294967295);
        var $145=HEAP[$144];
        var $146=(($145+4)&4294967295);
        HEAP[$146]=0;
        __label__ = 28; break;
      case 28: // $147
        __label__ = 39; break;
      case 29: // $148
        var $149=HEAP[$2];
        var $150=((($149))|0)!=0;
        if ($150) { __label__ = 30; break; } else { __label__ = 34; break; }
      case 30: // $151
        var $152=HEAP[$1];
        var $153=HEAP[$1];
        var $154=(($153)&4294967295);
        var $155=HEAP[$154];
        _save($152, $155);
        var $156=HEAP[$1];
        var $157=(($156+44)&4294967295);
        var $158=HEAP[$157];
        var $159=(($158)&4294967295);
        var $160=HEAP[$159];
        var $161=((($160) + -1)&4294967295);
        HEAP[$159]=$161;
        var $162=((($160))>>>0) > 0;
        if ($162) { __label__ = 31; break; } else { __label__ = 32; break; }
      case 31: // $163
        var $164=HEAP[$1];
        var $165=(($164+44)&4294967295);
        var $166=HEAP[$165];
        var $167=(($166+4)&4294967295);
        var $168=HEAP[$167];
        var $169=(($168+1)&4294967295);
        HEAP[$167]=$169;
        var $170=HEAP[$168];
        var $171=unSign(($170), 8, 0);
        __lastLabel__ = 31; __label__ = 33; break;
      case 32: // $172
        var $173=HEAP[$1];
        var $174=(($173+44)&4294967295);
        var $175=HEAP[$174];
        var $176=_luaZ_fill($175);
        __lastLabel__ = 32; __label__ = 33; break;
      case 33: // $177
        var $178=__lastLabel__ == 31 ? $171 : ($176);
        var $179=HEAP[$1];
        var $180=(($179)&4294967295);
        HEAP[$180]=$178;
        __label__ = 38; break;
      case 34: // $181
        var $182=HEAP[$1];
        var $183=(($182+44)&4294967295);
        var $184=HEAP[$183];
        var $185=(($184)&4294967295);
        var $186=HEAP[$185];
        var $187=((($186) + -1)&4294967295);
        HEAP[$185]=$187;
        var $188=((($186))>>>0) > 0;
        if ($188) { __label__ = 35; break; } else { __label__ = 36; break; }
      case 35: // $189
        var $190=HEAP[$1];
        var $191=(($190+44)&4294967295);
        var $192=HEAP[$191];
        var $193=(($192+4)&4294967295);
        var $194=HEAP[$193];
        var $195=(($194+1)&4294967295);
        HEAP[$193]=$195;
        var $196=HEAP[$194];
        var $197=unSign(($196), 8, 0);
        __lastLabel__ = 35; __label__ = 37; break;
      case 36: // $198
        var $199=HEAP[$1];
        var $200=(($199+44)&4294967295);
        var $201=HEAP[$200];
        var $202=_luaZ_fill($201);
        __lastLabel__ = 36; __label__ = 37; break;
      case 37: // $203
        var $204=__lastLabel__ == 35 ? $197 : ($202);
        var $205=HEAP[$1];
        var $206=(($205)&4294967295);
        HEAP[$206]=$204;
        __label__ = 38; break;
      case 38: // $207
        __label__ = 39; break;
      case 39: // $208
        __label__ = 7; break;
      case 40: // $209
        var $210=HEAP[$2];
        var $211=((($210))|0)!=0;
        if ($211) { __label__ = 41; break; } else { __label__ = 42; break; }
      case 41: // $212
        var $213=HEAP[$1];
        var $214=HEAP[$1];
        var $215=(($214+48)&4294967295);
        var $216=HEAP[$215];
        var $217=(($216)&4294967295);
        var $218=HEAP[$217];
        var $219=HEAP[$3];
        var $220=((2 + ($219))&4294967295);
        var $221=(($218+$220)&4294967295);
        var $222=HEAP[$1];
        var $223=(($222+48)&4294967295);
        var $224=HEAP[$223];
        var $225=(($224+4)&4294967295);
        var $226=HEAP[$225];
        var $227=HEAP[$3];
        var $228=((2 + ($227))&4294967295);
        var $229=((2 * ($228))&4294967295);
        var $230=((($226) - ($229))&4294967295);
        var $231=_luaX_newstring($213, $221, $230);
        var $232=HEAP[$2];
        var $233=$232;
        HEAP[$233]=$231;
        __label__ = 42; break;
      case 42: // $234
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_string($ls, $del, $seminfo) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $c=__stackBase__+12;
        var $i=__stackBase__+16;
        HEAP[$1]=$ls;
        HEAP[$2]=$del;
        HEAP[$3]=$seminfo;
        var $4=HEAP[$1];
        var $5=HEAP[$1];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        _save($4, $7);
        var $8=HEAP[$1];
        var $9=(($8+44)&4294967295);
        var $10=HEAP[$9];
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        var $13=((($12) + -1)&4294967295);
        HEAP[$11]=$13;
        var $14=((($12))>>>0) > 0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$1];
        var $17=(($16+44)&4294967295);
        var $18=HEAP[$17];
        var $19=(($18+4)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+1)&4294967295);
        HEAP[$19]=$21;
        var $22=HEAP[$20];
        var $23=unSign(($22), 8, 0);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $24
        var $25=HEAP[$1];
        var $26=(($25+44)&4294967295);
        var $27=HEAP[$26];
        var $28=_luaZ_fill($27);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $29
        var $30=__lastLabel__ == 1 ? $23 : ($28);
        var $31=HEAP[$1];
        var $32=(($31)&4294967295);
        HEAP[$32]=$30;
        __label__ = 4; break;
      case 4: // $33
        var $34=HEAP[$1];
        var $35=(($34)&4294967295);
        var $36=HEAP[$35];
        var $37=HEAP[$2];
        var $38=((($36))|0)!=((($37))|0);
        if ($38) { __label__ = 5; break; } else { __label__ = 47; break; }
      case 5: // $39
        var $40=HEAP[$1];
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        if ($42 == -1) {
          __label__ = 6; break;
        }
        else if ($42 == 10) {
          __label__ = 7; break;
        }
        else if ($42 == 13) {
          __label__ = 7; break;
        }
        else if ($42 == 92) {
          __label__ = 8; break;
        }
        else {
        __label__ = 42; break;
        }
        
      case 6: // $43
        var $44=HEAP[$1];
        _luaX_lexerror($44, ((__str41291)&4294967295), 287);
        __label__ = 4; break;
      case 7: // $45
        var $46=HEAP[$1];
        _luaX_lexerror($46, ((__str41291)&4294967295), 286);
        __label__ = 4; break;
      case 8: // $47
        var $48=HEAP[$1];
        var $49=(($48+44)&4294967295);
        var $50=HEAP[$49];
        var $51=(($50)&4294967295);
        var $52=HEAP[$51];
        var $53=((($52) + -1)&4294967295);
        HEAP[$51]=$53;
        var $54=((($52))>>>0) > 0;
        if ($54) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $55
        var $56=HEAP[$1];
        var $57=(($56+44)&4294967295);
        var $58=HEAP[$57];
        var $59=(($58+4)&4294967295);
        var $60=HEAP[$59];
        var $61=(($60+1)&4294967295);
        HEAP[$59]=$61;
        var $62=HEAP[$60];
        var $63=unSign(($62), 8, 0);
        __lastLabel__ = 9; __label__ = 11; break;
      case 10: // $64
        var $65=HEAP[$1];
        var $66=(($65+44)&4294967295);
        var $67=HEAP[$66];
        var $68=_luaZ_fill($67);
        __lastLabel__ = 10; __label__ = 11; break;
      case 11: // $69
        var $70=__lastLabel__ == 9 ? $63 : ($68);
        var $71=HEAP[$1];
        var $72=(($71)&4294967295);
        HEAP[$72]=$70;
        var $73=HEAP[$1];
        var $74=(($73)&4294967295);
        var $75=HEAP[$74];
        if ($75 == 97) {
          __label__ = 12; break;
        }
        else if ($75 == 98) {
          __label__ = 13; break;
        }
        else if ($75 == 102) {
          __label__ = 14; break;
        }
        else if ($75 == 110) {
          __label__ = 15; break;
        }
        else if ($75 == 114) {
          __label__ = 16; break;
        }
        else if ($75 == 116) {
          __label__ = 17; break;
        }
        else if ($75 == 118) {
          __label__ = 18; break;
        }
        else if ($75 == 10) {
          __label__ = 19; break;
        }
        else if ($75 == 13) {
          __label__ = 19; break;
        }
        else if ($75 == -1) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 12: // $76
        HEAP[$c]=7;
        __label__ = 38; break;
      case 13: // $77
        HEAP[$c]=8;
        __label__ = 38; break;
      case 14: // $78
        HEAP[$c]=12;
        __label__ = 38; break;
      case 15: // $79
        HEAP[$c]=10;
        __label__ = 38; break;
      case 16: // $80
        HEAP[$c]=13;
        __label__ = 38; break;
      case 17: // $81
        HEAP[$c]=9;
        __label__ = 38; break;
      case 18: // $82
        HEAP[$c]=11;
        __label__ = 38; break;
      case 19: // $83
        var $84=HEAP[$1];
        _save($84, 10);
        var $85=HEAP[$1];
        _inclinenumber($85);
        __label__ = 4; break;
      case 20: // $86
        __label__ = 4; break;
      case 21: // $87
        var $88=HEAP[$1];
        var $89=(($88)&4294967295);
        var $90=HEAP[$89];
        var $91=___ctype_b_loc();
        var $92=HEAP[$91];
        var $93=(($92+2*$90)&4294967295);
        var $94=HEAP[$93];
        var $95=unSign(($94), 16, 0);
        var $96=($95) & 2048;
        var $97=((($96))|0)!=0;
        if ($97) { __label__ = 26; break; } else { __label__ = 22; break; }
      case 22: // $98
        var $99=HEAP[$1];
        var $100=HEAP[$1];
        var $101=(($100)&4294967295);
        var $102=HEAP[$101];
        _save($99, $102);
        var $103=HEAP[$1];
        var $104=(($103+44)&4294967295);
        var $105=HEAP[$104];
        var $106=(($105)&4294967295);
        var $107=HEAP[$106];
        var $108=((($107) + -1)&4294967295);
        HEAP[$106]=$108;
        var $109=((($107))>>>0) > 0;
        if ($109) { __label__ = 23; break; } else { __label__ = 24; break; }
      case 23: // $110
        var $111=HEAP[$1];
        var $112=(($111+44)&4294967295);
        var $113=HEAP[$112];
        var $114=(($113+4)&4294967295);
        var $115=HEAP[$114];
        var $116=(($115+1)&4294967295);
        HEAP[$114]=$116;
        var $117=HEAP[$115];
        var $118=unSign(($117), 8, 0);
        __lastLabel__ = 23; __label__ = 25; break;
      case 24: // $119
        var $120=HEAP[$1];
        var $121=(($120+44)&4294967295);
        var $122=HEAP[$121];
        var $123=_luaZ_fill($122);
        __lastLabel__ = 24; __label__ = 25; break;
      case 25: // $124
        var $125=__lastLabel__ == 23 ? $118 : ($123);
        var $126=HEAP[$1];
        var $127=(($126)&4294967295);
        HEAP[$127]=$125;
        __label__ = 37; break;
      case 26: // $128
        HEAP[$i]=0;
        HEAP[$c]=0;
        __label__ = 27; break;
      case 27: // $129
        var $130=HEAP[$c];
        var $131=((10 * ($130))&4294967295);
        var $132=HEAP[$1];
        var $133=(($132)&4294967295);
        var $134=HEAP[$133];
        var $135=((($134) - 48)&4294967295);
        var $136=((($131) + ($135))&4294967295);
        HEAP[$c]=$136;
        var $137=HEAP[$1];
        var $138=(($137+44)&4294967295);
        var $139=HEAP[$138];
        var $140=(($139)&4294967295);
        var $141=HEAP[$140];
        var $142=((($141) + -1)&4294967295);
        HEAP[$140]=$142;
        var $143=((($141))>>>0) > 0;
        if ($143) { __label__ = 28; break; } else { __label__ = 29; break; }
      case 28: // $144
        var $145=HEAP[$1];
        var $146=(($145+44)&4294967295);
        var $147=HEAP[$146];
        var $148=(($147+4)&4294967295);
        var $149=HEAP[$148];
        var $150=(($149+1)&4294967295);
        HEAP[$148]=$150;
        var $151=HEAP[$149];
        var $152=unSign(($151), 8, 0);
        __lastLabel__ = 28; __label__ = 30; break;
      case 29: // $153
        var $154=HEAP[$1];
        var $155=(($154+44)&4294967295);
        var $156=HEAP[$155];
        var $157=_luaZ_fill($156);
        __lastLabel__ = 29; __label__ = 30; break;
      case 30: // $158
        var $159=__lastLabel__ == 28 ? $152 : ($157);
        var $160=HEAP[$1];
        var $161=(($160)&4294967295);
        HEAP[$161]=$159;
        __label__ = 31; break;
      case 31: // $162
        var $163=HEAP[$i];
        var $164=((($163) + 1)&4294967295);
        HEAP[$i]=$164;
        var $165=((($164))|0) < 3;
        if ($165) { __lastLabel__ = 31; __label__ = 32; break; } else { __lastLabel__ = 31; __label__ = 33; break; }
      case 32: // $166
        var $167=HEAP[$1];
        var $168=(($167)&4294967295);
        var $169=HEAP[$168];
        var $170=___ctype_b_loc();
        var $171=HEAP[$170];
        var $172=(($171+2*$169)&4294967295);
        var $173=HEAP[$172];
        var $174=unSign(($173), 16, 0);
        var $175=($174) & 2048;
        var $176=((($175))|0)!=0;
        __lastLabel__ = 32; __label__ = 33; break;
      case 33: // $177
        var $178=__lastLabel__ == 31 ? 0 : ($176);
        if ($178) { __label__ = 27; break; } else { __label__ = 34; break; }
      case 34: // $179
        var $180=HEAP[$c];
        var $181=((($180))|0) > 255;
        if ($181) { __label__ = 35; break; } else { __label__ = 36; break; }
      case 35: // $182
        var $183=HEAP[$1];
        _luaX_lexerror($183, ((__str42292)&4294967295), 286);
        __label__ = 36; break;
      case 36: // $184
        var $185=HEAP[$1];
        var $186=HEAP[$c];
        _save($185, $186);
        __label__ = 37; break;
      case 37: // $187
        __label__ = 4; break;
      case 38: // $188
        var $189=HEAP[$1];
        var $190=HEAP[$c];
        _save($189, $190);
        var $191=HEAP[$1];
        var $192=(($191+44)&4294967295);
        var $193=HEAP[$192];
        var $194=(($193)&4294967295);
        var $195=HEAP[$194];
        var $196=((($195) + -1)&4294967295);
        HEAP[$194]=$196;
        var $197=((($195))>>>0) > 0;
        if ($197) { __label__ = 39; break; } else { __label__ = 40; break; }
      case 39: // $198
        var $199=HEAP[$1];
        var $200=(($199+44)&4294967295);
        var $201=HEAP[$200];
        var $202=(($201+4)&4294967295);
        var $203=HEAP[$202];
        var $204=(($203+1)&4294967295);
        HEAP[$202]=$204;
        var $205=HEAP[$203];
        var $206=unSign(($205), 8, 0);
        __lastLabel__ = 39; __label__ = 41; break;
      case 40: // $207
        var $208=HEAP[$1];
        var $209=(($208+44)&4294967295);
        var $210=HEAP[$209];
        var $211=_luaZ_fill($210);
        __lastLabel__ = 40; __label__ = 41; break;
      case 41: // $212
        var $213=__lastLabel__ == 39 ? $206 : ($211);
        var $214=HEAP[$1];
        var $215=(($214)&4294967295);
        HEAP[$215]=$213;
        __label__ = 4; break;
      case 42: // $216
        var $217=HEAP[$1];
        var $218=HEAP[$1];
        var $219=(($218)&4294967295);
        var $220=HEAP[$219];
        _save($217, $220);
        var $221=HEAP[$1];
        var $222=(($221+44)&4294967295);
        var $223=HEAP[$222];
        var $224=(($223)&4294967295);
        var $225=HEAP[$224];
        var $226=((($225) + -1)&4294967295);
        HEAP[$224]=$226;
        var $227=((($225))>>>0) > 0;
        if ($227) { __label__ = 43; break; } else { __label__ = 44; break; }
      case 43: // $228
        var $229=HEAP[$1];
        var $230=(($229+44)&4294967295);
        var $231=HEAP[$230];
        var $232=(($231+4)&4294967295);
        var $233=HEAP[$232];
        var $234=(($233+1)&4294967295);
        HEAP[$232]=$234;
        var $235=HEAP[$233];
        var $236=unSign(($235), 8, 0);
        __lastLabel__ = 43; __label__ = 45; break;
      case 44: // $237
        var $238=HEAP[$1];
        var $239=(($238+44)&4294967295);
        var $240=HEAP[$239];
        var $241=_luaZ_fill($240);
        __lastLabel__ = 44; __label__ = 45; break;
      case 45: // $242
        var $243=__lastLabel__ == 43 ? $236 : ($241);
        var $244=HEAP[$1];
        var $245=(($244)&4294967295);
        HEAP[$245]=$243;
        __label__ = 46; break;
      case 46: // $246
        __label__ = 4; break;
      case 47: // $247
        var $248=HEAP[$1];
        var $249=HEAP[$1];
        var $250=(($249)&4294967295);
        var $251=HEAP[$250];
        _save($248, $251);
        var $252=HEAP[$1];
        var $253=(($252+44)&4294967295);
        var $254=HEAP[$253];
        var $255=(($254)&4294967295);
        var $256=HEAP[$255];
        var $257=((($256) + -1)&4294967295);
        HEAP[$255]=$257;
        var $258=((($256))>>>0) > 0;
        if ($258) { __label__ = 48; break; } else { __label__ = 49; break; }
      case 48: // $259
        var $260=HEAP[$1];
        var $261=(($260+44)&4294967295);
        var $262=HEAP[$261];
        var $263=(($262+4)&4294967295);
        var $264=HEAP[$263];
        var $265=(($264+1)&4294967295);
        HEAP[$263]=$265;
        var $266=HEAP[$264];
        var $267=unSign(($266), 8, 0);
        __lastLabel__ = 48; __label__ = 50; break;
      case 49: // $268
        var $269=HEAP[$1];
        var $270=(($269+44)&4294967295);
        var $271=HEAP[$270];
        var $272=_luaZ_fill($271);
        __lastLabel__ = 49; __label__ = 50; break;
      case 50: // $273
        var $274=__lastLabel__ == 48 ? $267 : ($272);
        var $275=HEAP[$1];
        var $276=(($275)&4294967295);
        HEAP[$276]=$274;
        var $277=HEAP[$1];
        var $278=HEAP[$1];
        var $279=(($278+48)&4294967295);
        var $280=HEAP[$279];
        var $281=(($280)&4294967295);
        var $282=HEAP[$281];
        var $283=(($282+1)&4294967295);
        var $284=HEAP[$1];
        var $285=(($284+48)&4294967295);
        var $286=HEAP[$285];
        var $287=(($286+4)&4294967295);
        var $288=HEAP[$287];
        var $289=((($288) - 2)&4294967295);
        var $290=_luaX_newstring($277, $283, $289);
        var $291=HEAP[$3];
        var $292=$291;
        HEAP[$292]=$290;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save($ls, $c) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $b=__stackBase__+8;
        var $newsize=__stackBase__+12;
        HEAP[$1]=$ls;
        HEAP[$2]=$c;
        var $3=HEAP[$1];
        var $4=(($3+48)&4294967295);
        var $5=HEAP[$4];
        HEAP[$b]=$5;
        var $6=HEAP[$b];
        var $7=(($6+4)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8) + 1)&4294967295);
        var $10=HEAP[$b];
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        var $13=((($9))>>>0) > ((($12))>>>0);
        if ($13) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 1: // $14
        var $15=HEAP[$b];
        var $16=(($15+8)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17))>>>0) >= 2147483646;
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $19
        var $20=HEAP[$1];
        _luaX_lexerror($20, ((__str40290)&4294967295), 0);
        __label__ = 3; break;
      case 3: // $21
        var $22=HEAP[$b];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=((($24) * 2)&4294967295);
        HEAP[$newsize]=$25;
        var $26=HEAP[$newsize];
        var $27=((($26) + 1)&4294967295);
        var $28=((($27))>>>0) <= 4294967293;
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $29
        var $30=HEAP[$1];
        var $31=(($30+40)&4294967295);
        var $32=HEAP[$31];
        var $33=HEAP[$b];
        var $34=(($33)&4294967295);
        var $35=HEAP[$34];
        var $36=HEAP[$b];
        var $37=(($36+8)&4294967295);
        var $38=HEAP[$37];
        var $39=((($38) * 1)&4294967295);
        var $40=HEAP[$newsize];
        var $41=((($40) * 1)&4294967295);
        var $42=_luaM_realloc_($32, $35, $39, $41);
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $43
        var $44=HEAP[$1];
        var $45=(($44+40)&4294967295);
        var $46=HEAP[$45];
        var $47=_luaM_toobig($46);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $48
        var $49=__lastLabel__ == 4 ? $42 : ($47);
        var $50=HEAP[$b];
        var $51=(($50)&4294967295);
        HEAP[$51]=$49;
        var $52=HEAP[$newsize];
        var $53=HEAP[$b];
        var $54=(($53+8)&4294967295);
        HEAP[$54]=$52;
        __label__ = 7; break;
      case 7: // $55
        var $56=HEAP[$2];
        var $57=((($56)) & 255);
        var $58=HEAP[$b];
        var $59=(($58+4)&4294967295);
        var $60=HEAP[$59];
        var $61=((($60) + 1)&4294967295);
        HEAP[$59]=$61;
        var $62=HEAP[$b];
        var $63=(($62)&4294967295);
        var $64=HEAP[$63];
        var $65=(($64+$60)&4294967295);
        HEAP[$65]=$57;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check_next($ls, $set) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$ls;
        HEAP[$3]=$set;
        var $4=HEAP[$3];
        var $5=HEAP[$2];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=_strchr($4, $7);
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $10
        HEAP[$1]=0;
        __label__ = 6; break;
      case 2: // $11
        var $12=HEAP[$2];
        var $13=HEAP[$2];
        var $14=(($13)&4294967295);
        var $15=HEAP[$14];
        _save($12, $15);
        var $16=HEAP[$2];
        var $17=(($16+44)&4294967295);
        var $18=HEAP[$17];
        var $19=(($18)&4294967295);
        var $20=HEAP[$19];
        var $21=((($20) + -1)&4294967295);
        HEAP[$19]=$21;
        var $22=((($20))>>>0) > 0;
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $23
        var $24=HEAP[$2];
        var $25=(($24+44)&4294967295);
        var $26=HEAP[$25];
        var $27=(($26+4)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28+1)&4294967295);
        HEAP[$27]=$29;
        var $30=HEAP[$28];
        var $31=unSign(($30), 8, 0);
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $32
        var $33=HEAP[$2];
        var $34=(($33+44)&4294967295);
        var $35=HEAP[$34];
        var $36=_luaZ_fill($35);
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $37
        var $38=__lastLabel__ == 3 ? $31 : ($36);
        var $39=HEAP[$2];
        var $40=(($39)&4294967295);
        HEAP[$40]=$38;
        HEAP[$1]=1;
        __label__ = 6; break;
      case 6: // $41
        var $42=HEAP[$1];
        STACKTOP = __stackBase__;
        return $42;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_numeral($ls, $seminfo) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$ls;
        HEAP[$2]=$seminfo;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$1];
        var $5=HEAP[$1];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        _save($4, $7);
        var $8=HEAP[$1];
        var $9=(($8+44)&4294967295);
        var $10=HEAP[$9];
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        var $13=((($12) + -1)&4294967295);
        HEAP[$11]=$13;
        var $14=((($12))>>>0) > 0;
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        var $16=HEAP[$1];
        var $17=(($16+44)&4294967295);
        var $18=HEAP[$17];
        var $19=(($18+4)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+1)&4294967295);
        HEAP[$19]=$21;
        var $22=HEAP[$20];
        var $23=unSign(($22), 8, 0);
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $24
        var $25=HEAP[$1];
        var $26=(($25+44)&4294967295);
        var $27=HEAP[$26];
        var $28=_luaZ_fill($27);
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $29
        var $30=__lastLabel__ == 2 ? $23 : ($28);
        var $31=HEAP[$1];
        var $32=(($31)&4294967295);
        HEAP[$32]=$30;
        __label__ = 5; break;
      case 5: // $33
        var $34=HEAP[$1];
        var $35=(($34)&4294967295);
        var $36=HEAP[$35];
        var $37=___ctype_b_loc();
        var $38=HEAP[$37];
        var $39=(($38+2*$36)&4294967295);
        var $40=HEAP[$39];
        var $41=unSign(($40), 16, 0);
        var $42=($41) & 2048;
        var $43=((($42))|0)!=0;
        if ($43) { __lastLabel__ = 5; __label__ = 7; break; } else { __lastLabel__ = 5; __label__ = 6; break; }
      case 6: // $44
        var $45=HEAP[$1];
        var $46=(($45)&4294967295);
        var $47=HEAP[$46];
        var $48=((($47))|0)==46;
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $49
        var $50=__lastLabel__ == 5 ? 1 : ($48);
        if ($50) { __label__ = 1; break; } else { __label__ = 8; break; }
      case 8: // $51
        var $52=HEAP[$1];
        var $53=_check_next($52, ((__str37287)&4294967295));
        var $54=((($53))|0)!=0;
        if ($54) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $55
        var $56=HEAP[$1];
        var $57=_check_next($56, ((__str38288)&4294967295));
        __label__ = 10; break;
      case 10: // $58
        __label__ = 11; break;
      case 11: // $59
        var $60=HEAP[$1];
        var $61=(($60)&4294967295);
        var $62=HEAP[$61];
        var $63=___ctype_b_loc();
        var $64=HEAP[$63];
        var $65=(($64+2*$62)&4294967295);
        var $66=HEAP[$65];
        var $67=unSign(($66), 16, 0);
        var $68=($67) & 8;
        var $69=((($68))|0)!=0;
        if ($69) { __lastLabel__ = 11; __label__ = 13; break; } else { __lastLabel__ = 11; __label__ = 12; break; }
      case 12: // $70
        var $71=HEAP[$1];
        var $72=(($71)&4294967295);
        var $73=HEAP[$72];
        var $74=((($73))|0)==95;
        __lastLabel__ = 12; __label__ = 13; break;
      case 13: // $75
        var $76=__lastLabel__ == 11 ? 1 : ($74);
        if ($76) { __label__ = 14; break; } else { __label__ = 18; break; }
      case 14: // $77
        var $78=HEAP[$1];
        var $79=HEAP[$1];
        var $80=(($79)&4294967295);
        var $81=HEAP[$80];
        _save($78, $81);
        var $82=HEAP[$1];
        var $83=(($82+44)&4294967295);
        var $84=HEAP[$83];
        var $85=(($84)&4294967295);
        var $86=HEAP[$85];
        var $87=((($86) + -1)&4294967295);
        HEAP[$85]=$87;
        var $88=((($86))>>>0) > 0;
        if ($88) { __label__ = 15; break; } else { __label__ = 16; break; }
      case 15: // $89
        var $90=HEAP[$1];
        var $91=(($90+44)&4294967295);
        var $92=HEAP[$91];
        var $93=(($92+4)&4294967295);
        var $94=HEAP[$93];
        var $95=(($94+1)&4294967295);
        HEAP[$93]=$95;
        var $96=HEAP[$94];
        var $97=unSign(($96), 8, 0);
        __lastLabel__ = 15; __label__ = 17; break;
      case 16: // $98
        var $99=HEAP[$1];
        var $100=(($99+44)&4294967295);
        var $101=HEAP[$100];
        var $102=_luaZ_fill($101);
        __lastLabel__ = 16; __label__ = 17; break;
      case 17: // $103
        var $104=__lastLabel__ == 15 ? $97 : ($102);
        var $105=HEAP[$1];
        var $106=(($105)&4294967295);
        HEAP[$106]=$104;
        __label__ = 11; break;
      case 18: // $107
        var $108=HEAP[$1];
        _save($108, 0);
        var $109=HEAP[$1];
        var $110=HEAP[$1];
        var $111=(($110+56)&4294967295);
        var $112=HEAP[$111];
        _buffreplace($109, 46, $112);
        var $113=HEAP[$1];
        var $114=(($113+48)&4294967295);
        var $115=HEAP[$114];
        var $116=(($115)&4294967295);
        var $117=HEAP[$116];
        var $118=HEAP[$2];
        var $119=$118;
        var $120=_luaO_str2d($117, $119);
        var $121=((($120))|0)!=0;
        if ($121) { __label__ = 20; break; } else { __label__ = 19; break; }
      case 19: // $122
        var $123=HEAP[$1];
        var $124=HEAP[$2];
        _trydecpoint($123, $124);
        __label__ = 20; break;
      case 20: // $125
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffreplace($ls, $from, $to) {
    var __stackBase__  = STACKTOP; STACKTOP += 14; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 14);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+5;
        var $n=__stackBase__+6;
        var $p=__stackBase__+10;
        HEAP[$1]=$ls;
        HEAP[$2]=$from;
        HEAP[$3]=$to;
        var $4=HEAP[$1];
        var $5=(($4+48)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+4)&4294967295);
        var $8=HEAP[$7];
        HEAP[$n]=$8;
        var $9=HEAP[$1];
        var $10=(($9+48)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        HEAP[$p]=$13;
        __label__ = 1; break;
      case 1: // $14
        var $15=HEAP[$n];
        var $16=((($15) + -1)&4294967295);
        HEAP[$n]=$16;
        var $17=((($15))|0)!=0;
        if ($17) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $18
        var $19=HEAP[$n];
        var $20=HEAP[$p];
        var $21=(($20+$19)&4294967295);
        var $22=HEAP[$21];
        var $23=reSign(($22), 8, 0);
        var $24=HEAP[$2];
        var $25=reSign(($24), 8, 0);
        var $26=((($23))|0)==((($25))|0);
        if ($26) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $27
        var $28=HEAP[$3];
        var $29=HEAP[$n];
        var $30=HEAP[$p];
        var $31=(($30+$29)&4294967295);
        HEAP[$31]=$28;
        __label__ = 4; break;
      case 4: // $32
        __label__ = 1; break;
      case 5: // $33
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _trydecpoint($ls, $seminfo) {
    var __stackBase__  = STACKTOP; STACKTOP += 13; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 13);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $cv=__stackBase__+8;
        var $old=__stackBase__+12;
        HEAP[$1]=$ls;
        HEAP[$2]=$seminfo;
        var $3=_localeconv();
        HEAP[$cv]=$3;
        var $4=HEAP[$1];
        var $5=(($4+56)&4294967295);
        var $6=HEAP[$5];
        HEAP[$old]=$6;
        var $7=HEAP[$cv];
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$cv];
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=reSign(($14), 8, 0);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $16
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $17
        var $18=__lastLabel__ == 1 ? $15 : (46);
        var $19=((($18)) & 255);
        var $20=HEAP[$1];
        var $21=(($20+56)&4294967295);
        HEAP[$21]=$19;
        var $22=HEAP[$1];
        var $23=HEAP[$old];
        var $24=HEAP[$1];
        var $25=(($24+56)&4294967295);
        var $26=HEAP[$25];
        _buffreplace($22, $23, $26);
        var $27=HEAP[$1];
        var $28=(($27+48)&4294967295);
        var $29=HEAP[$28];
        var $30=(($29)&4294967295);
        var $31=HEAP[$30];
        var $32=HEAP[$2];
        var $33=$32;
        var $34=_luaO_str2d($31, $33);
        var $35=((($34))|0)!=0;
        if ($35) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $36
        var $37=HEAP[$1];
        var $38=HEAP[$1];
        var $39=(($38+56)&4294967295);
        var $40=HEAP[$39];
        _buffreplace($37, $40, 46);
        var $41=HEAP[$1];
        _luaX_lexerror($41, ((__str39289)&4294967295), 284);
        __label__ = 5; break;
      case 5: // $42
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaopen_math($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_register($2, ((__str298)&4294967295), ((_mathlib)&4294967295));
    var $3=HEAP[$1];
    _lua_pushnumber($3, 3.141592653589793);
    var $4=HEAP[$1];
    _lua_setfield($4, -2, ((__str1299)&4294967295));
    var $5=HEAP[$1];
    _lua_pushnumber($5, Infinity);
    var $6=HEAP[$1];
    _lua_setfield($6, -2, ((__str2300)&4294967295));
    var $7=HEAP[$1];
    _lua_getfield($7, -1, ((__str3301)&4294967295));
    var $8=HEAP[$1];
    _lua_setfield($8, -2, ((__str4302)&4294967295));
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_abs($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_fabs($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_acos($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_acos($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_asin($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_asin($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_atan2($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=HEAP[$1];
    var $6=_luaL_checknumber($5, 2);
    var $7=_atan2($4, $6);
    _lua_pushnumber($2, $7);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_atan($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_atan($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_ceil($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_ceil($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_cosh($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_cosh($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_cos($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_cos($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_deg($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=($4) / 0.017453292519943295;
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_exp($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_exp($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_floor($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_floor($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_fmod($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=HEAP[$1];
    var $6=_luaL_checknumber($5, 2);
    var $7=_fmod($4, $6);
    _lua_pushnumber($2, $7);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_frexp($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $e=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_frexp($4, $e);
    _lua_pushnumber($2, $5);
    var $6=HEAP[$1];
    var $7=HEAP[$e];
    _lua_pushinteger($6, $7);
    STACKTOP = __stackBase__;
    return 2;
  }
  

  function _math_ldexp($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=HEAP[$1];
    var $6=_luaL_checkinteger($5, 2);
    var $7=_ldexp($4, $6);
    _lua_pushnumber($2, $7);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_log10($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_log10($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_log($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_log($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_max($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $n=__stackBase__+4;
        var $dmax=__stackBase__+8;
        var $i=__stackBase__+16;
        var $d=__stackBase__+20;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_gettop($2);
        HEAP[$n]=$3;
        var $4=HEAP[$1];
        var $5=_luaL_checknumber($4, 1);
        HEAP[$dmax]=$5;
        HEAP[$i]=2;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$i];
        var $8=HEAP[$n];
        var $9=((($7))|0) <= ((($8))|0);
        if ($9) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$i];
        var $13=_luaL_checknumber($11, $12);
        HEAP[$d]=$13;
        var $14=HEAP[$d];
        var $15=HEAP[$dmax];
        var $16=($14) > ($15);
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        var $18=HEAP[$d];
        HEAP[$dmax]=$18;
        __label__ = 4; break;
      case 4: // $19
        __label__ = 5; break;
      case 5: // $20
        var $21=HEAP[$i];
        var $22=((($21) + 1)&4294967295);
        HEAP[$i]=$22;
        __label__ = 1; break;
      case 6: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$dmax];
        _lua_pushnumber($24, $25);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _math_min($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $n=__stackBase__+4;
        var $dmin=__stackBase__+8;
        var $i=__stackBase__+16;
        var $d=__stackBase__+20;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_gettop($2);
        HEAP[$n]=$3;
        var $4=HEAP[$1];
        var $5=_luaL_checknumber($4, 1);
        HEAP[$dmin]=$5;
        HEAP[$i]=2;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$i];
        var $8=HEAP[$n];
        var $9=((($7))|0) <= ((($8))|0);
        if ($9) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$i];
        var $13=_luaL_checknumber($11, $12);
        HEAP[$d]=$13;
        var $14=HEAP[$d];
        var $15=HEAP[$dmin];
        var $16=($14) < ($15);
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        var $18=HEAP[$d];
        HEAP[$dmin]=$18;
        __label__ = 4; break;
      case 4: // $19
        __label__ = 5; break;
      case 5: // $20
        var $21=HEAP[$i];
        var $22=((($21) + 1)&4294967295);
        HEAP[$i]=$22;
        __label__ = 1; break;
      case 6: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$dmin];
        _lua_pushnumber($24, $25);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _math_modf($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
  
    var $1=__stackBase__;
    var $ip=__stackBase__+4;
    var $fp=__stackBase__+12;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checknumber($2, 1);
    var $4=_modf($3, $ip);
    HEAP[$fp]=$4;
    var $5=HEAP[$1];
    var $6=HEAP[$ip];
    _lua_pushnumber($5, $6);
    var $7=HEAP[$1];
    var $8=HEAP[$fp];
    _lua_pushnumber($7, $8);
    STACKTOP = __stackBase__;
    return 2;
  }
  

  function _math_pow($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=HEAP[$1];
    var $6=_luaL_checknumber($5, 2);
    var $7=_llvm_pow_f64($4, $6);
    _lua_pushnumber($2, $7);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_rad($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=($4) * 0.017453292519943295;
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_random($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $r=__stackBase__+8;
        var $u=__stackBase__+16;
        var $l=__stackBase__+20;
        var $u1=__stackBase__+24;
        HEAP[$2]=$L;
        var $3=_rand();
        var $4=((($3))|0) % 2147483647;
        var $5=((($4))|0);
        var $6=($5) / 2147483647;
        HEAP[$r]=$6;
        var $7=HEAP[$2];
        var $8=_lua_gettop($7);
        if ($8 == 0) {
          __label__ = 1; break;
        }
        else if ($8 == 1) {
          __label__ = 2; break;
        }
        else if ($8 == 2) {
          __label__ = 5; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $9
        var $10=HEAP[$2];
        var $11=HEAP[$r];
        _lua_pushnumber($10, $11);
        __label__ = 9; break;
      case 2: // $12
        var $13=HEAP[$2];
        var $14=_luaL_checkinteger($13, 1);
        HEAP[$u]=$14;
        var $15=HEAP[$u];
        var $16=1 <= ((($15))|0);
        if ($16) { __lastLabel__ = 2; __label__ = 4; break; } else { __lastLabel__ = 2; __label__ = 3; break; }
      case 3: // $17
        var $18=HEAP[$2];
        var $19=_luaL_argerror($18, 1, ((__str32330)&4294967295));
        var $20=((($19))|0)!=0;
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $21
        var $22=__lastLabel__ == 2 ? 1 : ($20);
        var $23=unSign(($22), 1, 0);
        var $24=HEAP[$2];
        var $25=HEAP[$r];
        var $26=HEAP[$u];
        var $27=((($26))|0);
        var $28=($25) * ($27);
        var $29=_floor($28);
        var $30=($29) + 1;
        _lua_pushnumber($24, $30);
        __label__ = 9; break;
      case 5: // $31
        var $32=HEAP[$2];
        var $33=_luaL_checkinteger($32, 1);
        HEAP[$l]=$33;
        var $34=HEAP[$2];
        var $35=_luaL_checkinteger($34, 2);
        HEAP[$u1]=$35;
        var $36=HEAP[$l];
        var $37=HEAP[$u1];
        var $38=((($36))|0) <= ((($37))|0);
        if ($38) { __lastLabel__ = 5; __label__ = 7; break; } else { __lastLabel__ = 5; __label__ = 6; break; }
      case 6: // $39
        var $40=HEAP[$2];
        var $41=_luaL_argerror($40, 2, ((__str32330)&4294967295));
        var $42=((($41))|0)!=0;
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $43
        var $44=__lastLabel__ == 5 ? 1 : ($42);
        var $45=unSign(($44), 1, 0);
        var $46=HEAP[$2];
        var $47=HEAP[$r];
        var $48=HEAP[$u1];
        var $49=HEAP[$l];
        var $50=((($48) - ($49))&4294967295);
        var $51=((($50) + 1)&4294967295);
        var $52=((($51))|0);
        var $53=($47) * ($52);
        var $54=_floor($53);
        var $55=HEAP[$l];
        var $56=((($55))|0);
        var $57=($54) + ($56);
        _lua_pushnumber($46, $57);
        __label__ = 9; break;
      case 8: // $58
        var $59=HEAP[$2];
        var $60=_luaL_error($59, ((__str33331)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$60;
        __label__ = 10; break;
      case 9: // $61
        HEAP[$1]=1;
        __label__ = 10; break;
      case 10: // $62
        var $63=HEAP[$1];
        STACKTOP = __stackBase__;
        return $63;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _math_randomseed($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checkinteger($2, 1);
    _srand($3);
    STACKTOP = __stackBase__;
    return 0;
  }
  

  function _math_sinh($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_sinh($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_sin($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_sin($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_sqrt($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_sqrt($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_tanh($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_tanh($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _math_tan($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=_tan($4);
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _luaM_growaux_($L, $block, $size, $size_elems, $limit, $errormsg) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $6=__stackBase__+20;
        var $newblock=__stackBase__+24;
        var $newsize=__stackBase__+28;
        HEAP[$1]=$L;
        HEAP[$2]=$block;
        HEAP[$3]=$size;
        HEAP[$4]=$size_elems;
        HEAP[$5]=$limit;
        HEAP[$6]=$errormsg;
        var $7=HEAP[$3];
        var $8=HEAP[$7];
        var $9=HEAP[$5];
        var $10=((((($9))|0)/2)|0);
        var $11=((($8))|0) >= ((($10))|0);
        if ($11) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $12
        var $13=HEAP[$3];
        var $14=HEAP[$13];
        var $15=HEAP[$5];
        var $16=((($14))|0) >= ((($15))|0);
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$6];
        _luaG_runerror($18, $19, allocate(1, "i32", ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $20
        var $21=HEAP[$5];
        HEAP[$newsize]=$21;
        __label__ = 7; break;
      case 4: // $22
        var $23=HEAP[$3];
        var $24=HEAP[$23];
        var $25=((($24) * 2)&4294967295);
        HEAP[$newsize]=$25;
        var $26=HEAP[$newsize];
        var $27=((($26))|0) < 4;
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $28
        HEAP[$newsize]=4;
        __label__ = 6; break;
      case 6: // $29
        __label__ = 7; break;
      case 7: // $30
        var $31=HEAP[$newsize];
        var $32=((($31) + 1)&4294967295);
        var $33=HEAP[$4];
        var $34=Math.floor(4294967293/((($33))>>>0));
        var $35=((($32))>>>0) <= ((($34))>>>0);
        if ($35) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $36
        var $37=HEAP[$1];
        var $38=HEAP[$2];
        var $39=HEAP[$3];
        var $40=HEAP[$39];
        var $41=HEAP[$4];
        var $42=((($40) * ($41))&4294967295);
        var $43=HEAP[$newsize];
        var $44=HEAP[$4];
        var $45=((($43) * ($44))&4294967295);
        var $46=_luaM_realloc_($37, $38, $42, $45);
        __lastLabel__ = 8; __label__ = 10; break;
      case 9: // $47
        var $48=HEAP[$1];
        var $49=_luaM_toobig($48);
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $50
        var $51=__lastLabel__ == 8 ? $46 : ($49);
        HEAP[$newblock]=$51;
        var $52=HEAP[$newsize];
        var $53=HEAP[$3];
        HEAP[$53]=$52;
        var $54=HEAP[$newblock];
        STACKTOP = __stackBase__;
        return $54;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaM_realloc_($L, $block, $osize, $nsize) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $g=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$block;
        HEAP[$3]=$osize;
        HEAP[$4]=$nsize;
        var $5=HEAP[$1];
        var $6=(($5+16)&4294967295);
        var $7=HEAP[$6];
        HEAP[$g]=$7;
        var $8=HEAP[$g];
        var $9=(($8+12)&4294967295);
        var $10=HEAP[$9];
        var $11=HEAP[$g];
        var $12=(($11+16)&4294967295);
        var $13=HEAP[$12];
        var $14=HEAP[$2];
        var $15=HEAP[$3];
        var $16=HEAP[$4];
        var $17=FUNCTION_TABLE[$10]($13, $14, $15, $16);
        HEAP[$2]=$17;
        var $18=HEAP[$2];
        var $19=((($18))|0)==0;
        if ($19) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $20
        var $21=HEAP[$4];
        var $22=((($21))>>>0) > 0;
        if ($22) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $23
        var $24=HEAP[$1];
        _luaD_throw($24, 4);
        __label__ = 3; break;
      case 3: // $25
        var $26=HEAP[$g];
        var $27=(($26+68)&4294967295);
        var $28=HEAP[$27];
        var $29=HEAP[$3];
        var $30=((($28) - ($29))&4294967295);
        var $31=HEAP[$4];
        var $32=((($30) + ($31))&4294967295);
        var $33=HEAP[$g];
        var $34=(($33+68)&4294967295);
        HEAP[$34]=$32;
        var $35=HEAP[$2];
        STACKTOP = __stackBase__;
        return $35;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaM_toobig($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaG_runerror($2, ((__str333)&4294967295), allocate(1, "i32", ALLOC_STACK));
    STACKTOP = __stackBase__;
    return 0;
  }
  

  function _luaopen_package($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_newmetatable($2, ((__str337)&4294967295));
        var $4=HEAP[$1];
        _lua_pushcclosure($4, 46, 0);
        var $5=HEAP[$1];
        _lua_setfield($5, -2, ((__str1338)&4294967295));
        var $6=HEAP[$1];
        _luaL_register($6, ((__str2339)&4294967295), ((_pk_funcs)&4294967295));
        var $7=HEAP[$1];
        _lua_pushvalue($7, -1);
        var $8=HEAP[$1];
        _lua_replace($8, -10001);
        var $9=HEAP[$1];
        _lua_createtable($9, 0, 4);
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $10
        var $11=HEAP[$i];
        var $12=((_loaders+$11*4)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $15
        var $16=HEAP[$1];
        var $17=HEAP[$i];
        var $18=((_loaders+$17*4)&4294967295);
        var $19=HEAP[$18];
        _lua_pushcclosure($16, $19, 0);
        var $20=HEAP[$1];
        var $21=HEAP[$i];
        var $22=((($21) + 1)&4294967295);
        _lua_rawseti($20, -2, $22);
        __label__ = 3; break;
      case 3: // $23
        var $24=HEAP[$i];
        var $25=((($24) + 1)&4294967295);
        HEAP[$i]=$25;
        __label__ = 1; break;
      case 4: // $26
        var $27=HEAP[$1];
        _lua_setfield($27, -2, ((__str3340)&4294967295));
        var $28=HEAP[$1];
        _setpath($28, ((__str4341)&4294967295), ((__str5342)&4294967295), ((__str6343)&4294967295));
        var $29=HEAP[$1];
        _setpath($29, ((__str7344)&4294967295), ((__str8345)&4294967295), ((__str9346)&4294967295));
        var $30=HEAP[$1];
        _lua_pushlstring($30, ((__str10347)&4294967295), 9);
        var $31=HEAP[$1];
        _lua_setfield($31, -2, ((__str11348)&4294967295));
        var $32=HEAP[$1];
        var $33=_luaL_findtable($32, -10000, ((__str12349)&4294967295), 2);
        var $34=HEAP[$1];
        _lua_setfield($34, -2, ((__str13350)&4294967295));
        var $35=HEAP[$1];
        _lua_createtable($35, 0, 0);
        var $36=HEAP[$1];
        _lua_setfield($36, -2, ((__str14351)&4294967295));
        var $37=HEAP[$1];
        _lua_pushvalue($37, -10002);
        var $38=HEAP[$1];
        _luaL_register($38, 0, ((_ll_funcs)&4294967295));
        var $39=HEAP[$1];
        _lua_settop($39, -2);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _gctm($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $lib=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checkudata($2, 1, ((__str337)&4294967295));
        var $4=$3;
        HEAP[$lib]=$4;
        var $5=HEAP[$lib];
        var $6=HEAP[$5];
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$lib];
        var $10=HEAP[$9];
        _ll_unloadlib($10);
        __label__ = 2; break;
      case 2: // $11
        var $12=HEAP[$lib];
        HEAP[$12]=0;
        STACKTOP = __stackBase__;
        return 0;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setpath($L, $fieldname, $envname, $def) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $path=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$fieldname;
        HEAP[$3]=$envname;
        HEAP[$4]=$def;
        var $5=HEAP[$3];
        var $6=_getenv($5);
        HEAP[$path]=$6;
        var $7=HEAP[$path];
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$4];
        _lua_pushstring($10, $11);
        __label__ = 3; break;
      case 2: // $12
        var $13=HEAP[$1];
        var $14=HEAP[$path];
        var $15=_luaL_gsub($13, $14, ((__str27364)&4294967295), ((__str28365)&4294967295));
        HEAP[$path]=$15;
        var $16=HEAP[$1];
        var $17=HEAP[$path];
        var $18=HEAP[$4];
        var $19=_luaL_gsub($16, $17, ((__str29366)&4294967295), $18);
        var $20=HEAP[$1];
        _lua_remove($20, -2);
        __label__ = 3; break;
      case 3: // $21
        var $22=HEAP[$1];
        var $23=HEAP[$2];
        _lua_setfield($22, -2, $23);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ll_module($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $modname=__stackBase__+8;
        var $loaded=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_checklstring($3, 1, 0);
        HEAP[$modname]=$4;
        var $5=HEAP[$2];
        var $6=_lua_gettop($5);
        var $7=((($6) + 1)&4294967295);
        HEAP[$loaded]=$7;
        var $8=HEAP[$2];
        _lua_getfield($8, -10000, ((__str12349)&4294967295));
        var $9=HEAP[$2];
        var $10=HEAP[$loaded];
        var $11=HEAP[$modname];
        _lua_getfield($9, $10, $11);
        var $12=HEAP[$2];
        var $13=_lua_type($12, -1);
        var $14=((($13))|0)==5;
        if ($14) { __label__ = 4; break; } else { __label__ = 1; break; }
      case 1: // $15
        var $16=HEAP[$2];
        _lua_settop($16, -2);
        var $17=HEAP[$2];
        var $18=HEAP[$modname];
        var $19=_luaL_findtable($17, -10002, $18, 1);
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $21
        var $22=HEAP[$2];
        var $23=HEAP[$modname];
        var $24=_luaL_error($22, ((__str21358)&4294967295), allocate([$23,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$24;
        __label__ = 8; break;
      case 3: // $25
        var $26=HEAP[$2];
        _lua_pushvalue($26, -1);
        var $27=HEAP[$2];
        var $28=HEAP[$loaded];
        var $29=HEAP[$modname];
        _lua_setfield($27, $28, $29);
        __label__ = 4; break;
      case 4: // $30
        var $31=HEAP[$2];
        _lua_getfield($31, -1, ((__str22359)&4294967295));
        var $32=HEAP[$2];
        var $33=_lua_type($32, -1);
        var $34=((($33))|0)==0;
        if ($34) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $35
        var $36=HEAP[$2];
        _lua_settop($36, -2);
        __label__ = 7; break;
      case 6: // $37
        var $38=HEAP[$2];
        _lua_settop($38, -2);
        var $39=HEAP[$2];
        var $40=HEAP[$modname];
        _modinit($39, $40);
        __label__ = 7; break;
      case 7: // $41
        var $42=HEAP[$2];
        _lua_pushvalue($42, -1);
        var $43=HEAP[$2];
        _setfenv($43);
        var $44=HEAP[$2];
        var $45=HEAP[$loaded];
        var $46=((($45) - 1)&4294967295);
        _dooptions($44, $46);
        HEAP[$1]=0;
        __label__ = 8; break;
      case 8: // $47
        var $48=HEAP[$1];
        STACKTOP = __stackBase__;
        return $48;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ll_require($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $name=__stackBase__+8;
        var $i=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_checklstring($3, 1, 0);
        HEAP[$name]=$4;
        var $5=HEAP[$2];
        _lua_settop($5, 1);
        var $6=HEAP[$2];
        _lua_getfield($6, -10000, ((__str12349)&4294967295));
        var $7=HEAP[$2];
        var $8=HEAP[$name];
        _lua_getfield($7, 2, $8);
        var $9=HEAP[$2];
        var $10=_lua_toboolean($9, -1);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $12
        var $13=HEAP[$2];
        var $14=_lua_touserdata($13, -1);
        var $15=((($14))|0)==(((_sentinel_))|0);
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $16
        var $17=HEAP[$2];
        var $18=HEAP[$name];
        var $19=_luaL_error($17, ((__str17354)&4294967295), allocate([$18,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $20
        HEAP[$1]=1;
        __label__ = 22; break;
      case 4: // $21
        var $22=HEAP[$2];
        _lua_getfield($22, -10001, ((__str3340)&4294967295));
        var $23=HEAP[$2];
        var $24=_lua_type($23, -1);
        var $25=((($24))|0)==5;
        if ($25) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $26
        var $27=HEAP[$2];
        var $28=_luaL_error($27, ((__str18355)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 6; break;
      case 6: // $29
        var $30=HEAP[$2];
        _lua_pushlstring($30, ((__str19356)&4294967295), 0);
        HEAP[$i]=1;
        __label__ = 7; break;
      case 7: // $31
        var $32=HEAP[$2];
        var $33=HEAP[$i];
        _lua_rawgeti($32, -2, $33);
        var $34=HEAP[$2];
        var $35=_lua_type($34, -1);
        var $36=((($35))|0)==0;
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $37
        var $38=HEAP[$2];
        var $39=HEAP[$name];
        var $40=HEAP[$2];
        var $41=_lua_tolstring($40, -2, 0);
        var $42=_luaL_error($38, ((__str20357)&4294967295), allocate([$39,0,0,0,$41,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 9; break;
      case 9: // $43
        var $44=HEAP[$2];
        var $45=HEAP[$name];
        _lua_pushstring($44, $45);
        var $46=HEAP[$2];
        _lua_call($46, 1, 1);
        var $47=HEAP[$2];
        var $48=_lua_type($47, -1);
        var $49=((($48))|0)==6;
        if ($49) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $50
        __label__ = 17; break;
      case 11: // $51
        var $52=HEAP[$2];
        var $53=_lua_isstring($52, -1);
        var $54=((($53))|0)!=0;
        if ($54) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $55
        var $56=HEAP[$2];
        _lua_concat($56, 2);
        __label__ = 14; break;
      case 13: // $57
        var $58=HEAP[$2];
        _lua_settop($58, -2);
        __label__ = 14; break;
      case 14: // $59
        __label__ = 15; break;
      case 15: // $60
        __label__ = 16; break;
      case 16: // $61
        var $62=HEAP[$i];
        var $63=((($62) + 1)&4294967295);
        HEAP[$i]=$63;
        __label__ = 7; break;
      case 17: // $64
        var $65=HEAP[$2];
        _lua_pushlightuserdata($65, _sentinel_);
        var $66=HEAP[$2];
        var $67=HEAP[$name];
        _lua_setfield($66, 2, $67);
        var $68=HEAP[$2];
        var $69=HEAP[$name];
        _lua_pushstring($68, $69);
        var $70=HEAP[$2];
        _lua_call($70, 1, 1);
        var $71=HEAP[$2];
        var $72=_lua_type($71, -1);
        var $73=((($72))|0)==0;
        if ($73) { __label__ = 19; break; } else { __label__ = 18; break; }
      case 18: // $74
        var $75=HEAP[$2];
        var $76=HEAP[$name];
        _lua_setfield($75, 2, $76);
        __label__ = 19; break;
      case 19: // $77
        var $78=HEAP[$2];
        var $79=HEAP[$name];
        _lua_getfield($78, 2, $79);
        var $80=HEAP[$2];
        var $81=_lua_touserdata($80, -1);
        var $82=((($81))|0)==(((_sentinel_))|0);
        if ($82) { __label__ = 20; break; } else { __label__ = 21; break; }
      case 20: // $83
        var $84=HEAP[$2];
        _lua_pushboolean($84, 1);
        var $85=HEAP[$2];
        _lua_pushvalue($85, -1);
        var $86=HEAP[$2];
        var $87=HEAP[$name];
        _lua_setfield($86, 2, $87);
        __label__ = 21; break;
      case 21: // $88
        HEAP[$1]=1;
        __label__ = 22; break;
      case 22: // $89
        var $90=HEAP[$1];
        STACKTOP = __stackBase__;
        return $90;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _modinit($L, $modname) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $dot=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$modname;
        var $3=HEAP[$1];
        _lua_pushvalue($3, -1);
        var $4=HEAP[$1];
        _lua_setfield($4, -2, ((__str25362)&4294967295));
        var $5=HEAP[$1];
        var $6=HEAP[$2];
        _lua_pushstring($5, $6);
        var $7=HEAP[$1];
        _lua_setfield($7, -2, ((__str22359)&4294967295));
        var $8=HEAP[$2];
        var $9=_strrchr($8, 46);
        HEAP[$dot]=$9;
        var $10=HEAP[$dot];
        var $11=((($10))|0)==0;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$2];
        HEAP[$dot]=$13;
        __label__ = 3; break;
      case 2: // $14
        var $15=HEAP[$dot];
        var $16=(($15+1)&4294967295);
        HEAP[$dot]=$16;
        __label__ = 3; break;
      case 3: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$2];
        var $20=HEAP[$dot];
        var $21=HEAP[$2];
        var $22=($20);
        var $23=($21);
        var $24=((($22) - ($23))&4294967295);
        _lua_pushlstring($18, $19, $24);
        var $25=HEAP[$1];
        _lua_setfield($25, -2, ((__str26363)&4294967295));
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setfenv($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 104; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 104);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $ar=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_getstack($2, 1, $ar);
        var $4=((($3))|0)==0;
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; }
      case 1: // $5
        var $6=HEAP[$1];
        var $7=_lua_getinfo($6, ((__str23360)&4294967295), $ar);
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $9
        var $10=HEAP[$1];
        var $11=_lua_iscfunction($10, -1);
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $13
        var $14=HEAP[$1];
        var $15=_luaL_error($14, ((__str24361)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 4; break;
      case 4: // $16
        var $17=HEAP[$1];
        _lua_pushvalue($17, -2);
        var $18=HEAP[$1];
        var $19=_lua_setfenv($18, -2);
        var $20=HEAP[$1];
        _lua_settop($20, -2);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dooptions($L, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$n;
        HEAP[$i]=2;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$i];
        var $5=HEAP[$2];
        var $6=((($4))|0) <= ((($5))|0);
        if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$i];
        _lua_pushvalue($8, $9);
        var $10=HEAP[$1];
        _lua_pushvalue($10, -2);
        var $11=HEAP[$1];
        _lua_call($11, 1, 0);
        __label__ = 3; break;
      case 3: // $12
        var $13=HEAP[$i];
        var $14=((($13) + 1)&4294967295);
        HEAP[$i]=$14;
        __label__ = 1; break;
      case 4: // $15
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _loader_preload($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $name=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, 0);
        HEAP[$name]=$3;
        var $4=HEAP[$1];
        _lua_getfield($4, -10001, ((__str14351)&4294967295));
        var $5=HEAP[$1];
        var $6=_lua_type($5, -1);
        var $7=((($6))|0)==5;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=_luaL_error($9, ((__str45382)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$name];
        _lua_getfield($12, -1, $13);
        var $14=HEAP[$1];
        var $15=_lua_type($14, -1);
        var $16=((($15))|0)==0;
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$name];
        var $20=_lua_pushfstring($18, ((__str46383)&4294967295), allocate([$19,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 4; break;
      case 4: // $21
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _loader_Lua($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $filename=__stackBase__+8;
        var $name=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_checklstring($3, 1, 0);
        HEAP[$name]=$4;
        var $5=HEAP[$2];
        var $6=HEAP[$name];
        var $7=_findfile($5, $6, ((__str4341)&4294967295));
        HEAP[$filename]=$7;
        var $8=HEAP[$filename];
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        HEAP[$1]=1;
        __label__ = 5; break;
      case 2: // $11
        var $12=HEAP[$2];
        var $13=HEAP[$filename];
        var $14=_luaL_loadfile($12, $13);
        var $15=((($14))|0)!=0;
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $16
        var $17=HEAP[$2];
        var $18=HEAP[$filename];
        _loaderror($17, $18);
        __label__ = 4; break;
      case 4: // $19
        HEAP[$1]=1;
        __label__ = 5; break;
      case 5: // $20
        var $21=HEAP[$1];
        STACKTOP = __stackBase__;
        return $21;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _loader_C($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $funcname=__stackBase__+8;
        var $name=__stackBase__+12;
        var $filename=__stackBase__+16;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_checklstring($3, 1, 0);
        HEAP[$name]=$4;
        var $5=HEAP[$2];
        var $6=HEAP[$name];
        var $7=_findfile($5, $6, ((__str7344)&4294967295));
        HEAP[$filename]=$7;
        var $8=HEAP[$filename];
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        HEAP[$1]=1;
        __label__ = 5; break;
      case 2: // $11
        var $12=HEAP[$2];
        var $13=HEAP[$name];
        var $14=_mkfuncname($12, $13);
        HEAP[$funcname]=$14;
        var $15=HEAP[$2];
        var $16=HEAP[$filename];
        var $17=HEAP[$funcname];
        var $18=_ll_loadfunc($15, $16, $17);
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $20
        var $21=HEAP[$2];
        var $22=HEAP[$filename];
        _loaderror($21, $22);
        __label__ = 4; break;
      case 4: // $23
        HEAP[$1]=1;
        __label__ = 5; break;
      case 5: // $24
        var $25=HEAP[$1];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _loader_Croot($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $funcname=__stackBase__+8;
        var $filename=__stackBase__+12;
        var $name=__stackBase__+16;
        var $p=__stackBase__+20;
        var $stat=__stackBase__+24;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_checklstring($3, 1, 0);
        HEAP[$name]=$4;
        var $5=HEAP[$name];
        var $6=_strchr($5, 46);
        HEAP[$p]=$6;
        var $7=HEAP[$p];
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        HEAP[$1]=0;
        __label__ = 9; break;
      case 2: // $10
        var $11=HEAP[$2];
        var $12=HEAP[$name];
        var $13=HEAP[$p];
        var $14=HEAP[$name];
        var $15=($13);
        var $16=($14);
        var $17=((($15) - ($16))&4294967295);
        _lua_pushlstring($11, $12, $17);
        var $18=HEAP[$2];
        var $19=HEAP[$2];
        var $20=_lua_tolstring($19, -1, 0);
        var $21=_findfile($18, $20, ((__str7344)&4294967295));
        HEAP[$filename]=$21;
        var $22=HEAP[$filename];
        var $23=((($22))|0)==0;
        if ($23) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $24
        HEAP[$1]=1;
        __label__ = 9; break;
      case 4: // $25
        var $26=HEAP[$2];
        var $27=HEAP[$name];
        var $28=_mkfuncname($26, $27);
        HEAP[$funcname]=$28;
        var $29=HEAP[$2];
        var $30=HEAP[$filename];
        var $31=HEAP[$funcname];
        var $32=_ll_loadfunc($29, $30, $31);
        HEAP[$stat]=$32;
        var $33=((($32))|0)!=0;
        if ($33) { __label__ = 5; break; } else { __label__ = 8; break; }
      case 5: // $34
        var $35=HEAP[$stat];
        var $36=((($35))|0)!=2;
        if ($36) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $37
        var $38=HEAP[$2];
        var $39=HEAP[$filename];
        _loaderror($38, $39);
        __label__ = 7; break;
      case 7: // $40
        var $41=HEAP[$2];
        var $42=HEAP[$name];
        var $43=HEAP[$filename];
        var $44=_lua_pushfstring($41, ((__str30367)&4294967295), allocate([$42,0,0,0,$43,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=1;
        __label__ = 9; break;
      case 8: // $45
        HEAP[$1]=1;
        __label__ = 9; break;
      case 9: // $46
        var $47=HEAP[$1];
        STACKTOP = __stackBase__;
        return $47;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _findfile($L, $name, $pname) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $path=__stackBase__+16;
        var $filename=__stackBase__+20;
        HEAP[$2]=$L;
        HEAP[$3]=$name;
        HEAP[$4]=$pname;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=_luaL_gsub($5, $6, ((__str36373)&4294967295), ((__str39376)&4294967295));
        HEAP[$3]=$7;
        var $8=HEAP[$2];
        var $9=HEAP[$4];
        _lua_getfield($8, -10001, $9);
        var $10=HEAP[$2];
        var $11=_lua_tolstring($10, -1, 0);
        HEAP[$path]=$11;
        var $12=HEAP[$path];
        var $13=((($12))|0)==0;
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $14
        var $15=HEAP[$2];
        var $16=HEAP[$4];
        var $17=_luaL_error($15, ((__str40377)&4294967295), allocate([$16,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $18
        var $19=HEAP[$2];
        _lua_pushlstring($19, ((__str19356)&4294967295), 0);
        __label__ = 3; break;
      case 3: // $20
        var $21=HEAP[$2];
        var $22=HEAP[$path];
        var $23=_pushnexttemplate($21, $22);
        HEAP[$path]=$23;
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 4; break; } else { __label__ = 7; break; }
      case 4: // $25
        var $26=HEAP[$2];
        var $27=HEAP[$2];
        var $28=_lua_tolstring($27, -1, 0);
        var $29=HEAP[$3];
        var $30=_luaL_gsub($26, $28, ((__str41378)&4294967295), $29);
        HEAP[$filename]=$30;
        var $31=HEAP[$2];
        _lua_remove($31, -2);
        var $32=HEAP[$filename];
        var $33=_readable($32);
        var $34=((($33))|0)!=0;
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $35
        var $36=HEAP[$filename];
        HEAP[$1]=$36;
        __label__ = 8; break;
      case 6: // $37
        var $38=HEAP[$2];
        var $39=HEAP[$filename];
        var $40=_lua_pushfstring($38, ((__str42379)&4294967295), allocate([$39,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        var $41=HEAP[$2];
        _lua_remove($41, -2);
        var $42=HEAP[$2];
        _lua_concat($42, 2);
        __label__ = 3; break;
      case 7: // $43
        HEAP[$1]=0;
        __label__ = 8; break;
      case 8: // $44
        var $45=HEAP[$1];
        STACKTOP = __stackBase__;
        return $45;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _mkfuncname($L, $modname) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $funcname=__stackBase__+8;
        var $mark=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$modname;
        var $3=HEAP[$2];
        var $4=HEAP[((__str35372)&4294967295)];
        var $5=reSign(($4), 8, 0);
        var $6=_strchr($3, $5);
        HEAP[$mark]=$6;
        var $7=HEAP[$mark];
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$mark];
        var $11=(($10+1)&4294967295);
        HEAP[$2]=$11;
        __label__ = 2; break;
      case 2: // $12
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=_luaL_gsub($13, $14, ((__str36373)&4294967295), ((__str37374)&4294967295));
        HEAP[$funcname]=$15;
        var $16=HEAP[$1];
        var $17=HEAP[$funcname];
        var $18=_lua_pushfstring($16, ((__str38375)&4294967295), allocate([$17,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$funcname]=$18;
        var $19=HEAP[$1];
        _lua_remove($19, -2);
        var $20=HEAP[$funcname];
        STACKTOP = __stackBase__;
        return $20;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ll_loadfunc($L, $path, $sym) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $reg=__stackBase__+16;
        var $f=__stackBase__+20;
        HEAP[$2]=$L;
        HEAP[$3]=$path;
        HEAP[$4]=$sym;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=_ll_register($5, $6);
        HEAP[$reg]=$7;
        var $8=HEAP[$reg];
        var $9=HEAP[$8];
        var $10=((($9))|0)==0;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=HEAP[$2];
        var $13=HEAP[$3];
        var $14=_ll_load($12, $13);
        var $15=HEAP[$reg];
        HEAP[$15]=$14;
        __label__ = 2; break;
      case 2: // $16
        var $17=HEAP[$reg];
        var $18=HEAP[$17];
        var $19=((($18))|0)==0;
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $20
        HEAP[$1]=1;
        __label__ = 7; break;
      case 4: // $21
        var $22=HEAP[$2];
        var $23=HEAP[$reg];
        var $24=HEAP[$23];
        var $25=HEAP[$4];
        var $26=_ll_sym($22, $24, $25);
        HEAP[$f]=$26;
        var $27=HEAP[$f];
        var $28=((($27))|0)==0;
        if ($28) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $29
        HEAP[$1]=2;
        __label__ = 7; break;
      case 6: // $30
        var $31=HEAP[$2];
        var $32=HEAP[$f];
        _lua_pushcclosure($31, $32, 0);
        HEAP[$1]=0;
        __label__ = 7; break;
      case 7: // $33
        var $34=HEAP[$1];
        STACKTOP = __stackBase__;
        return $34;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _loaderror($L, $filename) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$filename;
    var $3=HEAP[$1];
    var $4=HEAP[$1];
    var $5=_lua_tolstring($4, 1, 0);
    var $6=HEAP[$2];
    var $7=HEAP[$1];
    var $8=_lua_tolstring($7, -1, 0);
    var $9=_luaL_error($3, ((__str31368)&4294967295), allocate([$5,0,0,0,$6,0,0,0,$8,0,0,0], ["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
    STACKTOP = __stackBase__;
    return;
  }
  

  function _ll_register($L, $path) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $plib=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$path;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=_lua_pushfstring($3, ((__str33370)&4294967295), allocate([((__str34371)&4294967295),0,0,0,$4,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        var $6=HEAP[$1];
        _lua_gettable($6, -10000);
        var $7=HEAP[$1];
        var $8=_lua_type($7, -1);
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $10
        var $11=HEAP[$1];
        var $12=_lua_touserdata($11, -1);
        var $13=$12;
        HEAP[$plib]=$13;
        __label__ = 3; break;
      case 2: // $14
        var $15=HEAP[$1];
        _lua_settop($15, -2);
        var $16=HEAP[$1];
        var $17=_lua_newuserdata($16, 4);
        var $18=$17;
        HEAP[$plib]=$18;
        var $19=HEAP[$plib];
        HEAP[$19]=0;
        var $20=HEAP[$1];
        _lua_getfield($20, -10000, ((__str337)&4294967295));
        var $21=HEAP[$1];
        var $22=_lua_setmetatable($21, -2);
        var $23=HEAP[$1];
        var $24=HEAP[$2];
        var $25=_lua_pushfstring($23, ((__str33370)&4294967295), allocate([((__str34371)&4294967295),0,0,0,$24,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        var $26=HEAP[$1];
        _lua_pushvalue($26, -2);
        var $27=HEAP[$1];
        _lua_settable($27, -10000);
        __label__ = 3; break;
      case 3: // $28
        var $29=HEAP[$plib];
        STACKTOP = __stackBase__;
        return $29;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ll_load($L, $path) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$path;
    var $3=HEAP[$2];
    var $4=HEAP[$1];
    _lua_pushlstring($4, ((__str32369)&4294967295), 58);
    STACKTOP = __stackBase__;
    return 0;
  }
  

  function _ll_sym($L, $lib, $sym) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$lib;
    HEAP[$3]=$sym;
    var $4=HEAP[$2];
    var $5=HEAP[$3];
    var $6=HEAP[$1];
    _lua_pushlstring($6, ((__str32369)&4294967295), 58);
    STACKTOP = __stackBase__;
    return 0;
  }
  

  function _pushnexttemplate($L, $path) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $l=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$path;
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$3];
        var $6=HEAP[$5];
        var $7=reSign(($6), 8, 0);
        var $8=HEAP[((__str44381)&4294967295)];
        var $9=reSign(($8), 8, 0);
        var $10=((($7))|0)==((($9))|0);
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$3];
        var $13=(($12+1)&4294967295);
        HEAP[$3]=$13;
        __label__ = 1; break;
      case 3: // $14
        var $15=HEAP[$3];
        var $16=HEAP[$15];
        var $17=reSign(($16), 8, 0);
        var $18=((($17))|0)==0;
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $19
        HEAP[$1]=0;
        __label__ = 8; break;
      case 5: // $20
        var $21=HEAP[$3];
        var $22=HEAP[((__str44381)&4294967295)];
        var $23=reSign(($22), 8, 0);
        var $24=_strchr($21, $23);
        HEAP[$l]=$24;
        var $25=HEAP[$l];
        var $26=((($25))|0)==0;
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $27
        var $28=HEAP[$3];
        var $29=HEAP[$3];
        var $30=_strlen($29);
        var $31=(($28+$30)&4294967295);
        HEAP[$l]=$31;
        __label__ = 7; break;
      case 7: // $32
        var $33=HEAP[$2];
        var $34=HEAP[$3];
        var $35=HEAP[$l];
        var $36=HEAP[$3];
        var $37=($35);
        var $38=($36);
        var $39=((($37) - ($38))&4294967295);
        _lua_pushlstring($33, $34, $39);
        var $40=HEAP[$l];
        HEAP[$1]=$40;
        __label__ = 8; break;
      case 8: // $41
        var $42=HEAP[$1];
        STACKTOP = __stackBase__;
        return $42;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readable($filename) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $f=__stackBase__+8;
        HEAP[$2]=$filename;
        var $3=HEAP[$2];
        var $4=_fopen($3, ((__str43380)&4294967295));
        HEAP[$f]=$4;
        var $5=HEAP[$f];
        var $6=((($5))|0)==0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $8
        var $9=HEAP[$f];
        var $10=_fclose($9);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 3: // $11
        var $12=HEAP[$1];
        STACKTOP = __stackBase__;
        return $12;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ll_loadlib($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $path=__stackBase__+8;
        var $init=__stackBase__+12;
        var $stat=__stackBase__+16;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_checklstring($3, 1, 0);
        HEAP[$path]=$4;
        var $5=HEAP[$2];
        var $6=_luaL_checklstring($5, 2, 0);
        HEAP[$init]=$6;
        var $7=HEAP[$2];
        var $8=HEAP[$path];
        var $9=HEAP[$init];
        var $10=_ll_loadfunc($7, $8, $9);
        HEAP[$stat]=$10;
        var $11=HEAP[$stat];
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        HEAP[$1]=1;
        __label__ = 6; break;
      case 2: // $14
        var $15=HEAP[$2];
        _lua_pushnil($15);
        var $16=HEAP[$2];
        _lua_insert($16, -2);
        var $17=HEAP[$2];
        var $18=HEAP[$stat];
        var $19=((($18))|0)==1;
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $20
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $21
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $22
        var $23=__lastLabel__ == 3 ? ((__str50387)&4294967295) : (((__str51388)&4294967295));
        _lua_pushstring($17, $23);
        HEAP[$1]=3;
        __label__ = 6; break;
      case 6: // $24
        var $25=HEAP[$1];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ll_seeall($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        _luaL_checktype($2, 1, 5);
        var $3=HEAP[$1];
        var $4=_lua_getmetatable($3, 1);
        var $5=((($4))|0)!=0;
        if ($5) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $6
        var $7=HEAP[$1];
        _lua_createtable($7, 0, 1);
        var $8=HEAP[$1];
        _lua_pushvalue($8, -1);
        var $9=HEAP[$1];
        var $10=_lua_setmetatable($9, 1);
        __label__ = 2; break;
      case 2: // $11
        var $12=HEAP[$1];
        _lua_pushvalue($12, -10002);
        var $13=HEAP[$1];
        _lua_setfield($13, -2, ((__str49386)&4294967295));
        STACKTOP = __stackBase__;
        return 0;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ll_unloadlib($lib) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$lib;
    var $2=HEAP[$1];
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaO_int2fb($x) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $e=__stackBase__+8;
        HEAP[$2]=$x;
        HEAP[$e]=0;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$2];
        var $5=((($4))>>>0) >= 16;
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $6
        var $7=HEAP[$2];
        var $8=((($7) + 1)&4294967295);
        var $9=((($8))>>>0) >>> 1;
        HEAP[$2]=$9;
        var $10=HEAP[$e];
        var $11=((($10) + 1)&4294967295);
        HEAP[$e]=$11;
        __label__ = 1; break;
      case 3: // $12
        var $13=HEAP[$2];
        var $14=((($13))>>>0) < 8;
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $15
        var $16=HEAP[$2];
        HEAP[$1]=$16;
        __label__ = 6; break;
      case 5: // $17
        var $18=HEAP[$e];
        var $19=((($18) + 1)&4294967295);
        var $20=($19) << 3;
        var $21=HEAP[$2];
        var $22=((($21) - 8)&4294967295);
        var $23=($20) | ($22);
        HEAP[$1]=$23;
        __label__ = 6; break;
      case 6: // $24
        var $25=HEAP[$1];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaO_fb2int($x) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $e=__stackBase__+8;
        HEAP[$2]=$x;
        var $3=HEAP[$2];
        var $4=((($3))|0) >> 3;
        var $5=($4) & 31;
        HEAP[$e]=$5;
        var $6=HEAP[$e];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$2];
        HEAP[$1]=$9;
        __label__ = 3; break;
      case 2: // $10
        var $11=HEAP[$2];
        var $12=($11) & 7;
        var $13=((($12) + 8)&4294967295);
        var $14=HEAP[$e];
        var $15=((($14) - 1)&4294967295);
        var $16=($13) << ($15);
        HEAP[$1]=$16;
        __label__ = 3; break;
      case 3: // $17
        var $18=HEAP[$1];
        STACKTOP = __stackBase__;
        return $18;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaO_log2($x) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l=__stackBase__+4;
        HEAP[$1]=$x;
        HEAP[$l]=-1;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$1];
        var $4=((($3))>>>0) >= 256;
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $5
        var $6=HEAP[$l];
        var $7=((($6) + 8)&4294967295);
        HEAP[$l]=$7;
        var $8=HEAP[$1];
        var $9=((($8))>>>0) >>> 8;
        HEAP[$1]=$9;
        __label__ = 1; break;
      case 3: // $10
        var $11=HEAP[$l];
        var $12=HEAP[$1];
        var $13=((_luaO_log2_log_2+$12)&4294967295);
        var $14=HEAP[$13];
        var $15=unSign(($14), 8, 0);
        var $16=((($11) + ($15))&4294967295);
        STACKTOP = __stackBase__;
        return $16;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaO_rawequalObj($t1, $t2) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$t1;
        HEAP[$3]=$t2;
        var $4=HEAP[$2];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=HEAP[$3];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        var $10=((($6))|0)!=((($9))|0);
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        HEAP[$1]=0;
        __label__ = 8; break;
      case 2: // $12
        var $13=HEAP[$2];
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        if ($15 == 0) {
          __label__ = 3; break;
        }
        else if ($15 == 3) {
          __label__ = 4; break;
        }
        else if ($15 == 1) {
          __label__ = 5; break;
        }
        else if ($15 == 2) {
          __label__ = 6; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 3: // $16
        HEAP[$1]=1;
        __label__ = 8; break;
      case 4: // $17
        var $18=HEAP[$2];
        var $19=(($18)&4294967295);
        var $20=$19;
        var $21=HEAP[$20];
        var $22=HEAP[$3];
        var $23=(($22)&4294967295);
        var $24=$23;
        var $25=HEAP[$24];
        var $26=($21) == ($25);
        var $27=unSign(($26), 1, 0);
        HEAP[$1]=$27;
        __label__ = 8; break;
      case 5: // $28
        var $29=HEAP[$2];
        var $30=(($29)&4294967295);
        var $31=$30;
        var $32=HEAP[$31];
        var $33=HEAP[$3];
        var $34=(($33)&4294967295);
        var $35=$34;
        var $36=HEAP[$35];
        var $37=((($32))|0)==((($36))|0);
        var $38=unSign(($37), 1, 0);
        HEAP[$1]=$38;
        __label__ = 8; break;
      case 6: // $39
        var $40=HEAP[$2];
        var $41=(($40)&4294967295);
        var $42=$41;
        var $43=HEAP[$42];
        var $44=HEAP[$3];
        var $45=(($44)&4294967295);
        var $46=$45;
        var $47=HEAP[$46];
        var $48=((($43))|0)==((($47))|0);
        var $49=unSign(($48), 1, 0);
        HEAP[$1]=$49;
        __label__ = 8; break;
      case 7: // $50
        var $51=HEAP[$2];
        var $52=(($51)&4294967295);
        var $53=$52;
        var $54=HEAP[$53];
        var $55=HEAP[$3];
        var $56=(($55)&4294967295);
        var $57=$56;
        var $58=HEAP[$57];
        var $59=((($54))|0)==((($58))|0);
        var $60=unSign(($59), 1, 0);
        HEAP[$1]=$60;
        __label__ = 8; break;
      case 8: // $61
        var $62=HEAP[$1];
        STACKTOP = __stackBase__;
        return $62;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaO_str2d($s, $result) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $endptr=__stackBase__+12;
        HEAP[$2]=$s;
        HEAP[$3]=$result;
        var $4=HEAP[$2];
        var $5=_strtod($4, $endptr);
        var $6=HEAP[$3];
        HEAP[$6]=$5;
        var $7=HEAP[$endptr];
        var $8=HEAP[$2];
        var $9=((($7))|0)==((($8))|0);
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        HEAP[$1]=0;
        __label__ = 13; break;
      case 2: // $11
        var $12=HEAP[$endptr];
        var $13=HEAP[$12];
        var $14=reSign(($13), 8, 0);
        var $15=((($14))|0)==120;
        if ($15) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $16
        var $17=HEAP[$endptr];
        var $18=HEAP[$17];
        var $19=reSign(($18), 8, 0);
        var $20=((($19))|0)==88;
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $21
        var $22=HEAP[$2];
        var $23=_strtoul($22, $endptr, 16);
        var $24=((($23))>>>0);
        var $25=HEAP[$3];
        HEAP[$25]=$24;
        __label__ = 5; break;
      case 5: // $26
        var $27=HEAP[$endptr];
        var $28=HEAP[$27];
        var $29=reSign(($28), 8, 0);
        var $30=((($29))|0)==0;
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $31
        HEAP[$1]=1;
        __label__ = 13; break;
      case 7: // $32
        __label__ = 8; break;
      case 8: // $33
        var $34=HEAP[$endptr];
        var $35=HEAP[$34];
        var $36=unSign(($35), 8, 0);
        var $37=___ctype_b_loc();
        var $38=HEAP[$37];
        var $39=(($38+2*$36)&4294967295);
        var $40=HEAP[$39];
        var $41=unSign(($40), 16, 0);
        var $42=($41) & 8192;
        var $43=((($42))|0)!=0;
        if ($43) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $44
        var $45=HEAP[$endptr];
        var $46=(($45+1)&4294967295);
        HEAP[$endptr]=$46;
        __label__ = 8; break;
      case 10: // $47
        var $48=HEAP[$endptr];
        var $49=HEAP[$48];
        var $50=reSign(($49), 8, 0);
        var $51=((($50))|0)!=0;
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $52
        HEAP[$1]=0;
        __label__ = 13; break;
      case 12: // $53
        HEAP[$1]=1;
        __label__ = 13; break;
      case 13: // $54
        var $55=HEAP[$1];
        STACKTOP = __stackBase__;
        return $55;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaO_pushvfstring($L, $fmt, $argp) {
    var __stackBase__  = STACKTOP; STACKTOP += 65; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 65);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $n=__stackBase__+12;
        var $e=__stackBase__+16;
        var $i_o=__stackBase__+20;
        var $s=__stackBase__+24;
        var $buff=__stackBase__+28;
        var $i_o1=__stackBase__+30;
        var $i_o2=__stackBase__+34;
        var $buff3=__stackBase__+38;
        var $buff4=__stackBase__+62;
        HEAP[$1]=$L;
        HEAP[$2]=$fmt;
        HEAP[$3]=$argp;
        HEAP[$n]=1;
        var $4=HEAP[$1];
        _pushstr($4, ((__str391)&4294967295));
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$2];
        var $7=_strchr($6, 37);
        HEAP[$e]=$7;
        var $8=HEAP[$e];
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $10
        __label__ = 23; break;
      case 3: // $11
        var $12=HEAP[$1];
        var $13=(($12+8)&4294967295);
        var $14=HEAP[$13];
        HEAP[$i_o]=$14;
        var $15=HEAP[$1];
        var $16=HEAP[$2];
        var $17=HEAP[$e];
        var $18=HEAP[$2];
        var $19=($17);
        var $20=($18);
        var $21=((($19) - ($20))&4294967295);
        var $22=_luaS_newlstr($15, $16, $21);
        var $23=$22;
        var $24=HEAP[$i_o];
        var $25=(($24)&4294967295);
        var $26=$25;
        HEAP[$26]=$23;
        var $27=HEAP[$i_o];
        var $28=(($27+8)&4294967295);
        HEAP[$28]=4;
        var $29=HEAP[$1];
        var $30=(($29+28)&4294967295);
        var $31=HEAP[$30];
        var $32=$31;
        var $33=HEAP[$1];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=$35;
        var $37=($32);
        var $38=($36);
        var $39=((($37) - ($38))&4294967295);
        var $40=((($39))|0) <= 12;
        if ($40) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $41
        var $42=HEAP[$1];
        _luaD_growstack($42, 1);
        __label__ = 6; break;
      case 5: // $43
        __label__ = 6; break;
      case 6: // $44
        var $45=HEAP[$1];
        var $46=(($45+8)&4294967295);
        var $47=HEAP[$46];
        var $48=(($47+12)&4294967295);
        HEAP[$46]=$48;
        var $49=HEAP[$e];
        var $50=(($49+1)&4294967295);
        var $51=HEAP[$50];
        var $52=reSign(($51), 8, 0);
        if ($52 == 115) {
          __label__ = 7; break;
        }
        else if ($52 == 99) {
          __label__ = 10; break;
        }
        else if ($52 == 100) {
          __label__ = 11; break;
        }
        else if ($52 == 102) {
          __label__ = 15; break;
        }
        else if ($52 == 112) {
          __label__ = 19; break;
        }
        else if ($52 == 37) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 7: // $53
        var $54=HEAP[$3];
        var $55=$54;
        var $56=(($54+4)&4294967295);
        HEAP[$3]=$56;
        var $57=HEAP[$55];
        HEAP[$s]=$57;
        var $58=HEAP[$s];
        var $59=((($58))|0)==0;
        if ($59) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $60
        HEAP[$s]=((__str1392)&4294967295);
        __label__ = 9; break;
      case 9: // $61
        var $62=HEAP[$1];
        var $63=HEAP[$s];
        _pushstr($62, $63);
        __label__ = 22; break;
      case 10: // $64
        var $65=HEAP[$3];
        var $66=$65;
        var $67=(($65+4)&4294967295);
        HEAP[$3]=$67;
        var $68=HEAP[$66];
        var $69=((($68)) & 255);
        var $70=(($buff)&4294967295);
        HEAP[$70]=$69;
        var $71=(($buff+1)&4294967295);
        HEAP[$71]=0;
        var $72=HEAP[$1];
        var $73=(($buff)&4294967295);
        _pushstr($72, $73);
        __label__ = 22; break;
      case 11: // $74
        var $75=HEAP[$1];
        var $76=(($75+8)&4294967295);
        var $77=HEAP[$76];
        HEAP[$i_o1]=$77;
        var $78=HEAP[$3];
        var $79=$78;
        var $80=(($78+4)&4294967295);
        HEAP[$3]=$80;
        var $81=HEAP[$79];
        var $82=((($81))|0);
        var $83=HEAP[$i_o1];
        var $84=(($83)&4294967295);
        var $85=$84;
        HEAP[$85]=$82;
        var $86=HEAP[$i_o1];
        var $87=(($86+8)&4294967295);
        HEAP[$87]=3;
        var $88=HEAP[$1];
        var $89=(($88+28)&4294967295);
        var $90=HEAP[$89];
        var $91=$90;
        var $92=HEAP[$1];
        var $93=(($92+8)&4294967295);
        var $94=HEAP[$93];
        var $95=$94;
        var $96=($91);
        var $97=($95);
        var $98=((($96) - ($97))&4294967295);
        var $99=((($98))|0) <= 12;
        if ($99) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $100
        var $101=HEAP[$1];
        _luaD_growstack($101, 1);
        __label__ = 14; break;
      case 13: // $102
        __label__ = 14; break;
      case 14: // $103
        var $104=HEAP[$1];
        var $105=(($104+8)&4294967295);
        var $106=HEAP[$105];
        var $107=(($106+12)&4294967295);
        HEAP[$105]=$107;
        __label__ = 22; break;
      case 15: // $108
        var $109=HEAP[$1];
        var $110=(($109+8)&4294967295);
        var $111=HEAP[$110];
        HEAP[$i_o2]=$111;
        var $112=HEAP[$3];
        var $113=$112;
        var $114=(($112+8)&4294967295);
        HEAP[$3]=$114;
        var $115=HEAP[$113];
        var $116=HEAP[$i_o2];
        var $117=(($116)&4294967295);
        var $118=$117;
        HEAP[$118]=$115;
        var $119=HEAP[$i_o2];
        var $120=(($119+8)&4294967295);
        HEAP[$120]=3;
        var $121=HEAP[$1];
        var $122=(($121+28)&4294967295);
        var $123=HEAP[$122];
        var $124=$123;
        var $125=HEAP[$1];
        var $126=(($125+8)&4294967295);
        var $127=HEAP[$126];
        var $128=$127;
        var $129=($124);
        var $130=($128);
        var $131=((($129) - ($130))&4294967295);
        var $132=((($131))|0) <= 12;
        if ($132) { __label__ = 16; break; } else { __label__ = 17; break; }
      case 16: // $133
        var $134=HEAP[$1];
        _luaD_growstack($134, 1);
        __label__ = 18; break;
      case 17: // $135
        __label__ = 18; break;
      case 18: // $136
        var $137=HEAP[$1];
        var $138=(($137+8)&4294967295);
        var $139=HEAP[$138];
        var $140=(($139+12)&4294967295);
        HEAP[$138]=$140;
        __label__ = 22; break;
      case 19: // $141
        var $142=(($buff3)&4294967295);
        var $143=HEAP[$3];
        var $144=$143;
        var $145=(($143+4)&4294967295);
        HEAP[$3]=$145;
        var $146=HEAP[$144];
        var $147=_sprintf($142, ((__str2393)&4294967295), allocate([$146,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        var $148=HEAP[$1];
        var $149=(($buff3)&4294967295);
        _pushstr($148, $149);
        __label__ = 22; break;
      case 20: // $150
        var $151=HEAP[$1];
        _pushstr($151, ((__str3394)&4294967295));
        __label__ = 22; break;
      case 21: // $152
        var $153=(($buff4)&4294967295);
        HEAP[$153]=37;
        var $154=HEAP[$e];
        var $155=(($154+1)&4294967295);
        var $156=HEAP[$155];
        var $157=(($buff4+1)&4294967295);
        HEAP[$157]=$156;
        var $158=(($buff4+2)&4294967295);
        HEAP[$158]=0;
        var $159=HEAP[$1];
        var $160=(($buff4)&4294967295);
        _pushstr($159, $160);
        __label__ = 22; break;
      case 22: // $161
        var $162=HEAP[$n];
        var $163=((($162) + 2)&4294967295);
        HEAP[$n]=$163;
        var $164=HEAP[$e];
        var $165=(($164+2)&4294967295);
        HEAP[$2]=$165;
        __label__ = 1; break;
      case 23: // $166
        var $167=HEAP[$1];
        var $168=HEAP[$2];
        _pushstr($167, $168);
        var $169=HEAP[$1];
        var $170=HEAP[$n];
        var $171=((($170) + 1)&4294967295);
        var $172=HEAP[$1];
        var $173=(($172+8)&4294967295);
        var $174=HEAP[$173];
        var $175=HEAP[$1];
        var $176=(($175+12)&4294967295);
        var $177=HEAP[$176];
        var $178=($174);
        var $179=($177);
        var $180=((($178) - ($179))&4294967295);
        var $181=((((($180))|0)/12)|0);
        var $182=((($181) - 1)&4294967295);
        _luaV_concat($169, $171, $182);
        var $183=HEAP[$n];
        var $184=HEAP[$1];
        var $185=(($184+8)&4294967295);
        var $186=HEAP[$185];
        var $187=((0 - ($183))&4294967295);
        var $188=(($186+12*$187)&4294967295);
        HEAP[$185]=$188;
        var $189=HEAP[$1];
        var $190=(($189+8)&4294967295);
        var $191=HEAP[$190];
        var $192=(($191+-12)&4294967295);
        var $193=(($192)&4294967295);
        var $194=$193;
        var $195=HEAP[$194];
        var $196=$195;
        var $197=(($196+16)&4294967295);
        var $198=$197;
        STACKTOP = __stackBase__;
        return $198;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pushstr($L, $str) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i_o=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$str;
        var $3=HEAP[$1];
        var $4=(($3+8)&4294967295);
        var $5=HEAP[$4];
        HEAP[$i_o]=$5;
        var $6=HEAP[$1];
        var $7=HEAP[$2];
        var $8=HEAP[$2];
        var $9=_strlen($8);
        var $10=_luaS_newlstr($6, $7, $9);
        var $11=$10;
        var $12=HEAP[$i_o];
        var $13=(($12)&4294967295);
        var $14=$13;
        HEAP[$14]=$11;
        var $15=HEAP[$i_o];
        var $16=(($15+8)&4294967295);
        HEAP[$16]=4;
        var $17=HEAP[$1];
        var $18=(($17+28)&4294967295);
        var $19=HEAP[$18];
        var $20=$19;
        var $21=HEAP[$1];
        var $22=(($21+8)&4294967295);
        var $23=HEAP[$22];
        var $24=$23;
        var $25=($20);
        var $26=($24);
        var $27=((($25) - ($26))&4294967295);
        var $28=((($27))|0) <= 12;
        if ($28) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $29
        var $30=HEAP[$1];
        _luaD_growstack($30, 1);
        __label__ = 3; break;
      case 2: // $31
        __label__ = 3; break;
      case 3: // $32
        var $33=HEAP[$1];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+12)&4294967295);
        HEAP[$34]=$36;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaO_pushfstring($L, $fmt) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $msg=__stackBase__+8;
    var $argp=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$fmt;
    var $3=$argp;
    HEAP[$3]=arguments[_luaO_pushfstring.length];;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    var $6=HEAP[$argp];
    var $7=_luaO_pushvfstring($4, $5, $6);
    HEAP[$msg]=$7;
    var $8=$argp;
    ;;
    var $9=HEAP[$msg];
    STACKTOP = __stackBase__;
    return $9;
  }
  

  function _luaO_chunkid($out, $source, $bufflen) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $l=__stackBase__+12;
        var $len=__stackBase__+16;
        HEAP[$1]=$out;
        HEAP[$2]=$source;
        HEAP[$3]=$bufflen;
        var $4=HEAP[$2];
        var $5=HEAP[$4];
        var $6=reSign(($5), 8, 0);
        var $7=((($6))|0)==61;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$2];
        var $11=(($10+1)&4294967295);
        var $12=HEAP[$3];
        var $13=_strncpy($9, $11, $12);
        var $14=HEAP[$3];
        var $15=((($14) - 1)&4294967295);
        var $16=HEAP[$1];
        var $17=(($16+$15)&4294967295);
        HEAP[$17]=0;
        __label__ = 13; break;
      case 2: // $18
        var $19=HEAP[$2];
        var $20=HEAP[$19];
        var $21=reSign(($20), 8, 0);
        var $22=((($21))|0)==64;
        if ($22) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $23
        var $24=HEAP[$2];
        var $25=(($24+1)&4294967295);
        HEAP[$2]=$25;
        var $26=HEAP[$3];
        var $27=((($26) - 8)&4294967295);
        HEAP[$3]=$27;
        var $28=HEAP[$2];
        var $29=_strlen($28);
        HEAP[$l]=$29;
        var $30=HEAP[$1];
        var $31=_strcpy($30, ((__str391)&4294967295));
        var $32=HEAP[$l];
        var $33=HEAP[$3];
        var $34=((($32))>>>0) > ((($33))>>>0);
        if ($34) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $35
        var $36=HEAP[$l];
        var $37=HEAP[$3];
        var $38=((($36) - ($37))&4294967295);
        var $39=HEAP[$2];
        var $40=(($39+$38)&4294967295);
        HEAP[$2]=$40;
        var $41=HEAP[$1];
        var $42=_strcat($41, ((__str4395)&4294967295));
        __label__ = 5; break;
      case 5: // $43
        var $44=HEAP[$1];
        var $45=HEAP[$2];
        var $46=_strcat($44, $45);
        __label__ = 12; break;
      case 6: // $47
        var $48=HEAP[$2];
        var $49=_strcspn($48, ((__str5396)&4294967295));
        HEAP[$len]=$49;
        var $50=HEAP[$3];
        var $51=((($50) - 17)&4294967295);
        HEAP[$3]=$51;
        var $52=HEAP[$len];
        var $53=HEAP[$3];
        var $54=((($52))>>>0) > ((($53))>>>0);
        if ($54) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $55
        var $56=HEAP[$3];
        HEAP[$len]=$56;
        __label__ = 8; break;
      case 8: // $57
        var $58=HEAP[$1];
        var $59=_strcpy($58, ((__str6397)&4294967295));
        var $60=HEAP[$len];
        var $61=HEAP[$2];
        var $62=(($61+$60)&4294967295);
        var $63=HEAP[$62];
        var $64=reSign(($63), 8, 0);
        var $65=((($64))|0)!=0;
        if ($65) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $66
        var $67=HEAP[$1];
        var $68=HEAP[$2];
        var $69=HEAP[$len];
        var $70=_strncat($67, $68, $69);
        var $71=HEAP[$1];
        var $72=_strcat($71, ((__str4395)&4294967295));
        __label__ = 11; break;
      case 10: // $73
        var $74=HEAP[$1];
        var $75=HEAP[$2];
        var $76=_strcat($74, $75);
        __label__ = 11; break;
      case 11: // $77
        var $78=HEAP[$1];
        var $79=_strcat($78, ((__str7398)&4294967295));
        __label__ = 12; break;
      case 12: // $80
        __label__ = 13; break;
      case 13: // $81
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaopen_os($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_register($2, ((__str443)&4294967295), ((_syslib)&4294967295));
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _os_clock($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_clock();
    var $4=((($3))|0);
    var $5=($4) / 1000000;
    _lua_pushnumber($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _os_date($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8427; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8427);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $s=__stackBase__+4;
        var $t=__stackBase__+8;
        var $stm=__stackBase__+12;
        var $cc=__stackBase__+16;
        var $b=__stackBase__+19;
        var $reslen=__stackBase__+8223;
        var $buff=__stackBase__+8227;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_optlstring($2, 1, ((__str27470)&4294967295), 0);
        HEAP[$s]=$3;
        var $4=HEAP[$1];
        var $5=_lua_type($4, 2);
        var $6=((($5))|0) <= 0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=_time(0);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=_luaL_checknumber($10, 2);
        var $12=((($11))|0);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $13
        var $14=__lastLabel__ == 1 ? $8 : ($12);
        HEAP[$t]=$14;
        var $15=HEAP[$s];
        var $16=HEAP[$15];
        var $17=reSign(($16), 8, 0);
        var $18=((($17))|0)==33;
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $19
        var $20=_gmtime($t);
        HEAP[$stm]=$20;
        var $21=HEAP[$s];
        var $22=(($21+1)&4294967295);
        HEAP[$s]=$22;
        __label__ = 6; break;
      case 5: // $23
        var $24=_localtime($t);
        HEAP[$stm]=$24;
        __label__ = 6; break;
      case 6: // $25
        var $26=HEAP[$stm];
        var $27=((($26))|0)==0;
        if ($27) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $28
        var $29=HEAP[$1];
        _lua_pushnil($29);
        __label__ = 22; break;
      case 8: // $30
        var $31=HEAP[$s];
        var $32=_strcmp($31, ((__str28471)&4294967295));
        var $33=((($32))|0)==0;
        if ($33) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $34
        var $35=HEAP[$1];
        _lua_createtable($35, 0, 9);
        var $36=HEAP[$1];
        var $37=HEAP[$stm];
        var $38=(($37)&4294967295);
        var $39=HEAP[$38];
        _setfield($36, ((__str13456)&4294967295), $39);
        var $40=HEAP[$1];
        var $41=HEAP[$stm];
        var $42=(($41+4)&4294967295);
        var $43=HEAP[$42];
        _setfield($40, ((__str14457)&4294967295), $43);
        var $44=HEAP[$1];
        var $45=HEAP[$stm];
        var $46=(($45+8)&4294967295);
        var $47=HEAP[$46];
        _setfield($44, ((__str15458)&4294967295), $47);
        var $48=HEAP[$1];
        var $49=HEAP[$stm];
        var $50=(($49+12)&4294967295);
        var $51=HEAP[$50];
        _setfield($48, ((__str16459)&4294967295), $51);
        var $52=HEAP[$1];
        var $53=HEAP[$stm];
        var $54=(($53+16)&4294967295);
        var $55=HEAP[$54];
        var $56=((($55) + 1)&4294967295);
        _setfield($52, ((__str17460)&4294967295), $56);
        var $57=HEAP[$1];
        var $58=HEAP[$stm];
        var $59=(($58+20)&4294967295);
        var $60=HEAP[$59];
        var $61=((($60) + 1900)&4294967295);
        _setfield($57, ((__str18461)&4294967295), $61);
        var $62=HEAP[$1];
        var $63=HEAP[$stm];
        var $64=(($63+24)&4294967295);
        var $65=HEAP[$64];
        var $66=((($65) + 1)&4294967295);
        _setfield($62, ((__str29472)&4294967295), $66);
        var $67=HEAP[$1];
        var $68=HEAP[$stm];
        var $69=(($68+28)&4294967295);
        var $70=HEAP[$69];
        var $71=((($70) + 1)&4294967295);
        _setfield($67, ((__str30473)&4294967295), $71);
        var $72=HEAP[$1];
        var $73=HEAP[$stm];
        var $74=(($73+32)&4294967295);
        var $75=HEAP[$74];
        _setboolfield($72, ((__str19462)&4294967295), $75);
        __label__ = 21; break;
      case 10: // $76
        var $77=(($cc)&4294967295);
        HEAP[$77]=37;
        var $78=(($cc+2)&4294967295);
        HEAP[$78]=0;
        var $79=HEAP[$1];
        _luaL_buffinit($79, $b);
        __label__ = 11; break;
      case 11: // $80
        var $81=HEAP[$s];
        var $82=HEAP[$81];
        var $83=reSign(($82), 8, 0)!=0;
        if ($83) { __label__ = 12; break; } else { __label__ = 20; break; }
      case 12: // $84
        var $85=HEAP[$s];
        var $86=HEAP[$85];
        var $87=reSign(($86), 8, 0);
        var $88=((($87))|0)!=37;
        if ($88) { __label__ = 14; break; } else { __label__ = 13; break; }
      case 13: // $89
        var $90=HEAP[$s];
        var $91=(($90+1)&4294967295);
        var $92=HEAP[$91];
        var $93=reSign(($92), 8, 0);
        var $94=((($93))|0)==0;
        if ($94) { __label__ = 14; break; } else { __label__ = 17; break; }
      case 14: // $95
        var $96=(($b)&4294967295);
        var $97=HEAP[$96];
        var $98=(($b+12)&4294967295);
        var $99=(($98)&4294967295);
        var $100=(($99+8192)&4294967295);
        var $101=((($97))>>>0) < ((($100))>>>0);
        if ($101) { __lastLabel__ = 14; __label__ = 16; break; } else { __lastLabel__ = 14; __label__ = 15; break; }
      case 15: // $102
        var $103=_luaL_prepbuffer($b);
        var $104=((($103))|0)!=0;
        __lastLabel__ = 15; __label__ = 16; break;
      case 16: // $105
        var $106=__lastLabel__ == 14 ? 1 : ($104);
        var $107=unSign(($106), 1, 0);
        var $108=HEAP[$s];
        var $109=HEAP[$108];
        var $110=(($b)&4294967295);
        var $111=HEAP[$110];
        var $112=(($111+1)&4294967295);
        HEAP[$110]=$112;
        HEAP[$111]=$109;
        __label__ = 18; break;
      case 17: // $113
        var $114=HEAP[$s];
        var $115=(($114+1)&4294967295);
        HEAP[$s]=$115;
        var $116=HEAP[$115];
        var $117=(($cc+1)&4294967295);
        HEAP[$117]=$116;
        var $118=(($buff)&4294967295);
        var $119=(($cc)&4294967295);
        var $120=HEAP[$stm];
        var $121=_strftime($118, 200, $119, $120);
        HEAP[$reslen]=$121;
        var $122=(($buff)&4294967295);
        var $123=HEAP[$reslen];
        _luaL_addlstring($b, $122, $123);
        __label__ = 18; break;
      case 18: // $124
        __label__ = 19; break;
      case 19: // $125
        var $126=HEAP[$s];
        var $127=(($126+1)&4294967295);
        HEAP[$s]=$127;
        __label__ = 11; break;
      case 20: // $128
        _luaL_pushresult($b);
        __label__ = 21; break;
      case 21: // $129
        __label__ = 22; break;
      case 22: // $130
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _os_difftime($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checknumber($3, 1);
    var $5=((($4))|0);
    var $6=HEAP[$1];
    var $7=_luaL_optnumber($6, 2, 0);
    var $8=((($7))|0);
    var $9=_difftime($5, $8);
    _lua_pushnumber($2, $9);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _os_execute($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_optlstring($3, 1, 0, 0);
    var $5=_system($4);
    _lua_pushinteger($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _os_exit($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$2]=$L;
    var $3=HEAP[$2];
    var $4=_luaL_optinteger($3, 1, 0);
    _exit($4);
    throw "Reached an unreachable!"
    var $6=HEAP[$1];
    STACKTOP = __stackBase__;
    return $6;
  }
  

  function _os_getenv($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    var $4=_luaL_checklstring($3, 1, 0);
    var $5=_getenv($4);
    _lua_pushstring($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _os_remove($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $filename=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checklstring($2, 1, 0);
    HEAP[$filename]=$3;
    var $4=HEAP[$1];
    var $5=HEAP[$filename];
    var $6=_remove($5);
    var $7=((($6))|0)==0;
    var $8=unSign(($7), 1, 0);
    var $9=HEAP[$filename];
    var $10=_os_pushresult($4, $8, $9);
    STACKTOP = __stackBase__;
    return $10;
  }
  

  function _os_rename($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $fromname=__stackBase__+4;
    var $toname=__stackBase__+8;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checklstring($2, 1, 0);
    HEAP[$fromname]=$3;
    var $4=HEAP[$1];
    var $5=_luaL_checklstring($4, 2, 0);
    HEAP[$toname]=$5;
    var $6=HEAP[$1];
    var $7=HEAP[$fromname];
    var $8=HEAP[$toname];
    var $9=_rename($7, $8);
    var $10=((($9))|0)==0;
    var $11=unSign(($10), 1, 0);
    var $12=HEAP[$fromname];
    var $13=_os_pushresult($6, $11, $12);
    STACKTOP = __stackBase__;
    return $13;
  }
  

  function _os_setlocale($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $l=__stackBase__+4;
    var $op=__stackBase__+8;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_optlstring($2, 1, 0, 0);
    HEAP[$l]=$3;
    var $4=HEAP[$1];
    var $5=_luaL_checkoption($4, 2, ((__str21464)&4294967295), ((_os_setlocale_catnames)&4294967295));
    HEAP[$op]=$5;
    var $6=HEAP[$1];
    var $7=HEAP[$op];
    var $8=((_os_setlocale_cat+$7*4)&4294967295);
    var $9=HEAP[$8];
    var $10=HEAP[$l];
    var $11=_setlocale($9, $10);
    _lua_pushstring($6, $11);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _os_time($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $t=__stackBase__+4;
        var $ts=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_type($2, 1);
        var $4=((($3))|0) <= 0;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=_time(0);
        HEAP[$t]=$6;
        __label__ = 3; break;
      case 2: // $7
        var $8=HEAP[$1];
        _luaL_checktype($8, 1, 5);
        var $9=HEAP[$1];
        _lua_settop($9, 1);
        var $10=HEAP[$1];
        var $11=_getfield($10, ((__str13456)&4294967295), 0);
        var $12=(($ts)&4294967295);
        HEAP[$12]=$11;
        var $13=HEAP[$1];
        var $14=_getfield($13, ((__str14457)&4294967295), 0);
        var $15=(($ts+4)&4294967295);
        HEAP[$15]=$14;
        var $16=HEAP[$1];
        var $17=_getfield($16, ((__str15458)&4294967295), 12);
        var $18=(($ts+8)&4294967295);
        HEAP[$18]=$17;
        var $19=HEAP[$1];
        var $20=_getfield($19, ((__str16459)&4294967295), -1);
        var $21=(($ts+12)&4294967295);
        HEAP[$21]=$20;
        var $22=HEAP[$1];
        var $23=_getfield($22, ((__str17460)&4294967295), -1);
        var $24=((($23) - 1)&4294967295);
        var $25=(($ts+16)&4294967295);
        HEAP[$25]=$24;
        var $26=HEAP[$1];
        var $27=_getfield($26, ((__str18461)&4294967295), -1);
        var $28=((($27) - 1900)&4294967295);
        var $29=(($ts+20)&4294967295);
        HEAP[$29]=$28;
        var $30=HEAP[$1];
        var $31=_getboolfield($30, ((__str19462)&4294967295));
        var $32=(($ts+32)&4294967295);
        HEAP[$32]=$31;
        var $33=_mktime($ts);
        HEAP[$t]=$33;
        __label__ = 3; break;
      case 3: // $34
        var $35=HEAP[$t];
        var $36=((($35))|0)==-1;
        if ($36) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $37
        var $38=HEAP[$1];
        _lua_pushnil($38);
        __label__ = 6; break;
      case 5: // $39
        var $40=HEAP[$1];
        var $41=HEAP[$t];
        var $42=((($41))|0);
        _lua_pushnumber($40, $42);
        __label__ = 6; break;
      case 6: // $43
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _os_tmpname($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $buff=__stackBase__+8;
        var $err=__stackBase__+28;
        HEAP[$2]=$L;
        var $3=(($buff)&4294967295);
        var $4=_tmpnam($3);
        var $5=((($4))|0)==0;
        var $6=unSign(($5), 1, 0);
        HEAP[$err]=$6;
        var $7=HEAP[$err];
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$2];
        var $11=_luaL_error($10, ((__str12455)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$11;
        __label__ = 3; break;
      case 2: // $12
        var $13=HEAP[$2];
        var $14=(($buff)&4294967295);
        _lua_pushstring($13, $14);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 3: // $15
        var $16=HEAP[$1];
        STACKTOP = __stackBase__;
        return $16;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getfield($L, $key, $d) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $res=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$key;
        HEAP[$4]=$d;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        _lua_getfield($5, -1, $6);
        var $7=HEAP[$2];
        var $8=_lua_isnumber($7, -1);
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$2];
        var $12=_lua_tointeger($11, -1);
        HEAP[$res]=$12;
        __label__ = 5; break;
      case 2: // $13
        var $14=HEAP[$4];
        var $15=((($14))|0) < 0;
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $16
        var $17=HEAP[$2];
        var $18=HEAP[$3];
        var $19=_luaL_error($17, ((__str20463)&4294967295), allocate([$18,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$19;
        __label__ = 6; break;
      case 4: // $20
        var $21=HEAP[$4];
        HEAP[$res]=$21;
        __label__ = 5; break;
      case 5: // $22
        var $23=HEAP[$2];
        _lua_settop($23, -2);
        var $24=HEAP[$res];
        HEAP[$1]=$24;
        __label__ = 6; break;
      case 6: // $25
        var $26=HEAP[$1];
        STACKTOP = __stackBase__;
        return $26;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getboolfield($L, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $res=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$key;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        _lua_getfield($3, -1, $4);
        var $5=HEAP[$1];
        var $6=_lua_type($5, -1);
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=_lua_toboolean($10, -1);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $12
        var $13=__lastLabel__ == 1 ? -1 : ($11);
        HEAP[$res]=$13;
        var $14=HEAP[$1];
        _lua_settop($14, -2);
        var $15=HEAP[$res];
        STACKTOP = __stackBase__;
        return $15;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _os_pushresult($L, $i, $filename) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $en=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$i;
        HEAP[$4]=$filename;
        var $5=___errno_location();
        var $6=HEAP[$5];
        HEAP[$en]=$6;
        var $7=HEAP[$3];
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$2];
        _lua_pushboolean($10, 1);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 2: // $11
        var $12=HEAP[$2];
        _lua_pushnil($12);
        var $13=HEAP[$2];
        var $14=HEAP[$4];
        var $15=HEAP[$en];
        var $16=_strerror($15);
        var $17=_lua_pushfstring($13, ((__str26469)&4294967295), allocate([$14,0,0,0,$16,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        var $18=HEAP[$2];
        var $19=HEAP[$en];
        _lua_pushinteger($18, $19);
        HEAP[$1]=3;
        __label__ = 3; break;
      case 3: // $20
        var $21=HEAP[$1];
        STACKTOP = __stackBase__;
        return $21;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setfield($L, $key, $value) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$key;
    HEAP[$3]=$value;
    var $4=HEAP[$1];
    var $5=HEAP[$3];
    _lua_pushinteger($4, $5);
    var $6=HEAP[$1];
    var $7=HEAP[$2];
    _lua_setfield($6, -2, $7);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _setboolfield($L, $key, $value) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$key;
        HEAP[$3]=$value;
        var $4=HEAP[$3];
        var $5=((($4))|0) < 0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        __label__ = 3; break;
      case 2: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$3];
        _lua_pushboolean($8, $9);
        var $10=HEAP[$1];
        var $11=HEAP[$2];
        _lua_setfield($10, -2, $11);
        __label__ = 3; break;
      case 3: // $12
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaY_parser($L, $z, $buff, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 648; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 648);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    var $lexstate=__stackBase__+16;
    var $funcstate=__stackBase__+76;
    HEAP[$1]=$L;
    HEAP[$2]=$z;
    HEAP[$3]=$buff;
    HEAP[$4]=$name;
    var $5=HEAP[$3];
    var $6=(($lexstate+48)&4294967295);
    HEAP[$6]=$5;
    var $7=HEAP[$1];
    var $8=HEAP[$2];
    var $9=HEAP[$1];
    var $10=HEAP[$4];
    var $11=HEAP[$4];
    var $12=_strlen($11);
    var $13=_luaS_newlstr($9, $10, $12);
    _luaX_setinput($7, $lexstate, $8, $13);
    _open_func($lexstate, $funcstate);
    var $14=(($funcstate)&4294967295);
    var $15=HEAP[$14];
    var $16=(($15+74)&4294967295);
    HEAP[$16]=2;
    _luaX_next($lexstate);
    _chunk($lexstate);
    _check($lexstate, 287);
    _close_func($lexstate);
    var $17=(($funcstate)&4294967295);
    var $18=HEAP[$17];
    STACKTOP = __stackBase__;
    return $18;
  }
  

  function _open_func($ls, $fs) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $L=__stackBase__+8;
        var $f=__stackBase__+12;
        var $i_o=__stackBase__+16;
        var $i_o1=__stackBase__+20;
        HEAP[$1]=$ls;
        HEAP[$2]=$fs;
        var $3=HEAP[$1];
        var $4=(($3+40)&4294967295);
        var $5=HEAP[$4];
        HEAP[$L]=$5;
        var $6=HEAP[$L];
        var $7=_luaF_newproto($6);
        HEAP[$f]=$7;
        var $8=HEAP[$f];
        var $9=HEAP[$2];
        var $10=(($9)&4294967295);
        HEAP[$10]=$8;
        var $11=HEAP[$1];
        var $12=(($11+36)&4294967295);
        var $13=HEAP[$12];
        var $14=HEAP[$2];
        var $15=(($14+8)&4294967295);
        HEAP[$15]=$13;
        var $16=HEAP[$1];
        var $17=HEAP[$2];
        var $18=(($17+12)&4294967295);
        HEAP[$18]=$16;
        var $19=HEAP[$L];
        var $20=HEAP[$2];
        var $21=(($20+16)&4294967295);
        HEAP[$21]=$19;
        var $22=HEAP[$2];
        var $23=HEAP[$1];
        var $24=(($23+36)&4294967295);
        HEAP[$24]=$22;
        var $25=HEAP[$2];
        var $26=(($25+24)&4294967295);
        HEAP[$26]=0;
        var $27=HEAP[$2];
        var $28=(($27+28)&4294967295);
        HEAP[$28]=-1;
        var $29=HEAP[$2];
        var $30=(($29+32)&4294967295);
        HEAP[$30]=-1;
        var $31=HEAP[$2];
        var $32=(($31+36)&4294967295);
        HEAP[$32]=0;
        var $33=HEAP[$2];
        var $34=(($33+40)&4294967295);
        HEAP[$34]=0;
        var $35=HEAP[$2];
        var $36=(($35+44)&4294967295);
        HEAP[$36]=0;
        var $37=HEAP[$2];
        var $38=(($37+48)&4294967295);
        HEAP[$38]=0;
        var $39=HEAP[$2];
        var $40=(($39+50)&4294967295);
        HEAP[$40]=0;
        var $41=HEAP[$2];
        var $42=(($41+20)&4294967295);
        HEAP[$42]=0;
        var $43=HEAP[$1];
        var $44=(($43+52)&4294967295);
        var $45=HEAP[$44];
        var $46=HEAP[$f];
        var $47=(($46+32)&4294967295);
        HEAP[$47]=$45;
        var $48=HEAP[$f];
        var $49=(($48+75)&4294967295);
        HEAP[$49]=2;
        var $50=HEAP[$L];
        var $51=_luaH_new($50, 0, 0);
        var $52=HEAP[$2];
        var $53=(($52+4)&4294967295);
        HEAP[$53]=$51;
        var $54=HEAP[$L];
        var $55=(($54+8)&4294967295);
        var $56=HEAP[$55];
        HEAP[$i_o]=$56;
        var $57=HEAP[$2];
        var $58=(($57+4)&4294967295);
        var $59=HEAP[$58];
        var $60=$59;
        var $61=HEAP[$i_o];
        var $62=(($61)&4294967295);
        var $63=$62;
        HEAP[$63]=$60;
        var $64=HEAP[$i_o];
        var $65=(($64+8)&4294967295);
        HEAP[$65]=5;
        var $66=HEAP[$L];
        var $67=(($66+28)&4294967295);
        var $68=HEAP[$67];
        var $69=$68;
        var $70=HEAP[$L];
        var $71=(($70+8)&4294967295);
        var $72=HEAP[$71];
        var $73=$72;
        var $74=($69);
        var $75=($73);
        var $76=((($74) - ($75))&4294967295);
        var $77=((($76))|0) <= 12;
        if ($77) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $78
        var $79=HEAP[$L];
        _luaD_growstack($79, 1);
        __label__ = 3; break;
      case 2: // $80
        __label__ = 3; break;
      case 3: // $81
        var $82=HEAP[$L];
        var $83=(($82+8)&4294967295);
        var $84=HEAP[$83];
        var $85=(($84+12)&4294967295);
        HEAP[$83]=$85;
        var $86=HEAP[$L];
        var $87=(($86+8)&4294967295);
        var $88=HEAP[$87];
        HEAP[$i_o1]=$88;
        var $89=HEAP[$f];
        var $90=$89;
        var $91=HEAP[$i_o1];
        var $92=(($91)&4294967295);
        var $93=$92;
        HEAP[$93]=$90;
        var $94=HEAP[$i_o1];
        var $95=(($94+8)&4294967295);
        HEAP[$95]=9;
        var $96=HEAP[$L];
        var $97=(($96+28)&4294967295);
        var $98=HEAP[$97];
        var $99=$98;
        var $100=HEAP[$L];
        var $101=(($100+8)&4294967295);
        var $102=HEAP[$101];
        var $103=$102;
        var $104=($99);
        var $105=($103);
        var $106=((($104) - ($105))&4294967295);
        var $107=((($106))|0) <= 12;
        if ($107) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $108
        var $109=HEAP[$L];
        _luaD_growstack($109, 1);
        __label__ = 6; break;
      case 5: // $110
        __label__ = 6; break;
      case 6: // $111
        var $112=HEAP[$L];
        var $113=(($112+8)&4294967295);
        var $114=HEAP[$113];
        var $115=(($114+12)&4294967295);
        HEAP[$113]=$115;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _chunk($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $islast=__stackBase__+4;
        HEAP[$1]=$ls;
        HEAP[$islast]=0;
        var $2=HEAP[$1];
        _enterlevel($2);
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$islast];
        var $5=((($4))|0)!=0;
        if ($5) { __lastLabel__ = 1; __label__ = 3; break; } else { __lastLabel__ = 1; __label__ = 2; break; }
      case 2: // $6
        var $7=HEAP[$1];
        var $8=(($7+12)&4294967295);
        var $9=(($8)&4294967295);
        var $10=HEAP[$9];
        var $11=_block_follow($10);
        var $12=((($11))|0)!=0;
        var $13=($12) ^ 1;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $14
        var $15=__lastLabel__ == 1 ? 0 : ($13);
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $16
        var $17=HEAP[$1];
        var $18=_statement($17);
        HEAP[$islast]=$18;
        var $19=HEAP[$1];
        var $20=_testnext($19, 59);
        var $21=HEAP[$1];
        var $22=(($21+36)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23+50)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=HEAP[$1];
        var $28=(($27+36)&4294967295);
        var $29=HEAP[$28];
        var $30=(($29+36)&4294967295);
        HEAP[$30]=$26;
        __label__ = 1; break;
      case 5: // $31
        var $32=HEAP[$1];
        var $33=(($32+40)&4294967295);
        var $34=HEAP[$33];
        var $35=(($34+52)&4294967295);
        var $36=HEAP[$35];
        var $37=((($36) + -1)&65535);
        HEAP[$35]=$37;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check($ls, $c) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$ls;
        HEAP[$2]=$c;
        var $3=HEAP[$1];
        var $4=(($3+12)&4294967295);
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        var $7=HEAP[$2];
        var $8=((($6))|0)!=((($7))|0);
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$2];
        _error_expected($10, $11);
        __label__ = 2; break;
      case 2: // $12
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _close_func($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $L=__stackBase__+4;
        var $fs=__stackBase__+8;
        var $f=__stackBase__+12;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        var $3=(($2+40)&4294967295);
        var $4=HEAP[$3];
        HEAP[$L]=$4;
        var $5=HEAP[$1];
        var $6=(($5+36)&4294967295);
        var $7=HEAP[$6];
        HEAP[$fs]=$7;
        var $8=HEAP[$fs];
        var $9=(($8)&4294967295);
        var $10=HEAP[$9];
        HEAP[$f]=$10;
        var $11=HEAP[$1];
        _removevars($11, 0);
        var $12=HEAP[$fs];
        _luaK_ret($12, 0, 0);
        var $13=HEAP[$fs];
        var $14=(($13+24)&4294967295);
        var $15=HEAP[$14];
        var $16=((($15) + 1)&4294967295);
        var $17=((($16))>>>0) <= 1073741823;
        if ($17) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $18
        var $19=HEAP[$L];
        var $20=HEAP[$f];
        var $21=(($20+12)&4294967295);
        var $22=HEAP[$21];
        var $23=$22;
        var $24=HEAP[$f];
        var $25=(($24+44)&4294967295);
        var $26=HEAP[$25];
        var $27=((($26) * 4)&4294967295);
        var $28=HEAP[$fs];
        var $29=(($28+24)&4294967295);
        var $30=HEAP[$29];
        var $31=((($30) * 4)&4294967295);
        var $32=_luaM_realloc_($19, $23, $27, $31);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $33
        var $34=HEAP[$L];
        var $35=_luaM_toobig($34);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $36
        var $37=__lastLabel__ == 1 ? $32 : ($35);
        var $38=$37;
        var $39=HEAP[$f];
        var $40=(($39+12)&4294967295);
        HEAP[$40]=$38;
        var $41=HEAP[$fs];
        var $42=(($41+24)&4294967295);
        var $43=HEAP[$42];
        var $44=HEAP[$f];
        var $45=(($44+44)&4294967295);
        HEAP[$45]=$43;
        var $46=HEAP[$fs];
        var $47=(($46+24)&4294967295);
        var $48=HEAP[$47];
        var $49=((($48) + 1)&4294967295);
        var $50=((($49))>>>0) <= 1073741823;
        if ($50) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $51
        var $52=HEAP[$L];
        var $53=HEAP[$f];
        var $54=(($53+20)&4294967295);
        var $55=HEAP[$54];
        var $56=$55;
        var $57=HEAP[$f];
        var $58=(($57+48)&4294967295);
        var $59=HEAP[$58];
        var $60=((($59) * 4)&4294967295);
        var $61=HEAP[$fs];
        var $62=(($61+24)&4294967295);
        var $63=HEAP[$62];
        var $64=((($63) * 4)&4294967295);
        var $65=_luaM_realloc_($52, $56, $60, $64);
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $66
        var $67=HEAP[$L];
        var $68=_luaM_toobig($67);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $69
        var $70=__lastLabel__ == 4 ? $65 : ($68);
        var $71=$70;
        var $72=HEAP[$f];
        var $73=(($72+20)&4294967295);
        HEAP[$73]=$71;
        var $74=HEAP[$fs];
        var $75=(($74+24)&4294967295);
        var $76=HEAP[$75];
        var $77=HEAP[$f];
        var $78=(($77+48)&4294967295);
        HEAP[$78]=$76;
        var $79=HEAP[$fs];
        var $80=(($79+40)&4294967295);
        var $81=HEAP[$80];
        var $82=((($81) + 1)&4294967295);
        var $83=((($82))>>>0) <= 357913941;
        if ($83) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $84
        var $85=HEAP[$L];
        var $86=HEAP[$f];
        var $87=(($86+8)&4294967295);
        var $88=HEAP[$87];
        var $89=$88;
        var $90=HEAP[$f];
        var $91=(($90+40)&4294967295);
        var $92=HEAP[$91];
        var $93=((($92) * 12)&4294967295);
        var $94=HEAP[$fs];
        var $95=(($94+40)&4294967295);
        var $96=HEAP[$95];
        var $97=((($96) * 12)&4294967295);
        var $98=_luaM_realloc_($85, $89, $93, $97);
        __lastLabel__ = 7; __label__ = 9; break;
      case 8: // $99
        var $100=HEAP[$L];
        var $101=_luaM_toobig($100);
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $102
        var $103=__lastLabel__ == 7 ? $98 : ($101);
        var $104=$103;
        var $105=HEAP[$f];
        var $106=(($105+8)&4294967295);
        HEAP[$106]=$104;
        var $107=HEAP[$fs];
        var $108=(($107+40)&4294967295);
        var $109=HEAP[$108];
        var $110=HEAP[$f];
        var $111=(($110+40)&4294967295);
        HEAP[$111]=$109;
        var $112=HEAP[$fs];
        var $113=(($112+44)&4294967295);
        var $114=HEAP[$113];
        var $115=((($114) + 1)&4294967295);
        var $116=((($115))>>>0) <= 1073741823;
        if ($116) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $117
        var $118=HEAP[$L];
        var $119=HEAP[$f];
        var $120=(($119+16)&4294967295);
        var $121=HEAP[$120];
        var $122=$121;
        var $123=HEAP[$f];
        var $124=(($123+52)&4294967295);
        var $125=HEAP[$124];
        var $126=((($125) * 4)&4294967295);
        var $127=HEAP[$fs];
        var $128=(($127+44)&4294967295);
        var $129=HEAP[$128];
        var $130=((($129) * 4)&4294967295);
        var $131=_luaM_realloc_($118, $122, $126, $130);
        __lastLabel__ = 10; __label__ = 12; break;
      case 11: // $132
        var $133=HEAP[$L];
        var $134=_luaM_toobig($133);
        __lastLabel__ = 11; __label__ = 12; break;
      case 12: // $135
        var $136=__lastLabel__ == 10 ? $131 : ($134);
        var $137=$136;
        var $138=HEAP[$f];
        var $139=(($138+16)&4294967295);
        HEAP[$139]=$137;
        var $140=HEAP[$fs];
        var $141=(($140+44)&4294967295);
        var $142=HEAP[$141];
        var $143=HEAP[$f];
        var $144=(($143+52)&4294967295);
        HEAP[$144]=$142;
        var $145=HEAP[$fs];
        var $146=(($145+48)&4294967295);
        var $147=HEAP[$146];
        var $148=reSign(($147), 16, 0);
        var $149=((($148) + 1)&4294967295);
        var $150=((($149))>>>0) <= 357913941;
        if ($150) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $151
        var $152=HEAP[$L];
        var $153=HEAP[$f];
        var $154=(($153+24)&4294967295);
        var $155=HEAP[$154];
        var $156=$155;
        var $157=HEAP[$f];
        var $158=(($157+56)&4294967295);
        var $159=HEAP[$158];
        var $160=((($159) * 12)&4294967295);
        var $161=HEAP[$fs];
        var $162=(($161+48)&4294967295);
        var $163=HEAP[$162];
        var $164=reSign(($163), 16, 0);
        var $165=((($164) * 12)&4294967295);
        var $166=_luaM_realloc_($152, $156, $160, $165);
        __lastLabel__ = 13; __label__ = 15; break;
      case 14: // $167
        var $168=HEAP[$L];
        var $169=_luaM_toobig($168);
        __lastLabel__ = 14; __label__ = 15; break;
      case 15: // $170
        var $171=__lastLabel__ == 13 ? $166 : ($169);
        var $172=$171;
        var $173=HEAP[$f];
        var $174=(($173+24)&4294967295);
        HEAP[$174]=$172;
        var $175=HEAP[$fs];
        var $176=(($175+48)&4294967295);
        var $177=HEAP[$176];
        var $178=reSign(($177), 16, 0);
        var $179=HEAP[$f];
        var $180=(($179+56)&4294967295);
        HEAP[$180]=$178;
        var $181=HEAP[$f];
        var $182=(($181+72)&4294967295);
        var $183=HEAP[$182];
        var $184=unSign(($183), 8, 0);
        var $185=((($184) + 1)&4294967295);
        var $186=((($185))>>>0) <= 1073741823;
        if ($186) { __label__ = 16; break; } else { __label__ = 17; break; }
      case 16: // $187
        var $188=HEAP[$L];
        var $189=HEAP[$f];
        var $190=(($189+28)&4294967295);
        var $191=HEAP[$190];
        var $192=$191;
        var $193=HEAP[$f];
        var $194=(($193+36)&4294967295);
        var $195=HEAP[$194];
        var $196=((($195) * 4)&4294967295);
        var $197=HEAP[$f];
        var $198=(($197+72)&4294967295);
        var $199=HEAP[$198];
        var $200=unSign(($199), 8, 0);
        var $201=((($200) * 4)&4294967295);
        var $202=_luaM_realloc_($188, $192, $196, $201);
        __lastLabel__ = 16; __label__ = 18; break;
      case 17: // $203
        var $204=HEAP[$L];
        var $205=_luaM_toobig($204);
        __lastLabel__ = 17; __label__ = 18; break;
      case 18: // $206
        var $207=__lastLabel__ == 16 ? $202 : ($205);
        var $208=$207;
        var $209=HEAP[$f];
        var $210=(($209+28)&4294967295);
        HEAP[$210]=$208;
        var $211=HEAP[$f];
        var $212=(($211+72)&4294967295);
        var $213=HEAP[$212];
        var $214=unSign(($213), 8, 0);
        var $215=HEAP[$f];
        var $216=(($215+36)&4294967295);
        HEAP[$216]=$214;
        var $217=HEAP[$fs];
        var $218=(($217+8)&4294967295);
        var $219=HEAP[$218];
        var $220=HEAP[$1];
        var $221=(($220+36)&4294967295);
        HEAP[$221]=$219;
        var $222=HEAP[$L];
        var $223=(($222+8)&4294967295);
        var $224=HEAP[$223];
        var $225=(($224+-24)&4294967295);
        HEAP[$223]=$225;
        var $226=HEAP[$fs];
        var $227=((($226))|0)!=0;
        if ($227) { __label__ = 19; break; } else { __label__ = 20; break; }
      case 19: // $228
        var $229=HEAP[$1];
        _anchor_token($229);
        __label__ = 20; break;
      case 20: // $230
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _enterlevel($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        var $3=(($2+40)&4294967295);
        var $4=HEAP[$3];
        var $5=(($4+52)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6) + 1)&65535);
        HEAP[$5]=$7;
        var $8=unSign(($7), 16, 0);
        var $9=((($8))|0) > 200;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$1];
        _luaX_lexerror($11, ((__str27502)&4294967295), 0);
        __label__ = 2; break;
      case 2: // $12
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _block_follow($token) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$token;
        var $3=HEAP[$2];
        if ($3 == 260) {
          __label__ = 1; break;
        }
        else if ($3 == 261) {
          __label__ = 1; break;
        }
        else if ($3 == 262) {
          __label__ = 1; break;
        }
        else if ($3 == 276) {
          __label__ = 1; break;
        }
        else if ($3 == 287) {
          __label__ = 1; break;
        }
        else {
        __label__ = 2; break;
        }
        
      case 1: // $4
        HEAP[$1]=1;
        __label__ = 3; break;
      case 2: // $5
        HEAP[$1]=0;
        __label__ = 3; break;
      case 3: // $6
        var $7=HEAP[$1];
        STACKTOP = __stackBase__;
        return $7;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _statement($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $line=__stackBase__+8;
        HEAP[$2]=$ls;
        var $3=HEAP[$2];
        var $4=(($3+4)&4294967295);
        var $5=HEAP[$4];
        HEAP[$line]=$5;
        var $6=HEAP[$2];
        var $7=(($6+12)&4294967295);
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        if ($9 == 266) {
          __label__ = 1; break;
        }
        else if ($9 == 277) {
          __label__ = 2; break;
        }
        else if ($9 == 259) {
          __label__ = 3; break;
        }
        else if ($9 == 264) {
          __label__ = 4; break;
        }
        else if ($9 == 272) {
          __label__ = 5; break;
        }
        else if ($9 == 265) {
          __label__ = 6; break;
        }
        else if ($9 == 268) {
          __label__ = 7; break;
        }
        else if ($9 == 273) {
          __label__ = 11; break;
        }
        else if ($9 == 258) {
          __label__ = 12; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 1: // $10
        var $11=HEAP[$2];
        var $12=HEAP[$line];
        _ifstat($11, $12);
        HEAP[$1]=0;
        __label__ = 14; break;
      case 2: // $13
        var $14=HEAP[$2];
        var $15=HEAP[$line];
        _whilestat($14, $15);
        HEAP[$1]=0;
        __label__ = 14; break;
      case 3: // $16
        var $17=HEAP[$2];
        _luaX_next($17);
        var $18=HEAP[$2];
        _block($18);
        var $19=HEAP[$2];
        var $20=HEAP[$line];
        _check_match($19, 262, 259, $20);
        HEAP[$1]=0;
        __label__ = 14; break;
      case 4: // $21
        var $22=HEAP[$2];
        var $23=HEAP[$line];
        _forstat($22, $23);
        HEAP[$1]=0;
        __label__ = 14; break;
      case 5: // $24
        var $25=HEAP[$2];
        var $26=HEAP[$line];
        _repeatstat($25, $26);
        HEAP[$1]=0;
        __label__ = 14; break;
      case 6: // $27
        var $28=HEAP[$2];
        var $29=HEAP[$line];
        _funcstat($28, $29);
        HEAP[$1]=0;
        __label__ = 14; break;
      case 7: // $30
        var $31=HEAP[$2];
        _luaX_next($31);
        var $32=HEAP[$2];
        var $33=_testnext($32, 265);
        var $34=((($33))|0)!=0;
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $35
        var $36=HEAP[$2];
        _localfunc($36);
        __label__ = 10; break;
      case 9: // $37
        var $38=HEAP[$2];
        _localstat($38);
        __label__ = 10; break;
      case 10: // $39
        HEAP[$1]=0;
        __label__ = 14; break;
      case 11: // $40
        var $41=HEAP[$2];
        _retstat($41);
        HEAP[$1]=1;
        __label__ = 14; break;
      case 12: // $42
        var $43=HEAP[$2];
        _luaX_next($43);
        var $44=HEAP[$2];
        _breakstat($44);
        HEAP[$1]=1;
        __label__ = 14; break;
      case 13: // $45
        var $46=HEAP[$2];
        _exprstat($46);
        HEAP[$1]=0;
        __label__ = 14; break;
      case 14: // $47
        var $48=HEAP[$1];
        STACKTOP = __stackBase__;
        return $48;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _testnext($ls, $c) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$ls;
        HEAP[$3]=$c;
        var $4=HEAP[$2];
        var $5=(($4+12)&4294967295);
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=HEAP[$3];
        var $9=((($7))|0)==((($8))|0);
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$2];
        _luaX_next($11);
        HEAP[$1]=1;
        __label__ = 3; break;
      case 2: // $12
        HEAP[$1]=0;
        __label__ = 3; break;
      case 3: // $13
        var $14=HEAP[$1];
        STACKTOP = __stackBase__;
        return $14;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ifstat($ls, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        var $flist=__stackBase__+12;
        var $escapelist=__stackBase__+16;
        HEAP[$1]=$ls;
        HEAP[$2]=$line;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        HEAP[$escapelist]=-1;
        var $6=HEAP[$1];
        var $7=_test_then_block($6);
        HEAP[$flist]=$7;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$1];
        var $10=(($9+12)&4294967295);
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        var $13=((($12))|0)==261;
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $14
        var $15=HEAP[$fs];
        var $16=HEAP[$fs];
        var $17=_luaK_jump($16);
        _luaK_concat($15, $escapelist, $17);
        var $18=HEAP[$fs];
        var $19=HEAP[$flist];
        _luaK_patchtohere($18, $19);
        var $20=HEAP[$1];
        var $21=_test_then_block($20);
        HEAP[$flist]=$21;
        __label__ = 1; break;
      case 3: // $22
        var $23=HEAP[$1];
        var $24=(($23+12)&4294967295);
        var $25=(($24)&4294967295);
        var $26=HEAP[$25];
        var $27=((($26))|0)==260;
        if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $28
        var $29=HEAP[$fs];
        var $30=HEAP[$fs];
        var $31=_luaK_jump($30);
        _luaK_concat($29, $escapelist, $31);
        var $32=HEAP[$fs];
        var $33=HEAP[$flist];
        _luaK_patchtohere($32, $33);
        var $34=HEAP[$1];
        _luaX_next($34);
        var $35=HEAP[$1];
        _block($35);
        __label__ = 6; break;
      case 5: // $36
        var $37=HEAP[$fs];
        var $38=HEAP[$flist];
        _luaK_concat($37, $escapelist, $38);
        __label__ = 6; break;
      case 6: // $39
        var $40=HEAP[$fs];
        var $41=HEAP[$escapelist];
        _luaK_patchtohere($40, $41);
        var $42=HEAP[$1];
        var $43=HEAP[$2];
        _check_match($42, 262, 266, $43);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _whilestat($ls, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $fs=__stackBase__+8;
    var $whileinit=__stackBase__+12;
    var $condexit=__stackBase__+16;
    var $bl=__stackBase__+20;
    HEAP[$1]=$ls;
    HEAP[$2]=$line;
    var $3=HEAP[$1];
    var $4=(($3+36)&4294967295);
    var $5=HEAP[$4];
    HEAP[$fs]=$5;
    var $6=HEAP[$1];
    _luaX_next($6);
    var $7=HEAP[$fs];
    var $8=_luaK_getlabel($7);
    HEAP[$whileinit]=$8;
    var $9=HEAP[$1];
    var $10=_cond($9);
    HEAP[$condexit]=$10;
    var $11=HEAP[$fs];
    _enterblock($11, $bl, 1);
    var $12=HEAP[$1];
    _checknext($12, 259);
    var $13=HEAP[$1];
    _block($13);
    var $14=HEAP[$fs];
    var $15=HEAP[$fs];
    var $16=_luaK_jump($15);
    var $17=HEAP[$whileinit];
    _luaK_patchlist($14, $16, $17);
    var $18=HEAP[$1];
    var $19=HEAP[$2];
    _check_match($18, 262, 277, $19);
    var $20=HEAP[$fs];
    _leaveblock($20);
    var $21=HEAP[$fs];
    var $22=HEAP[$condexit];
    _luaK_patchtohere($21, $22);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _block($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
  
    var $1=__stackBase__;
    var $fs=__stackBase__+4;
    var $bl=__stackBase__+8;
    HEAP[$1]=$ls;
    var $2=HEAP[$1];
    var $3=(($2+36)&4294967295);
    var $4=HEAP[$3];
    HEAP[$fs]=$4;
    var $5=HEAP[$fs];
    _enterblock($5, $bl, 0);
    var $6=HEAP[$1];
    _chunk($6);
    var $7=HEAP[$fs];
    _leaveblock($7);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _check_match($ls, $what, $who, $where) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$1]=$ls;
        HEAP[$2]=$what;
        HEAP[$3]=$who;
        HEAP[$4]=$where;
        var $5=HEAP[$1];
        var $6=HEAP[$2];
        var $7=_testnext($5, $6);
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 5; break; } else { __label__ = 1; break; }
      case 1: // $9
        var $10=HEAP[$4];
        var $11=HEAP[$1];
        var $12=(($11+4)&4294967295);
        var $13=HEAP[$12];
        var $14=((($10))|0)==((($13))|0);
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        var $16=HEAP[$1];
        var $17=HEAP[$2];
        _error_expected($16, $17);
        __label__ = 4; break;
      case 3: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$1];
        var $21=(($20+40)&4294967295);
        var $22=HEAP[$21];
        var $23=HEAP[$1];
        var $24=HEAP[$2];
        var $25=_luaX_token2str($23, $24);
        var $26=HEAP[$1];
        var $27=HEAP[$3];
        var $28=_luaX_token2str($26, $27);
        var $29=HEAP[$4];
        var $30=_luaO_pushfstring($22, ((__str25500)&4294967295), allocate([$25,0,0,0,$28,0,0,0,$29,0,0,0], ["i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0], ALLOC_STACK));
        _luaX_syntaxerror($19, $30);
        __label__ = 4; break;
      case 4: // $31
        __label__ = 5; break;
      case 5: // $32
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _forstat($ls, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        var $varname=__stackBase__+12;
        var $bl=__stackBase__+16;
        HEAP[$1]=$ls;
        HEAP[$2]=$line;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        var $6=HEAP[$fs];
        _enterblock($6, $bl, 1);
        var $7=HEAP[$1];
        _luaX_next($7);
        var $8=HEAP[$1];
        var $9=_str_checkname($8);
        HEAP[$varname]=$9;
        var $10=HEAP[$1];
        var $11=(($10+12)&4294967295);
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        if ($13 == 61) {
          __label__ = 1; break;
        }
        else if ($13 == 44) {
          __label__ = 2; break;
        }
        else if ($13 == 267) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $14
        var $15=HEAP[$1];
        var $16=HEAP[$varname];
        var $17=HEAP[$2];
        _fornum($15, $16, $17);
        __label__ = 4; break;
      case 2: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$varname];
        _forlist($19, $20);
        __label__ = 4; break;
      case 3: // $21
        var $22=HEAP[$1];
        _luaX_syntaxerror($22, ((__str18493)&4294967295));
        __label__ = 4; break;
      case 4: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$2];
        _check_match($24, 262, 264, $25);
        var $26=HEAP[$fs];
        _leaveblock($26);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _repeatstat($ls, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $condexit=__stackBase__+8;
        var $fs=__stackBase__+12;
        var $repeat_init=__stackBase__+16;
        var $bl1=__stackBase__+20;
        var $bl2=__stackBase__+32;
        HEAP[$1]=$ls;
        HEAP[$2]=$line;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        var $6=HEAP[$fs];
        var $7=_luaK_getlabel($6);
        HEAP[$repeat_init]=$7;
        var $8=HEAP[$fs];
        _enterblock($8, $bl1, 1);
        var $9=HEAP[$fs];
        _enterblock($9, $bl2, 0);
        var $10=HEAP[$1];
        _luaX_next($10);
        var $11=HEAP[$1];
        _chunk($11);
        var $12=HEAP[$1];
        var $13=HEAP[$2];
        _check_match($12, 276, 272, $13);
        var $14=HEAP[$1];
        var $15=_cond($14);
        HEAP[$condexit]=$15;
        var $16=(($bl2+9)&4294967295);
        var $17=HEAP[$16];
        var $18=reSign(($17), 8, 0)!=0;
        if ($18) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $19
        var $20=HEAP[$fs];
        _leaveblock($20);
        var $21=HEAP[$1];
        var $22=(($21+36)&4294967295);
        var $23=HEAP[$22];
        var $24=HEAP[$condexit];
        var $25=HEAP[$repeat_init];
        _luaK_patchlist($23, $24, $25);
        __label__ = 3; break;
      case 2: // $26
        var $27=HEAP[$1];
        _breakstat($27);
        var $28=HEAP[$1];
        var $29=(($28+36)&4294967295);
        var $30=HEAP[$29];
        var $31=HEAP[$condexit];
        _luaK_patchtohere($30, $31);
        var $32=HEAP[$fs];
        _leaveblock($32);
        var $33=HEAP[$1];
        var $34=(($33+36)&4294967295);
        var $35=HEAP[$34];
        var $36=HEAP[$fs];
        var $37=_luaK_jump($36);
        var $38=HEAP[$repeat_init];
        _luaK_patchlist($35, $37, $38);
        __label__ = 3; break;
      case 3: // $39
        var $40=HEAP[$fs];
        _leaveblock($40);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _funcstat($ls, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $needself=__stackBase__+8;
    var $v=__stackBase__+12;
    var $b=__stackBase__+32;
    HEAP[$1]=$ls;
    HEAP[$2]=$line;
    var $3=HEAP[$1];
    _luaX_next($3);
    var $4=HEAP[$1];
    var $5=_funcname($4, $v);
    HEAP[$needself]=$5;
    var $6=HEAP[$1];
    var $7=HEAP[$needself];
    var $8=HEAP[$2];
    _body($6, $b, $7, $8);
    var $9=HEAP[$1];
    var $10=(($9+36)&4294967295);
    var $11=HEAP[$10];
    _luaK_storevar($11, $v, $b);
    var $12=HEAP[$1];
    var $13=(($12+36)&4294967295);
    var $14=HEAP[$13];
    var $15=HEAP[$2];
    _luaK_fixline($14, $15);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _localfunc($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
  
    var $1=__stackBase__;
    var $v=__stackBase__+4;
    var $b=__stackBase__+24;
    var $fs=__stackBase__+44;
    HEAP[$1]=$ls;
    var $2=HEAP[$1];
    var $3=(($2+36)&4294967295);
    var $4=HEAP[$3];
    HEAP[$fs]=$4;
    var $5=HEAP[$1];
    var $6=HEAP[$1];
    var $7=_str_checkname($6);
    _new_localvar($5, $7, 0);
    var $8=HEAP[$fs];
    var $9=(($8+36)&4294967295);
    var $10=HEAP[$9];
    _init_exp($v, 6, $10);
    var $11=HEAP[$fs];
    _luaK_reserveregs($11, 1);
    var $12=HEAP[$1];
    _adjustlocalvars($12, 1);
    var $13=HEAP[$1];
    var $14=HEAP[$1];
    var $15=(($14+4)&4294967295);
    var $16=HEAP[$15];
    _body($13, $b, 0, $16);
    var $17=HEAP[$fs];
    _luaK_storevar($17, $v, $b);
    var $18=HEAP[$fs];
    var $19=(($18+24)&4294967295);
    var $20=HEAP[$19];
    var $21=HEAP[$fs];
    var $22=(($21+50)&4294967295);
    var $23=HEAP[$22];
    var $24=unSign(($23), 8, 0);
    var $25=((($24) - 1)&4294967295);
    var $26=HEAP[$fs];
    var $27=(($26+172)&4294967295);
    var $28=(($27+$25*2)&4294967295);
    var $29=HEAP[$28];
    var $30=unSign(($29), 16, 0);
    var $31=HEAP[$fs];
    var $32=(($31)&4294967295);
    var $33=HEAP[$32];
    var $34=(($33+24)&4294967295);
    var $35=HEAP[$34];
    var $36=(($35+12*$30)&4294967295);
    var $37=(($36+4)&4294967295);
    HEAP[$37]=$20;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _localstat($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $nvars=__stackBase__+4;
        var $nexps=__stackBase__+8;
        var $e=__stackBase__+12;
        HEAP[$1]=$ls;
        HEAP[$nvars]=0;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$1];
        var $4=HEAP[$1];
        var $5=_str_checkname($4);
        var $6=HEAP[$nvars];
        var $7=((($6) + 1)&4294967295);
        HEAP[$nvars]=$7;
        _new_localvar($3, $5, $6);
        __label__ = 2; break;
      case 2: // $8
        var $9=HEAP[$1];
        var $10=_testnext($9, 44);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 3: // $12
        var $13=HEAP[$1];
        var $14=_testnext($13, 61);
        var $15=((($14))|0)!=0;
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $16
        var $17=HEAP[$1];
        var $18=_explist1($17, $e);
        HEAP[$nexps]=$18;
        __label__ = 6; break;
      case 5: // $19
        var $20=(($e)&4294967295);
        HEAP[$20]=0;
        HEAP[$nexps]=0;
        __label__ = 6; break;
      case 6: // $21
        var $22=HEAP[$1];
        var $23=HEAP[$nvars];
        var $24=HEAP[$nexps];
        _adjust_assign($22, $23, $24, $e);
        var $25=HEAP[$1];
        var $26=HEAP[$nvars];
        _adjustlocalvars($25, $26);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _retstat($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $fs=__stackBase__+4;
        var $e=__stackBase__+8;
        var $first=__stackBase__+28;
        var $nret=__stackBase__+32;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        var $3=(($2+36)&4294967295);
        var $4=HEAP[$3];
        HEAP[$fs]=$4;
        var $5=HEAP[$1];
        _luaX_next($5);
        var $6=HEAP[$1];
        var $7=(($6+12)&4294967295);
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=_block_follow($9);
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $12
        var $13=HEAP[$1];
        var $14=(($13+12)&4294967295);
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        var $17=((($16))|0)==59;
        if ($17) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $18
        HEAP[$nret]=0;
        HEAP[$first]=0;
        __label__ = 14; break;
      case 3: // $19
        var $20=HEAP[$1];
        var $21=_explist1($20, $e);
        HEAP[$nret]=$21;
        var $22=(($e)&4294967295);
        var $23=HEAP[$22];
        var $24=((($23))|0)==13;
        if ($24) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $25
        var $26=(($e)&4294967295);
        var $27=HEAP[$26];
        var $28=((($27))|0)==14;
        if ($28) { __label__ = 5; break; } else { __label__ = 9; break; }
      case 5: // $29
        var $30=HEAP[$fs];
        _luaK_setreturns($30, $e, -1);
        var $31=(($e)&4294967295);
        var $32=HEAP[$31];
        var $33=((($32))|0)==13;
        if ($33) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $34
        var $35=HEAP[$nret];
        var $36=((($35))|0)==1;
        if ($36) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $37
        var $38=(($e+4)&4294967295);
        var $39=$38;
        var $40=(($39)&4294967295);
        var $41=HEAP[$40];
        var $42=HEAP[$fs];
        var $43=(($42)&4294967295);
        var $44=HEAP[$43];
        var $45=(($44+12)&4294967295);
        var $46=HEAP[$45];
        var $47=(($46+4*$41)&4294967295);
        var $48=HEAP[$47];
        var $49=($48) & -64;
        var $50=($49) | 29;
        var $51=(($e+4)&4294967295);
        var $52=$51;
        var $53=(($52)&4294967295);
        var $54=HEAP[$53];
        var $55=HEAP[$fs];
        var $56=(($55)&4294967295);
        var $57=HEAP[$56];
        var $58=(($57+12)&4294967295);
        var $59=HEAP[$58];
        var $60=(($59+4*$54)&4294967295);
        HEAP[$60]=$50;
        __label__ = 8; break;
      case 8: // $61
        var $62=HEAP[$fs];
        var $63=(($62+50)&4294967295);
        var $64=HEAP[$63];
        var $65=unSign(($64), 8, 0);
        HEAP[$first]=$65;
        HEAP[$nret]=-1;
        __label__ = 13; break;
      case 9: // $66
        var $67=HEAP[$nret];
        var $68=((($67))|0)==1;
        if ($68) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $69
        var $70=HEAP[$fs];
        var $71=_luaK_exp2anyreg($70, $e);
        HEAP[$first]=$71;
        __label__ = 12; break;
      case 11: // $72
        var $73=HEAP[$fs];
        _luaK_exp2nextreg($73, $e);
        var $74=HEAP[$fs];
        var $75=(($74+50)&4294967295);
        var $76=HEAP[$75];
        var $77=unSign(($76), 8, 0);
        HEAP[$first]=$77;
        __label__ = 12; break;
      case 12: // $78
        __label__ = 13; break;
      case 13: // $79
        __label__ = 14; break;
      case 14: // $80
        var $81=HEAP[$fs];
        var $82=HEAP[$first];
        var $83=HEAP[$nret];
        _luaK_ret($81, $82, $83);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _breakstat($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $fs=__stackBase__+4;
        var $bl=__stackBase__+8;
        var $upval=__stackBase__+12;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        var $3=(($2+36)&4294967295);
        var $4=HEAP[$3];
        HEAP[$fs]=$4;
        var $5=HEAP[$fs];
        var $6=(($5+20)&4294967295);
        var $7=HEAP[$6];
        HEAP[$bl]=$7;
        HEAP[$upval]=0;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$bl];
        var $10=((($9))|0)!=0;
        if ($10) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$bl];
        var $13=(($12+10)&4294967295);
        var $14=HEAP[$13];
        var $15=reSign(($14), 8, 0)!=0;
        var $16=($15) ^ 1;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $17
        var $18=__lastLabel__ == 1 ? 0 : ($16);
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $19
        var $20=HEAP[$bl];
        var $21=(($20+9)&4294967295);
        var $22=HEAP[$21];
        var $23=unSign(($22), 8, 0);
        var $24=HEAP[$upval];
        var $25=($24) | ($23);
        HEAP[$upval]=$25;
        var $26=HEAP[$bl];
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        HEAP[$bl]=$28;
        __label__ = 1; break;
      case 5: // $29
        var $30=HEAP[$bl];
        var $31=((($30))|0)!=0;
        if ($31) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $32
        var $33=HEAP[$1];
        _luaX_syntaxerror($33, ((__str17492)&4294967295));
        __label__ = 7; break;
      case 7: // $34
        var $35=HEAP[$upval];
        var $36=((($35))|0)!=0;
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $37
        var $38=HEAP[$fs];
        var $39=HEAP[$bl];
        var $40=(($39+8)&4294967295);
        var $41=HEAP[$40];
        var $42=unSign(($41), 8, 0);
        var $43=_luaK_codeABC($38, 35, $42, 0, 0);
        __label__ = 9; break;
      case 9: // $44
        var $45=HEAP[$fs];
        var $46=HEAP[$bl];
        var $47=(($46+4)&4294967295);
        var $48=HEAP[$fs];
        var $49=_luaK_jump($48);
        _luaK_concat($45, $47, $49);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _exprstat($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $fs=__stackBase__+4;
        var $v=__stackBase__+8;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        var $3=(($2+36)&4294967295);
        var $4=HEAP[$3];
        HEAP[$fs]=$4;
        var $5=HEAP[$1];
        var $6=(($v+4)&4294967295);
        _primaryexp($5, $6);
        var $7=(($v+4)&4294967295);
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=((($9))|0)==13;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=(($v+4)&4294967295);
        var $13=(($12+4)&4294967295);
        var $14=$13;
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        var $17=HEAP[$fs];
        var $18=(($17)&4294967295);
        var $19=HEAP[$18];
        var $20=(($19+12)&4294967295);
        var $21=HEAP[$20];
        var $22=(($21+4*$16)&4294967295);
        var $23=HEAP[$22];
        var $24=($23) & -8372225;
        var $25=($24) | 16384;
        var $26=(($v+4)&4294967295);
        var $27=(($26+4)&4294967295);
        var $28=$27;
        var $29=(($28)&4294967295);
        var $30=HEAP[$29];
        var $31=HEAP[$fs];
        var $32=(($31)&4294967295);
        var $33=HEAP[$32];
        var $34=(($33+12)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+4*$30)&4294967295);
        HEAP[$36]=$25;
        __label__ = 3; break;
      case 2: // $37
        var $38=(($v)&4294967295);
        HEAP[$38]=0;
        var $39=HEAP[$1];
        _assignment($39, $v, 1);
        __label__ = 3; break;
      case 3: // $40
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _primaryexp($ls, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        var $key=__stackBase__+12;
        var $key1=__stackBase__+32;
        HEAP[$1]=$ls;
        HEAP[$2]=$v;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        var $6=HEAP[$1];
        var $7=HEAP[$2];
        _prefixexp($6, $7);
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$1];
        var $10=(($9+12)&4294967295);
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        if ($12 == 46) {
          __label__ = 2; break;
        }
        else if ($12 == 91) {
          __label__ = 3; break;
        }
        else if ($12 == 58) {
          __label__ = 4; break;
        }
        else if ($12 == 40) {
          __label__ = 5; break;
        }
        else if ($12 == 286) {
          __label__ = 5; break;
        }
        else if ($12 == 123) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 2: // $13
        var $14=HEAP[$1];
        var $15=HEAP[$2];
        _field($14, $15);
        __label__ = 7; break;
      case 3: // $16
        var $17=HEAP[$fs];
        var $18=HEAP[$2];
        var $19=_luaK_exp2anyreg($17, $18);
        var $20=HEAP[$1];
        _yindex($20, $key);
        var $21=HEAP[$fs];
        var $22=HEAP[$2];
        _luaK_indexed($21, $22, $key);
        __label__ = 7; break;
      case 4: // $23
        var $24=HEAP[$1];
        _luaX_next($24);
        var $25=HEAP[$1];
        _checkname($25, $key1);
        var $26=HEAP[$fs];
        var $27=HEAP[$2];
        _luaK_self($26, $27, $key1);
        var $28=HEAP[$1];
        var $29=HEAP[$2];
        _funcargs($28, $29);
        __label__ = 7; break;
      case 5: // $30
        var $31=HEAP[$fs];
        var $32=HEAP[$2];
        _luaK_exp2nextreg($31, $32);
        var $33=HEAP[$1];
        var $34=HEAP[$2];
        _funcargs($33, $34);
        __label__ = 7; break;
      case 6: // $35
        STACKTOP = __stackBase__;
        return;
      case 7: // $36
        __label__ = 1; break;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _assignment($ls, $lh, $nvars) {
    var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $e=__stackBase__+12;
        var $nv=__stackBase__+32;
        var $nexps=__stackBase__+56;
        HEAP[$1]=$ls;
        HEAP[$2]=$lh;
        HEAP[$3]=$nvars;
        var $4=HEAP[$2];
        var $5=(($4+4)&4294967295);
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=6 <= ((($7))>>>0);
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$2];
        var $11=(($10+4)&4294967295);
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))>>>0) <= 9;
        if ($14) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $15
        var $16=HEAP[$1];
        _luaX_syntaxerror($16, ((__str475)&4294967295));
        __label__ = 3; break;
      case 3: // $17
        var $18=HEAP[$1];
        var $19=_testnext($18, 44);
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 4; break; } else { __label__ = 9; break; }
      case 4: // $21
        var $22=HEAP[$2];
        var $23=(($nv)&4294967295);
        HEAP[$23]=$22;
        var $24=HEAP[$1];
        var $25=(($nv+4)&4294967295);
        _primaryexp($24, $25);
        var $26=(($nv+4)&4294967295);
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        var $29=((($28))|0)==6;
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $30
        var $31=HEAP[$1];
        var $32=HEAP[$2];
        var $33=(($nv+4)&4294967295);
        _check_conflict($31, $32, $33);
        __label__ = 6; break;
      case 6: // $34
        var $35=HEAP[$3];
        var $36=HEAP[$1];
        var $37=(($36+40)&4294967295);
        var $38=HEAP[$37];
        var $39=(($38+52)&4294967295);
        var $40=HEAP[$39];
        var $41=unSign(($40), 16, 0);
        var $42=((200 - ($41))&4294967295);
        var $43=((($35))|0) > ((($42))|0);
        if ($43) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $44
        var $45=HEAP[$1];
        var $46=(($45+36)&4294967295);
        var $47=HEAP[$46];
        var $48=HEAP[$1];
        var $49=(($48+40)&4294967295);
        var $50=HEAP[$49];
        var $51=(($50+52)&4294967295);
        var $52=HEAP[$51];
        var $53=unSign(($52), 16, 0);
        var $54=((200 - ($53))&4294967295);
        _errorlimit($47, $54, ((__str1476)&4294967295));
        __label__ = 8; break;
      case 8: // $55
        var $56=HEAP[$1];
        var $57=HEAP[$3];
        var $58=((($57) + 1)&4294967295);
        _assignment($56, $nv, $58);
        __label__ = 15; break;
      case 9: // $59
        var $60=HEAP[$1];
        _checknext($60, 61);
        var $61=HEAP[$1];
        var $62=_explist1($61, $e);
        HEAP[$nexps]=$62;
        var $63=HEAP[$nexps];
        var $64=HEAP[$3];
        var $65=((($63))|0)!=((($64))|0);
        if ($65) { __label__ = 10; break; } else { __label__ = 13; break; }
      case 10: // $66
        var $67=HEAP[$1];
        var $68=HEAP[$3];
        var $69=HEAP[$nexps];
        _adjust_assign($67, $68, $69, $e);
        var $70=HEAP[$nexps];
        var $71=HEAP[$3];
        var $72=((($70))|0) > ((($71))|0);
        if ($72) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $73
        var $74=HEAP[$nexps];
        var $75=HEAP[$3];
        var $76=((($74) - ($75))&4294967295);
        var $77=HEAP[$1];
        var $78=(($77+36)&4294967295);
        var $79=HEAP[$78];
        var $80=(($79+36)&4294967295);
        var $81=HEAP[$80];
        var $82=((($81) - ($76))&4294967295);
        HEAP[$80]=$82;
        __label__ = 12; break;
      case 12: // $83
        __label__ = 14; break;
      case 13: // $84
        var $85=HEAP[$1];
        var $86=(($85+36)&4294967295);
        var $87=HEAP[$86];
        _luaK_setoneret($87, $e);
        var $88=HEAP[$1];
        var $89=(($88+36)&4294967295);
        var $90=HEAP[$89];
        var $91=HEAP[$2];
        var $92=(($91+4)&4294967295);
        _luaK_storevar($90, $92, $e);
        __label__ = 16; break;
      case 14: // $93
        __label__ = 15; break;
      case 15: // $94
        var $95=HEAP[$1];
        var $96=(($95+36)&4294967295);
        var $97=HEAP[$96];
        var $98=(($97+36)&4294967295);
        var $99=HEAP[$98];
        var $100=((($99) - 1)&4294967295);
        _init_exp($e, 12, $100);
        var $101=HEAP[$1];
        var $102=(($101+36)&4294967295);
        var $103=HEAP[$102];
        var $104=HEAP[$2];
        var $105=(($104+4)&4294967295);
        _luaK_storevar($103, $105, $e);
        __label__ = 16; break;
      case 16: // $106
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check_conflict($ls, $lh, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $fs=__stackBase__+12;
        var $extra=__stackBase__+16;
        var $conflict=__stackBase__+20;
        HEAP[$1]=$ls;
        HEAP[$2]=$lh;
        HEAP[$3]=$v;
        var $4=HEAP[$1];
        var $5=(($4+36)&4294967295);
        var $6=HEAP[$5];
        HEAP[$fs]=$6;
        var $7=HEAP[$fs];
        var $8=(($7+36)&4294967295);
        var $9=HEAP[$8];
        HEAP[$extra]=$9;
        HEAP[$conflict]=0;
        __label__ = 1; break;
      case 1: // $10
        var $11=HEAP[$2];
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 2; break; } else { __label__ = 10; break; }
      case 2: // $13
        var $14=HEAP[$2];
        var $15=(($14+4)&4294967295);
        var $16=(($15)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17))|0)==9;
        if ($18) { __label__ = 3; break; } else { __label__ = 8; break; }
      case 3: // $19
        var $20=HEAP[$2];
        var $21=(($20+4)&4294967295);
        var $22=(($21+4)&4294967295);
        var $23=$22;
        var $24=(($23)&4294967295);
        var $25=HEAP[$24];
        var $26=HEAP[$3];
        var $27=(($26+4)&4294967295);
        var $28=$27;
        var $29=(($28)&4294967295);
        var $30=HEAP[$29];
        var $31=((($25))|0)==((($30))|0);
        if ($31) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $32
        HEAP[$conflict]=1;
        var $33=HEAP[$extra];
        var $34=HEAP[$2];
        var $35=(($34+4)&4294967295);
        var $36=(($35+4)&4294967295);
        var $37=$36;
        var $38=(($37)&4294967295);
        HEAP[$38]=$33;
        __label__ = 5; break;
      case 5: // $39
        var $40=HEAP[$2];
        var $41=(($40+4)&4294967295);
        var $42=(($41+4)&4294967295);
        var $43=$42;
        var $44=(($43+4)&4294967295);
        var $45=HEAP[$44];
        var $46=HEAP[$3];
        var $47=(($46+4)&4294967295);
        var $48=$47;
        var $49=(($48)&4294967295);
        var $50=HEAP[$49];
        var $51=((($45))|0)==((($50))|0);
        if ($51) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $52
        HEAP[$conflict]=1;
        var $53=HEAP[$extra];
        var $54=HEAP[$2];
        var $55=(($54+4)&4294967295);
        var $56=(($55+4)&4294967295);
        var $57=$56;
        var $58=(($57+4)&4294967295);
        HEAP[$58]=$53;
        __label__ = 7; break;
      case 7: // $59
        __label__ = 8; break;
      case 8: // $60
        __label__ = 9; break;
      case 9: // $61
        var $62=HEAP[$2];
        var $63=(($62)&4294967295);
        var $64=HEAP[$63];
        HEAP[$2]=$64;
        __label__ = 1; break;
      case 10: // $65
        var $66=HEAP[$conflict];
        var $67=((($66))|0)!=0;
        if ($67) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $68
        var $69=HEAP[$fs];
        var $70=HEAP[$fs];
        var $71=(($70+36)&4294967295);
        var $72=HEAP[$71];
        var $73=HEAP[$3];
        var $74=(($73+4)&4294967295);
        var $75=$74;
        var $76=(($75)&4294967295);
        var $77=HEAP[$76];
        var $78=_luaK_codeABC($69, 0, $72, $77, 0);
        var $79=HEAP[$fs];
        _luaK_reserveregs($79, 1);
        __label__ = 12; break;
      case 12: // $80
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _errorlimit($fs, $limit, $what) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $msg=__stackBase__+12;
        HEAP[$1]=$fs;
        HEAP[$2]=$limit;
        HEAP[$3]=$what;
        var $4=HEAP[$1];
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+60)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$1];
        var $12=(($11+16)&4294967295);
        var $13=HEAP[$12];
        var $14=HEAP[$2];
        var $15=HEAP[$3];
        var $16=_luaO_pushfstring($13, ((__str10485)&4294967295), allocate([$14,0,0,0,$15,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $17
        var $18=HEAP[$1];
        var $19=(($18+16)&4294967295);
        var $20=HEAP[$19];
        var $21=HEAP[$1];
        var $22=(($21)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23+60)&4294967295);
        var $25=HEAP[$24];
        var $26=HEAP[$2];
        var $27=HEAP[$3];
        var $28=_luaO_pushfstring($20, ((__str11486)&4294967295), allocate([$25,0,0,0,$26,0,0,0,$27,0,0,0], ["i32",0,0,0,"i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $29
        var $30=__lastLabel__ == 1 ? $16 : ($28);
        HEAP[$msg]=$30;
        var $31=HEAP[$1];
        var $32=(($31+12)&4294967295);
        var $33=HEAP[$32];
        var $34=HEAP[$msg];
        _luaX_lexerror($33, $34, 0);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _checknext($ls, $c) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$ls;
    HEAP[$2]=$c;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    _check($3, $4);
    var $5=HEAP[$1];
    _luaX_next($5);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _explist1($ls, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $n=__stackBase__+8;
        HEAP[$1]=$ls;
        HEAP[$2]=$v;
        HEAP[$n]=1;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        _expr($3, $4);
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$1];
        var $7=_testnext($6, 44);
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $9
        var $10=HEAP[$1];
        var $11=(($10+36)&4294967295);
        var $12=HEAP[$11];
        var $13=HEAP[$2];
        _luaK_exp2nextreg($12, $13);
        var $14=HEAP[$1];
        var $15=HEAP[$2];
        _expr($14, $15);
        var $16=HEAP[$n];
        var $17=((($16) + 1)&4294967295);
        HEAP[$n]=$17;
        __label__ = 1; break;
      case 3: // $18
        var $19=HEAP[$n];
        STACKTOP = __stackBase__;
        return $19;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _adjust_assign($ls, $nvars, $nexps, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $fs=__stackBase__+16;
        var $extra=__stackBase__+20;
        var $reg=__stackBase__+24;
        HEAP[$1]=$ls;
        HEAP[$2]=$nvars;
        HEAP[$3]=$nexps;
        HEAP[$4]=$e;
        var $5=HEAP[$1];
        var $6=(($5+36)&4294967295);
        var $7=HEAP[$6];
        HEAP[$fs]=$7;
        var $8=HEAP[$2];
        var $9=HEAP[$3];
        var $10=((($8) - ($9))&4294967295);
        HEAP[$extra]=$10;
        var $11=HEAP[$4];
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0)==13;
        if ($14) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $15
        var $16=HEAP[$4];
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=((($18))|0)==14;
        if ($19) { __label__ = 2; break; } else { __label__ = 7; break; }
      case 2: // $20
        var $21=HEAP[$extra];
        var $22=((($21) + 1)&4294967295);
        HEAP[$extra]=$22;
        var $23=HEAP[$extra];
        var $24=((($23))|0) < 0;
        if ($24) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $25
        HEAP[$extra]=0;
        __label__ = 4; break;
      case 4: // $26
        var $27=HEAP[$fs];
        var $28=HEAP[$4];
        var $29=HEAP[$extra];
        _luaK_setreturns($27, $28, $29);
        var $30=HEAP[$extra];
        var $31=((($30))|0) > 1;
        if ($31) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $32
        var $33=HEAP[$fs];
        var $34=HEAP[$extra];
        var $35=((($34) - 1)&4294967295);
        _luaK_reserveregs($33, $35);
        __label__ = 6; break;
      case 6: // $36
        __label__ = 12; break;
      case 7: // $37
        var $38=HEAP[$4];
        var $39=(($38)&4294967295);
        var $40=HEAP[$39];
        var $41=((($40))|0)!=0;
        if ($41) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $42
        var $43=HEAP[$fs];
        var $44=HEAP[$4];
        _luaK_exp2nextreg($43, $44);
        __label__ = 9; break;
      case 9: // $45
        var $46=HEAP[$extra];
        var $47=((($46))|0) > 0;
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $48
        var $49=HEAP[$fs];
        var $50=(($49+36)&4294967295);
        var $51=HEAP[$50];
        HEAP[$reg]=$51;
        var $52=HEAP[$fs];
        var $53=HEAP[$extra];
        _luaK_reserveregs($52, $53);
        var $54=HEAP[$fs];
        var $55=HEAP[$reg];
        var $56=HEAP[$extra];
        _luaK_nil($54, $55, $56);
        __label__ = 11; break;
      case 11: // $57
        __label__ = 12; break;
      case 12: // $58
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _init_exp($e, $k, $i) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$e;
    HEAP[$2]=$k;
    HEAP[$3]=$i;
    var $4=HEAP[$1];
    var $5=(($4+12)&4294967295);
    HEAP[$5]=-1;
    var $6=HEAP[$1];
    var $7=(($6+16)&4294967295);
    HEAP[$7]=-1;
    var $8=HEAP[$2];
    var $9=HEAP[$1];
    var $10=(($9)&4294967295);
    HEAP[$10]=$8;
    var $11=HEAP[$3];
    var $12=HEAP[$1];
    var $13=(($12+4)&4294967295);
    var $14=$13;
    var $15=(($14)&4294967295);
    HEAP[$15]=$11;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _expr($ls, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$ls;
    HEAP[$2]=$v;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=_subexpr($3, $4, 0);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _subexpr($ls, $v, $limit) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $op=__stackBase__+12;
        var $uop=__stackBase__+16;
        var $v2=__stackBase__+20;
        var $nextop=__stackBase__+40;
        HEAP[$1]=$ls;
        HEAP[$2]=$v;
        HEAP[$3]=$limit;
        var $4=HEAP[$1];
        _enterlevel($4);
        var $5=HEAP[$1];
        var $6=(($5+12)&4294967295);
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        var $9=_getunopr($8);
        HEAP[$uop]=$9;
        var $10=HEAP[$uop];
        var $11=((($10))|0)!=3;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$1];
        _luaX_next($13);
        var $14=HEAP[$1];
        var $15=HEAP[$2];
        var $16=_subexpr($14, $15, 8);
        var $17=HEAP[$1];
        var $18=(($17+36)&4294967295);
        var $19=HEAP[$18];
        var $20=HEAP[$uop];
        var $21=HEAP[$2];
        _luaK_prefix($19, $20, $21);
        __label__ = 3; break;
      case 2: // $22
        var $23=HEAP[$1];
        var $24=HEAP[$2];
        _simpleexp($23, $24);
        __label__ = 3; break;
      case 3: // $25
        var $26=HEAP[$1];
        var $27=(($26+12)&4294967295);
        var $28=(($27)&4294967295);
        var $29=HEAP[$28];
        var $30=_getbinopr($29);
        HEAP[$op]=$30;
        __label__ = 4; break;
      case 4: // $31
        var $32=HEAP[$op];
        var $33=((($32))|0)!=15;
        if ($33) { __lastLabel__ = 4; __label__ = 5; break; } else { __lastLabel__ = 4; __label__ = 6; break; }
      case 5: // $34
        var $35=HEAP[$op];
        var $36=((_priority+$35*2)&4294967295);
        var $37=(($36)&4294967295);
        var $38=HEAP[$37];
        var $39=unSign(($38), 8, 0);
        var $40=HEAP[$3];
        var $41=((($39))>>>0) > ((($40))>>>0);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $42
        var $43=__lastLabel__ == 4 ? 0 : ($41);
        if ($43) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $44
        var $45=HEAP[$1];
        _luaX_next($45);
        var $46=HEAP[$1];
        var $47=(($46+36)&4294967295);
        var $48=HEAP[$47];
        var $49=HEAP[$op];
        var $50=HEAP[$2];
        _luaK_infix($48, $49, $50);
        var $51=HEAP[$1];
        var $52=HEAP[$op];
        var $53=((_priority+$52*2)&4294967295);
        var $54=(($53+1)&4294967295);
        var $55=HEAP[$54];
        var $56=unSign(($55), 8, 0);
        var $57=_subexpr($51, $v2, $56);
        HEAP[$nextop]=$57;
        var $58=HEAP[$1];
        var $59=(($58+36)&4294967295);
        var $60=HEAP[$59];
        var $61=HEAP[$op];
        var $62=HEAP[$2];
        _luaK_posfix($60, $61, $62, $v2);
        var $63=HEAP[$nextop];
        HEAP[$op]=$63;
        __label__ = 4; break;
      case 8: // $64
        var $65=HEAP[$1];
        var $66=(($65+40)&4294967295);
        var $67=HEAP[$66];
        var $68=(($67+52)&4294967295);
        var $69=HEAP[$68];
        var $70=((($69) + -1)&65535);
        HEAP[$68]=$70;
        var $71=HEAP[$op];
        STACKTOP = __stackBase__;
        return $71;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getunopr($op) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$op;
        var $3=HEAP[$2];
        if ($3 == 270) {
          __label__ = 1; break;
        }
        else if ($3 == 45) {
          __label__ = 2; break;
        }
        else if ($3 == 35) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $4
        HEAP[$1]=1;
        __label__ = 5; break;
      case 2: // $5
        HEAP[$1]=0;
        __label__ = 5; break;
      case 3: // $6
        HEAP[$1]=2;
        __label__ = 5; break;
      case 4: // $7
        HEAP[$1]=3;
        __label__ = 5; break;
      case 5: // $8
        var $9=HEAP[$1];
        STACKTOP = __stackBase__;
        return $9;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _simpleexp($ls, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        HEAP[$1]=$ls;
        HEAP[$2]=$v;
        var $3=HEAP[$1];
        var $4=(($3+12)&4294967295);
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        if ($6 == 284) {
          __label__ = 1; break;
        }
        else if ($6 == 286) {
          __label__ = 2; break;
        }
        else if ($6 == 269) {
          __label__ = 3; break;
        }
        else if ($6 == 275) {
          __label__ = 4; break;
        }
        else if ($6 == 263) {
          __label__ = 5; break;
        }
        else if ($6 == 279) {
          __label__ = 6; break;
        }
        else if ($6 == 123) {
          __label__ = 9; break;
        }
        else if ($6 == 265) {
          __label__ = 10; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 1: // $7
        var $8=HEAP[$2];
        _init_exp($8, 5, 0);
        var $9=HEAP[$1];
        var $10=(($9+12)&4294967295);
        var $11=(($10+4)&4294967295);
        var $12=$11;
        var $13=HEAP[$12];
        var $14=HEAP[$2];
        var $15=(($14+4)&4294967295);
        var $16=$15;
        HEAP[$16]=$13;
        __label__ = 12; break;
      case 2: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$2];
        var $20=HEAP[$1];
        var $21=(($20+12)&4294967295);
        var $22=(($21+4)&4294967295);
        var $23=$22;
        var $24=HEAP[$23];
        _codestring($18, $19, $24);
        __label__ = 12; break;
      case 3: // $25
        var $26=HEAP[$2];
        _init_exp($26, 1, 0);
        __label__ = 12; break;
      case 4: // $27
        var $28=HEAP[$2];
        _init_exp($28, 2, 0);
        __label__ = 12; break;
      case 5: // $29
        var $30=HEAP[$2];
        _init_exp($30, 3, 0);
        __label__ = 12; break;
      case 6: // $31
        var $32=HEAP[$1];
        var $33=(($32+36)&4294967295);
        var $34=HEAP[$33];
        HEAP[$fs]=$34;
        var $35=HEAP[$fs];
        var $36=(($35)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37+74)&4294967295);
        var $39=HEAP[$38];
        var $40=reSign(($39), 8, 0)!=0;
        if ($40) { __label__ = 8; break; } else { __label__ = 7; break; }
      case 7: // $41
        var $42=HEAP[$1];
        _luaX_syntaxerror($42, ((__str2477)&4294967295));
        __label__ = 8; break;
      case 8: // $43
        var $44=HEAP[$fs];
        var $45=(($44)&4294967295);
        var $46=HEAP[$45];
        var $47=(($46+74)&4294967295);
        var $48=HEAP[$47];
        var $49=unSign(($48), 8, 0);
        var $50=($49) & -5;
        var $51=((($50)) & 255);
        HEAP[$47]=$51;
        var $52=HEAP[$2];
        var $53=HEAP[$fs];
        var $54=_luaK_codeABC($53, 37, 0, 1, 0);
        _init_exp($52, 14, $54);
        __label__ = 12; break;
      case 9: // $55
        var $56=HEAP[$1];
        var $57=HEAP[$2];
        _constructor($56, $57);
        __label__ = 13; break;
      case 10: // $58
        var $59=HEAP[$1];
        _luaX_next($59);
        var $60=HEAP[$1];
        var $61=HEAP[$2];
        var $62=HEAP[$1];
        var $63=(($62+4)&4294967295);
        var $64=HEAP[$63];
        _body($60, $61, 0, $64);
        __label__ = 13; break;
      case 11: // $65
        var $66=HEAP[$1];
        var $67=HEAP[$2];
        _primaryexp($66, $67);
        __label__ = 13; break;
      case 12: // $68
        var $69=HEAP[$1];
        _luaX_next($69);
        __label__ = 13; break;
      case 13: // $70
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getbinopr($op) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$op;
        var $3=HEAP[$2];
        if ($3 == 43) {
          __label__ = 1; break;
        }
        else if ($3 == 45) {
          __label__ = 2; break;
        }
        else if ($3 == 42) {
          __label__ = 3; break;
        }
        else if ($3 == 47) {
          __label__ = 4; break;
        }
        else if ($3 == 37) {
          __label__ = 5; break;
        }
        else if ($3 == 94) {
          __label__ = 6; break;
        }
        else if ($3 == 278) {
          __label__ = 7; break;
        }
        else if ($3 == 283) {
          __label__ = 8; break;
        }
        else if ($3 == 280) {
          __label__ = 9; break;
        }
        else if ($3 == 60) {
          __label__ = 10; break;
        }
        else if ($3 == 282) {
          __label__ = 11; break;
        }
        else if ($3 == 62) {
          __label__ = 12; break;
        }
        else if ($3 == 281) {
          __label__ = 13; break;
        }
        else if ($3 == 257) {
          __label__ = 14; break;
        }
        else if ($3 == 271) {
          __label__ = 15; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 1: // $4
        HEAP[$1]=0;
        __label__ = 17; break;
      case 2: // $5
        HEAP[$1]=1;
        __label__ = 17; break;
      case 3: // $6
        HEAP[$1]=2;
        __label__ = 17; break;
      case 4: // $7
        HEAP[$1]=3;
        __label__ = 17; break;
      case 5: // $8
        HEAP[$1]=4;
        __label__ = 17; break;
      case 6: // $9
        HEAP[$1]=5;
        __label__ = 17; break;
      case 7: // $10
        HEAP[$1]=6;
        __label__ = 17; break;
      case 8: // $11
        HEAP[$1]=7;
        __label__ = 17; break;
      case 9: // $12
        HEAP[$1]=8;
        __label__ = 17; break;
      case 10: // $13
        HEAP[$1]=9;
        __label__ = 17; break;
      case 11: // $14
        HEAP[$1]=10;
        __label__ = 17; break;
      case 12: // $15
        HEAP[$1]=11;
        __label__ = 17; break;
      case 13: // $16
        HEAP[$1]=12;
        __label__ = 17; break;
      case 14: // $17
        HEAP[$1]=13;
        __label__ = 17; break;
      case 15: // $18
        HEAP[$1]=14;
        __label__ = 17; break;
      case 16: // $19
        HEAP[$1]=15;
        __label__ = 17; break;
      case 17: // $20
        var $21=HEAP[$1];
        STACKTOP = __stackBase__;
        return $21;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _codestring($ls, $e, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$ls;
    HEAP[$2]=$e;
    HEAP[$3]=$s;
    var $4=HEAP[$2];
    var $5=HEAP[$1];
    var $6=(($5+36)&4294967295);
    var $7=HEAP[$6];
    var $8=HEAP[$3];
    var $9=_luaK_stringK($7, $8);
    _init_exp($4, 4, $9);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _constructor($ls, $t) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        var $line=__stackBase__+12;
        var $pc=__stackBase__+16;
        var $cc=__stackBase__+20;
        HEAP[$1]=$ls;
        HEAP[$2]=$t;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        var $6=HEAP[$1];
        var $7=(($6+4)&4294967295);
        var $8=HEAP[$7];
        HEAP[$line]=$8;
        var $9=HEAP[$fs];
        var $10=_luaK_codeABC($9, 10, 0, 0, 0);
        HEAP[$pc]=$10;
        var $11=(($cc+32)&4294967295);
        HEAP[$11]=0;
        var $12=(($cc+24)&4294967295);
        HEAP[$12]=0;
        var $13=(($cc+28)&4294967295);
        HEAP[$13]=0;
        var $14=HEAP[$2];
        var $15=(($cc+20)&4294967295);
        HEAP[$15]=$14;
        var $16=HEAP[$2];
        var $17=HEAP[$pc];
        _init_exp($16, 11, $17);
        var $18=(($cc)&4294967295);
        _init_exp($18, 0, 0);
        var $19=HEAP[$1];
        var $20=(($19+36)&4294967295);
        var $21=HEAP[$20];
        var $22=HEAP[$2];
        _luaK_exp2nextreg($21, $22);
        var $23=HEAP[$1];
        _checknext($23, 123);
        __label__ = 1; break;
      case 1: // $24
        var $25=HEAP[$1];
        var $26=(($25+12)&4294967295);
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        var $29=((($28))|0)==125;
        if ($29) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $30
        __label__ = 14; break;
      case 3: // $31
        var $32=HEAP[$fs];
        _closelistfield($32, $cc);
        var $33=HEAP[$1];
        var $34=(($33+12)&4294967295);
        var $35=(($34)&4294967295);
        var $36=HEAP[$35];
        if ($36 == 285) {
          __label__ = 4; break;
        }
        else if ($36 == 91) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 4: // $37
        var $38=HEAP[$1];
        _luaX_lookahead($38);
        var $39=HEAP[$1];
        var $40=(($39+24)&4294967295);
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        var $43=((($42))|0)!=61;
        if ($43) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $44
        var $45=HEAP[$1];
        _listfield($45, $cc);
        __label__ = 7; break;
      case 6: // $46
        var $47=HEAP[$1];
        _recfield($47, $cc);
        __label__ = 7; break;
      case 7: // $48
        __label__ = 10; break;
      case 8: // $49
        var $50=HEAP[$1];
        _recfield($50, $cc);
        __label__ = 10; break;
      case 9: // $51
        var $52=HEAP[$1];
        _listfield($52, $cc);
        __label__ = 10; break;
      case 10: // $53
        __label__ = 11; break;
      case 11: // $54
        var $55=HEAP[$1];
        var $56=_testnext($55, 44);
        var $57=((($56))|0)!=0;
        if ($57) { __lastLabel__ = 11; __label__ = 13; break; } else { __lastLabel__ = 11; __label__ = 12; break; }
      case 12: // $58
        var $59=HEAP[$1];
        var $60=_testnext($59, 59);
        var $61=((($60))|0)!=0;
        __lastLabel__ = 12; __label__ = 13; break;
      case 13: // $62
        var $63=__lastLabel__ == 11 ? 1 : ($61);
        if ($63) { __label__ = 1; break; } else { __label__ = 14; break; }
      case 14: // $64
        var $65=HEAP[$1];
        var $66=HEAP[$line];
        _check_match($65, 125, 123, $66);
        var $67=HEAP[$fs];
        _lastlistfield($67, $cc);
        var $68=HEAP[$pc];
        var $69=HEAP[$fs];
        var $70=(($69)&4294967295);
        var $71=HEAP[$70];
        var $72=(($71+12)&4294967295);
        var $73=HEAP[$72];
        var $74=(($73+4*$68)&4294967295);
        var $75=HEAP[$74];
        var $76=($75) & 8388607;
        var $77=(($cc+28)&4294967295);
        var $78=HEAP[$77];
        var $79=_luaO_int2fb($78);
        var $80=($79) << 23;
        var $81=($80) & -8388608;
        var $82=($76) | ($81);
        var $83=HEAP[$pc];
        var $84=HEAP[$fs];
        var $85=(($84)&4294967295);
        var $86=HEAP[$85];
        var $87=(($86+12)&4294967295);
        var $88=HEAP[$87];
        var $89=(($88+4*$83)&4294967295);
        HEAP[$89]=$82;
        var $90=HEAP[$pc];
        var $91=HEAP[$fs];
        var $92=(($91)&4294967295);
        var $93=HEAP[$92];
        var $94=(($93+12)&4294967295);
        var $95=HEAP[$94];
        var $96=(($95+4*$90)&4294967295);
        var $97=HEAP[$96];
        var $98=($97) & -8372225;
        var $99=(($cc+24)&4294967295);
        var $100=HEAP[$99];
        var $101=_luaO_int2fb($100);
        var $102=($101) << 14;
        var $103=($102) & 8372224;
        var $104=($98) | ($103);
        var $105=HEAP[$pc];
        var $106=HEAP[$fs];
        var $107=(($106)&4294967295);
        var $108=HEAP[$107];
        var $109=(($108+12)&4294967295);
        var $110=HEAP[$109];
        var $111=(($110+4*$105)&4294967295);
        HEAP[$111]=$104;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _body($ls, $e, $needself, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 588; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 588);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $new_fs=__stackBase__+16;
        HEAP[$1]=$ls;
        HEAP[$2]=$e;
        HEAP[$3]=$needself;
        HEAP[$4]=$line;
        var $5=HEAP[$1];
        _open_func($5, $new_fs);
        var $6=HEAP[$4];
        var $7=(($new_fs)&4294967295);
        var $8=HEAP[$7];
        var $9=(($8+60)&4294967295);
        HEAP[$9]=$6;
        var $10=HEAP[$1];
        _checknext($10, 40);
        var $11=HEAP[$3];
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        var $14=HEAP[$1];
        var $15=HEAP[$1];
        var $16=_luaX_newstring($15, ((__str3478)&4294967295), 4);
        _new_localvar($14, $16, 0);
        var $17=HEAP[$1];
        _adjustlocalvars($17, 1);
        __label__ = 2; break;
      case 2: // $18
        var $19=HEAP[$1];
        _parlist($19);
        var $20=HEAP[$1];
        _checknext($20, 41);
        var $21=HEAP[$1];
        _chunk($21);
        var $22=HEAP[$1];
        var $23=(($22+4)&4294967295);
        var $24=HEAP[$23];
        var $25=(($new_fs)&4294967295);
        var $26=HEAP[$25];
        var $27=(($26+64)&4294967295);
        HEAP[$27]=$24;
        var $28=HEAP[$1];
        var $29=HEAP[$4];
        _check_match($28, 262, 265, $29);
        var $30=HEAP[$1];
        _close_func($30);
        var $31=HEAP[$1];
        var $32=HEAP[$2];
        _pushclosure($31, $new_fs, $32);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _new_localvar($ls, $name, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $fs=__stackBase__+12;
        HEAP[$1]=$ls;
        HEAP[$2]=$name;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=(($4+36)&4294967295);
        var $6=HEAP[$5];
        HEAP[$fs]=$6;
        var $7=HEAP[$fs];
        var $8=(($7+50)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=HEAP[$3];
        var $12=((($10) + ($11))&4294967295);
        var $13=((($12) + 1)&4294967295);
        var $14=((($13))|0) > 200;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$fs];
        _errorlimit($16, 200, ((__str7482)&4294967295));
        __label__ = 2; break;
      case 2: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$2];
        var $20=_registerlocalvar($18, $19);
        var $21=((($20)) & 65535);
        var $22=HEAP[$fs];
        var $23=(($22+50)&4294967295);
        var $24=HEAP[$23];
        var $25=unSign(($24), 8, 0);
        var $26=HEAP[$3];
        var $27=((($25) + ($26))&4294967295);
        var $28=HEAP[$fs];
        var $29=(($28+172)&4294967295);
        var $30=(($29+$27*2)&4294967295);
        HEAP[$30]=$21;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _adjustlocalvars($ls, $nvars) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        HEAP[$1]=$ls;
        HEAP[$2]=$nvars;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        var $6=HEAP[$fs];
        var $7=(($6+50)&4294967295);
        var $8=HEAP[$7];
        var $9=unSign(($8), 8, 0);
        var $10=HEAP[$2];
        var $11=((($9) + ($10))&4294967295);
        var $12=((($11)) & 255);
        var $13=HEAP[$fs];
        var $14=(($13+50)&4294967295);
        HEAP[$14]=$12;
        __label__ = 1; break;
      case 1: // $15
        var $16=HEAP[$2];
        var $17=((($16))|0)!=0;
        if ($17) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $18
        var $19=HEAP[$fs];
        var $20=(($19+24)&4294967295);
        var $21=HEAP[$20];
        var $22=HEAP[$fs];
        var $23=(($22+50)&4294967295);
        var $24=HEAP[$23];
        var $25=unSign(($24), 8, 0);
        var $26=HEAP[$2];
        var $27=((($25) - ($26))&4294967295);
        var $28=HEAP[$fs];
        var $29=(($28+172)&4294967295);
        var $30=(($29+$27*2)&4294967295);
        var $31=HEAP[$30];
        var $32=unSign(($31), 16, 0);
        var $33=HEAP[$fs];
        var $34=(($33)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+24)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37+12*$32)&4294967295);
        var $39=(($38+4)&4294967295);
        HEAP[$39]=$21;
        __label__ = 3; break;
      case 3: // $40
        var $41=HEAP[$2];
        var $42=((($41) + -1)&4294967295);
        HEAP[$2]=$42;
        __label__ = 1; break;
      case 4: // $43
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _parlist($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $fs=__stackBase__+4;
        var $f=__stackBase__+8;
        var $nparams=__stackBase__+12;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        var $3=(($2+36)&4294967295);
        var $4=HEAP[$3];
        HEAP[$fs]=$4;
        var $5=HEAP[$fs];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        HEAP[$f]=$7;
        HEAP[$nparams]=0;
        var $8=HEAP[$f];
        var $9=(($8+74)&4294967295);
        HEAP[$9]=0;
        var $10=HEAP[$1];
        var $11=(($10+12)&4294967295);
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0)!=41;
        if ($14) { __label__ = 1; break; } else { __label__ = 11; break; }
      case 1: // $15
        __label__ = 2; break;
      case 2: // $16
        var $17=HEAP[$1];
        var $18=(($17+12)&4294967295);
        var $19=(($18)&4294967295);
        var $20=HEAP[$19];
        if ($20 == 285) {
          __label__ = 3; break;
        }
        else if ($20 == 279) {
          __label__ = 4; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 3: // $21
        var $22=HEAP[$1];
        var $23=HEAP[$1];
        var $24=_str_checkname($23);
        var $25=HEAP[$nparams];
        var $26=((($25) + 1)&4294967295);
        HEAP[$nparams]=$26;
        _new_localvar($22, $24, $25);
        __label__ = 6; break;
      case 4: // $27
        var $28=HEAP[$1];
        _luaX_next($28);
        var $29=HEAP[$1];
        var $30=HEAP[$1];
        var $31=_luaX_newstring($30, ((__str5480)&4294967295), 3);
        var $32=HEAP[$nparams];
        var $33=((($32) + 1)&4294967295);
        HEAP[$nparams]=$33;
        _new_localvar($29, $31, $32);
        var $34=HEAP[$f];
        var $35=(($34+74)&4294967295);
        HEAP[$35]=5;
        var $36=HEAP[$f];
        var $37=(($36+74)&4294967295);
        var $38=HEAP[$37];
        var $39=unSign(($38), 8, 0);
        var $40=($39) | 2;
        var $41=((($40)) & 255);
        HEAP[$37]=$41;
        __label__ = 6; break;
      case 5: // $42
        var $43=HEAP[$1];
        _luaX_syntaxerror($43, ((__str6481)&4294967295));
        __label__ = 6; break;
      case 6: // $44
        __label__ = 7; break;
      case 7: // $45
        var $46=HEAP[$f];
        var $47=(($46+74)&4294967295);
        var $48=HEAP[$47];
        var $49=reSign(($48), 8, 0)!=0;
        if ($49) { __lastLabel__ = 7; __label__ = 9; break; } else { __lastLabel__ = 7; __label__ = 8; break; }
      case 8: // $50
        var $51=HEAP[$1];
        var $52=_testnext($51, 44);
        var $53=((($52))|0)!=0;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $54
        var $55=__lastLabel__ == 7 ? 0 : ($53);
        if ($55) { __label__ = 2; break; } else { __label__ = 10; break; }
      case 10: // $56
        __label__ = 11; break;
      case 11: // $57
        var $58=HEAP[$1];
        var $59=HEAP[$nparams];
        _adjustlocalvars($58, $59);
        var $60=HEAP[$fs];
        var $61=(($60+50)&4294967295);
        var $62=HEAP[$61];
        var $63=unSign(($62), 8, 0);
        var $64=HEAP[$f];
        var $65=(($64+74)&4294967295);
        var $66=HEAP[$65];
        var $67=unSign(($66), 8, 0);
        var $68=($67) & 1;
        var $69=((($63) - ($68))&4294967295);
        var $70=((($69)) & 255);
        var $71=HEAP[$f];
        var $72=(($71+73)&4294967295);
        HEAP[$72]=$70;
        var $73=HEAP[$fs];
        var $74=HEAP[$fs];
        var $75=(($74+50)&4294967295);
        var $76=HEAP[$75];
        var $77=unSign(($76), 8, 0);
        _luaK_reserveregs($73, $77);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pushclosure($ls, $func, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $fs=__stackBase__+12;
        var $f=__stackBase__+16;
        var $oldsize=__stackBase__+20;
        var $i=__stackBase__+24;
        var $o=__stackBase__+28;
        HEAP[$1]=$ls;
        HEAP[$2]=$func;
        HEAP[$3]=$v;
        var $4=HEAP[$1];
        var $5=(($4+36)&4294967295);
        var $6=HEAP[$5];
        HEAP[$fs]=$6;
        var $7=HEAP[$fs];
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        HEAP[$f]=$9;
        var $10=HEAP[$f];
        var $11=(($10+52)&4294967295);
        var $12=HEAP[$11];
        HEAP[$oldsize]=$12;
        var $13=HEAP[$fs];
        var $14=(($13+44)&4294967295);
        var $15=HEAP[$14];
        var $16=((($15) + 1)&4294967295);
        var $17=HEAP[$f];
        var $18=(($17+52)&4294967295);
        var $19=HEAP[$18];
        var $20=((($16))|0) > ((($19))|0);
        if ($20) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $21
        var $22=HEAP[$1];
        var $23=(($22+40)&4294967295);
        var $24=HEAP[$23];
        var $25=HEAP[$f];
        var $26=(($25+16)&4294967295);
        var $27=HEAP[$26];
        var $28=$27;
        var $29=HEAP[$f];
        var $30=(($29+52)&4294967295);
        var $31=_luaM_growaux_($24, $28, $30, 4, 262143, ((__str4479)&4294967295));
        var $32=$31;
        var $33=HEAP[$f];
        var $34=(($33+16)&4294967295);
        HEAP[$34]=$32;
        __label__ = 2; break;
      case 2: // $35
        __label__ = 3; break;
      case 3: // $36
        var $37=HEAP[$oldsize];
        var $38=HEAP[$f];
        var $39=(($38+52)&4294967295);
        var $40=HEAP[$39];
        var $41=((($37))|0) < ((($40))|0);
        if ($41) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $42
        var $43=HEAP[$oldsize];
        var $44=((($43) + 1)&4294967295);
        HEAP[$oldsize]=$44;
        var $45=HEAP[$f];
        var $46=(($45+16)&4294967295);
        var $47=HEAP[$46];
        var $48=(($47+4*$43)&4294967295);
        HEAP[$48]=0;
        __label__ = 3; break;
      case 5: // $49
        var $50=HEAP[$2];
        var $51=(($50)&4294967295);
        var $52=HEAP[$51];
        var $53=HEAP[$fs];
        var $54=(($53+44)&4294967295);
        var $55=HEAP[$54];
        var $56=((($55) + 1)&4294967295);
        HEAP[$54]=$56;
        var $57=HEAP[$f];
        var $58=(($57+16)&4294967295);
        var $59=HEAP[$58];
        var $60=(($59+4*$55)&4294967295);
        HEAP[$60]=$52;
        var $61=HEAP[$2];
        var $62=(($61)&4294967295);
        var $63=HEAP[$62];
        var $64=$63;
        var $65=$64;
        var $66=(($65+5)&4294967295);
        var $67=HEAP[$66];
        var $68=unSign(($67), 8, 0);
        var $69=($68) & 3;
        var $70=((($69))|0)!=0;
        if ($70) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $71
        var $72=HEAP[$f];
        var $73=$72;
        var $74=$73;
        var $75=(($74+5)&4294967295);
        var $76=HEAP[$75];
        var $77=unSign(($76), 8, 0);
        var $78=($77) & 4;
        var $79=((($78))|0)!=0;
        if ($79) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $80
        var $81=HEAP[$1];
        var $82=(($81+40)&4294967295);
        var $83=HEAP[$82];
        var $84=HEAP[$f];
        var $85=$84;
        var $86=HEAP[$2];
        var $87=(($86)&4294967295);
        var $88=HEAP[$87];
        var $89=$88;
        _luaC_barrierf($83, $85, $89);
        __label__ = 8; break;
      case 8: // $90
        var $91=HEAP[$3];
        var $92=HEAP[$fs];
        var $93=HEAP[$fs];
        var $94=(($93+44)&4294967295);
        var $95=HEAP[$94];
        var $96=((($95) - 1)&4294967295);
        var $97=_luaK_codeABx($92, 36, 0, $96);
        _init_exp($91, 11, $97);
        HEAP[$i]=0;
        __label__ = 9; break;
      case 9: // $98
        var $99=HEAP[$i];
        var $100=HEAP[$2];
        var $101=(($100)&4294967295);
        var $102=HEAP[$101];
        var $103=(($102+72)&4294967295);
        var $104=HEAP[$103];
        var $105=unSign(($104), 8, 0);
        var $106=((($99))|0) < ((($105))|0);
        if ($106) { __label__ = 10; break; } else { __label__ = 15; break; }
      case 10: // $107
        var $108=HEAP[$i];
        var $109=HEAP[$2];
        var $110=(($109+51)&4294967295);
        var $111=(($110+$108*2)&4294967295);
        var $112=(($111)&4294967295);
        var $113=HEAP[$112];
        var $114=unSign(($113), 8, 0);
        var $115=((($114))|0)==6;
        if ($115) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $116
        __lastLabel__ = 11; __label__ = 13; break;
      case 12: // $117
        __lastLabel__ = 12; __label__ = 13; break;
      case 13: // $118
        var $119=__lastLabel__ == 11 ? 0 : (4);
        HEAP[$o]=$119;
        var $120=HEAP[$fs];
        var $121=HEAP[$o];
        var $122=HEAP[$i];
        var $123=HEAP[$2];
        var $124=(($123+51)&4294967295);
        var $125=(($124+$122*2)&4294967295);
        var $126=(($125+1)&4294967295);
        var $127=HEAP[$126];
        var $128=unSign(($127), 8, 0);
        var $129=_luaK_codeABC($120, $121, 0, $128, 0);
        __label__ = 14; break;
      case 14: // $130
        var $131=HEAP[$i];
        var $132=((($131) + 1)&4294967295);
        HEAP[$i]=$132;
        __label__ = 9; break;
      case 15: // $133
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_checkname($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $ts=__stackBase__+4;
    HEAP[$1]=$ls;
    var $2=HEAP[$1];
    _check($2, 285);
    var $3=HEAP[$1];
    var $4=(($3+12)&4294967295);
    var $5=(($4+4)&4294967295);
    var $6=$5;
    var $7=HEAP[$6];
    HEAP[$ts]=$7;
    var $8=HEAP[$1];
    _luaX_next($8);
    var $9=HEAP[$ts];
    STACKTOP = __stackBase__;
    return $9;
  }
  

  function _registerlocalvar($ls, $varname) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        var $f=__stackBase__+12;
        var $oldsize=__stackBase__+16;
        HEAP[$1]=$ls;
        HEAP[$2]=$varname;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        var $6=HEAP[$fs];
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        HEAP[$f]=$8;
        var $9=HEAP[$f];
        var $10=(($9+56)&4294967295);
        var $11=HEAP[$10];
        HEAP[$oldsize]=$11;
        var $12=HEAP[$fs];
        var $13=(($12+48)&4294967295);
        var $14=HEAP[$13];
        var $15=reSign(($14), 16, 0);
        var $16=((($15) + 1)&4294967295);
        var $17=HEAP[$f];
        var $18=(($17+56)&4294967295);
        var $19=HEAP[$18];
        var $20=((($16))|0) > ((($19))|0);
        if ($20) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $21
        var $22=HEAP[$1];
        var $23=(($22+40)&4294967295);
        var $24=HEAP[$23];
        var $25=HEAP[$f];
        var $26=(($25+24)&4294967295);
        var $27=HEAP[$26];
        var $28=$27;
        var $29=HEAP[$f];
        var $30=(($29+56)&4294967295);
        var $31=_luaM_growaux_($24, $28, $30, 12, 32767, ((__str8483)&4294967295));
        var $32=$31;
        var $33=HEAP[$f];
        var $34=(($33+24)&4294967295);
        HEAP[$34]=$32;
        __label__ = 2; break;
      case 2: // $35
        __label__ = 3; break;
      case 3: // $36
        var $37=HEAP[$oldsize];
        var $38=HEAP[$f];
        var $39=(($38+56)&4294967295);
        var $40=HEAP[$39];
        var $41=((($37))|0) < ((($40))|0);
        if ($41) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $42
        var $43=HEAP[$oldsize];
        var $44=((($43) + 1)&4294967295);
        HEAP[$oldsize]=$44;
        var $45=HEAP[$f];
        var $46=(($45+24)&4294967295);
        var $47=HEAP[$46];
        var $48=(($47+12*$43)&4294967295);
        var $49=(($48)&4294967295);
        HEAP[$49]=0;
        __label__ = 3; break;
      case 5: // $50
        var $51=HEAP[$2];
        var $52=HEAP[$fs];
        var $53=(($52+48)&4294967295);
        var $54=HEAP[$53];
        var $55=reSign(($54), 16, 0);
        var $56=HEAP[$f];
        var $57=(($56+24)&4294967295);
        var $58=HEAP[$57];
        var $59=(($58+12*$55)&4294967295);
        var $60=(($59)&4294967295);
        HEAP[$60]=$51;
        var $61=HEAP[$2];
        var $62=$61;
        var $63=$62;
        var $64=(($63+5)&4294967295);
        var $65=HEAP[$64];
        var $66=unSign(($65), 8, 0);
        var $67=($66) & 3;
        var $68=((($67))|0)!=0;
        if ($68) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $69
        var $70=HEAP[$f];
        var $71=$70;
        var $72=$71;
        var $73=(($72+5)&4294967295);
        var $74=HEAP[$73];
        var $75=unSign(($74), 8, 0);
        var $76=($75) & 4;
        var $77=((($76))|0)!=0;
        if ($77) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $78
        var $79=HEAP[$1];
        var $80=(($79+40)&4294967295);
        var $81=HEAP[$80];
        var $82=HEAP[$f];
        var $83=$82;
        var $84=HEAP[$2];
        var $85=$84;
        _luaC_barrierf($81, $83, $85);
        __label__ = 8; break;
      case 8: // $86
        var $87=HEAP[$fs];
        var $88=(($87+48)&4294967295);
        var $89=HEAP[$88];
        var $90=((($89) + 1)&65535);
        HEAP[$88]=$90;
        var $91=reSign(($89), 16, 0);
        STACKTOP = __stackBase__;
        return $91;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _closelistfield($fs, $cc) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$fs;
        HEAP[$2]=$cc;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        __label__ = 4; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$2];
        var $12=(($11)&4294967295);
        _luaK_exp2nextreg($10, $12);
        var $13=HEAP[$2];
        var $14=(($13)&4294967295);
        var $15=(($14)&4294967295);
        HEAP[$15]=0;
        var $16=HEAP[$2];
        var $17=(($16+32)&4294967295);
        var $18=HEAP[$17];
        var $19=((($18))|0)==50;
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $20
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=(($22+20)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+4)&4294967295);
        var $26=$25;
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        var $29=HEAP[$2];
        var $30=(($29+28)&4294967295);
        var $31=HEAP[$30];
        var $32=HEAP[$2];
        var $33=(($32+32)&4294967295);
        var $34=HEAP[$33];
        _luaK_setlist($21, $28, $31, $34);
        var $35=HEAP[$2];
        var $36=(($35+32)&4294967295);
        HEAP[$36]=0;
        __label__ = 4; break;
      case 4: // $37
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _listfield($ls, $cc) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$ls;
        HEAP[$2]=$cc;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        var $5=(($4)&4294967295);
        _expr($3, $5);
        var $6=HEAP[$2];
        var $7=(($6+28)&4294967295);
        var $8=HEAP[$7];
        var $9=((($8))|0) > 2147483645;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$1];
        var $12=(($11+36)&4294967295);
        var $13=HEAP[$12];
        _errorlimit($13, 2147483645, ((__str9484)&4294967295));
        __label__ = 2; break;
      case 2: // $14
        var $15=HEAP[$2];
        var $16=(($15+28)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17) + 1)&4294967295);
        HEAP[$16]=$18;
        var $19=HEAP[$2];
        var $20=(($19+32)&4294967295);
        var $21=HEAP[$20];
        var $22=((($21) + 1)&4294967295);
        HEAP[$20]=$22;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _recfield($ls, $cc) {
    var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        var $reg=__stackBase__+12;
        var $key=__stackBase__+16;
        var $val=__stackBase__+36;
        var $rkkey=__stackBase__+56;
        HEAP[$1]=$ls;
        HEAP[$2]=$cc;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        var $6=HEAP[$1];
        var $7=(($6+36)&4294967295);
        var $8=HEAP[$7];
        var $9=(($8+36)&4294967295);
        var $10=HEAP[$9];
        HEAP[$reg]=$10;
        var $11=HEAP[$1];
        var $12=(($11+12)&4294967295);
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=((($14))|0)==285;
        if ($15) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $16
        var $17=HEAP[$2];
        var $18=(($17+24)&4294967295);
        var $19=HEAP[$18];
        var $20=((($19))|0) > 2147483645;
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $21
        var $22=HEAP[$fs];
        _errorlimit($22, 2147483645, ((__str9484)&4294967295));
        __label__ = 3; break;
      case 3: // $23
        var $24=HEAP[$1];
        _checkname($24, $key);
        __label__ = 5; break;
      case 4: // $25
        var $26=HEAP[$1];
        _yindex($26, $key);
        __label__ = 5; break;
      case 5: // $27
        var $28=HEAP[$2];
        var $29=(($28+24)&4294967295);
        var $30=HEAP[$29];
        var $31=((($30) + 1)&4294967295);
        HEAP[$29]=$31;
        var $32=HEAP[$1];
        _checknext($32, 61);
        var $33=HEAP[$fs];
        var $34=_luaK_exp2RK($33, $key);
        HEAP[$rkkey]=$34;
        var $35=HEAP[$1];
        _expr($35, $val);
        var $36=HEAP[$fs];
        var $37=HEAP[$2];
        var $38=(($37+20)&4294967295);
        var $39=HEAP[$38];
        var $40=(($39+4)&4294967295);
        var $41=$40;
        var $42=(($41)&4294967295);
        var $43=HEAP[$42];
        var $44=HEAP[$rkkey];
        var $45=HEAP[$fs];
        var $46=_luaK_exp2RK($45, $val);
        var $47=_luaK_codeABC($36, 9, $43, $44, $46);
        var $48=HEAP[$reg];
        var $49=HEAP[$fs];
        var $50=(($49+36)&4294967295);
        HEAP[$50]=$48;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lastlistfield($fs, $cc) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$fs;
        HEAP[$2]=$cc;
        var $3=HEAP[$2];
        var $4=(($3+32)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)==0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        __label__ = 8; break;
      case 2: // $8
        var $9=HEAP[$2];
        var $10=(($9)&4294967295);
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        var $13=((($12))|0)==13;
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $14
        var $15=HEAP[$2];
        var $16=(($15)&4294967295);
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=((($18))|0)==14;
        if ($19) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $20
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=(($22)&4294967295);
        _luaK_setreturns($21, $23, -1);
        var $24=HEAP[$1];
        var $25=HEAP[$2];
        var $26=(($25+20)&4294967295);
        var $27=HEAP[$26];
        var $28=(($27+4)&4294967295);
        var $29=$28;
        var $30=(($29)&4294967295);
        var $31=HEAP[$30];
        var $32=HEAP[$2];
        var $33=(($32+28)&4294967295);
        var $34=HEAP[$33];
        _luaK_setlist($24, $31, $34, -1);
        var $35=HEAP[$2];
        var $36=(($35+28)&4294967295);
        var $37=HEAP[$36];
        var $38=((($37) + -1)&4294967295);
        HEAP[$36]=$38;
        __label__ = 8; break;
      case 5: // $39
        var $40=HEAP[$2];
        var $41=(($40)&4294967295);
        var $42=(($41)&4294967295);
        var $43=HEAP[$42];
        var $44=((($43))|0)!=0;
        if ($44) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $45
        var $46=HEAP[$1];
        var $47=HEAP[$2];
        var $48=(($47)&4294967295);
        _luaK_exp2nextreg($46, $48);
        __label__ = 7; break;
      case 7: // $49
        var $50=HEAP[$1];
        var $51=HEAP[$2];
        var $52=(($51+20)&4294967295);
        var $53=HEAP[$52];
        var $54=(($53+4)&4294967295);
        var $55=$54;
        var $56=(($55)&4294967295);
        var $57=HEAP[$56];
        var $58=HEAP[$2];
        var $59=(($58+28)&4294967295);
        var $60=HEAP[$59];
        var $61=HEAP[$2];
        var $62=(($61+32)&4294967295);
        var $63=HEAP[$62];
        _luaK_setlist($50, $57, $60, $63);
        __label__ = 8; break;
      case 8: // $64
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _checkname($ls, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$ls;
    HEAP[$2]=$e;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=HEAP[$1];
    var $6=_str_checkname($5);
    _codestring($3, $4, $6);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _yindex($ls, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$ls;
    HEAP[$2]=$v;
    var $3=HEAP[$1];
    _luaX_next($3);
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    _expr($4, $5);
    var $6=HEAP[$1];
    var $7=(($6+36)&4294967295);
    var $8=HEAP[$7];
    var $9=HEAP[$2];
    _luaK_exp2val($8, $9);
    var $10=HEAP[$1];
    _checknext($10, 93);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _prefixexp($ls, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $line=__stackBase__+8;
        HEAP[$1]=$ls;
        HEAP[$2]=$v;
        var $3=HEAP[$1];
        var $4=(($3+12)&4294967295);
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        if ($6 == 40) {
          __label__ = 1; break;
        }
        else if ($6 == 285) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $7
        var $8=HEAP[$1];
        var $9=(($8+4)&4294967295);
        var $10=HEAP[$9];
        HEAP[$line]=$10;
        var $11=HEAP[$1];
        _luaX_next($11);
        var $12=HEAP[$1];
        var $13=HEAP[$2];
        _expr($12, $13);
        var $14=HEAP[$1];
        var $15=HEAP[$line];
        _check_match($14, 41, 40, $15);
        var $16=HEAP[$1];
        var $17=(($16+36)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$2];
        _luaK_dischargevars($18, $19);
        __label__ = 4; break;
      case 2: // $20
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        _singlevar($21, $22);
        __label__ = 4; break;
      case 3: // $23
        var $24=HEAP[$1];
        _luaX_syntaxerror($24, ((__str14489)&4294967295));
        __label__ = 4; break;
      case 4: // $25
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _field($ls, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $fs=__stackBase__+8;
    var $key=__stackBase__+12;
    HEAP[$1]=$ls;
    HEAP[$2]=$v;
    var $3=HEAP[$1];
    var $4=(($3+36)&4294967295);
    var $5=HEAP[$4];
    HEAP[$fs]=$5;
    var $6=HEAP[$fs];
    var $7=HEAP[$2];
    var $8=_luaK_exp2anyreg($6, $7);
    var $9=HEAP[$1];
    _luaX_next($9);
    var $10=HEAP[$1];
    _checkname($10, $key);
    var $11=HEAP[$fs];
    var $12=HEAP[$2];
    _luaK_indexed($11, $12, $key);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _funcargs($ls, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        var $args=__stackBase__+12;
        var $base=__stackBase__+32;
        var $nparams=__stackBase__+36;
        var $line=__stackBase__+40;
        HEAP[$1]=$ls;
        HEAP[$2]=$f;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        var $6=HEAP[$1];
        var $7=(($6+4)&4294967295);
        var $8=HEAP[$7];
        HEAP[$line]=$8;
        var $9=HEAP[$1];
        var $10=(($9+12)&4294967295);
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        if ($12 == 40) {
          __label__ = 1; break;
        }
        else if ($12 == 123) {
          __label__ = 7; break;
        }
        else if ($12 == 286) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 1: // $13
        var $14=HEAP[$line];
        var $15=HEAP[$1];
        var $16=(($15+8)&4294967295);
        var $17=HEAP[$16];
        var $18=((($14))|0)!=((($17))|0);
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $19
        var $20=HEAP[$1];
        _luaX_syntaxerror($20, ((__str12487)&4294967295));
        __label__ = 3; break;
      case 3: // $21
        var $22=HEAP[$1];
        _luaX_next($22);
        var $23=HEAP[$1];
        var $24=(($23+12)&4294967295);
        var $25=(($24)&4294967295);
        var $26=HEAP[$25];
        var $27=((($26))|0)==41;
        if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $28
        var $29=(($args)&4294967295);
        HEAP[$29]=0;
        __label__ = 6; break;
      case 5: // $30
        var $31=HEAP[$1];
        var $32=_explist1($31, $args);
        var $33=HEAP[$fs];
        _luaK_setreturns($33, $args, -1);
        __label__ = 6; break;
      case 6: // $34
        var $35=HEAP[$1];
        var $36=HEAP[$line];
        _check_match($35, 41, 40, $36);
        __label__ = 10; break;
      case 7: // $37
        var $38=HEAP[$1];
        _constructor($38, $args);
        __label__ = 10; break;
      case 8: // $39
        var $40=HEAP[$1];
        var $41=HEAP[$1];
        var $42=(($41+12)&4294967295);
        var $43=(($42+4)&4294967295);
        var $44=$43;
        var $45=HEAP[$44];
        _codestring($40, $args, $45);
        var $46=HEAP[$1];
        _luaX_next($46);
        __label__ = 10; break;
      case 9: // $47
        var $48=HEAP[$1];
        _luaX_syntaxerror($48, ((__str13488)&4294967295));
        __label__ = 17; break;
      case 10: // $49
        var $50=HEAP[$2];
        var $51=(($50+4)&4294967295);
        var $52=$51;
        var $53=(($52)&4294967295);
        var $54=HEAP[$53];
        HEAP[$base]=$54;
        var $55=(($args)&4294967295);
        var $56=HEAP[$55];
        var $57=((($56))|0)==13;
        if ($57) { __label__ = 12; break; } else { __label__ = 11; break; }
      case 11: // $58
        var $59=(($args)&4294967295);
        var $60=HEAP[$59];
        var $61=((($60))|0)==14;
        if ($61) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $62
        HEAP[$nparams]=-1;
        __label__ = 16; break;
      case 13: // $63
        var $64=(($args)&4294967295);
        var $65=HEAP[$64];
        var $66=((($65))|0)!=0;
        if ($66) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $67
        var $68=HEAP[$fs];
        _luaK_exp2nextreg($68, $args);
        __label__ = 15; break;
      case 15: // $69
        var $70=HEAP[$fs];
        var $71=(($70+36)&4294967295);
        var $72=HEAP[$71];
        var $73=HEAP[$base];
        var $74=((($73) + 1)&4294967295);
        var $75=((($72) - ($74))&4294967295);
        HEAP[$nparams]=$75;
        __label__ = 16; break;
      case 16: // $76
        var $77=HEAP[$2];
        var $78=HEAP[$fs];
        var $79=HEAP[$base];
        var $80=HEAP[$nparams];
        var $81=((($80) + 1)&4294967295);
        var $82=_luaK_codeABC($78, 28, $79, $81, 2);
        _init_exp($77, 13, $82);
        var $83=HEAP[$fs];
        var $84=HEAP[$line];
        _luaK_fixline($83, $84);
        var $85=HEAP[$base];
        var $86=((($85) + 1)&4294967295);
        var $87=HEAP[$fs];
        var $88=(($87+36)&4294967295);
        HEAP[$88]=$86;
        __label__ = 17; break;
      case 17: // $89
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _singlevar($ls, $var) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $varname=__stackBase__+8;
        var $fs=__stackBase__+12;
        HEAP[$1]=$ls;
        HEAP[$2]=$var;
        var $3=HEAP[$1];
        var $4=_str_checkname($3);
        HEAP[$varname]=$4;
        var $5=HEAP[$1];
        var $6=(($5+36)&4294967295);
        var $7=HEAP[$6];
        HEAP[$fs]=$7;
        var $8=HEAP[$fs];
        var $9=HEAP[$varname];
        var $10=HEAP[$2];
        var $11=_singlevaraux($8, $9, $10, 1);
        var $12=((($11))|0)==8;
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        var $14=HEAP[$fs];
        var $15=HEAP[$varname];
        var $16=_luaK_stringK($14, $15);
        var $17=HEAP[$2];
        var $18=(($17+4)&4294967295);
        var $19=$18;
        var $20=(($19)&4294967295);
        HEAP[$20]=$16;
        __label__ = 2; break;
      case 2: // $21
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _singlevaraux($fs, $n, $var, $base) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $v=__stackBase__+20;
        HEAP[$2]=$fs;
        HEAP[$3]=$n;
        HEAP[$4]=$var;
        HEAP[$5]=$base;
        var $6=HEAP[$2];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$4];
        _init_exp($9, 8, 255);
        HEAP[$1]=8;
        __label__ = 9; break;
      case 2: // $10
        var $11=HEAP[$2];
        var $12=HEAP[$3];
        var $13=_searchvar($11, $12);
        HEAP[$v]=$13;
        var $14=HEAP[$v];
        var $15=((($14))|0) >= 0;
        if ($15) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $16
        var $17=HEAP[$4];
        var $18=HEAP[$v];
        _init_exp($17, 6, $18);
        var $19=HEAP[$5];
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $21
        var $22=HEAP[$2];
        var $23=HEAP[$v];
        _markupval($22, $23);
        __label__ = 5; break;
      case 5: // $24
        HEAP[$1]=6;
        __label__ = 9; break;
      case 6: // $25
        var $26=HEAP[$2];
        var $27=(($26+8)&4294967295);
        var $28=HEAP[$27];
        var $29=HEAP[$3];
        var $30=HEAP[$4];
        var $31=_singlevaraux($28, $29, $30, 0);
        var $32=((($31))|0)==8;
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $33
        HEAP[$1]=8;
        __label__ = 9; break;
      case 8: // $34
        var $35=HEAP[$2];
        var $36=HEAP[$3];
        var $37=HEAP[$4];
        var $38=_indexupvalue($35, $36, $37);
        var $39=HEAP[$4];
        var $40=(($39+4)&4294967295);
        var $41=$40;
        var $42=(($41)&4294967295);
        HEAP[$42]=$38;
        var $43=HEAP[$4];
        var $44=(($43)&4294967295);
        HEAP[$44]=7;
        HEAP[$1]=7;
        __label__ = 9; break;
      case 9: // $45
        var $46=HEAP[$1];
        STACKTOP = __stackBase__;
        return $46;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _searchvar($fs, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        HEAP[$2]=$fs;
        HEAP[$3]=$n;
        var $4=HEAP[$2];
        var $5=(($4+50)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        var $8=((($7) - 1)&4294967295);
        HEAP[$i]=$8;
        __label__ = 1; break;
      case 1: // $9
        var $10=HEAP[$i];
        var $11=((($10))|0) >= 0;
        if ($11) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $12
        var $13=HEAP[$3];
        var $14=HEAP[$i];
        var $15=HEAP[$2];
        var $16=(($15+172)&4294967295);
        var $17=(($16+$14*2)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 16, 0);
        var $20=HEAP[$2];
        var $21=(($20)&4294967295);
        var $22=HEAP[$21];
        var $23=(($22+24)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+12*$19)&4294967295);
        var $26=(($25)&4294967295);
        var $27=HEAP[$26];
        var $28=((($13))|0)==((($27))|0);
        if ($28) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $29
        var $30=HEAP[$i];
        HEAP[$1]=$30;
        __label__ = 7; break;
      case 4: // $31
        __label__ = 5; break;
      case 5: // $32
        var $33=HEAP[$i];
        var $34=((($33) + -1)&4294967295);
        HEAP[$i]=$34;
        __label__ = 1; break;
      case 6: // $35
        HEAP[$1]=-1;
        __label__ = 7; break;
      case 7: // $36
        var $37=HEAP[$1];
        STACKTOP = __stackBase__;
        return $37;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _markupval($fs, $level) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $bl=__stackBase__+8;
        HEAP[$1]=$fs;
        HEAP[$2]=$level;
        var $3=HEAP[$1];
        var $4=(($3+20)&4294967295);
        var $5=HEAP[$4];
        HEAP[$bl]=$5;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$bl];
        var $8=((($7))|0)!=0;
        if ($8) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $9
        var $10=HEAP[$bl];
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=HEAP[$2];
        var $15=((($13))|0) > ((($14))|0);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $16
        var $17=__lastLabel__ == 1 ? 0 : ($15);
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $18
        var $19=HEAP[$bl];
        var $20=(($19)&4294967295);
        var $21=HEAP[$20];
        HEAP[$bl]=$21;
        __label__ = 1; break;
      case 5: // $22
        var $23=HEAP[$bl];
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $25
        var $26=HEAP[$bl];
        var $27=(($26+9)&4294967295);
        HEAP[$27]=1;
        __label__ = 7; break;
      case 7: // $28
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _indexupvalue($fs, $name, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        var $f=__stackBase__+20;
        var $oldsize=__stackBase__+24;
        HEAP[$2]=$fs;
        HEAP[$3]=$name;
        HEAP[$4]=$v;
        var $5=HEAP[$2];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        HEAP[$f]=$7;
        var $8=HEAP[$f];
        var $9=(($8+36)&4294967295);
        var $10=HEAP[$9];
        HEAP[$oldsize]=$10;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $11
        var $12=HEAP[$i];
        var $13=HEAP[$f];
        var $14=(($13+72)&4294967295);
        var $15=HEAP[$14];
        var $16=unSign(($15), 8, 0);
        var $17=((($12))|0) < ((($16))|0);
        if ($17) { __label__ = 2; break; } else { __label__ = 7; break; }
      case 2: // $18
        var $19=HEAP[$i];
        var $20=HEAP[$2];
        var $21=(($20+51)&4294967295);
        var $22=(($21+$19*2)&4294967295);
        var $23=(($22)&4294967295);
        var $24=HEAP[$23];
        var $25=unSign(($24), 8, 0);
        var $26=HEAP[$4];
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        var $29=((($25))|0)==((($28))|0);
        if ($29) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $30
        var $31=HEAP[$i];
        var $32=HEAP[$2];
        var $33=(($32+51)&4294967295);
        var $34=(($33+$31*2)&4294967295);
        var $35=(($34+1)&4294967295);
        var $36=HEAP[$35];
        var $37=unSign(($36), 8, 0);
        var $38=HEAP[$4];
        var $39=(($38+4)&4294967295);
        var $40=$39;
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        var $43=((($37))|0)==((($42))|0);
        if ($43) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $44
        var $45=HEAP[$i];
        HEAP[$1]=$45;
        __label__ = 18; break;
      case 5: // $46
        __label__ = 6; break;
      case 6: // $47
        var $48=HEAP[$i];
        var $49=((($48) + 1)&4294967295);
        HEAP[$i]=$49;
        __label__ = 1; break;
      case 7: // $50
        var $51=HEAP[$f];
        var $52=(($51+72)&4294967295);
        var $53=HEAP[$52];
        var $54=unSign(($53), 8, 0);
        var $55=((($54) + 1)&4294967295);
        var $56=((($55))|0) > 60;
        if ($56) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $57
        var $58=HEAP[$2];
        _errorlimit($58, 60, ((__str15490)&4294967295));
        __label__ = 9; break;
      case 9: // $59
        var $60=HEAP[$f];
        var $61=(($60+72)&4294967295);
        var $62=HEAP[$61];
        var $63=unSign(($62), 8, 0);
        var $64=((($63) + 1)&4294967295);
        var $65=HEAP[$f];
        var $66=(($65+36)&4294967295);
        var $67=HEAP[$66];
        var $68=((($64))|0) > ((($67))|0);
        if ($68) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $69
        var $70=HEAP[$2];
        var $71=(($70+16)&4294967295);
        var $72=HEAP[$71];
        var $73=HEAP[$f];
        var $74=(($73+28)&4294967295);
        var $75=HEAP[$74];
        var $76=$75;
        var $77=HEAP[$f];
        var $78=(($77+36)&4294967295);
        var $79=_luaM_growaux_($72, $76, $78, 4, 2147483645, ((__str16491)&4294967295));
        var $80=$79;
        var $81=HEAP[$f];
        var $82=(($81+28)&4294967295);
        HEAP[$82]=$80;
        __label__ = 11; break;
      case 11: // $83
        __label__ = 12; break;
      case 12: // $84
        var $85=HEAP[$oldsize];
        var $86=HEAP[$f];
        var $87=(($86+36)&4294967295);
        var $88=HEAP[$87];
        var $89=((($85))|0) < ((($88))|0);
        if ($89) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $90
        var $91=HEAP[$oldsize];
        var $92=((($91) + 1)&4294967295);
        HEAP[$oldsize]=$92;
        var $93=HEAP[$f];
        var $94=(($93+28)&4294967295);
        var $95=HEAP[$94];
        var $96=(($95+4*$91)&4294967295);
        HEAP[$96]=0;
        __label__ = 12; break;
      case 14: // $97
        var $98=HEAP[$3];
        var $99=HEAP[$f];
        var $100=(($99+72)&4294967295);
        var $101=HEAP[$100];
        var $102=unSign(($101), 8, 0);
        var $103=HEAP[$f];
        var $104=(($103+28)&4294967295);
        var $105=HEAP[$104];
        var $106=(($105+4*$102)&4294967295);
        HEAP[$106]=$98;
        var $107=HEAP[$3];
        var $108=$107;
        var $109=$108;
        var $110=(($109+5)&4294967295);
        var $111=HEAP[$110];
        var $112=unSign(($111), 8, 0);
        var $113=($112) & 3;
        var $114=((($113))|0)!=0;
        if ($114) { __label__ = 15; break; } else { __label__ = 17; break; }
      case 15: // $115
        var $116=HEAP[$f];
        var $117=$116;
        var $118=$117;
        var $119=(($118+5)&4294967295);
        var $120=HEAP[$119];
        var $121=unSign(($120), 8, 0);
        var $122=($121) & 4;
        var $123=((($122))|0)!=0;
        if ($123) { __label__ = 16; break; } else { __label__ = 17; break; }
      case 16: // $124
        var $125=HEAP[$2];
        var $126=(($125+16)&4294967295);
        var $127=HEAP[$126];
        var $128=HEAP[$f];
        var $129=$128;
        var $130=HEAP[$3];
        var $131=$130;
        _luaC_barrierf($127, $129, $131);
        __label__ = 17; break;
      case 17: // $132
        var $133=HEAP[$4];
        var $134=(($133)&4294967295);
        var $135=HEAP[$134];
        var $136=((($135)) & 255);
        var $137=HEAP[$f];
        var $138=(($137+72)&4294967295);
        var $139=HEAP[$138];
        var $140=unSign(($139), 8, 0);
        var $141=HEAP[$2];
        var $142=(($141+51)&4294967295);
        var $143=(($142+$140*2)&4294967295);
        var $144=(($143)&4294967295);
        HEAP[$144]=$136;
        var $145=HEAP[$4];
        var $146=(($145+4)&4294967295);
        var $147=$146;
        var $148=(($147)&4294967295);
        var $149=HEAP[$148];
        var $150=((($149)) & 255);
        var $151=HEAP[$f];
        var $152=(($151+72)&4294967295);
        var $153=HEAP[$152];
        var $154=unSign(($153), 8, 0);
        var $155=HEAP[$2];
        var $156=(($155+51)&4294967295);
        var $157=(($156+$154*2)&4294967295);
        var $158=(($157+1)&4294967295);
        HEAP[$158]=$150;
        var $159=HEAP[$f];
        var $160=(($159+72)&4294967295);
        var $161=HEAP[$160];
        var $162=((($161) + 1)&255);
        HEAP[$160]=$162;
        var $163=unSign(($161), 8, 0);
        HEAP[$1]=$163;
        __label__ = 18; break;
      case 18: // $164
        var $165=HEAP[$1];
        STACKTOP = __stackBase__;
        return $165;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _funcname($ls, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $needself=__stackBase__+8;
        HEAP[$1]=$ls;
        HEAP[$2]=$v;
        HEAP[$needself]=0;
        var $3=HEAP[$1];
        var $4=HEAP[$2];
        _singlevar($3, $4);
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$1];
        var $7=(($6+12)&4294967295);
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=((($9))|0)==46;
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$2];
        _field($12, $13);
        __label__ = 1; break;
      case 3: // $14
        var $15=HEAP[$1];
        var $16=(($15+12)&4294967295);
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=((($18))|0)==58;
        if ($19) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $20
        HEAP[$needself]=1;
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        _field($21, $22);
        __label__ = 5; break;
      case 5: // $23
        var $24=HEAP[$needself];
        STACKTOP = __stackBase__;
        return $24;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _enterblock($fs, $bl, $isbreakable) {
    var __stackBase__  = STACKTOP; STACKTOP += 9; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 9);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$fs;
    HEAP[$2]=$bl;
    HEAP[$3]=$isbreakable;
    var $4=HEAP[$2];
    var $5=(($4+4)&4294967295);
    HEAP[$5]=-1;
    var $6=HEAP[$3];
    var $7=HEAP[$2];
    var $8=(($7+10)&4294967295);
    HEAP[$8]=$6;
    var $9=HEAP[$1];
    var $10=(($9+50)&4294967295);
    var $11=HEAP[$10];
    var $12=HEAP[$2];
    var $13=(($12+8)&4294967295);
    HEAP[$13]=$11;
    var $14=HEAP[$2];
    var $15=(($14+9)&4294967295);
    HEAP[$15]=0;
    var $16=HEAP[$1];
    var $17=(($16+20)&4294967295);
    var $18=HEAP[$17];
    var $19=HEAP[$2];
    var $20=(($19)&4294967295);
    HEAP[$20]=$18;
    var $21=HEAP[$2];
    var $22=HEAP[$1];
    var $23=(($22+20)&4294967295);
    HEAP[$23]=$21;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _cond($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $v=__stackBase__+4;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        _expr($2, $v);
        var $3=(($v)&4294967295);
        var $4=HEAP[$3];
        var $5=((($4))|0)==1;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=(($v)&4294967295);
        HEAP[$7]=3;
        __label__ = 2; break;
      case 2: // $8
        var $9=HEAP[$1];
        var $10=(($9+36)&4294967295);
        var $11=HEAP[$10];
        _luaK_goiftrue($11, $v);
        var $12=(($v+16)&4294967295);
        var $13=HEAP[$12];
        STACKTOP = __stackBase__;
        return $13;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _leaveblock($fs) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $bl=__stackBase__+4;
        HEAP[$1]=$fs;
        var $2=HEAP[$1];
        var $3=(($2+20)&4294967295);
        var $4=HEAP[$3];
        HEAP[$bl]=$4;
        var $5=HEAP[$bl];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=HEAP[$1];
        var $9=(($8+20)&4294967295);
        HEAP[$9]=$7;
        var $10=HEAP[$1];
        var $11=(($10+12)&4294967295);
        var $12=HEAP[$11];
        var $13=HEAP[$bl];
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        var $16=unSign(($15), 8, 0);
        _removevars($12, $16);
        var $17=HEAP[$bl];
        var $18=(($17+9)&4294967295);
        var $19=HEAP[$18];
        var $20=reSign(($19), 8, 0)!=0;
        if ($20) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $21
        var $22=HEAP[$1];
        var $23=HEAP[$bl];
        var $24=(($23+8)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=_luaK_codeABC($22, 35, $26, 0, 0);
        __label__ = 2; break;
      case 2: // $28
        var $29=HEAP[$1];
        var $30=(($29+50)&4294967295);
        var $31=HEAP[$30];
        var $32=unSign(($31), 8, 0);
        var $33=HEAP[$1];
        var $34=(($33+36)&4294967295);
        HEAP[$34]=$32;
        var $35=HEAP[$1];
        var $36=HEAP[$bl];
        var $37=(($36+4)&4294967295);
        var $38=HEAP[$37];
        _luaK_patchtohere($35, $38);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _removevars($ls, $tolevel) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        HEAP[$1]=$ls;
        HEAP[$2]=$tolevel;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$fs];
        var $8=(($7+50)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=HEAP[$2];
        var $12=((($10))|0) > ((($11))|0);
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$fs];
        var $15=(($14+24)&4294967295);
        var $16=HEAP[$15];
        var $17=HEAP[$fs];
        var $18=(($17+50)&4294967295);
        var $19=HEAP[$18];
        var $20=((($19) + -1)&255);
        HEAP[$18]=$20;
        var $21=unSign(($20), 8, 0);
        var $22=HEAP[$fs];
        var $23=(($22+172)&4294967295);
        var $24=(($23+$21*2)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 16, 0);
        var $27=HEAP[$fs];
        var $28=(($27)&4294967295);
        var $29=HEAP[$28];
        var $30=(($29+24)&4294967295);
        var $31=HEAP[$30];
        var $32=(($31+12*$26)&4294967295);
        var $33=(($32+8)&4294967295);
        HEAP[$33]=$16;
        __label__ = 1; break;
      case 3: // $34
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fornum($ls, $varname, $line) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $fs=__stackBase__+12;
        var $base=__stackBase__+16;
        HEAP[$1]=$ls;
        HEAP[$2]=$varname;
        HEAP[$3]=$line;
        var $4=HEAP[$1];
        var $5=(($4+36)&4294967295);
        var $6=HEAP[$5];
        HEAP[$fs]=$6;
        var $7=HEAP[$fs];
        var $8=(($7+36)&4294967295);
        var $9=HEAP[$8];
        HEAP[$base]=$9;
        var $10=HEAP[$1];
        var $11=HEAP[$1];
        var $12=_luaX_newstring($11, ((__str22497)&4294967295), 11);
        _new_localvar($10, $12, 0);
        var $13=HEAP[$1];
        var $14=HEAP[$1];
        var $15=_luaX_newstring($14, ((__str23498)&4294967295), 11);
        _new_localvar($13, $15, 1);
        var $16=HEAP[$1];
        var $17=HEAP[$1];
        var $18=_luaX_newstring($17, ((__str24499)&4294967295), 10);
        _new_localvar($16, $18, 2);
        var $19=HEAP[$1];
        var $20=HEAP[$2];
        _new_localvar($19, $20, 3);
        var $21=HEAP[$1];
        _checknext($21, 61);
        var $22=HEAP[$1];
        var $23=_exp1($22);
        var $24=HEAP[$1];
        _checknext($24, 44);
        var $25=HEAP[$1];
        var $26=_exp1($25);
        var $27=HEAP[$1];
        var $28=_testnext($27, 44);
        var $29=((($28))|0)!=0;
        if ($29) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $30
        var $31=HEAP[$1];
        var $32=_exp1($31);
        __label__ = 3; break;
      case 2: // $33
        var $34=HEAP[$fs];
        var $35=HEAP[$fs];
        var $36=(($35+36)&4294967295);
        var $37=HEAP[$36];
        var $38=HEAP[$fs];
        var $39=_luaK_numberK($38, 1);
        var $40=_luaK_codeABx($34, 1, $37, $39);
        var $41=HEAP[$fs];
        _luaK_reserveregs($41, 1);
        __label__ = 3; break;
      case 3: // $42
        var $43=HEAP[$1];
        var $44=HEAP[$base];
        var $45=HEAP[$3];
        _forbody($43, $44, $45, 1, 1);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _forlist($ls, $indexname) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $fs=__stackBase__+8;
        var $e=__stackBase__+12;
        var $nvars=__stackBase__+32;
        var $line=__stackBase__+36;
        var $base=__stackBase__+40;
        HEAP[$1]=$ls;
        HEAP[$2]=$indexname;
        var $3=HEAP[$1];
        var $4=(($3+36)&4294967295);
        var $5=HEAP[$4];
        HEAP[$fs]=$5;
        HEAP[$nvars]=0;
        var $6=HEAP[$fs];
        var $7=(($6+36)&4294967295);
        var $8=HEAP[$7];
        HEAP[$base]=$8;
        var $9=HEAP[$1];
        var $10=HEAP[$1];
        var $11=_luaX_newstring($10, ((__str19494)&4294967295), 15);
        var $12=HEAP[$nvars];
        var $13=((($12) + 1)&4294967295);
        HEAP[$nvars]=$13;
        _new_localvar($9, $11, $12);
        var $14=HEAP[$1];
        var $15=HEAP[$1];
        var $16=_luaX_newstring($15, ((__str20495)&4294967295), 11);
        var $17=HEAP[$nvars];
        var $18=((($17) + 1)&4294967295);
        HEAP[$nvars]=$18;
        _new_localvar($14, $16, $17);
        var $19=HEAP[$1];
        var $20=HEAP[$1];
        var $21=_luaX_newstring($20, ((__str21496)&4294967295), 13);
        var $22=HEAP[$nvars];
        var $23=((($22) + 1)&4294967295);
        HEAP[$nvars]=$23;
        _new_localvar($19, $21, $22);
        var $24=HEAP[$1];
        var $25=HEAP[$2];
        var $26=HEAP[$nvars];
        var $27=((($26) + 1)&4294967295);
        HEAP[$nvars]=$27;
        _new_localvar($24, $25, $26);
        __label__ = 1; break;
      case 1: // $28
        var $29=HEAP[$1];
        var $30=_testnext($29, 44);
        var $31=((($30))|0)!=0;
        if ($31) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $32
        var $33=HEAP[$1];
        var $34=HEAP[$1];
        var $35=_str_checkname($34);
        var $36=HEAP[$nvars];
        var $37=((($36) + 1)&4294967295);
        HEAP[$nvars]=$37;
        _new_localvar($33, $35, $36);
        __label__ = 1; break;
      case 3: // $38
        var $39=HEAP[$1];
        _checknext($39, 267);
        var $40=HEAP[$1];
        var $41=(($40+4)&4294967295);
        var $42=HEAP[$41];
        HEAP[$line]=$42;
        var $43=HEAP[$1];
        var $44=HEAP[$1];
        var $45=_explist1($44, $e);
        _adjust_assign($43, 3, $45, $e);
        var $46=HEAP[$fs];
        _luaK_checkstack($46, 3);
        var $47=HEAP[$1];
        var $48=HEAP[$base];
        var $49=HEAP[$line];
        var $50=HEAP[$nvars];
        var $51=((($50) - 3)&4294967295);
        _forbody($47, $48, $49, $51, 0);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _forbody($ls, $base, $line, $nvars, $isnum) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $bl=__stackBase__+20;
        var $fs=__stackBase__+32;
        var $prep=__stackBase__+36;
        var $endfor=__stackBase__+40;
        HEAP[$1]=$ls;
        HEAP[$2]=$base;
        HEAP[$3]=$line;
        HEAP[$4]=$nvars;
        HEAP[$5]=$isnum;
        var $6=HEAP[$1];
        var $7=(($6+36)&4294967295);
        var $8=HEAP[$7];
        HEAP[$fs]=$8;
        var $9=HEAP[$1];
        _adjustlocalvars($9, 3);
        var $10=HEAP[$1];
        _checknext($10, 259);
        var $11=HEAP[$5];
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        var $14=HEAP[$fs];
        var $15=HEAP[$2];
        var $16=_luaK_codeABx($14, 32, $15, 131070);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $17
        var $18=HEAP[$fs];
        var $19=_luaK_jump($18);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $20
        var $21=__lastLabel__ == 1 ? $16 : ($19);
        HEAP[$prep]=$21;
        var $22=HEAP[$fs];
        _enterblock($22, $bl, 0);
        var $23=HEAP[$1];
        var $24=HEAP[$4];
        _adjustlocalvars($23, $24);
        var $25=HEAP[$fs];
        var $26=HEAP[$4];
        _luaK_reserveregs($25, $26);
        var $27=HEAP[$1];
        _block($27);
        var $28=HEAP[$fs];
        _leaveblock($28);
        var $29=HEAP[$fs];
        var $30=HEAP[$prep];
        _luaK_patchtohere($29, $30);
        var $31=HEAP[$5];
        var $32=((($31))|0)!=0;
        if ($32) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $33
        var $34=HEAP[$fs];
        var $35=HEAP[$2];
        var $36=_luaK_codeABx($34, 31, $35, 131070);
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $37
        var $38=HEAP[$fs];
        var $39=HEAP[$2];
        var $40=HEAP[$4];
        var $41=_luaK_codeABC($38, 33, $39, 0, $40);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $42
        var $43=__lastLabel__ == 4 ? $36 : ($41);
        HEAP[$endfor]=$43;
        var $44=HEAP[$fs];
        var $45=HEAP[$3];
        _luaK_fixline($44, $45);
        var $46=HEAP[$fs];
        var $47=HEAP[$5];
        var $48=((($47))|0)!=0;
        if ($48) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $49
        var $50=HEAP[$endfor];
        __lastLabel__ = 7; __label__ = 9; break;
      case 8: // $51
        var $52=HEAP[$fs];
        var $53=_luaK_jump($52);
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $54
        var $55=__lastLabel__ == 7 ? $50 : ($53);
        var $56=HEAP[$prep];
        var $57=((($56) + 1)&4294967295);
        _luaK_patchlist($46, $55, $57);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _exp1($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
  
    var $1=__stackBase__;
    var $e=__stackBase__+4;
    var $k=__stackBase__+24;
    HEAP[$1]=$ls;
    var $2=HEAP[$1];
    _expr($2, $e);
    var $3=(($e)&4294967295);
    var $4=HEAP[$3];
    HEAP[$k]=$4;
    var $5=HEAP[$1];
    var $6=(($5+36)&4294967295);
    var $7=HEAP[$6];
    _luaK_exp2nextreg($7, $e);
    var $8=HEAP[$k];
    STACKTOP = __stackBase__;
    return $8;
  }
  

  function _error_expected($ls, $token) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$ls;
    HEAP[$2]=$token;
    var $3=HEAP[$1];
    var $4=HEAP[$1];
    var $5=(($4+40)&4294967295);
    var $6=HEAP[$5];
    var $7=HEAP[$1];
    var $8=HEAP[$2];
    var $9=_luaX_token2str($7, $8);
    var $10=_luaO_pushfstring($6, ((__str26501)&4294967295), allocate([$9,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
    _luaX_syntaxerror($3, $10);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _test_then_block($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $condexit=__stackBase__+4;
    HEAP[$1]=$ls;
    var $2=HEAP[$1];
    _luaX_next($2);
    var $3=HEAP[$1];
    var $4=_cond($3);
    HEAP[$condexit]=$4;
    var $5=HEAP[$1];
    _checknext($5, 274);
    var $6=HEAP[$1];
    _block($6);
    var $7=HEAP[$condexit];
    STACKTOP = __stackBase__;
    return $7;
  }
  

  function _anchor_token($ls) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $ts=__stackBase__+4;
        HEAP[$1]=$ls;
        var $2=HEAP[$1];
        var $3=(($2+12)&4294967295);
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)==285;
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=(($8+12)&4294967295);
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))|0)==286;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$1];
        var $15=(($14+12)&4294967295);
        var $16=(($15+4)&4294967295);
        var $17=$16;
        var $18=HEAP[$17];
        HEAP[$ts]=$18;
        var $19=HEAP[$1];
        var $20=HEAP[$ts];
        var $21=(($20+16)&4294967295);
        var $22=$21;
        var $23=HEAP[$ts];
        var $24=$23;
        var $25=(($24+12)&4294967295);
        var $26=HEAP[$25];
        var $27=_luaX_newstring($19, $22, $26);
        __label__ = 3; break;
      case 3: // $28
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaE_newthread($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $L1=__stackBase__+4;
    var $o2=__stackBase__+8;
    var $o1=__stackBase__+12;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaM_realloc_($2, 0, 0, 112);
    var $4=(($3)&4294967295);
    var $5=$4;
    HEAP[$L1]=$5;
    var $6=HEAP[$1];
    var $7=HEAP[$L1];
    var $8=$7;
    _luaC_link($6, $8, 8);
    var $9=HEAP[$L1];
    var $10=HEAP[$1];
    var $11=(($10+16)&4294967295);
    var $12=HEAP[$11];
    _preinit_state($9, $12);
    var $13=HEAP[$L1];
    var $14=HEAP[$1];
    _stack_init($13, $14);
    var $15=HEAP[$1];
    var $16=(($15+72)&4294967295);
    HEAP[$o2]=$16;
    var $17=HEAP[$L1];
    var $18=(($17+72)&4294967295);
    HEAP[$o1]=$18;
    var $19=HEAP[$o1];
    var $20=(($19)&4294967295);
    var $21=HEAP[$o2];
    var $22=(($21)&4294967295);
    var $23=$20;
    var $24=$22;
    _llvm_memcpy_p0i8_p0i8_i32($23, $24, 8, 4, 0);
    var $25=HEAP[$o2];
    var $26=(($25+8)&4294967295);
    var $27=HEAP[$26];
    var $28=HEAP[$o1];
    var $29=(($28+8)&4294967295);
    HEAP[$29]=$27;
    var $30=HEAP[$1];
    var $31=(($30+56)&4294967295);
    var $32=HEAP[$31];
    var $33=HEAP[$L1];
    var $34=(($33+56)&4294967295);
    HEAP[$34]=$32;
    var $35=HEAP[$1];
    var $36=(($35+60)&4294967295);
    var $37=HEAP[$36];
    var $38=HEAP[$L1];
    var $39=(($38+60)&4294967295);
    HEAP[$39]=$37;
    var $40=HEAP[$1];
    var $41=(($40+68)&4294967295);
    var $42=HEAP[$41];
    var $43=HEAP[$L1];
    var $44=(($43+68)&4294967295);
    HEAP[$44]=$42;
    var $45=HEAP[$L1];
    var $46=(($45+60)&4294967295);
    var $47=HEAP[$46];
    var $48=HEAP[$L1];
    var $49=(($48+64)&4294967295);
    HEAP[$49]=$47;
    var $50=HEAP[$L1];
    STACKTOP = __stackBase__;
    return $50;
  }
  

  function _preinit_state($L, $g) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$g;
    var $3=HEAP[$2];
    var $4=HEAP[$1];
    var $5=(($4+16)&4294967295);
    HEAP[$5]=$3;
    var $6=HEAP[$1];
    var $7=(($6+32)&4294967295);
    HEAP[$7]=0;
    var $8=HEAP[$1];
    var $9=(($8+44)&4294967295);
    HEAP[$9]=0;
    var $10=HEAP[$1];
    var $11=(($10+104)&4294967295);
    HEAP[$11]=0;
    var $12=HEAP[$1];
    var $13=(($12+68)&4294967295);
    HEAP[$13]=0;
    var $14=HEAP[$1];
    var $15=(($14+56)&4294967295);
    HEAP[$15]=0;
    var $16=HEAP[$1];
    var $17=(($16+60)&4294967295);
    HEAP[$17]=0;
    var $18=HEAP[$1];
    var $19=(($18+57)&4294967295);
    HEAP[$19]=1;
    var $20=HEAP[$1];
    var $21=(($20+60)&4294967295);
    var $22=HEAP[$21];
    var $23=HEAP[$1];
    var $24=(($23+64)&4294967295);
    HEAP[$24]=$22;
    var $25=HEAP[$1];
    var $26=(($25+96)&4294967295);
    HEAP[$26]=0;
    var $27=HEAP[$1];
    var $28=(($27+48)&4294967295);
    HEAP[$28]=0;
    var $29=HEAP[$1];
    var $30=(($29+54)&4294967295);
    HEAP[$30]=0;
    var $31=HEAP[$1];
    var $32=(($31+52)&4294967295);
    HEAP[$32]=0;
    var $33=HEAP[$1];
    var $34=(($33+6)&4294967295);
    HEAP[$34]=0;
    var $35=HEAP[$1];
    var $36=(($35+20)&4294967295);
    HEAP[$36]=0;
    var $37=HEAP[$1];
    var $38=(($37+40)&4294967295);
    HEAP[$38]=0;
    var $39=HEAP[$1];
    var $40=(($39+24)&4294967295);
    HEAP[$40]=0;
    var $41=HEAP[$1];
    var $42=(($41+108)&4294967295);
    HEAP[$42]=0;
    var $43=HEAP[$1];
    var $44=(($43+72)&4294967295);
    var $45=(($44+8)&4294967295);
    HEAP[$45]=0;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _stack_init($L1, $L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L1;
    HEAP[$2]=$L;
    var $3=HEAP[$2];
    var $4=_luaM_realloc_($3, 0, 0, 192);
    var $5=$4;
    var $6=HEAP[$1];
    var $7=(($6+40)&4294967295);
    HEAP[$7]=$5;
    var $8=HEAP[$1];
    var $9=(($8+40)&4294967295);
    var $10=HEAP[$9];
    var $11=HEAP[$1];
    var $12=(($11+20)&4294967295);
    HEAP[$12]=$10;
    var $13=HEAP[$1];
    var $14=(($13+48)&4294967295);
    HEAP[$14]=8;
    var $15=HEAP[$1];
    var $16=(($15+40)&4294967295);
    var $17=HEAP[$16];
    var $18=HEAP[$1];
    var $19=(($18+48)&4294967295);
    var $20=HEAP[$19];
    var $21=(($17+24*$20)&4294967295);
    var $22=(($21+-24)&4294967295);
    var $23=HEAP[$1];
    var $24=(($23+36)&4294967295);
    HEAP[$24]=$22;
    var $25=HEAP[$2];
    var $26=_luaM_realloc_($25, 0, 0, 540);
    var $27=$26;
    var $28=HEAP[$1];
    var $29=(($28+32)&4294967295);
    HEAP[$29]=$27;
    var $30=HEAP[$1];
    var $31=(($30+44)&4294967295);
    HEAP[$31]=45;
    var $32=HEAP[$1];
    var $33=(($32+32)&4294967295);
    var $34=HEAP[$33];
    var $35=HEAP[$1];
    var $36=(($35+8)&4294967295);
    HEAP[$36]=$34;
    var $37=HEAP[$1];
    var $38=(($37+32)&4294967295);
    var $39=HEAP[$38];
    var $40=HEAP[$1];
    var $41=(($40+44)&4294967295);
    var $42=HEAP[$41];
    var $43=((($42) - 5)&4294967295);
    var $44=(($39+12*$43)&4294967295);
    var $45=(($44+-12)&4294967295);
    var $46=HEAP[$1];
    var $47=(($46+28)&4294967295);
    HEAP[$47]=$45;
    var $48=HEAP[$1];
    var $49=(($48+8)&4294967295);
    var $50=HEAP[$49];
    var $51=HEAP[$1];
    var $52=(($51+20)&4294967295);
    var $53=HEAP[$52];
    var $54=(($53+4)&4294967295);
    HEAP[$54]=$50;
    var $55=HEAP[$1];
    var $56=(($55+8)&4294967295);
    var $57=HEAP[$56];
    var $58=(($57+12)&4294967295);
    HEAP[$56]=$58;
    var $59=(($57+8)&4294967295);
    HEAP[$59]=0;
    var $60=HEAP[$1];
    var $61=(($60+8)&4294967295);
    var $62=HEAP[$61];
    var $63=HEAP[$1];
    var $64=(($63+20)&4294967295);
    var $65=HEAP[$64];
    var $66=(($65)&4294967295);
    HEAP[$66]=$62;
    var $67=HEAP[$1];
    var $68=(($67+12)&4294967295);
    HEAP[$68]=$62;
    var $69=HEAP[$1];
    var $70=(($69+8)&4294967295);
    var $71=HEAP[$70];
    var $72=(($71+240)&4294967295);
    var $73=HEAP[$1];
    var $74=(($73+20)&4294967295);
    var $75=HEAP[$74];
    var $76=(($75+8)&4294967295);
    HEAP[$76]=$72;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaE_freethread($L, $L1) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$L1;
    var $3=HEAP[$2];
    var $4=HEAP[$2];
    var $5=(($4+32)&4294967295);
    var $6=HEAP[$5];
    _luaF_close($3, $6);
    var $7=HEAP[$2];
    var $8=HEAP[$1];
    var $9=HEAP[$2];
    _freestack($8, $9);
    var $10=HEAP[$1];
    var $11=HEAP[$2];
    var $12=$11;
    var $13=(($12)&4294967295);
    var $14=_luaM_realloc_($10, $13, 112, 0);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _freestack($L, $L1) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$L1;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=(($4+40)&4294967295);
    var $6=HEAP[$5];
    var $7=$6;
    var $8=HEAP[$2];
    var $9=(($8+48)&4294967295);
    var $10=HEAP[$9];
    var $11=((($10) * 24)&4294967295);
    var $12=_luaM_realloc_($3, $7, $11, 0);
    var $13=HEAP[$1];
    var $14=HEAP[$2];
    var $15=(($14+32)&4294967295);
    var $16=HEAP[$15];
    var $17=$16;
    var $18=HEAP[$2];
    var $19=(($18+44)&4294967295);
    var $20=HEAP[$19];
    var $21=((($20) * 12)&4294967295);
    var $22=_luaM_realloc_($13, $17, $21, 0);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_newstate($f, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $L=__stackBase__+16;
        var $g=__stackBase__+20;
        var $l=__stackBase__+24;
        HEAP[$2]=$f;
        HEAP[$3]=$ud;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=FUNCTION_TABLE[$4]($5, 0, 0, 348);
        HEAP[$l]=$6;
        var $7=HEAP[$l];
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        HEAP[$1]=0;
        __label__ = 10; break;
      case 2: // $10
        var $11=HEAP[$l];
        var $12=(($11)&4294967295);
        var $13=$12;
        HEAP[$L]=$13;
        var $14=HEAP[$L];
        var $15=$14;
        var $16=(($15+112)&4294967295);
        HEAP[$g]=$16;
        var $17=HEAP[$L];
        var $18=(($17)&4294967295);
        HEAP[$18]=0;
        var $19=HEAP[$L];
        var $20=(($19+4)&4294967295);
        HEAP[$20]=8;
        var $21=HEAP[$g];
        var $22=(($21+20)&4294967295);
        HEAP[$22]=33;
        var $23=HEAP[$g];
        var $24=(($23+20)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=($26) & 3;
        var $28=((($27)) & 255);
        var $29=HEAP[$L];
        var $30=(($29+5)&4294967295);
        HEAP[$30]=$28;
        var $31=HEAP[$L];
        var $32=(($31+5)&4294967295);
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=($34) | 96;
        var $36=((($35)) & 255);
        HEAP[$32]=$36;
        var $37=HEAP[$L];
        var $38=HEAP[$g];
        _preinit_state($37, $38);
        var $39=HEAP[$2];
        var $40=HEAP[$g];
        var $41=(($40+12)&4294967295);
        HEAP[$41]=$39;
        var $42=HEAP[$3];
        var $43=HEAP[$g];
        var $44=(($43+16)&4294967295);
        HEAP[$44]=$42;
        var $45=HEAP[$L];
        var $46=HEAP[$g];
        var $47=(($46+104)&4294967295);
        HEAP[$47]=$45;
        var $48=HEAP[$g];
        var $49=(($48+108)&4294967295);
        var $50=HEAP[$g];
        var $51=(($50+108)&4294967295);
        var $52=(($51+12)&4294967295);
        var $53=$52;
        var $54=(($53)&4294967295);
        HEAP[$54]=$49;
        var $55=HEAP[$g];
        var $56=(($55+108)&4294967295);
        var $57=HEAP[$g];
        var $58=(($57+108)&4294967295);
        var $59=(($58+12)&4294967295);
        var $60=$59;
        var $61=(($60+4)&4294967295);
        HEAP[$61]=$56;
        var $62=HEAP[$g];
        var $63=(($62+64)&4294967295);
        HEAP[$63]=0;
        var $64=HEAP[$g];
        var $65=(($64)&4294967295);
        var $66=(($65+8)&4294967295);
        HEAP[$66]=0;
        var $67=HEAP[$g];
        var $68=(($67)&4294967295);
        var $69=(($68+4)&4294967295);
        HEAP[$69]=0;
        var $70=HEAP[$g];
        var $71=(($70)&4294967295);
        var $72=(($71)&4294967295);
        HEAP[$72]=0;
        var $73=HEAP[$L];
        var $74=(($73+16)&4294967295);
        var $75=HEAP[$74];
        var $76=(($75+92)&4294967295);
        var $77=(($76+8)&4294967295);
        HEAP[$77]=0;
        var $78=HEAP[$g];
        var $79=(($78+52)&4294967295);
        var $80=(($79)&4294967295);
        HEAP[$80]=0;
        var $81=HEAP[$g];
        var $82=(($81+52)&4294967295);
        var $83=(($82+8)&4294967295);
        HEAP[$83]=0;
        var $84=HEAP[$g];
        var $85=(($84+88)&4294967295);
        HEAP[$85]=0;
        var $86=HEAP[$g];
        var $87=(($86+21)&4294967295);
        HEAP[$87]=0;
        var $88=HEAP[$L];
        var $89=$88;
        var $90=HEAP[$g];
        var $91=(($90+28)&4294967295);
        HEAP[$91]=$89;
        var $92=HEAP[$g];
        var $93=(($92+24)&4294967295);
        HEAP[$93]=0;
        var $94=HEAP[$g];
        var $95=(($94+28)&4294967295);
        var $96=HEAP[$g];
        var $97=(($96+32)&4294967295);
        HEAP[$97]=$95;
        var $98=HEAP[$g];
        var $99=(($98+36)&4294967295);
        HEAP[$99]=0;
        var $100=HEAP[$g];
        var $101=(($100+40)&4294967295);
        HEAP[$101]=0;
        var $102=HEAP[$g];
        var $103=(($102+44)&4294967295);
        HEAP[$103]=0;
        var $104=HEAP[$g];
        var $105=(($104+48)&4294967295);
        HEAP[$105]=0;
        var $106=HEAP[$g];
        var $107=(($106+68)&4294967295);
        HEAP[$107]=348;
        var $108=HEAP[$g];
        var $109=(($108+80)&4294967295);
        HEAP[$109]=200;
        var $110=HEAP[$g];
        var $111=(($110+84)&4294967295);
        HEAP[$111]=200;
        var $112=HEAP[$g];
        var $113=(($112+76)&4294967295);
        HEAP[$113]=0;
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $114
        var $115=HEAP[$i];
        var $116=((($115))|0) < 9;
        if ($116) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $117
        var $118=HEAP[$i];
        var $119=HEAP[$g];
        var $120=(($119+132)&4294967295);
        var $121=(($120+$118*4)&4294967295);
        HEAP[$121]=0;
        __label__ = 5; break;
      case 5: // $122
        var $123=HEAP[$i];
        var $124=((($123) + 1)&4294967295);
        HEAP[$i]=$124;
        __label__ = 3; break;
      case 6: // $125
        var $126=HEAP[$L];
        var $127=_luaD_rawrunprotected($126, 48, 0);
        var $128=((($127))|0)!=0;
        if ($128) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $129
        var $130=HEAP[$L];
        _close_state($130);
        HEAP[$L]=0;
        __label__ = 9; break;
      case 8: // $131
        var $132=HEAP[$L];
        __label__ = 9; break;
      case 9: // $133
        var $134=HEAP[$L];
        HEAP[$1]=$134;
        __label__ = 10; break;
      case 10: // $135
        var $136=HEAP[$1];
        STACKTOP = __stackBase__;
        return $136;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _f_luaopen($L, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $g=__stackBase__+8;
    var $i_o=__stackBase__+12;
    var $i_o1=__stackBase__+16;
    HEAP[$1]=$L;
    HEAP[$2]=$ud;
    var $3=HEAP[$1];
    var $4=(($3+16)&4294967295);
    var $5=HEAP[$4];
    HEAP[$g]=$5;
    var $6=HEAP[$2];
    var $7=HEAP[$1];
    var $8=HEAP[$1];
    _stack_init($7, $8);
    var $9=HEAP[$1];
    var $10=(($9+72)&4294967295);
    HEAP[$i_o]=$10;
    var $11=HEAP[$1];
    var $12=_luaH_new($11, 0, 2);
    var $13=$12;
    var $14=HEAP[$i_o];
    var $15=(($14)&4294967295);
    var $16=$15;
    HEAP[$16]=$13;
    var $17=HEAP[$i_o];
    var $18=(($17+8)&4294967295);
    HEAP[$18]=5;
    var $19=HEAP[$1];
    var $20=(($19+16)&4294967295);
    var $21=HEAP[$20];
    var $22=(($21+92)&4294967295);
    HEAP[$i_o1]=$22;
    var $23=HEAP[$1];
    var $24=_luaH_new($23, 0, 2);
    var $25=$24;
    var $26=HEAP[$i_o1];
    var $27=(($26)&4294967295);
    var $28=$27;
    HEAP[$28]=$25;
    var $29=HEAP[$i_o1];
    var $30=(($29+8)&4294967295);
    HEAP[$30]=5;
    var $31=HEAP[$1];
    _luaS_resize($31, 32);
    var $32=HEAP[$1];
    _luaT_init($32);
    var $33=HEAP[$1];
    _luaX_init($33);
    var $34=HEAP[$1];
    var $35=_luaS_newlstr($34, ((__str504)&4294967295), 17);
    var $36=$35;
    var $37=(($36+5)&4294967295);
    var $38=HEAP[$37];
    var $39=unSign(($38), 8, 0);
    var $40=($39) | 32;
    var $41=((($40)) & 255);
    HEAP[$37]=$41;
    var $42=HEAP[$g];
    var $43=(($42+68)&4294967295);
    var $44=HEAP[$43];
    var $45=((4 * ($44))&4294967295);
    var $46=HEAP[$g];
    var $47=(($46+64)&4294967295);
    HEAP[$47]=$45;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _close_state($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $g=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=(($2+16)&4294967295);
    var $4=HEAP[$3];
    HEAP[$g]=$4;
    var $5=HEAP[$1];
    var $6=HEAP[$1];
    var $7=(($6+32)&4294967295);
    var $8=HEAP[$7];
    _luaF_close($5, $8);
    var $9=HEAP[$1];
    _luaC_freeall($9);
    var $10=HEAP[$1];
    var $11=HEAP[$1];
    var $12=(($11+16)&4294967295);
    var $13=HEAP[$12];
    var $14=(($13)&4294967295);
    var $15=(($14)&4294967295);
    var $16=HEAP[$15];
    var $17=$16;
    var $18=HEAP[$1];
    var $19=(($18+16)&4294967295);
    var $20=HEAP[$19];
    var $21=(($20)&4294967295);
    var $22=(($21+8)&4294967295);
    var $23=HEAP[$22];
    var $24=((($23) * 4)&4294967295);
    var $25=_luaM_realloc_($10, $17, $24, 0);
    var $26=HEAP[$1];
    var $27=HEAP[$g];
    var $28=(($27+52)&4294967295);
    var $29=(($28)&4294967295);
    var $30=HEAP[$29];
    var $31=HEAP[$g];
    var $32=(($31+52)&4294967295);
    var $33=(($32+8)&4294967295);
    var $34=HEAP[$33];
    var $35=((($34) * 1)&4294967295);
    var $36=_luaM_realloc_($26, $30, $35, 0);
    var $37=HEAP[$g];
    var $38=(($37+52)&4294967295);
    var $39=(($38)&4294967295);
    HEAP[$39]=$36;
    var $40=HEAP[$g];
    var $41=(($40+52)&4294967295);
    var $42=(($41+8)&4294967295);
    HEAP[$42]=0;
    var $43=HEAP[$1];
    var $44=HEAP[$1];
    _freestack($43, $44);
    var $45=HEAP[$g];
    var $46=(($45+12)&4294967295);
    var $47=HEAP[$46];
    var $48=HEAP[$g];
    var $49=(($48+16)&4294967295);
    var $50=HEAP[$49];
    var $51=HEAP[$1];
    var $52=$51;
    var $53=(($52)&4294967295);
    var $54=FUNCTION_TABLE[$47]($50, $53, 348, 0);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _lua_close($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=HEAP[$3];
        var $5=(($4+104)&4294967295);
        var $6=HEAP[$5];
        HEAP[$1]=$6;
        var $7=HEAP[$1];
        var $8=HEAP[$1];
        var $9=(($8+32)&4294967295);
        var $10=HEAP[$9];
        _luaF_close($7, $10);
        var $11=HEAP[$1];
        var $12=_luaC_separateudata($11, 1);
        var $13=HEAP[$1];
        var $14=(($13+108)&4294967295);
        HEAP[$14]=0;
        __label__ = 1; break;
      case 1: // $15
        var $16=HEAP[$1];
        var $17=(($16+40)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$1];
        var $20=(($19+20)&4294967295);
        HEAP[$20]=$18;
        var $21=HEAP[$1];
        var $22=(($21+20)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23)&4294967295);
        var $25=HEAP[$24];
        var $26=HEAP[$1];
        var $27=(($26+8)&4294967295);
        HEAP[$27]=$25;
        var $28=HEAP[$1];
        var $29=(($28+12)&4294967295);
        HEAP[$29]=$25;
        var $30=HEAP[$1];
        var $31=(($30+54)&4294967295);
        HEAP[$31]=0;
        var $32=HEAP[$1];
        var $33=(($32+52)&4294967295);
        HEAP[$33]=0;
        __label__ = 2; break;
      case 2: // $34
        var $35=HEAP[$1];
        var $36=_luaD_rawrunprotected($35, 50, 0);
        var $37=((($36))|0)!=0;
        if ($37) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 3: // $38
        var $39=HEAP[$1];
        var $40=HEAP[$1];
        _close_state($40);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _callallgcTM($L, $ud) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$ud;
    var $3=HEAP[$2];
    var $4=HEAP[$1];
    _luaC_callGCTM($4);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaS_resize($L, $newsize) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $newhash=__stackBase__+8;
        var $tb=__stackBase__+12;
        var $i=__stackBase__+16;
        var $p=__stackBase__+20;
        var $next=__stackBase__+24;
        var $h=__stackBase__+28;
        var $h1=__stackBase__+32;
        HEAP[$1]=$L;
        HEAP[$2]=$newsize;
        var $3=HEAP[$1];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        var $6=(($5+21)&4294967295);
        var $7=HEAP[$6];
        var $8=unSign(($7), 8, 0);
        var $9=((($8))|0)==2;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        __label__ = 17; break;
      case 2: // $11
        var $12=HEAP[$2];
        var $13=((($12) + 1)&4294967295);
        var $14=((($13))>>>0) <= 1073741823;
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $15
        var $16=HEAP[$1];
        var $17=HEAP[$2];
        var $18=((($17) * 4)&4294967295);
        var $19=_luaM_realloc_($16, 0, 0, $18);
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $20
        var $21=HEAP[$1];
        var $22=_luaM_toobig($21);
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $23
        var $24=__lastLabel__ == 3 ? $19 : ($22);
        var $25=$24;
        HEAP[$newhash]=$25;
        var $26=HEAP[$1];
        var $27=(($26+16)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28)&4294967295);
        HEAP[$tb]=$29;
        HEAP[$i]=0;
        __label__ = 6; break;
      case 6: // $30
        var $31=HEAP[$i];
        var $32=HEAP[$2];
        var $33=((($31))|0) < ((($32))|0);
        if ($33) { __label__ = 7; break; } else { __label__ = 9; break; }
      case 7: // $34
        var $35=HEAP[$i];
        var $36=HEAP[$newhash];
        var $37=(($36+4*$35)&4294967295);
        HEAP[$37]=0;
        __label__ = 8; break;
      case 8: // $38
        var $39=HEAP[$i];
        var $40=((($39) + 1)&4294967295);
        HEAP[$i]=$40;
        __label__ = 6; break;
      case 9: // $41
        HEAP[$i]=0;
        __label__ = 10; break;
      case 10: // $42
        var $43=HEAP[$i];
        var $44=HEAP[$tb];
        var $45=(($44+8)&4294967295);
        var $46=HEAP[$45];
        var $47=((($43))|0) < ((($46))|0);
        if ($47) { __label__ = 11; break; } else { __label__ = 16; break; }
      case 11: // $48
        var $49=HEAP[$i];
        var $50=HEAP[$tb];
        var $51=(($50)&4294967295);
        var $52=HEAP[$51];
        var $53=(($52+4*$49)&4294967295);
        var $54=HEAP[$53];
        HEAP[$p]=$54;
        __label__ = 12; break;
      case 12: // $55
        var $56=HEAP[$p];
        var $57=((($56))|0)!=0;
        if ($57) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $58
        var $59=HEAP[$p];
        var $60=$59;
        var $61=(($60)&4294967295);
        var $62=HEAP[$61];
        HEAP[$next]=$62;
        var $63=HEAP[$p];
        var $64=$63;
        var $65=$64;
        var $66=(($65+8)&4294967295);
        var $67=HEAP[$66];
        HEAP[$h]=$67;
        var $68=HEAP[$h];
        var $69=HEAP[$2];
        var $70=((($69) - 1)&4294967295);
        var $71=($68) & ($70);
        HEAP[$h1]=$71;
        var $72=HEAP[$h1];
        var $73=HEAP[$newhash];
        var $74=(($73+4*$72)&4294967295);
        var $75=HEAP[$74];
        var $76=HEAP[$p];
        var $77=$76;
        var $78=(($77)&4294967295);
        HEAP[$78]=$75;
        var $79=HEAP[$p];
        var $80=HEAP[$h1];
        var $81=HEAP[$newhash];
        var $82=(($81+4*$80)&4294967295);
        HEAP[$82]=$79;
        var $83=HEAP[$next];
        HEAP[$p]=$83;
        __label__ = 12; break;
      case 14: // $84
        __label__ = 15; break;
      case 15: // $85
        var $86=HEAP[$i];
        var $87=((($86) + 1)&4294967295);
        HEAP[$i]=$87;
        __label__ = 10; break;
      case 16: // $88
        var $89=HEAP[$1];
        var $90=HEAP[$tb];
        var $91=(($90)&4294967295);
        var $92=HEAP[$91];
        var $93=$92;
        var $94=HEAP[$tb];
        var $95=(($94+8)&4294967295);
        var $96=HEAP[$95];
        var $97=((($96) * 4)&4294967295);
        var $98=_luaM_realloc_($89, $93, $97, 0);
        var $99=HEAP[$2];
        var $100=HEAP[$tb];
        var $101=(($100+8)&4294967295);
        HEAP[$101]=$99;
        var $102=HEAP[$newhash];
        var $103=HEAP[$tb];
        var $104=(($103)&4294967295);
        HEAP[$104]=$102;
        __label__ = 17; break;
      case 17: // $105
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaS_newlstr($L, $str, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $o=__stackBase__+16;
        var $h=__stackBase__+20;
        var $step=__stackBase__+24;
        var $l1=__stackBase__+28;
        var $ts=__stackBase__+32;
        HEAP[$2]=$L;
        HEAP[$3]=$str;
        HEAP[$4]=$l;
        var $5=HEAP[$4];
        HEAP[$h]=$5;
        var $6=HEAP[$4];
        var $7=((($6))>>>0) >>> 5;
        var $8=((($7) + 1)&4294967295);
        HEAP[$step]=$8;
        var $9=HEAP[$4];
        HEAP[$l1]=$9;
        __label__ = 1; break;
      case 1: // $10
        var $11=HEAP[$l1];
        var $12=HEAP[$step];
        var $13=((($11))>>>0) >= ((($12))>>>0);
        if ($13) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $14
        var $15=HEAP[$h];
        var $16=HEAP[$h];
        var $17=($16) << 5;
        var $18=HEAP[$h];
        var $19=((($18))>>>0) >>> 2;
        var $20=((($17) + ($19))&4294967295);
        var $21=HEAP[$l1];
        var $22=((($21) - 1)&4294967295);
        var $23=HEAP[$3];
        var $24=(($23+$22)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=((($20) + ($26))&4294967295);
        var $28=($15) ^ ($27);
        HEAP[$h]=$28;
        __label__ = 3; break;
      case 3: // $29
        var $30=HEAP[$step];
        var $31=HEAP[$l1];
        var $32=((($31) - ($30))&4294967295);
        HEAP[$l1]=$32;
        __label__ = 1; break;
      case 4: // $33
        var $34=HEAP[$h];
        var $35=HEAP[$2];
        var $36=(($35+16)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37)&4294967295);
        var $39=(($38+8)&4294967295);
        var $40=HEAP[$39];
        var $41=((($40) - 1)&4294967295);
        var $42=($34) & ($41);
        var $43=HEAP[$2];
        var $44=(($43+16)&4294967295);
        var $45=HEAP[$44];
        var $46=(($45)&4294967295);
        var $47=(($46)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48+4*$42)&4294967295);
        var $50=HEAP[$49];
        HEAP[$o]=$50;
        __label__ = 5; break;
      case 5: // $51
        var $52=HEAP[$o];
        var $53=((($52))|0)!=0;
        if ($53) { __label__ = 6; break; } else { __label__ = 13; break; }
      case 6: // $54
        var $55=HEAP[$o];
        var $56=$55;
        HEAP[$ts]=$56;
        var $57=HEAP[$ts];
        var $58=$57;
        var $59=(($58+12)&4294967295);
        var $60=HEAP[$59];
        var $61=HEAP[$4];
        var $62=((($60))|0)==((($61))|0);
        if ($62) { __label__ = 7; break; } else { __label__ = 11; break; }
      case 7: // $63
        var $64=HEAP[$3];
        var $65=HEAP[$ts];
        var $66=(($65+16)&4294967295);
        var $67=$66;
        var $68=HEAP[$4];
        var $69=_memcmp($64, $67, $68);
        var $70=((($69))|0)==0;
        if ($70) { __label__ = 8; break; } else { __label__ = 11; break; }
      case 8: // $71
        var $72=HEAP[$o];
        var $73=$72;
        var $74=(($73+5)&4294967295);
        var $75=HEAP[$74];
        var $76=unSign(($75), 8, 0);
        var $77=HEAP[$2];
        var $78=(($77+16)&4294967295);
        var $79=HEAP[$78];
        var $80=(($79+20)&4294967295);
        var $81=HEAP[$80];
        var $82=unSign(($81), 8, 0);
        var $83=($82) ^ 3;
        var $84=($76) & ($83);
        var $85=($84) & 3;
        var $86=((($85))|0)!=0;
        if ($86) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $87
        var $88=HEAP[$o];
        var $89=$88;
        var $90=(($89+5)&4294967295);
        var $91=HEAP[$90];
        var $92=unSign(($91), 8, 0);
        var $93=($92) ^ 3;
        var $94=((($93)) & 255);
        HEAP[$90]=$94;
        __label__ = 10; break;
      case 10: // $95
        var $96=HEAP[$ts];
        HEAP[$1]=$96;
        __label__ = 14; break;
      case 11: // $97
        __label__ = 12; break;
      case 12: // $98
        var $99=HEAP[$o];
        var $100=$99;
        var $101=(($100)&4294967295);
        var $102=HEAP[$101];
        HEAP[$o]=$102;
        __label__ = 5; break;
      case 13: // $103
        var $104=HEAP[$2];
        var $105=HEAP[$3];
        var $106=HEAP[$4];
        var $107=HEAP[$h];
        var $108=_newlstr($104, $105, $106, $107);
        HEAP[$1]=$108;
        __label__ = 14; break;
      case 14: // $109
        var $110=HEAP[$1];
        STACKTOP = __stackBase__;
        return $110;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newlstr($L, $str, $l, $h) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $ts=__stackBase__+16;
        var $tb=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$str;
        HEAP[$3]=$l;
        HEAP[$4]=$h;
        var $5=HEAP[$3];
        var $6=((($5) + 1)&4294967295);
        var $7=((($6))>>>0) > 4294967277;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=_luaM_toobig($9);
        __label__ = 2; break;
      case 2: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$3];
        var $14=((($13) + 1)&4294967295);
        var $15=((($14) * 1)&4294967295);
        var $16=((($15) + 16)&4294967295);
        var $17=_luaM_realloc_($12, 0, 0, $16);
        var $18=$17;
        HEAP[$ts]=$18;
        var $19=HEAP[$3];
        var $20=HEAP[$ts];
        var $21=$20;
        var $22=(($21+12)&4294967295);
        HEAP[$22]=$19;
        var $23=HEAP[$4];
        var $24=HEAP[$ts];
        var $25=$24;
        var $26=(($25+8)&4294967295);
        HEAP[$26]=$23;
        var $27=HEAP[$1];
        var $28=(($27+16)&4294967295);
        var $29=HEAP[$28];
        var $30=(($29+20)&4294967295);
        var $31=HEAP[$30];
        var $32=unSign(($31), 8, 0);
        var $33=($32) & 3;
        var $34=((($33)) & 255);
        var $35=HEAP[$ts];
        var $36=$35;
        var $37=(($36+5)&4294967295);
        HEAP[$37]=$34;
        var $38=HEAP[$ts];
        var $39=$38;
        var $40=(($39+4)&4294967295);
        HEAP[$40]=4;
        var $41=HEAP[$ts];
        var $42=$41;
        var $43=(($42+6)&4294967295);
        HEAP[$43]=0;
        var $44=HEAP[$ts];
        var $45=(($44+16)&4294967295);
        var $46=$45;
        var $47=HEAP[$2];
        var $48=HEAP[$3];
        var $49=((($48) * 1)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($46, $47, $49, 1, 0);
        var $50=HEAP[$3];
        var $51=HEAP[$ts];
        var $52=(($51+16)&4294967295);
        var $53=$52;
        var $54=(($53+$50)&4294967295);
        HEAP[$54]=0;
        var $55=HEAP[$1];
        var $56=(($55+16)&4294967295);
        var $57=HEAP[$56];
        var $58=(($57)&4294967295);
        HEAP[$tb]=$58;
        var $59=HEAP[$4];
        var $60=HEAP[$tb];
        var $61=(($60+8)&4294967295);
        var $62=HEAP[$61];
        var $63=((($62) - 1)&4294967295);
        var $64=($59) & ($63);
        HEAP[$4]=$64;
        var $65=HEAP[$4];
        var $66=HEAP[$tb];
        var $67=(($66)&4294967295);
        var $68=HEAP[$67];
        var $69=(($68+4*$65)&4294967295);
        var $70=HEAP[$69];
        var $71=HEAP[$ts];
        var $72=$71;
        var $73=(($72)&4294967295);
        HEAP[$73]=$70;
        var $74=HEAP[$ts];
        var $75=$74;
        var $76=HEAP[$4];
        var $77=HEAP[$tb];
        var $78=(($77)&4294967295);
        var $79=HEAP[$78];
        var $80=(($79+4*$76)&4294967295);
        HEAP[$80]=$75;
        var $81=HEAP[$tb];
        var $82=(($81+4)&4294967295);
        var $83=HEAP[$82];
        var $84=((($83) + 1)&4294967295);
        HEAP[$82]=$84;
        var $85=HEAP[$tb];
        var $86=(($85+4)&4294967295);
        var $87=HEAP[$86];
        var $88=HEAP[$tb];
        var $89=(($88+8)&4294967295);
        var $90=HEAP[$89];
        var $91=((($87))>>>0) > ((($90))>>>0);
        if ($91) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $92
        var $93=HEAP[$tb];
        var $94=(($93+8)&4294967295);
        var $95=HEAP[$94];
        var $96=((($95))|0) <= 1073741822;
        if ($96) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $97
        var $98=HEAP[$1];
        var $99=HEAP[$tb];
        var $100=(($99+8)&4294967295);
        var $101=HEAP[$100];
        var $102=((($101) * 2)&4294967295);
        _luaS_resize($98, $102);
        __label__ = 5; break;
      case 5: // $103
        var $104=HEAP[$ts];
        STACKTOP = __stackBase__;
        return $104;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaS_newudata($L, $s, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $u=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$s;
        HEAP[$3]=$e;
        var $4=HEAP[$2];
        var $5=((($4))>>>0) > 4294967273;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$1];
        var $8=_luaM_toobig($7);
        __label__ = 2; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$2];
        var $12=((($11) + 20)&4294967295);
        var $13=_luaM_realloc_($10, 0, 0, $12);
        var $14=$13;
        HEAP[$u]=$14;
        var $15=HEAP[$1];
        var $16=(($15+16)&4294967295);
        var $17=HEAP[$16];
        var $18=(($17+20)&4294967295);
        var $19=HEAP[$18];
        var $20=unSign(($19), 8, 0);
        var $21=($20) & 3;
        var $22=((($21)) & 255);
        var $23=HEAP[$u];
        var $24=$23;
        var $25=(($24+5)&4294967295);
        HEAP[$25]=$22;
        var $26=HEAP[$u];
        var $27=$26;
        var $28=(($27+4)&4294967295);
        HEAP[$28]=7;
        var $29=HEAP[$2];
        var $30=HEAP[$u];
        var $31=$30;
        var $32=(($31+16)&4294967295);
        HEAP[$32]=$29;
        var $33=HEAP[$u];
        var $34=$33;
        var $35=(($34+8)&4294967295);
        HEAP[$35]=0;
        var $36=HEAP[$3];
        var $37=HEAP[$u];
        var $38=$37;
        var $39=(($38+12)&4294967295);
        HEAP[$39]=$36;
        var $40=HEAP[$1];
        var $41=(($40+16)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+104)&4294967295);
        var $44=HEAP[$43];
        var $45=(($44)&4294967295);
        var $46=HEAP[$45];
        var $47=HEAP[$u];
        var $48=$47;
        var $49=(($48)&4294967295);
        HEAP[$49]=$46;
        var $50=HEAP[$u];
        var $51=$50;
        var $52=HEAP[$1];
        var $53=(($52+16)&4294967295);
        var $54=HEAP[$53];
        var $55=(($54+104)&4294967295);
        var $56=HEAP[$55];
        var $57=(($56)&4294967295);
        HEAP[$57]=$51;
        var $58=HEAP[$u];
        STACKTOP = __stackBase__;
        return $58;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaopen_string($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_register($2, ((__str511)&4294967295), ((_strlib)&4294967295));
    var $3=HEAP[$1];
    _lua_getfield($3, -1, ((__str1512)&4294967295));
    var $4=HEAP[$1];
    _lua_setfield($4, -2, ((__str2513)&4294967295));
    var $5=HEAP[$1];
    _createmetatable($5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _createmetatable($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _lua_createtable($2, 0, 1);
    var $3=HEAP[$1];
    _lua_pushlstring($3, ((__str3514)&4294967295), 0);
    var $4=HEAP[$1];
    _lua_pushvalue($4, -2);
    var $5=HEAP[$1];
    var $6=_lua_setmetatable($5, -2);
    var $7=HEAP[$1];
    _lua_settop($7, -2);
    var $8=HEAP[$1];
    _lua_pushvalue($8, -2);
    var $9=HEAP[$1];
    _lua_setfield($9, -2, ((__str4515)&4294967295));
    var $10=HEAP[$1];
    _lua_settop($10, -2);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _str_byte($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $l=__stackBase__+8;
        var $s=__stackBase__+12;
        var $posi=__stackBase__+16;
        var $pose=__stackBase__+20;
        var $n=__stackBase__+24;
        var $i=__stackBase__+28;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_checklstring($3, 1, $l);
        HEAP[$s]=$4;
        var $5=HEAP[$2];
        var $6=_luaL_optinteger($5, 2, 1);
        var $7=HEAP[$l];
        var $8=_posrelat($6, $7);
        HEAP[$posi]=$8;
        var $9=HEAP[$2];
        var $10=HEAP[$posi];
        var $11=_luaL_optinteger($9, 3, $10);
        var $12=HEAP[$l];
        var $13=_posrelat($11, $12);
        HEAP[$pose]=$13;
        var $14=HEAP[$posi];
        var $15=((($14))|0) <= 0;
        if ($15) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $16
        HEAP[$posi]=1;
        __label__ = 2; break;
      case 2: // $17
        var $18=HEAP[$pose];
        var $19=HEAP[$l];
        var $20=((($18))>>>0) > ((($19))>>>0);
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $21
        var $22=HEAP[$l];
        HEAP[$pose]=$22;
        __label__ = 4; break;
      case 4: // $23
        var $24=HEAP[$posi];
        var $25=HEAP[$pose];
        var $26=((($24))|0) > ((($25))|0);
        if ($26) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $27
        HEAP[$1]=0;
        __label__ = 13; break;
      case 6: // $28
        var $29=HEAP[$pose];
        var $30=HEAP[$posi];
        var $31=((($29) - ($30))&4294967295);
        var $32=((($31) + 1)&4294967295);
        HEAP[$n]=$32;
        var $33=HEAP[$posi];
        var $34=HEAP[$n];
        var $35=((($33) + ($34))&4294967295);
        var $36=HEAP[$pose];
        var $37=((($35))|0) <= ((($36))|0);
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $38
        var $39=HEAP[$2];
        var $40=_luaL_error($39, ((__str39550)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 8; break;
      case 8: // $41
        var $42=HEAP[$2];
        var $43=HEAP[$n];
        _luaL_checkstack($42, $43, ((__str39550)&4294967295));
        HEAP[$i]=0;
        __label__ = 9; break;
      case 9: // $44
        var $45=HEAP[$i];
        var $46=HEAP[$n];
        var $47=((($45))|0) < ((($46))|0);
        if ($47) { __label__ = 10; break; } else { __label__ = 12; break; }
      case 10: // $48
        var $49=HEAP[$2];
        var $50=HEAP[$posi];
        var $51=HEAP[$i];
        var $52=((($50) + ($51))&4294967295);
        var $53=((($52) - 1)&4294967295);
        var $54=HEAP[$s];
        var $55=(($54+$53)&4294967295);
        var $56=HEAP[$55];
        var $57=unSign(($56), 8, 0);
        _lua_pushinteger($49, $57);
        __label__ = 11; break;
      case 11: // $58
        var $59=HEAP[$i];
        var $60=((($59) + 1)&4294967295);
        HEAP[$i]=$60;
        __label__ = 9; break;
      case 12: // $61
        var $62=HEAP[$n];
        HEAP[$1]=$62;
        __label__ = 13; break;
      case 13: // $63
        var $64=HEAP[$1];
        STACKTOP = __stackBase__;
        return $64;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_char($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8220; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8220);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $n=__stackBase__+4;
        var $i=__stackBase__+8;
        var $b=__stackBase__+12;
        var $c=__stackBase__+8216;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_gettop($2);
        HEAP[$n]=$3;
        var $4=HEAP[$1];
        _luaL_buffinit($4, $b);
        HEAP[$i]=1;
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$i];
        var $7=HEAP[$n];
        var $8=((($6))|0) <= ((($7))|0);
        if ($8) { __label__ = 2; break; } else { __label__ = 8; break; }
      case 2: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$i];
        var $12=_luaL_checkinteger($10, $11);
        HEAP[$c]=$12;
        var $13=HEAP[$c];
        var $14=((($13)) & 255);
        var $15=unSign(($14), 8, 0);
        var $16=HEAP[$c];
        var $17=((($15))|0)==((($16))|0);
        if ($17) { __lastLabel__ = 2; __label__ = 4; break; } else { __lastLabel__ = 2; __label__ = 3; break; }
      case 3: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$i];
        var $21=_luaL_argerror($19, $20, ((__str38549)&4294967295));
        var $22=((($21))|0)!=0;
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $23
        var $24=__lastLabel__ == 2 ? 1 : ($22);
        var $25=unSign(($24), 1, 0);
        var $26=(($b)&4294967295);
        var $27=HEAP[$26];
        var $28=(($b+12)&4294967295);
        var $29=(($28)&4294967295);
        var $30=(($29+8192)&4294967295);
        var $31=((($27))>>>0) < ((($30))>>>0);
        if ($31) { __lastLabel__ = 4; __label__ = 6; break; } else { __lastLabel__ = 4; __label__ = 5; break; }
      case 5: // $32
        var $33=_luaL_prepbuffer($b);
        var $34=((($33))|0)!=0;
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $35
        var $36=__lastLabel__ == 4 ? 1 : ($34);
        var $37=unSign(($36), 1, 0);
        var $38=HEAP[$c];
        var $39=((($38)) & 255);
        var $40=(($b)&4294967295);
        var $41=HEAP[$40];
        var $42=(($41+1)&4294967295);
        HEAP[$40]=$42;
        HEAP[$41]=$39;
        __label__ = 7; break;
      case 7: // $43
        var $44=HEAP[$i];
        var $45=((($44) + 1)&4294967295);
        HEAP[$i]=$45;
        __label__ = 1; break;
      case 8: // $46
        _luaL_pushresult($b);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_dump($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8208; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8208);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $b=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        _luaL_checktype($2, 1, 6);
        var $3=HEAP[$1];
        _lua_settop($3, 1);
        var $4=HEAP[$1];
        _luaL_buffinit($4, $b);
        var $5=HEAP[$1];
        var $6=$b;
        var $7=_lua_dump($5, 52, $6);
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=_luaL_error($10, ((__str37548)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $12
        _luaL_pushresult($b);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_find($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_str_find_aux($2, 1);
    STACKTOP = __stackBase__;
    return $3;
  }
  

  function _str_format($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8766; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8766);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $arg=__stackBase__+8;
        var $sfl=__stackBase__+12;
        var $strfrmt=__stackBase__+16;
        var $strfrmt_end=__stackBase__+20;
        var $b=__stackBase__+24;
        var $form=__stackBase__+8228;
        var $buff=__stackBase__+8246;
        var $l=__stackBase__+8758;
        var $s=__stackBase__+8762;
        HEAP[$2]=$L;
        HEAP[$arg]=1;
        var $3=HEAP[$2];
        var $4=HEAP[$arg];
        var $5=_luaL_checklstring($3, $4, $sfl);
        HEAP[$strfrmt]=$5;
        var $6=HEAP[$strfrmt];
        var $7=HEAP[$sfl];
        var $8=(($6+$7)&4294967295);
        HEAP[$strfrmt_end]=$8;
        var $9=HEAP[$2];
        _luaL_buffinit($9, $b);
        __label__ = 1; break;
      case 1: // $10
        var $11=HEAP[$strfrmt];
        var $12=HEAP[$strfrmt_end];
        var $13=((($11))>>>0) < ((($12))>>>0);
        if ($13) { __label__ = 2; break; } else { __label__ = 24; break; }
      case 2: // $14
        var $15=HEAP[$strfrmt];
        var $16=HEAP[$15];
        var $17=reSign(($16), 8, 0);
        var $18=((($17))|0)!=37;
        if ($18) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $19
        var $20=(($b)&4294967295);
        var $21=HEAP[$20];
        var $22=(($b+12)&4294967295);
        var $23=(($22)&4294967295);
        var $24=(($23+8192)&4294967295);
        var $25=((($21))>>>0) < ((($24))>>>0);
        if ($25) { __lastLabel__ = 3; __label__ = 5; break; } else { __lastLabel__ = 3; __label__ = 4; break; }
      case 4: // $26
        var $27=_luaL_prepbuffer($b);
        var $28=((($27))|0)!=0;
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $29
        var $30=__lastLabel__ == 3 ? 1 : ($28);
        var $31=unSign(($30), 1, 0);
        var $32=HEAP[$strfrmt];
        var $33=(($32+1)&4294967295);
        HEAP[$strfrmt]=$33;
        var $34=HEAP[$32];
        var $35=(($b)&4294967295);
        var $36=HEAP[$35];
        var $37=(($36+1)&4294967295);
        HEAP[$35]=$37;
        HEAP[$36]=$34;
        __label__ = 23; break;
      case 6: // $38
        var $39=HEAP[$strfrmt];
        var $40=(($39+1)&4294967295);
        HEAP[$strfrmt]=$40;
        var $41=HEAP[$40];
        var $42=reSign(($41), 8, 0);
        var $43=((($42))|0)==37;
        if ($43) { __label__ = 7; break; } else { __label__ = 10; break; }
      case 7: // $44
        var $45=(($b)&4294967295);
        var $46=HEAP[$45];
        var $47=(($b+12)&4294967295);
        var $48=(($47)&4294967295);
        var $49=(($48+8192)&4294967295);
        var $50=((($46))>>>0) < ((($49))>>>0);
        if ($50) { __lastLabel__ = 7; __label__ = 9; break; } else { __lastLabel__ = 7; __label__ = 8; break; }
      case 8: // $51
        var $52=_luaL_prepbuffer($b);
        var $53=((($52))|0)!=0;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $54
        var $55=__lastLabel__ == 7 ? 1 : ($53);
        var $56=unSign(($55), 1, 0);
        var $57=HEAP[$strfrmt];
        var $58=(($57+1)&4294967295);
        HEAP[$strfrmt]=$58;
        var $59=HEAP[$57];
        var $60=(($b)&4294967295);
        var $61=HEAP[$60];
        var $62=(($61+1)&4294967295);
        HEAP[$60]=$62;
        HEAP[$61]=$59;
        __label__ = 22; break;
      case 10: // $63
        var $64=HEAP[$arg];
        var $65=((($64) + 1)&4294967295);
        HEAP[$arg]=$65;
        var $66=HEAP[$2];
        var $67=HEAP[$strfrmt];
        var $68=(($form)&4294967295);
        var $69=_scanformat($66, $67, $68);
        HEAP[$strfrmt]=$69;
        var $70=HEAP[$strfrmt];
        var $71=(($70+1)&4294967295);
        HEAP[$strfrmt]=$71;
        var $72=HEAP[$70];
        var $73=reSign(($72), 8, 0);
        if ($73 == 99) {
          __label__ = 11; break;
        }
        else if ($73 == 100) {
          __label__ = 12; break;
        }
        else if ($73 == 105) {
          __label__ = 12; break;
        }
        else if ($73 == 111) {
          __label__ = 13; break;
        }
        else if ($73 == 117) {
          __label__ = 13; break;
        }
        else if ($73 == 120) {
          __label__ = 13; break;
        }
        else if ($73 == 88) {
          __label__ = 13; break;
        }
        else if ($73 == 101) {
          __label__ = 14; break;
        }
        else if ($73 == 69) {
          __label__ = 14; break;
        }
        else if ($73 == 102) {
          __label__ = 14; break;
        }
        else if ($73 == 103) {
          __label__ = 14; break;
        }
        else if ($73 == 71) {
          __label__ = 14; break;
        }
        else if ($73 == 113) {
          __label__ = 15; break;
        }
        else if ($73 == 115) {
          __label__ = 16; break;
        }
        else {
        __label__ = 20; break;
        }
        
      case 11: // $74
        var $75=(($buff)&4294967295);
        var $76=(($form)&4294967295);
        var $77=HEAP[$2];
        var $78=HEAP[$arg];
        var $79=_luaL_checknumber($77, $78);
        var $80=((($79))|0);
        var $81=_sprintf($75, $76, allocate([$80,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 21; break;
      case 12: // $82
        var $83=(($form)&4294967295);
        _addintlen($83);
        var $84=(($buff)&4294967295);
        var $85=(($form)&4294967295);
        var $86=HEAP[$2];
        var $87=HEAP[$arg];
        var $88=_luaL_checknumber($86, $87);
        var $89=((($88))|0);
        var $90=_sprintf($84, $85, allocate([$89,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 21; break;
      case 13: // $91
        var $92=(($form)&4294967295);
        _addintlen($92);
        var $93=(($buff)&4294967295);
        var $94=(($form)&4294967295);
        var $95=HEAP[$2];
        var $96=HEAP[$arg];
        var $97=_luaL_checknumber($95, $96);
        var $98=Math.floor(($97));
        var $99=_sprintf($93, $94, allocate([$98,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 21; break;
      case 14: // $100
        var $101=(($buff)&4294967295);
        var $102=(($form)&4294967295);
        var $103=HEAP[$2];
        var $104=HEAP[$arg];
        var $105=_luaL_checknumber($103, $104);
        var $106=_sprintf($101, $102, allocate([$105,0,0,0,0,0,0,0], ["double",0,0,0,0,0,0,0], ALLOC_STACK));
        __label__ = 21; break;
      case 15: // $107
        var $108=HEAP[$2];
        var $109=HEAP[$arg];
        _addquoted($108, $b, $109);
        __label__ = 1; break;
      case 16: // $110
        var $111=HEAP[$2];
        var $112=HEAP[$arg];
        var $113=_luaL_checklstring($111, $112, $l);
        HEAP[$s]=$113;
        var $114=(($form)&4294967295);
        var $115=_strchr($114, 46);
        var $116=((($115))|0)!=0;
        if ($116) { __label__ = 19; break; } else { __label__ = 17; break; }
      case 17: // $117
        var $118=HEAP[$l];
        var $119=((($118))>>>0) >= 100;
        if ($119) { __label__ = 18; break; } else { __label__ = 19; break; }
      case 18: // $120
        var $121=HEAP[$2];
        var $122=HEAP[$arg];
        _lua_pushvalue($121, $122);
        _luaL_addvalue($b);
        __label__ = 1; break;
      case 19: // $123
        var $124=(($buff)&4294967295);
        var $125=(($form)&4294967295);
        var $126=HEAP[$s];
        var $127=_sprintf($124, $125, allocate([$126,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 21; break;
      case 20: // $128
        var $129=HEAP[$2];
        var $130=HEAP[$strfrmt];
        var $131=(($130+-1)&4294967295);
        var $132=HEAP[$131];
        var $133=reSign(($132), 8, 0);
        var $134=_luaL_error($129, ((__str30541)&4294967295), allocate([$133,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        HEAP[$1]=$134;
        __label__ = 25; break;
      case 21: // $135
        var $136=(($buff)&4294967295);
        var $137=(($buff)&4294967295);
        var $138=_strlen($137);
        _luaL_addlstring($b, $136, $138);
        __label__ = 22; break;
      case 22: // $139
        __label__ = 23; break;
      case 23: // $140
        __label__ = 1; break;
      case 24: // $141
        _luaL_pushresult($b);
        HEAP[$1]=1;
        __label__ = 25; break;
      case 25: // $142
        var $143=HEAP[$1];
        STACKTOP = __stackBase__;
        return $143;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _gfind_nodef($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_error($2, ((__str29540)&4294967295), allocate(1, "i32", ALLOC_STACK));
    STACKTOP = __stackBase__;
    return $3;
  }
  

  function _gmatch($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checklstring($2, 1, 0);
    var $4=HEAP[$1];
    var $5=_luaL_checklstring($4, 2, 0);
    var $6=HEAP[$1];
    _lua_settop($6, 2);
    var $7=HEAP[$1];
    _lua_pushinteger($7, 0);
    var $8=HEAP[$1];
    _lua_pushcclosure($8, 54, 3);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _str_gsub($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8512; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8512);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $srcl=__stackBase__+4;
        var $src=__stackBase__+8;
        var $p=__stackBase__+12;
        var $tr=__stackBase__+16;
        var $max_s=__stackBase__+20;
        var $anchor=__stackBase__+24;
        var $n=__stackBase__+28;
        var $ms=__stackBase__+32;
        var $b=__stackBase__+304;
        var $e=__stackBase__+8508;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, $srcl);
        HEAP[$src]=$3;
        var $4=HEAP[$1];
        var $5=_luaL_checklstring($4, 2, 0);
        HEAP[$p]=$5;
        var $6=HEAP[$1];
        var $7=_lua_type($6, 3);
        HEAP[$tr]=$7;
        var $8=HEAP[$1];
        var $9=HEAP[$srcl];
        var $10=((($9) + 1)&4294967295);
        var $11=_luaL_optinteger($8, 4, $10);
        HEAP[$max_s]=$11;
        var $12=HEAP[$p];
        var $13=HEAP[$12];
        var $14=reSign(($13), 8, 0);
        var $15=((($14))|0)==94;
        if ($15) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $16
        var $17=HEAP[$p];
        var $18=(($17+1)&4294967295);
        HEAP[$p]=$18;
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $19
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $20
        var $21=__lastLabel__ == 1 ? 1 : (0);
        HEAP[$anchor]=$21;
        HEAP[$n]=0;
        var $22=HEAP[$tr];
        var $23=((($22))|0)==3;
        if ($23) { __lastLabel__ = 3; __label__ = 8; break; } else { __lastLabel__ = 3; __label__ = 4; break; }
      case 4: // $24
        var $25=HEAP[$tr];
        var $26=((($25))|0)==4;
        if ($26) { __lastLabel__ = 4; __label__ = 8; break; } else { __lastLabel__ = 4; __label__ = 5; break; }
      case 5: // $27
        var $28=HEAP[$tr];
        var $29=((($28))|0)==6;
        if ($29) { __lastLabel__ = 5; __label__ = 8; break; } else { __lastLabel__ = 5; __label__ = 6; break; }
      case 6: // $30
        var $31=HEAP[$tr];
        var $32=((($31))|0)==5;
        if ($32) { __lastLabel__ = 6; __label__ = 8; break; } else { __lastLabel__ = 6; __label__ = 7; break; }
      case 7: // $33
        var $34=HEAP[$1];
        var $35=_luaL_argerror($34, 3, ((__str27538)&4294967295));
        var $36=((($35))|0)!=0;
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $37
        var $38=__lastLabel__ == 6 ? 1 : (__lastLabel__ == 5 ? 1 : (__lastLabel__ == 4 ? 1 : (__lastLabel__ == 3 ? 1 : ($36))));
        var $39=unSign(($38), 1, 0);
        var $40=HEAP[$1];
        _luaL_buffinit($40, $b);
        var $41=HEAP[$1];
        var $42=(($ms+8)&4294967295);
        HEAP[$42]=$41;
        var $43=HEAP[$src];
        var $44=(($ms)&4294967295);
        HEAP[$44]=$43;
        var $45=HEAP[$src];
        var $46=HEAP[$srcl];
        var $47=(($45+$46)&4294967295);
        var $48=(($ms+4)&4294967295);
        HEAP[$48]=$47;
        __label__ = 9; break;
      case 9: // $49
        var $50=HEAP[$n];
        var $51=HEAP[$max_s];
        var $52=((($50))|0) < ((($51))|0);
        if ($52) { __label__ = 10; break; } else { __label__ = 24; break; }
      case 10: // $53
        var $54=(($ms+12)&4294967295);
        HEAP[$54]=0;
        var $55=HEAP[$src];
        var $56=HEAP[$p];
        var $57=_match($ms, $55, $56);
        HEAP[$e]=$57;
        var $58=HEAP[$e];
        var $59=((($58))|0)!=0;
        if ($59) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $60
        var $61=HEAP[$n];
        var $62=((($61) + 1)&4294967295);
        HEAP[$n]=$62;
        var $63=HEAP[$src];
        var $64=HEAP[$e];
        _add_value($ms, $b, $63, $64);
        __label__ = 12; break;
      case 12: // $65
        var $66=HEAP[$e];
        var $67=((($66))|0)!=0;
        if ($67) { __label__ = 13; break; } else { __label__ = 15; break; }
      case 13: // $68
        var $69=HEAP[$e];
        var $70=HEAP[$src];
        var $71=((($69))>>>0) > ((($70))>>>0);
        if ($71) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $72
        var $73=HEAP[$e];
        HEAP[$src]=$73;
        __label__ = 21; break;
      case 15: // $74
        var $75=HEAP[$src];
        var $76=(($ms+4)&4294967295);
        var $77=HEAP[$76];
        var $78=((($75))>>>0) < ((($77))>>>0);
        if ($78) { __label__ = 16; break; } else { __label__ = 19; break; }
      case 16: // $79
        var $80=(($b)&4294967295);
        var $81=HEAP[$80];
        var $82=(($b+12)&4294967295);
        var $83=(($82)&4294967295);
        var $84=(($83+8192)&4294967295);
        var $85=((($81))>>>0) < ((($84))>>>0);
        if ($85) { __lastLabel__ = 16; __label__ = 18; break; } else { __lastLabel__ = 16; __label__ = 17; break; }
      case 17: // $86
        var $87=_luaL_prepbuffer($b);
        var $88=((($87))|0)!=0;
        __lastLabel__ = 17; __label__ = 18; break;
      case 18: // $89
        var $90=__lastLabel__ == 16 ? 1 : ($88);
        var $91=unSign(($90), 1, 0);
        var $92=HEAP[$src];
        var $93=(($92+1)&4294967295);
        HEAP[$src]=$93;
        var $94=HEAP[$92];
        var $95=(($b)&4294967295);
        var $96=HEAP[$95];
        var $97=(($96+1)&4294967295);
        HEAP[$95]=$97;
        HEAP[$96]=$94;
        __label__ = 20; break;
      case 19: // $98
        __label__ = 24; break;
      case 20: // $99
        __label__ = 21; break;
      case 21: // $100
        var $101=HEAP[$anchor];
        var $102=((($101))|0)!=0;
        if ($102) { __label__ = 22; break; } else { __label__ = 23; break; }
      case 22: // $103
        __label__ = 24; break;
      case 23: // $104
        __label__ = 9; break;
      case 24: // $105
        var $106=HEAP[$src];
        var $107=(($ms+4)&4294967295);
        var $108=HEAP[$107];
        var $109=HEAP[$src];
        var $110=($108);
        var $111=($109);
        var $112=((($110) - ($111))&4294967295);
        _luaL_addlstring($b, $106, $112);
        _luaL_pushresult($b);
        var $113=HEAP[$1];
        var $114=HEAP[$n];
        _lua_pushinteger($113, $114);
        STACKTOP = __stackBase__;
        return 2;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_len($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $l=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_checklstring($2, 1, $l);
    var $4=HEAP[$1];
    var $5=HEAP[$l];
    _lua_pushinteger($4, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _str_lower($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8220; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8220);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l=__stackBase__+4;
        var $i=__stackBase__+8;
        var $b=__stackBase__+12;
        var $s=__stackBase__+8216;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, $l);
        HEAP[$s]=$3;
        var $4=HEAP[$1];
        _luaL_buffinit($4, $b);
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$i];
        var $7=HEAP[$l];
        var $8=((($6))>>>0) < ((($7))>>>0);
        if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $9
        var $10=(($b)&4294967295);
        var $11=HEAP[$10];
        var $12=(($b+12)&4294967295);
        var $13=(($12)&4294967295);
        var $14=(($13+8192)&4294967295);
        var $15=((($11))>>>0) < ((($14))>>>0);
        if ($15) { __lastLabel__ = 2; __label__ = 4; break; } else { __lastLabel__ = 2; __label__ = 3; break; }
      case 3: // $16
        var $17=_luaL_prepbuffer($b);
        var $18=((($17))|0)!=0;
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $19
        var $20=__lastLabel__ == 2 ? 1 : ($18);
        var $21=unSign(($20), 1, 0);
        var $22=HEAP[$i];
        var $23=HEAP[$s];
        var $24=(($23+$22)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=_tolower($26);
        var $28=((($27)) & 255);
        var $29=(($b)&4294967295);
        var $30=HEAP[$29];
        var $31=(($30+1)&4294967295);
        HEAP[$29]=$31;
        HEAP[$30]=$28;
        __label__ = 5; break;
      case 5: // $32
        var $33=HEAP[$i];
        var $34=((($33) + 1)&4294967295);
        HEAP[$i]=$34;
        __label__ = 1; break;
      case 6: // $35
        _luaL_pushresult($b);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_match($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_str_find_aux($2, 0);
    STACKTOP = __stackBase__;
    return $3;
  }
  

  function _str_rep($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8220; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8220);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l=__stackBase__+4;
        var $b=__stackBase__+8;
        var $s=__stackBase__+8212;
        var $n=__stackBase__+8216;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, $l);
        HEAP[$s]=$3;
        var $4=HEAP[$1];
        var $5=_luaL_checkinteger($4, 2);
        HEAP[$n]=$5;
        var $6=HEAP[$1];
        _luaL_buffinit($6, $b);
        __label__ = 1; break;
      case 1: // $7
        var $8=HEAP[$n];
        var $9=((($8) + -1)&4294967295);
        HEAP[$n]=$9;
        var $10=((($8))|0) > 0;
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$s];
        var $13=HEAP[$l];
        _luaL_addlstring($b, $12, $13);
        __label__ = 1; break;
      case 3: // $14
        _luaL_pushresult($b);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_reverse($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8216; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8216);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l=__stackBase__+4;
        var $b=__stackBase__+8;
        var $s=__stackBase__+8212;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, $l);
        HEAP[$s]=$3;
        var $4=HEAP[$1];
        _luaL_buffinit($4, $b);
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$l];
        var $7=((($6) + -1)&4294967295);
        HEAP[$l]=$7;
        var $8=((($6))|0)!=0;
        if ($8) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $9
        var $10=(($b)&4294967295);
        var $11=HEAP[$10];
        var $12=(($b+12)&4294967295);
        var $13=(($12)&4294967295);
        var $14=(($13+8192)&4294967295);
        var $15=((($11))>>>0) < ((($14))>>>0);
        if ($15) { __lastLabel__ = 2; __label__ = 4; break; } else { __lastLabel__ = 2; __label__ = 3; break; }
      case 3: // $16
        var $17=_luaL_prepbuffer($b);
        var $18=((($17))|0)!=0;
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $19
        var $20=__lastLabel__ == 2 ? 1 : ($18);
        var $21=unSign(($20), 1, 0);
        var $22=HEAP[$l];
        var $23=HEAP[$s];
        var $24=(($23+$22)&4294967295);
        var $25=HEAP[$24];
        var $26=(($b)&4294967295);
        var $27=HEAP[$26];
        var $28=(($27+1)&4294967295);
        HEAP[$26]=$28;
        HEAP[$27]=$25;
        __label__ = 1; break;
      case 5: // $29
        _luaL_pushresult($b);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_sub($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l=__stackBase__+4;
        var $s=__stackBase__+8;
        var $start=__stackBase__+12;
        var $end=__stackBase__+16;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, $l);
        HEAP[$s]=$3;
        var $4=HEAP[$1];
        var $5=_luaL_checkinteger($4, 2);
        var $6=HEAP[$l];
        var $7=_posrelat($5, $6);
        HEAP[$start]=$7;
        var $8=HEAP[$1];
        var $9=_luaL_optinteger($8, 3, -1);
        var $10=HEAP[$l];
        var $11=_posrelat($9, $10);
        HEAP[$end]=$11;
        var $12=HEAP[$start];
        var $13=((($12))|0) < 1;
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $14
        HEAP[$start]=1;
        __label__ = 2; break;
      case 2: // $15
        var $16=HEAP[$end];
        var $17=HEAP[$l];
        var $18=((($16))|0) > ((($17))|0);
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $19
        var $20=HEAP[$l];
        HEAP[$end]=$20;
        __label__ = 4; break;
      case 4: // $21
        var $22=HEAP[$start];
        var $23=HEAP[$end];
        var $24=((($22))|0) <= ((($23))|0);
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $25
        var $26=HEAP[$1];
        var $27=HEAP[$s];
        var $28=HEAP[$start];
        var $29=(($27+$28)&4294967295);
        var $30=(($29+-1)&4294967295);
        var $31=HEAP[$end];
        var $32=HEAP[$start];
        var $33=((($31) - ($32))&4294967295);
        var $34=((($33) + 1)&4294967295);
        _lua_pushlstring($26, $30, $34);
        __label__ = 7; break;
      case 6: // $35
        var $36=HEAP[$1];
        _lua_pushlstring($36, ((__str3514)&4294967295), 0);
        __label__ = 7; break;
      case 7: // $37
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_upper($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8220; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8220);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l=__stackBase__+4;
        var $i=__stackBase__+8;
        var $b=__stackBase__+12;
        var $s=__stackBase__+8216;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, $l);
        HEAP[$s]=$3;
        var $4=HEAP[$1];
        _luaL_buffinit($4, $b);
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$i];
        var $7=HEAP[$l];
        var $8=((($6))>>>0) < ((($7))>>>0);
        if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $9
        var $10=(($b)&4294967295);
        var $11=HEAP[$10];
        var $12=(($b+12)&4294967295);
        var $13=(($12)&4294967295);
        var $14=(($13+8192)&4294967295);
        var $15=((($11))>>>0) < ((($14))>>>0);
        if ($15) { __lastLabel__ = 2; __label__ = 4; break; } else { __lastLabel__ = 2; __label__ = 3; break; }
      case 3: // $16
        var $17=_luaL_prepbuffer($b);
        var $18=((($17))|0)!=0;
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $19
        var $20=__lastLabel__ == 2 ? 1 : ($18);
        var $21=unSign(($20), 1, 0);
        var $22=HEAP[$i];
        var $23=HEAP[$s];
        var $24=(($23+$22)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=_toupper($26);
        var $28=((($27)) & 255);
        var $29=(($b)&4294967295);
        var $30=HEAP[$29];
        var $31=(($30+1)&4294967295);
        HEAP[$29]=$31;
        HEAP[$30]=$28;
        __label__ = 5; break;
      case 5: // $32
        var $33=HEAP[$i];
        var $34=((($33) + 1)&4294967295);
        HEAP[$i]=$34;
        __label__ = 1; break;
      case 6: // $35
        _luaL_pushresult($b);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _posrelat($pos, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$pos;
        HEAP[$2]=$len;
        var $3=HEAP[$1];
        var $4=((($3))|0) < 0;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$2];
        var $7=((($6) + 1)&4294967295);
        var $8=HEAP[$1];
        var $9=((($8) + ($7))&4294967295);
        HEAP[$1]=$9;
        __label__ = 2; break;
      case 2: // $10
        var $11=HEAP[$1];
        var $12=((($11))|0) >= 0;
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $13
        var $14=HEAP[$1];
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $15
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $16
        var $17=__lastLabel__ == 3 ? $14 : (0);
        STACKTOP = __stackBase__;
        return $17;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _str_find_aux($L, $find) {
    var __stackBase__  = STACKTOP; STACKTOP += 320; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 320);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $l1=__stackBase__+12;
        var $l2=__stackBase__+16;
        var $s=__stackBase__+20;
        var $p=__stackBase__+24;
        var $init=__stackBase__+28;
        var $s2=__stackBase__+32;
        var $ms=__stackBase__+36;
        var $anchor=__stackBase__+308;
        var $s1=__stackBase__+312;
        var $res=__stackBase__+316;
        HEAP[$2]=$L;
        HEAP[$3]=$find;
        var $4=HEAP[$2];
        var $5=_luaL_checklstring($4, 1, $l1);
        HEAP[$s]=$5;
        var $6=HEAP[$2];
        var $7=_luaL_checklstring($6, 2, $l2);
        HEAP[$p]=$7;
        var $8=HEAP[$2];
        var $9=_luaL_optinteger($8, 3, 1);
        var $10=HEAP[$l1];
        var $11=_posrelat($9, $10);
        var $12=((($11) - 1)&4294967295);
        HEAP[$init]=$12;
        var $13=HEAP[$init];
        var $14=((($13))|0) < 0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        HEAP[$init]=0;
        __label__ = 5; break;
      case 2: // $16
        var $17=HEAP[$init];
        var $18=HEAP[$l1];
        var $19=((($17))>>>0) > ((($18))>>>0);
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $20
        var $21=HEAP[$l1];
        HEAP[$init]=$21;
        __label__ = 4; break;
      case 4: // $22
        __label__ = 5; break;
      case 5: // $23
        var $24=HEAP[$3];
        var $25=((($24))|0)!=0;
        if ($25) { __label__ = 6; break; } else { __label__ = 11; break; }
      case 6: // $26
        var $27=HEAP[$2];
        var $28=_lua_toboolean($27, 4);
        var $29=((($28))|0)!=0;
        if ($29) { __label__ = 8; break; } else { __label__ = 7; break; }
      case 7: // $30
        var $31=HEAP[$p];
        var $32=_strpbrk($31, ((__str18529)&4294967295));
        var $33=((($32))|0)==0;
        if ($33) { __label__ = 8; break; } else { __label__ = 11; break; }
      case 8: // $34
        var $35=HEAP[$s];
        var $36=HEAP[$init];
        var $37=(($35+$36)&4294967295);
        var $38=HEAP[$l1];
        var $39=HEAP[$init];
        var $40=((($38) - ($39))&4294967295);
        var $41=HEAP[$p];
        var $42=HEAP[$l2];
        var $43=_lmemfind($37, $40, $41, $42);
        HEAP[$s2]=$43;
        var $44=HEAP[$s2];
        var $45=((($44))|0)!=0;
        if ($45) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $46
        var $47=HEAP[$2];
        var $48=HEAP[$s2];
        var $49=HEAP[$s];
        var $50=($48);
        var $51=($49);
        var $52=((($50) - ($51))&4294967295);
        var $53=((($52) + 1)&4294967295);
        _lua_pushinteger($47, $53);
        var $54=HEAP[$2];
        var $55=HEAP[$s2];
        var $56=HEAP[$s];
        var $57=($55);
        var $58=($56);
        var $59=((($57) - ($58))&4294967295);
        var $60=HEAP[$l2];
        var $61=((($59) + ($60))&4294967295);
        _lua_pushinteger($54, $61);
        HEAP[$1]=2;
        __label__ = 25; break;
      case 10: // $62
        __label__ = 24; break;
      case 11: // $63
        var $64=HEAP[$p];
        var $65=HEAP[$64];
        var $66=reSign(($65), 8, 0);
        var $67=((($66))|0)==94;
        if ($67) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $68
        var $69=HEAP[$p];
        var $70=(($69+1)&4294967295);
        HEAP[$p]=$70;
        __lastLabel__ = 12; __label__ = 14; break;
      case 13: // $71
        __lastLabel__ = 13; __label__ = 14; break;
      case 14: // $72
        var $73=__lastLabel__ == 12 ? 1 : (0);
        HEAP[$anchor]=$73;
        var $74=HEAP[$s];
        var $75=HEAP[$init];
        var $76=(($74+$75)&4294967295);
        HEAP[$s1]=$76;
        var $77=HEAP[$2];
        var $78=(($ms+8)&4294967295);
        HEAP[$78]=$77;
        var $79=HEAP[$s];
        var $80=(($ms)&4294967295);
        HEAP[$80]=$79;
        var $81=HEAP[$s];
        var $82=HEAP[$l1];
        var $83=(($81+$82)&4294967295);
        var $84=(($ms+4)&4294967295);
        HEAP[$84]=$83;
        __label__ = 15; break;
      case 15: // $85
        var $86=(($ms+12)&4294967295);
        HEAP[$86]=0;
        var $87=HEAP[$s1];
        var $88=HEAP[$p];
        var $89=_match($ms, $87, $88);
        HEAP[$res]=$89;
        var $90=((($89))|0)!=0;
        if ($90) { __label__ = 16; break; } else { __label__ = 19; break; }
      case 16: // $91
        var $92=HEAP[$3];
        var $93=((($92))|0)!=0;
        if ($93) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $94
        var $95=HEAP[$2];
        var $96=HEAP[$s1];
        var $97=HEAP[$s];
        var $98=($96);
        var $99=($97);
        var $100=((($98) - ($99))&4294967295);
        var $101=((($100) + 1)&4294967295);
        _lua_pushinteger($95, $101);
        var $102=HEAP[$2];
        var $103=HEAP[$res];
        var $104=HEAP[$s];
        var $105=($103);
        var $106=($104);
        var $107=((($105) - ($106))&4294967295);
        _lua_pushinteger($102, $107);
        var $108=_push_captures($ms, 0, 0);
        var $109=((($108) + 2)&4294967295);
        HEAP[$1]=$109;
        __label__ = 25; break;
      case 18: // $110
        var $111=HEAP[$s1];
        var $112=HEAP[$res];
        var $113=_push_captures($ms, $111, $112);
        HEAP[$1]=$113;
        __label__ = 25; break;
      case 19: // $114
        __label__ = 20; break;
      case 20: // $115
        var $116=HEAP[$s1];
        var $117=(($116+1)&4294967295);
        HEAP[$s1]=$117;
        var $118=(($ms+4)&4294967295);
        var $119=HEAP[$118];
        var $120=((($116))>>>0) < ((($119))>>>0);
        if ($120) { __lastLabel__ = 20; __label__ = 21; break; } else { __lastLabel__ = 20; __label__ = 22; break; }
      case 21: // $121
        var $122=HEAP[$anchor];
        var $123=((($122))|0)!=0;
        var $124=($123) ^ 1;
        __lastLabel__ = 21; __label__ = 22; break;
      case 22: // $125
        var $126=__lastLabel__ == 20 ? 0 : ($124);
        if ($126) { __label__ = 15; break; } else { __label__ = 23; break; }
      case 23: // $127
        __label__ = 24; break;
      case 24: // $128
        var $129=HEAP[$2];
        _lua_pushnil($129);
        HEAP[$1]=1;
        __label__ = 25; break;
      case 25: // $130
        var $131=HEAP[$1];
        STACKTOP = __stackBase__;
        return $131;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lmemfind($s1, $l1, $s2, $l2) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $init=__stackBase__+20;
        HEAP[$2]=$s1;
        HEAP[$3]=$l1;
        HEAP[$4]=$s2;
        HEAP[$5]=$l2;
        var $6=HEAP[$5];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$2];
        HEAP[$1]=$9;
        __label__ = 13; break;
      case 2: // $10
        var $11=HEAP[$5];
        var $12=HEAP[$3];
        var $13=((($11))>>>0) > ((($12))>>>0);
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $14
        HEAP[$1]=0;
        __label__ = 13; break;
      case 4: // $15
        var $16=HEAP[$5];
        var $17=((($16) + -1)&4294967295);
        HEAP[$5]=$17;
        var $18=HEAP[$3];
        var $19=HEAP[$5];
        var $20=((($18) - ($19))&4294967295);
        HEAP[$3]=$20;
        __label__ = 5; break;
      case 5: // $21
        var $22=HEAP[$3];
        var $23=((($22))>>>0) > 0;
        if ($23) { __lastLabel__ = 5; __label__ = 6; break; } else { __lastLabel__ = 5; __label__ = 7; break; }
      case 6: // $24
        var $25=HEAP[$2];
        var $26=HEAP[$4];
        var $27=HEAP[$26];
        var $28=reSign(($27), 8, 0);
        var $29=HEAP[$3];
        var $30=_memchr($25, $28, $29);
        HEAP[$init]=$30;
        var $31=((($30))|0)!=0;
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $32
        var $33=__lastLabel__ == 5 ? 0 : ($31);
        if ($33) { __label__ = 8; break; } else { __label__ = 12; break; }
      case 8: // $34
        var $35=HEAP[$init];
        var $36=(($35+1)&4294967295);
        HEAP[$init]=$36;
        var $37=HEAP[$init];
        var $38=HEAP[$4];
        var $39=(($38+1)&4294967295);
        var $40=HEAP[$5];
        var $41=_memcmp($37, $39, $40);
        var $42=((($41))|0)==0;
        if ($42) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $43
        var $44=HEAP[$init];
        var $45=(($44+-1)&4294967295);
        HEAP[$1]=$45;
        __label__ = 13; break;
      case 10: // $46
        var $47=HEAP[$init];
        var $48=HEAP[$2];
        var $49=($47);
        var $50=($48);
        var $51=((($49) - ($50))&4294967295);
        var $52=HEAP[$3];
        var $53=((($52) - ($51))&4294967295);
        HEAP[$3]=$53;
        var $54=HEAP[$init];
        HEAP[$2]=$54;
        __label__ = 11; break;
      case 11: // $55
        __label__ = 5; break;
      case 12: // $56
        HEAP[$1]=0;
        __label__ = 13; break;
      case 13: // $57
        var $58=HEAP[$1];
        STACKTOP = __stackBase__;
        return $58;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _match($ms, $s, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 33; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 33);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $ep=__stackBase__+16;
        var $previous=__stackBase__+20;
        var $ep1=__stackBase__+21;
        var $m=__stackBase__+25;
        var $res=__stackBase__+29;
        HEAP[$2]=$ms;
        HEAP[$3]=$s;
        HEAP[$4]=$p;
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$4];
        var $7=HEAP[$6];
        var $8=reSign(($7), 8, 0);
        if ($8 == 40) {
          __label__ = 2; break;
        }
        else if ($8 == 41) {
          __label__ = 5; break;
        }
        else if ($8 == 37) {
          __label__ = 6; break;
        }
        else if ($8 == 0) {
          __label__ = 24; break;
        }
        else if ($8 == 36) {
          __label__ = 25; break;
        }
        else {
        __label__ = 31; break;
        }
        
      case 2: // $9
        var $10=HEAP[$4];
        var $11=(($10+1)&4294967295);
        var $12=HEAP[$11];
        var $13=reSign(($12), 8, 0);
        var $14=((($13))|0)==41;
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $15
        var $16=HEAP[$2];
        var $17=HEAP[$3];
        var $18=HEAP[$4];
        var $19=(($18+2)&4294967295);
        var $20=_start_capture($16, $17, $19, -2);
        HEAP[$1]=$20;
        __label__ = 48; break;
      case 4: // $21
        var $22=HEAP[$2];
        var $23=HEAP[$3];
        var $24=HEAP[$4];
        var $25=(($24+1)&4294967295);
        var $26=_start_capture($22, $23, $25, -1);
        HEAP[$1]=$26;
        __label__ = 48; break;
      case 5: // $27
        var $28=HEAP[$2];
        var $29=HEAP[$3];
        var $30=HEAP[$4];
        var $31=(($30+1)&4294967295);
        var $32=_end_capture($28, $29, $31);
        HEAP[$1]=$32;
        __label__ = 48; break;
      case 6: // $33
        var $34=HEAP[$4];
        var $35=(($34+1)&4294967295);
        var $36=HEAP[$35];
        var $37=reSign(($36), 8, 0);
        if ($37 == 98) {
          __label__ = 7; break;
        }
        else if ($37 == 102) {
          __label__ = 10; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 7: // $38
        var $39=HEAP[$2];
        var $40=HEAP[$3];
        var $41=HEAP[$4];
        var $42=(($41+2)&4294967295);
        var $43=_matchbalance($39, $40, $42);
        HEAP[$3]=$43;
        var $44=HEAP[$3];
        var $45=((($44))|0)==0;
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $46
        HEAP[$1]=0;
        __label__ = 48; break;
      case 9: // $47
        var $48=HEAP[$4];
        var $49=(($48+4)&4294967295);
        HEAP[$4]=$49;
        __label__ = 1; break;
      case 10: // $50
        var $51=HEAP[$4];
        var $52=(($51+2)&4294967295);
        HEAP[$4]=$52;
        var $53=HEAP[$4];
        var $54=HEAP[$53];
        var $55=reSign(($54), 8, 0);
        var $56=((($55))|0)!=91;
        if ($56) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $57
        var $58=HEAP[$2];
        var $59=(($58+8)&4294967295);
        var $60=HEAP[$59];
        var $61=_luaL_error($60, ((__str22533)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 12; break;
      case 12: // $62
        var $63=HEAP[$2];
        var $64=HEAP[$4];
        var $65=_classend($63, $64);
        HEAP[$ep]=$65;
        var $66=HEAP[$3];
        var $67=HEAP[$2];
        var $68=(($67)&4294967295);
        var $69=HEAP[$68];
        var $70=((($66))|0)==((($69))|0);
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $71
        __lastLabel__ = 13; __label__ = 15; break;
      case 14: // $72
        var $73=HEAP[$3];
        var $74=(($73+-1)&4294967295);
        var $75=HEAP[$74];
        var $76=reSign(($75), 8, 0);
        __lastLabel__ = 14; __label__ = 15; break;
      case 15: // $77
        var $78=__lastLabel__ == 13 ? 0 : ($76);
        var $79=((($78)) & 255);
        HEAP[$previous]=$79;
        var $80=HEAP[$previous];
        var $81=unSign(($80), 8, 0);
        var $82=HEAP[$4];
        var $83=HEAP[$ep];
        var $84=(($83+-1)&4294967295);
        var $85=_matchbracketclass($81, $82, $84);
        var $86=((($85))|0)!=0;
        if ($86) { __label__ = 17; break; } else { __label__ = 16; break; }
      case 16: // $87
        var $88=HEAP[$3];
        var $89=HEAP[$88];
        var $90=unSign(($89), 8, 0);
        var $91=HEAP[$4];
        var $92=HEAP[$ep];
        var $93=(($92+-1)&4294967295);
        var $94=_matchbracketclass($90, $91, $93);
        var $95=((($94))|0)!=0;
        if ($95) { __label__ = 18; break; } else { __label__ = 17; break; }
      case 17: // $96
        HEAP[$1]=0;
        __label__ = 48; break;
      case 18: // $97
        var $98=HEAP[$ep];
        HEAP[$4]=$98;
        __label__ = 1; break;
      case 19: // $99
        var $100=HEAP[$4];
        var $101=(($100+1)&4294967295);
        var $102=HEAP[$101];
        var $103=unSign(($102), 8, 0);
        var $104=___ctype_b_loc();
        var $105=HEAP[$104];
        var $106=(($105+2*$103)&4294967295);
        var $107=HEAP[$106];
        var $108=unSign(($107), 16, 0);
        var $109=($108) & 2048;
        var $110=((($109))|0)!=0;
        if ($110) { __label__ = 20; break; } else { __label__ = 23; break; }
      case 20: // $111
        var $112=HEAP[$2];
        var $113=HEAP[$3];
        var $114=HEAP[$4];
        var $115=(($114+1)&4294967295);
        var $116=HEAP[$115];
        var $117=unSign(($116), 8, 0);
        var $118=_match_capture($112, $113, $117);
        HEAP[$3]=$118;
        var $119=HEAP[$3];
        var $120=((($119))|0)==0;
        if ($120) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $121
        HEAP[$1]=0;
        __label__ = 48; break;
      case 22: // $122
        var $123=HEAP[$4];
        var $124=(($123+2)&4294967295);
        HEAP[$4]=$124;
        __label__ = 1; break;
      case 23: // $125
        __label__ = 32; break;
      case 24: // $126
        var $127=HEAP[$3];
        HEAP[$1]=$127;
        __label__ = 48; break;
      case 25: // $128
        var $129=HEAP[$4];
        var $130=(($129+1)&4294967295);
        var $131=HEAP[$130];
        var $132=reSign(($131), 8, 0);
        var $133=((($132))|0)==0;
        if ($133) { __label__ = 26; break; } else { __label__ = 30; break; }
      case 26: // $134
        var $135=HEAP[$3];
        var $136=HEAP[$2];
        var $137=(($136+4)&4294967295);
        var $138=HEAP[$137];
        var $139=((($135))|0)==((($138))|0);
        if ($139) { __label__ = 27; break; } else { __label__ = 28; break; }
      case 27: // $140
        var $141=HEAP[$3];
        __lastLabel__ = 27; __label__ = 29; break;
      case 28: // $142
        __lastLabel__ = 28; __label__ = 29; break;
      case 29: // $143
        var $144=__lastLabel__ == 27 ? $141 : (0);
        HEAP[$1]=$144;
        __label__ = 48; break;
      case 30: // $145
        __label__ = 32; break;
      case 31: // $146
        __label__ = 32; break;
      case 32: // $147
        var $148=HEAP[$2];
        var $149=HEAP[$4];
        var $150=_classend($148, $149);
        HEAP[$ep1]=$150;
        var $151=HEAP[$3];
        var $152=HEAP[$2];
        var $153=(($152+4)&4294967295);
        var $154=HEAP[$153];
        var $155=((($151))>>>0) < ((($154))>>>0);
        if ($155) { __lastLabel__ = 32; __label__ = 33; break; } else { __lastLabel__ = 32; __label__ = 34; break; }
      case 33: // $156
        var $157=HEAP[$3];
        var $158=HEAP[$157];
        var $159=unSign(($158), 8, 0);
        var $160=HEAP[$4];
        var $161=HEAP[$ep1];
        var $162=_singlematch($159, $160, $161);
        var $163=((($162))|0)!=0;
        __lastLabel__ = 33; __label__ = 34; break;
      case 34: // $164
        var $165=__lastLabel__ == 32 ? 0 : ($163);
        var $166=unSign(($165), 1, 0);
        HEAP[$m]=$166;
        var $167=HEAP[$ep1];
        var $168=HEAP[$167];
        var $169=reSign(($168), 8, 0);
        if ($169 == 63) {
          __label__ = 35; break;
        }
        else if ($169 == 42) {
          __label__ = 39; break;
        }
        else if ($169 == 43) {
          __label__ = 40; break;
        }
        else if ($169 == 45) {
          __label__ = 44; break;
        }
        else {
        __label__ = 45; break;
        }
        
      case 35: // $170
        var $171=HEAP[$m];
        var $172=((($171))|0)!=0;
        if ($172) { __label__ = 36; break; } else { __label__ = 38; break; }
      case 36: // $173
        var $174=HEAP[$2];
        var $175=HEAP[$3];
        var $176=(($175+1)&4294967295);
        var $177=HEAP[$ep1];
        var $178=(($177+1)&4294967295);
        var $179=_match($174, $176, $178);
        HEAP[$res]=$179;
        var $180=((($179))|0)!=0;
        if ($180) { __label__ = 37; break; } else { __label__ = 38; break; }
      case 37: // $181
        var $182=HEAP[$res];
        HEAP[$1]=$182;
        __label__ = 48; break;
      case 38: // $183
        var $184=HEAP[$ep1];
        var $185=(($184+1)&4294967295);
        HEAP[$4]=$185;
        __label__ = 1; break;
      case 39: // $186
        var $187=HEAP[$2];
        var $188=HEAP[$3];
        var $189=HEAP[$4];
        var $190=HEAP[$ep1];
        var $191=_max_expand($187, $188, $189, $190);
        HEAP[$1]=$191;
        __label__ = 48; break;
      case 40: // $192
        var $193=HEAP[$m];
        var $194=((($193))|0)!=0;
        if ($194) { __label__ = 41; break; } else { __label__ = 42; break; }
      case 41: // $195
        var $196=HEAP[$2];
        var $197=HEAP[$3];
        var $198=(($197+1)&4294967295);
        var $199=HEAP[$4];
        var $200=HEAP[$ep1];
        var $201=_max_expand($196, $198, $199, $200);
        __lastLabel__ = 41; __label__ = 43; break;
      case 42: // $202
        __lastLabel__ = 42; __label__ = 43; break;
      case 43: // $203
        var $204=__lastLabel__ == 41 ? $201 : (0);
        HEAP[$1]=$204;
        __label__ = 48; break;
      case 44: // $205
        var $206=HEAP[$2];
        var $207=HEAP[$3];
        var $208=HEAP[$4];
        var $209=HEAP[$ep1];
        var $210=_min_expand($206, $207, $208, $209);
        HEAP[$1]=$210;
        __label__ = 48; break;
      case 45: // $211
        var $212=HEAP[$m];
        var $213=((($212))|0)!=0;
        if ($213) { __label__ = 47; break; } else { __label__ = 46; break; }
      case 46: // $214
        HEAP[$1]=0;
        __label__ = 48; break;
      case 47: // $215
        var $216=HEAP[$3];
        var $217=(($216+1)&4294967295);
        HEAP[$3]=$217;
        var $218=HEAP[$ep1];
        HEAP[$4]=$218;
        __label__ = 1; break;
      case 48: // $219
        var $220=HEAP[$1];
        STACKTOP = __stackBase__;
        return $220;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _push_captures($ms, $s, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $nlevels=__stackBase__+16;
        HEAP[$1]=$ms;
        HEAP[$2]=$s;
        HEAP[$3]=$e;
        var $4=HEAP[$1];
        var $5=(($4+12)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $8
        var $9=HEAP[$2];
        var $10=((($9))|0)!=0;
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $11
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $12
        var $13=HEAP[$1];
        var $14=(($13+12)&4294967295);
        var $15=HEAP[$14];
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $16
        var $17=__lastLabel__ == 2 ? 1 : ($15);
        HEAP[$nlevels]=$17;
        var $18=HEAP[$1];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        var $21=HEAP[$nlevels];
        _luaL_checkstack($20, $21, ((__str19530)&4294967295));
        HEAP[$i]=0;
        __label__ = 5; break;
      case 5: // $22
        var $23=HEAP[$i];
        var $24=HEAP[$nlevels];
        var $25=((($23))|0) < ((($24))|0);
        if ($25) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $26
        var $27=HEAP[$1];
        var $28=HEAP[$i];
        var $29=HEAP[$2];
        var $30=HEAP[$3];
        _push_onecapture($27, $28, $29, $30);
        __label__ = 7; break;
      case 7: // $31
        var $32=HEAP[$i];
        var $33=((($32) + 1)&4294967295);
        HEAP[$i]=$33;
        __label__ = 5; break;
      case 8: // $34
        var $35=HEAP[$nlevels];
        STACKTOP = __stackBase__;
        return $35;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _push_onecapture($ms, $i, $s, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $l=__stackBase__+16;
        HEAP[$1]=$ms;
        HEAP[$2]=$i;
        HEAP[$3]=$s;
        HEAP[$4]=$e;
        var $5=HEAP[$2];
        var $6=HEAP[$1];
        var $7=(($6+12)&4294967295);
        var $8=HEAP[$7];
        var $9=((($5))|0) >= ((($8))|0);
        if ($9) { __label__ = 1; break; } else { __label__ = 5; break; }
      case 1: // $10
        var $11=HEAP[$2];
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$1];
        var $15=(($14+8)&4294967295);
        var $16=HEAP[$15];
        var $17=HEAP[$3];
        var $18=HEAP[$4];
        var $19=HEAP[$3];
        var $20=($18);
        var $21=($19);
        var $22=((($20) - ($21))&4294967295);
        _lua_pushlstring($16, $17, $22);
        __label__ = 4; break;
      case 3: // $23
        var $24=HEAP[$1];
        var $25=(($24+8)&4294967295);
        var $26=HEAP[$25];
        var $27=_luaL_error($26, ((__str20531)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 4; break;
      case 4: // $28
        __label__ = 11; break;
      case 5: // $29
        var $30=HEAP[$2];
        var $31=HEAP[$1];
        var $32=(($31+16)&4294967295);
        var $33=(($32+$30*8)&4294967295);
        var $34=(($33+4)&4294967295);
        var $35=HEAP[$34];
        HEAP[$l]=$35;
        var $36=HEAP[$l];
        var $37=((($36))|0)==-1;
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $38
        var $39=HEAP[$1];
        var $40=(($39+8)&4294967295);
        var $41=HEAP[$40];
        var $42=_luaL_error($41, ((__str21532)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 7; break;
      case 7: // $43
        var $44=HEAP[$l];
        var $45=((($44))|0)==-2;
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $46
        var $47=HEAP[$1];
        var $48=(($47+8)&4294967295);
        var $49=HEAP[$48];
        var $50=HEAP[$2];
        var $51=HEAP[$1];
        var $52=(($51+16)&4294967295);
        var $53=(($52+$50*8)&4294967295);
        var $54=(($53)&4294967295);
        var $55=HEAP[$54];
        var $56=HEAP[$1];
        var $57=(($56)&4294967295);
        var $58=HEAP[$57];
        var $59=($55);
        var $60=($58);
        var $61=((($59) - ($60))&4294967295);
        var $62=((($61) + 1)&4294967295);
        _lua_pushinteger($49, $62);
        __label__ = 10; break;
      case 9: // $63
        var $64=HEAP[$1];
        var $65=(($64+8)&4294967295);
        var $66=HEAP[$65];
        var $67=HEAP[$2];
        var $68=HEAP[$1];
        var $69=(($68+16)&4294967295);
        var $70=(($69+$67*8)&4294967295);
        var $71=(($70)&4294967295);
        var $72=HEAP[$71];
        var $73=HEAP[$l];
        _lua_pushlstring($66, $72, $73);
        __label__ = 10; break;
      case 10: // $74
        __label__ = 11; break;
      case 11: // $75
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _start_capture($ms, $s, $p, $what) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $res=__stackBase__+16;
        var $level=__stackBase__+20;
        HEAP[$1]=$ms;
        HEAP[$2]=$s;
        HEAP[$3]=$p;
        HEAP[$4]=$what;
        var $5=HEAP[$1];
        var $6=(($5+12)&4294967295);
        var $7=HEAP[$6];
        HEAP[$level]=$7;
        var $8=HEAP[$level];
        var $9=((($8))|0) >= 32;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$1];
        var $12=(($11+8)&4294967295);
        var $13=HEAP[$12];
        var $14=_luaL_error($13, ((__str19530)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $15
        var $16=HEAP[$2];
        var $17=HEAP[$level];
        var $18=HEAP[$1];
        var $19=(($18+16)&4294967295);
        var $20=(($19+$17*8)&4294967295);
        var $21=(($20)&4294967295);
        HEAP[$21]=$16;
        var $22=HEAP[$4];
        var $23=HEAP[$level];
        var $24=HEAP[$1];
        var $25=(($24+16)&4294967295);
        var $26=(($25+$23*8)&4294967295);
        var $27=(($26+4)&4294967295);
        HEAP[$27]=$22;
        var $28=HEAP[$level];
        var $29=((($28) + 1)&4294967295);
        var $30=HEAP[$1];
        var $31=(($30+12)&4294967295);
        HEAP[$31]=$29;
        var $32=HEAP[$1];
        var $33=HEAP[$2];
        var $34=HEAP[$3];
        var $35=_match($32, $33, $34);
        HEAP[$res]=$35;
        var $36=((($35))|0)==0;
        if ($36) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $37
        var $38=HEAP[$1];
        var $39=(($38+12)&4294967295);
        var $40=HEAP[$39];
        var $41=((($40) + -1)&4294967295);
        HEAP[$39]=$41;
        __label__ = 4; break;
      case 4: // $42
        var $43=HEAP[$res];
        STACKTOP = __stackBase__;
        return $43;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _end_capture($ms, $s, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $l=__stackBase__+12;
        var $res=__stackBase__+16;
        HEAP[$1]=$ms;
        HEAP[$2]=$s;
        HEAP[$3]=$p;
        var $4=HEAP[$1];
        var $5=_capture_to_close($4);
        HEAP[$l]=$5;
        var $6=HEAP[$2];
        var $7=HEAP[$l];
        var $8=HEAP[$1];
        var $9=(($8+16)&4294967295);
        var $10=(($9+$7*8)&4294967295);
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        var $13=($6);
        var $14=($12);
        var $15=((($13) - ($14))&4294967295);
        var $16=HEAP[$l];
        var $17=HEAP[$1];
        var $18=(($17+16)&4294967295);
        var $19=(($18+$16*8)&4294967295);
        var $20=(($19+4)&4294967295);
        HEAP[$20]=$15;
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=HEAP[$3];
        var $24=_match($21, $22, $23);
        HEAP[$res]=$24;
        var $25=((($24))|0)==0;
        if ($25) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $26
        var $27=HEAP[$l];
        var $28=HEAP[$1];
        var $29=(($28+16)&4294967295);
        var $30=(($29+$27*8)&4294967295);
        var $31=(($30+4)&4294967295);
        HEAP[$31]=-1;
        __label__ = 2; break;
      case 2: // $32
        var $33=HEAP[$res];
        STACKTOP = __stackBase__;
        return $33;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _matchbalance($ms, $s, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $b=__stackBase__+16;
        var $e=__stackBase__+20;
        var $cont=__stackBase__+24;
        HEAP[$2]=$ms;
        HEAP[$3]=$s;
        HEAP[$4]=$p;
        var $5=HEAP[$4];
        var $6=HEAP[$5];
        var $7=reSign(($6), 8, 0);
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $9
        var $10=HEAP[$4];
        var $11=(($10+1)&4294967295);
        var $12=HEAP[$11];
        var $13=reSign(($12), 8, 0);
        var $14=((($13))|0)==0;
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        var $16=HEAP[$2];
        var $17=(($16+8)&4294967295);
        var $18=HEAP[$17];
        var $19=_luaL_error($18, ((__str25536)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $20
        var $21=HEAP[$3];
        var $22=HEAP[$21];
        var $23=reSign(($22), 8, 0);
        var $24=HEAP[$4];
        var $25=HEAP[$24];
        var $26=reSign(($25), 8, 0);
        var $27=((($23))|0)!=((($26))|0);
        if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $28
        HEAP[$1]=0;
        __label__ = 17; break;
      case 5: // $29
        var $30=HEAP[$4];
        var $31=HEAP[$30];
        var $32=reSign(($31), 8, 0);
        HEAP[$b]=$32;
        var $33=HEAP[$4];
        var $34=(($33+1)&4294967295);
        var $35=HEAP[$34];
        var $36=reSign(($35), 8, 0);
        HEAP[$e]=$36;
        HEAP[$cont]=1;
        __label__ = 6; break;
      case 6: // $37
        var $38=HEAP[$3];
        var $39=(($38+1)&4294967295);
        HEAP[$3]=$39;
        var $40=HEAP[$2];
        var $41=(($40+4)&4294967295);
        var $42=HEAP[$41];
        var $43=((($39))>>>0) < ((($42))>>>0);
        if ($43) { __label__ = 7; break; } else { __label__ = 15; break; }
      case 7: // $44
        var $45=HEAP[$3];
        var $46=HEAP[$45];
        var $47=reSign(($46), 8, 0);
        var $48=HEAP[$e];
        var $49=((($47))|0)==((($48))|0);
        if ($49) { __label__ = 8; break; } else { __label__ = 11; break; }
      case 8: // $50
        var $51=HEAP[$cont];
        var $52=((($51) + -1)&4294967295);
        HEAP[$cont]=$52;
        var $53=((($52))|0)==0;
        if ($53) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $54
        var $55=HEAP[$3];
        var $56=(($55+1)&4294967295);
        HEAP[$1]=$56;
        __label__ = 17; break;
      case 10: // $57
        __label__ = 14; break;
      case 11: // $58
        var $59=HEAP[$3];
        var $60=HEAP[$59];
        var $61=reSign(($60), 8, 0);
        var $62=HEAP[$b];
        var $63=((($61))|0)==((($62))|0);
        if ($63) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $64
        var $65=HEAP[$cont];
        var $66=((($65) + 1)&4294967295);
        HEAP[$cont]=$66;
        __label__ = 13; break;
      case 13: // $67
        __label__ = 14; break;
      case 14: // $68
        __label__ = 6; break;
      case 15: // $69
        __label__ = 16; break;
      case 16: // $70
        HEAP[$1]=0;
        __label__ = 17; break;
      case 17: // $71
        var $72=HEAP[$1];
        STACKTOP = __stackBase__;
        return $72;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _classend($ms, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$ms;
        HEAP[$3]=$p;
        var $4=HEAP[$3];
        var $5=(($4+1)&4294967295);
        HEAP[$3]=$5;
        var $6=HEAP[$4];
        var $7=reSign(($6), 8, 0);
        if ($7 == 37) {
          __label__ = 1; break;
        }
        else if ($7 == 91) {
          __label__ = 4; break;
        }
        else {
        __label__ = 15; break;
        }
        
      case 1: // $8
        var $9=HEAP[$3];
        var $10=HEAP[$9];
        var $11=reSign(($10), 8, 0);
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$2];
        var $15=(($14+8)&4294967295);
        var $16=HEAP[$15];
        var $17=_luaL_error($16, ((__str23534)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $18
        var $19=HEAP[$3];
        var $20=(($19+1)&4294967295);
        HEAP[$1]=$20;
        __label__ = 16; break;
      case 4: // $21
        var $22=HEAP[$3];
        var $23=HEAP[$22];
        var $24=reSign(($23), 8, 0);
        var $25=((($24))|0)==94;
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $26
        var $27=HEAP[$3];
        var $28=(($27+1)&4294967295);
        HEAP[$3]=$28;
        __label__ = 6; break;
      case 6: // $29
        __label__ = 7; break;
      case 7: // $30
        var $31=HEAP[$3];
        var $32=HEAP[$31];
        var $33=reSign(($32), 8, 0);
        var $34=((($33))|0)==0;
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $35
        var $36=HEAP[$2];
        var $37=(($36+8)&4294967295);
        var $38=HEAP[$37];
        var $39=_luaL_error($38, ((__str24535)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 9; break;
      case 9: // $40
        var $41=HEAP[$3];
        var $42=(($41+1)&4294967295);
        HEAP[$3]=$42;
        var $43=HEAP[$41];
        var $44=reSign(($43), 8, 0);
        var $45=((($44))|0)==37;
        if ($45) { __label__ = 10; break; } else { __label__ = 12; break; }
      case 10: // $46
        var $47=HEAP[$3];
        var $48=HEAP[$47];
        var $49=reSign(($48), 8, 0);
        var $50=((($49))|0)!=0;
        if ($50) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $51
        var $52=HEAP[$3];
        var $53=(($52+1)&4294967295);
        HEAP[$3]=$53;
        __label__ = 12; break;
      case 12: // $54
        __label__ = 13; break;
      case 13: // $55
        var $56=HEAP[$3];
        var $57=HEAP[$56];
        var $58=reSign(($57), 8, 0);
        var $59=((($58))|0)!=93;
        if ($59) { __label__ = 7; break; } else { __label__ = 14; break; }
      case 14: // $60
        var $61=HEAP[$3];
        var $62=(($61+1)&4294967295);
        HEAP[$1]=$62;
        __label__ = 16; break;
      case 15: // $63
        var $64=HEAP[$3];
        HEAP[$1]=$64;
        __label__ = 16; break;
      case 16: // $65
        var $66=HEAP[$1];
        STACKTOP = __stackBase__;
        return $66;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _matchbracketclass($c, $p, $ec) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $sig=__stackBase__+16;
        HEAP[$2]=$c;
        HEAP[$3]=$p;
        HEAP[$4]=$ec;
        HEAP[$sig]=1;
        var $5=HEAP[$3];
        var $6=(($5+1)&4294967295);
        var $7=HEAP[$6];
        var $8=reSign(($7), 8, 0);
        var $9=((($8))|0)==94;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        HEAP[$sig]=0;
        var $11=HEAP[$3];
        var $12=(($11+1)&4294967295);
        HEAP[$3]=$12;
        __label__ = 2; break;
      case 2: // $13
        __label__ = 3; break;
      case 3: // $14
        var $15=HEAP[$3];
        var $16=(($15+1)&4294967295);
        HEAP[$3]=$16;
        var $17=HEAP[$4];
        var $18=((($16))>>>0) < ((($17))>>>0);
        if ($18) { __label__ = 4; break; } else { __label__ = 19; break; }
      case 4: // $19
        var $20=HEAP[$3];
        var $21=HEAP[$20];
        var $22=reSign(($21), 8, 0);
        var $23=((($22))|0)==37;
        if ($23) { __label__ = 5; break; } else { __label__ = 8; break; }
      case 5: // $24
        var $25=HEAP[$3];
        var $26=(($25+1)&4294967295);
        HEAP[$3]=$26;
        var $27=HEAP[$2];
        var $28=HEAP[$3];
        var $29=HEAP[$28];
        var $30=unSign(($29), 8, 0);
        var $31=_match_class($27, $30);
        var $32=((($31))|0)!=0;
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $33
        var $34=HEAP[$sig];
        HEAP[$1]=$34;
        __label__ = 20; break;
      case 7: // $35
        __label__ = 18; break;
      case 8: // $36
        var $37=HEAP[$3];
        var $38=(($37+1)&4294967295);
        var $39=HEAP[$38];
        var $40=reSign(($39), 8, 0);
        var $41=((($40))|0)==45;
        if ($41) { __label__ = 9; break; } else { __label__ = 14; break; }
      case 9: // $42
        var $43=HEAP[$3];
        var $44=(($43+2)&4294967295);
        var $45=HEAP[$4];
        var $46=((($44))>>>0) < ((($45))>>>0);
        if ($46) { __label__ = 10; break; } else { __label__ = 14; break; }
      case 10: // $47
        var $48=HEAP[$3];
        var $49=(($48+2)&4294967295);
        HEAP[$3]=$49;
        var $50=HEAP[$3];
        var $51=(($50+-2)&4294967295);
        var $52=HEAP[$51];
        var $53=unSign(($52), 8, 0);
        var $54=HEAP[$2];
        var $55=((($53))|0) <= ((($54))|0);
        if ($55) { __label__ = 11; break; } else { __label__ = 13; break; }
      case 11: // $56
        var $57=HEAP[$2];
        var $58=HEAP[$3];
        var $59=HEAP[$58];
        var $60=unSign(($59), 8, 0);
        var $61=((($57))|0) <= ((($60))|0);
        if ($61) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $62
        var $63=HEAP[$sig];
        HEAP[$1]=$63;
        __label__ = 20; break;
      case 13: // $64
        __label__ = 17; break;
      case 14: // $65
        var $66=HEAP[$3];
        var $67=HEAP[$66];
        var $68=unSign(($67), 8, 0);
        var $69=HEAP[$2];
        var $70=((($68))|0)==((($69))|0);
        if ($70) { __label__ = 15; break; } else { __label__ = 16; break; }
      case 15: // $71
        var $72=HEAP[$sig];
        HEAP[$1]=$72;
        __label__ = 20; break;
      case 16: // $73
        __label__ = 17; break;
      case 17: // $74
        __label__ = 18; break;
      case 18: // $75
        __label__ = 3; break;
      case 19: // $76
        var $77=HEAP[$sig];
        var $78=((($77))|0)!=0;
        var $79=($78) ^ 1;
        var $80=unSign(($79), 1, 0);
        HEAP[$1]=$80;
        __label__ = 20; break;
      case 20: // $81
        var $82=HEAP[$1];
        STACKTOP = __stackBase__;
        return $82;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _match_capture($ms, $s, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $len=__stackBase__+16;
        HEAP[$2]=$ms;
        HEAP[$3]=$s;
        HEAP[$4]=$l;
        var $5=HEAP[$2];
        var $6=HEAP[$4];
        var $7=_check_capture($5, $6);
        HEAP[$4]=$7;
        var $8=HEAP[$4];
        var $9=HEAP[$2];
        var $10=(($9+16)&4294967295);
        var $11=(($10+$8*8)&4294967295);
        var $12=(($11+4)&4294967295);
        var $13=HEAP[$12];
        HEAP[$len]=$13;
        var $14=HEAP[$2];
        var $15=(($14+4)&4294967295);
        var $16=HEAP[$15];
        var $17=HEAP[$3];
        var $18=($16);
        var $19=($17);
        var $20=((($18) - ($19))&4294967295);
        var $21=HEAP[$len];
        var $22=((($20))>>>0) >= ((($21))>>>0);
        if ($22) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $23
        var $24=HEAP[$4];
        var $25=HEAP[$2];
        var $26=(($25+16)&4294967295);
        var $27=(($26+$24*8)&4294967295);
        var $28=(($27)&4294967295);
        var $29=HEAP[$28];
        var $30=HEAP[$3];
        var $31=HEAP[$len];
        var $32=_memcmp($29, $30, $31);
        var $33=((($32))|0)==0;
        if ($33) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $34
        var $35=HEAP[$3];
        var $36=HEAP[$len];
        var $37=(($35+$36)&4294967295);
        HEAP[$1]=$37;
        __label__ = 4; break;
      case 3: // $38
        HEAP[$1]=0;
        __label__ = 4; break;
      case 4: // $39
        var $40=HEAP[$1];
        STACKTOP = __stackBase__;
        return $40;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _singlematch($c, $p, $ep) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$2]=$c;
        HEAP[$3]=$p;
        HEAP[$4]=$ep;
        var $5=HEAP[$3];
        var $6=HEAP[$5];
        var $7=reSign(($6), 8, 0);
        if ($7 == 46) {
          __label__ = 1; break;
        }
        else if ($7 == 37) {
          __label__ = 2; break;
        }
        else if ($7 == 91) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $8
        HEAP[$1]=1;
        __label__ = 5; break;
      case 2: // $9
        var $10=HEAP[$2];
        var $11=HEAP[$3];
        var $12=(($11+1)&4294967295);
        var $13=HEAP[$12];
        var $14=unSign(($13), 8, 0);
        var $15=_match_class($10, $14);
        HEAP[$1]=$15;
        __label__ = 5; break;
      case 3: // $16
        var $17=HEAP[$2];
        var $18=HEAP[$3];
        var $19=HEAP[$4];
        var $20=(($19+-1)&4294967295);
        var $21=_matchbracketclass($17, $18, $20);
        HEAP[$1]=$21;
        __label__ = 5; break;
      case 4: // $22
        var $23=HEAP[$3];
        var $24=HEAP[$23];
        var $25=unSign(($24), 8, 0);
        var $26=HEAP[$2];
        var $27=((($25))|0)==((($26))|0);
        var $28=unSign(($27), 1, 0);
        HEAP[$1]=$28;
        __label__ = 5; break;
      case 5: // $29
        var $30=HEAP[$1];
        STACKTOP = __stackBase__;
        return $30;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _max_expand($ms, $s, $p, $ep) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $i=__stackBase__+20;
        var $res=__stackBase__+24;
        HEAP[$2]=$ms;
        HEAP[$3]=$s;
        HEAP[$4]=$p;
        HEAP[$5]=$ep;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$3];
        var $8=HEAP[$i];
        var $9=(($7+$8)&4294967295);
        var $10=HEAP[$2];
        var $11=(($10+4)&4294967295);
        var $12=HEAP[$11];
        var $13=((($9))>>>0) < ((($12))>>>0);
        if ($13) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $14
        var $15=HEAP[$3];
        var $16=HEAP[$i];
        var $17=(($15+$16)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=HEAP[$4];
        var $21=HEAP[$5];
        var $22=_singlematch($19, $20, $21);
        var $23=((($22))|0)!=0;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $24
        var $25=__lastLabel__ == 1 ? 0 : ($23);
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $26
        var $27=HEAP[$i];
        var $28=((($27) + 1)&4294967295);
        HEAP[$i]=$28;
        __label__ = 1; break;
      case 5: // $29
        __label__ = 6; break;
      case 6: // $30
        var $31=HEAP[$i];
        var $32=((($31))|0) >= 0;
        if ($32) { __label__ = 7; break; } else { __label__ = 10; break; }
      case 7: // $33
        var $34=HEAP[$2];
        var $35=HEAP[$3];
        var $36=HEAP[$i];
        var $37=(($35+$36)&4294967295);
        var $38=HEAP[$5];
        var $39=(($38+1)&4294967295);
        var $40=_match($34, $37, $39);
        HEAP[$res]=$40;
        var $41=HEAP[$res];
        var $42=((($41))|0)!=0;
        if ($42) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $43
        var $44=HEAP[$res];
        HEAP[$1]=$44;
        __label__ = 11; break;
      case 9: // $45
        var $46=HEAP[$i];
        var $47=((($46) + -1)&4294967295);
        HEAP[$i]=$47;
        __label__ = 6; break;
      case 10: // $48
        HEAP[$1]=0;
        __label__ = 11; break;
      case 11: // $49
        var $50=HEAP[$1];
        STACKTOP = __stackBase__;
        return $50;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _min_expand($ms, $s, $p, $ep) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $res=__stackBase__+20;
        HEAP[$2]=$ms;
        HEAP[$3]=$s;
        HEAP[$4]=$p;
        HEAP[$5]=$ep;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$2];
        var $8=HEAP[$3];
        var $9=HEAP[$5];
        var $10=(($9+1)&4294967295);
        var $11=_match($7, $8, $10);
        HEAP[$res]=$11;
        var $12=HEAP[$res];
        var $13=((($12))|0)!=0;
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $14
        var $15=HEAP[$res];
        HEAP[$1]=$15;
        __label__ = 9; break;
      case 3: // $16
        var $17=HEAP[$3];
        var $18=HEAP[$2];
        var $19=(($18+4)&4294967295);
        var $20=HEAP[$19];
        var $21=((($17))>>>0) < ((($20))>>>0);
        if ($21) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $22
        var $23=HEAP[$3];
        var $24=HEAP[$23];
        var $25=unSign(($24), 8, 0);
        var $26=HEAP[$4];
        var $27=HEAP[$5];
        var $28=_singlematch($25, $26, $27);
        var $29=((($28))|0)!=0;
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $30
        var $31=HEAP[$3];
        var $32=(($31+1)&4294967295);
        HEAP[$3]=$32;
        __label__ = 7; break;
      case 6: // $33
        HEAP[$1]=0;
        __label__ = 9; break;
      case 7: // $34
        __label__ = 8; break;
      case 8: // $35
        __label__ = 1; break;
      case 9: // $36
        var $37=HEAP[$1];
        STACKTOP = __stackBase__;
        return $37;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _match_class($c, $cl) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $res=__stackBase__+12;
        HEAP[$2]=$c;
        HEAP[$3]=$cl;
        var $4=HEAP[$3];
        var $5=_tolower($4);
        if ($5 == 97) {
          __label__ = 1; break;
        }
        else if ($5 == 99) {
          __label__ = 2; break;
        }
        else if ($5 == 100) {
          __label__ = 3; break;
        }
        else if ($5 == 108) {
          __label__ = 4; break;
        }
        else if ($5 == 112) {
          __label__ = 5; break;
        }
        else if ($5 == 115) {
          __label__ = 6; break;
        }
        else if ($5 == 117) {
          __label__ = 7; break;
        }
        else if ($5 == 119) {
          __label__ = 8; break;
        }
        else if ($5 == 120) {
          __label__ = 9; break;
        }
        else if ($5 == 122) {
          __label__ = 10; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 1: // $6
        var $7=HEAP[$2];
        var $8=___ctype_b_loc();
        var $9=HEAP[$8];
        var $10=(($9+2*$7)&4294967295);
        var $11=HEAP[$10];
        var $12=unSign(($11), 16, 0);
        var $13=($12) & 1024;
        HEAP[$res]=$13;
        __label__ = 12; break;
      case 2: // $14
        var $15=HEAP[$2];
        var $16=___ctype_b_loc();
        var $17=HEAP[$16];
        var $18=(($17+2*$15)&4294967295);
        var $19=HEAP[$18];
        var $20=unSign(($19), 16, 0);
        var $21=($20) & 2;
        HEAP[$res]=$21;
        __label__ = 12; break;
      case 3: // $22
        var $23=HEAP[$2];
        var $24=___ctype_b_loc();
        var $25=HEAP[$24];
        var $26=(($25+2*$23)&4294967295);
        var $27=HEAP[$26];
        var $28=unSign(($27), 16, 0);
        var $29=($28) & 2048;
        HEAP[$res]=$29;
        __label__ = 12; break;
      case 4: // $30
        var $31=HEAP[$2];
        var $32=___ctype_b_loc();
        var $33=HEAP[$32];
        var $34=(($33+2*$31)&4294967295);
        var $35=HEAP[$34];
        var $36=unSign(($35), 16, 0);
        var $37=($36) & 512;
        HEAP[$res]=$37;
        __label__ = 12; break;
      case 5: // $38
        var $39=HEAP[$2];
        var $40=___ctype_b_loc();
        var $41=HEAP[$40];
        var $42=(($41+2*$39)&4294967295);
        var $43=HEAP[$42];
        var $44=unSign(($43), 16, 0);
        var $45=($44) & 4;
        HEAP[$res]=$45;
        __label__ = 12; break;
      case 6: // $46
        var $47=HEAP[$2];
        var $48=___ctype_b_loc();
        var $49=HEAP[$48];
        var $50=(($49+2*$47)&4294967295);
        var $51=HEAP[$50];
        var $52=unSign(($51), 16, 0);
        var $53=($52) & 8192;
        HEAP[$res]=$53;
        __label__ = 12; break;
      case 7: // $54
        var $55=HEAP[$2];
        var $56=___ctype_b_loc();
        var $57=HEAP[$56];
        var $58=(($57+2*$55)&4294967295);
        var $59=HEAP[$58];
        var $60=unSign(($59), 16, 0);
        var $61=($60) & 256;
        HEAP[$res]=$61;
        __label__ = 12; break;
      case 8: // $62
        var $63=HEAP[$2];
        var $64=___ctype_b_loc();
        var $65=HEAP[$64];
        var $66=(($65+2*$63)&4294967295);
        var $67=HEAP[$66];
        var $68=unSign(($67), 16, 0);
        var $69=($68) & 8;
        HEAP[$res]=$69;
        __label__ = 12; break;
      case 9: // $70
        var $71=HEAP[$2];
        var $72=___ctype_b_loc();
        var $73=HEAP[$72];
        var $74=(($73+2*$71)&4294967295);
        var $75=HEAP[$74];
        var $76=unSign(($75), 16, 0);
        var $77=($76) & 4096;
        HEAP[$res]=$77;
        __label__ = 12; break;
      case 10: // $78
        var $79=HEAP[$2];
        var $80=((($79))|0)==0;
        var $81=unSign(($80), 1, 0);
        HEAP[$res]=$81;
        __label__ = 12; break;
      case 11: // $82
        var $83=HEAP[$3];
        var $84=HEAP[$2];
        var $85=((($83))|0)==((($84))|0);
        var $86=unSign(($85), 1, 0);
        HEAP[$1]=$86;
        __label__ = 16; break;
      case 12: // $87
        var $88=HEAP[$3];
        var $89=___ctype_b_loc();
        var $90=HEAP[$89];
        var $91=(($90+2*$88)&4294967295);
        var $92=HEAP[$91];
        var $93=unSign(($92), 16, 0);
        var $94=($93) & 512;
        var $95=((($94))|0)!=0;
        if ($95) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $96
        var $97=HEAP[$res];
        __lastLabel__ = 13; __label__ = 15; break;
      case 14: // $98
        var $99=HEAP[$res];
        var $100=((($99))|0)!=0;
        var $101=($100) ^ 1;
        var $102=unSign(($101), 1, 0);
        __lastLabel__ = 14; __label__ = 15; break;
      case 15: // $103
        var $104=__lastLabel__ == 13 ? $97 : ($102);
        HEAP[$1]=$104;
        __label__ = 16; break;
      case 16: // $105
        var $106=HEAP[$1];
        STACKTOP = __stackBase__;
        return $106;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check_capture($ms, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$ms;
        HEAP[$3]=$l;
        var $4=HEAP[$3];
        var $5=((($4) - 49)&4294967295);
        HEAP[$3]=$5;
        var $6=HEAP[$3];
        var $7=((($6))|0) < 0;
        if ($7) { __label__ = 3; break; } else { __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$3];
        var $10=HEAP[$2];
        var $11=(($10+12)&4294967295);
        var $12=HEAP[$11];
        var $13=((($9))|0) >= ((($12))|0);
        if ($13) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $14
        var $15=HEAP[$3];
        var $16=HEAP[$2];
        var $17=(($16+16)&4294967295);
        var $18=(($17+$15*8)&4294967295);
        var $19=(($18+4)&4294967295);
        var $20=HEAP[$19];
        var $21=((($20))|0)==-1;
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $22
        var $23=HEAP[$2];
        var $24=(($23+8)&4294967295);
        var $25=HEAP[$24];
        var $26=_luaL_error($25, ((__str20531)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$26;
        __label__ = 5; break;
      case 4: // $27
        var $28=HEAP[$3];
        HEAP[$1]=$28;
        __label__ = 5; break;
      case 5: // $29
        var $30=HEAP[$1];
        STACKTOP = __stackBase__;
        return $30;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _capture_to_close($ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $level=__stackBase__+8;
        HEAP[$2]=$ms;
        var $3=HEAP[$2];
        var $4=(($3+12)&4294967295);
        var $5=HEAP[$4];
        HEAP[$level]=$5;
        var $6=HEAP[$level];
        var $7=((($6) + -1)&4294967295);
        HEAP[$level]=$7;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$level];
        var $10=((($9))|0) >= 0;
        if ($10) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $11
        var $12=HEAP[$level];
        var $13=HEAP[$2];
        var $14=(($13+16)&4294967295);
        var $15=(($14+$12*8)&4294967295);
        var $16=(($15+4)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17))|0)==-1;
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $19
        var $20=HEAP[$level];
        HEAP[$1]=$20;
        __label__ = 7; break;
      case 4: // $21
        __label__ = 5; break;
      case 5: // $22
        var $23=HEAP[$level];
        var $24=((($23) + -1)&4294967295);
        HEAP[$level]=$24;
        __label__ = 1; break;
      case 6: // $25
        var $26=HEAP[$2];
        var $27=(($26+8)&4294967295);
        var $28=HEAP[$27];
        var $29=_luaL_error($28, ((__str26537)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$29;
        __label__ = 7; break;
      case 7: // $30
        var $31=HEAP[$1];
        STACKTOP = __stackBase__;
        return $31;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _add_value($ms, $b, $s, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $L=__stackBase__+16;
        var $n=__stackBase__+20;
        HEAP[$1]=$ms;
        HEAP[$2]=$b;
        HEAP[$3]=$s;
        HEAP[$4]=$e;
        var $5=HEAP[$1];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        HEAP[$L]=$7;
        var $8=HEAP[$L];
        var $9=_lua_type($8, 3);
        if ($9 == 3) {
          __label__ = 1; break;
        }
        else if ($9 == 4) {
          __label__ = 1; break;
        }
        else if ($9 == 6) {
          __label__ = 2; break;
        }
        else if ($9 == 5) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$2];
        var $13=HEAP[$3];
        var $14=HEAP[$4];
        _add_s($11, $12, $13, $14);
        __label__ = 10; break;
      case 2: // $15
        var $16=HEAP[$L];
        _lua_pushvalue($16, 3);
        var $17=HEAP[$1];
        var $18=HEAP[$3];
        var $19=HEAP[$4];
        var $20=_push_captures($17, $18, $19);
        HEAP[$n]=$20;
        var $21=HEAP[$L];
        var $22=HEAP[$n];
        _lua_call($21, $22, 1);
        __label__ = 4; break;
      case 3: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$3];
        var $26=HEAP[$4];
        _push_onecapture($24, 0, $25, $26);
        var $27=HEAP[$L];
        _lua_gettable($27, 3);
        __label__ = 4; break;
      case 4: // $28
        var $29=HEAP[$L];
        var $30=_lua_toboolean($29, -1);
        var $31=((($30))|0)!=0;
        if ($31) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $32
        var $33=HEAP[$L];
        _lua_settop($33, -2);
        var $34=HEAP[$L];
        var $35=HEAP[$3];
        var $36=HEAP[$4];
        var $37=HEAP[$3];
        var $38=($36);
        var $39=($37);
        var $40=((($38) - ($39))&4294967295);
        _lua_pushlstring($34, $35, $40);
        __label__ = 9; break;
      case 6: // $41
        var $42=HEAP[$L];
        var $43=_lua_isstring($42, -1);
        var $44=((($43))|0)!=0;
        if ($44) { __label__ = 8; break; } else { __label__ = 7; break; }
      case 7: // $45
        var $46=HEAP[$L];
        var $47=HEAP[$L];
        var $48=HEAP[$L];
        var $49=_lua_type($48, -1);
        var $50=_lua_typename($47, $49);
        var $51=_luaL_error($46, ((__str28539)&4294967295), allocate([$50,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 8; break;
      case 8: // $52
        __label__ = 9; break;
      case 9: // $53
        var $54=HEAP[$2];
        _luaL_addvalue($54);
        __label__ = 10; break;
      case 10: // $55
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _add_s($ms, $b, $s, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $l=__stackBase__+16;
        var $i=__stackBase__+20;
        var $news=__stackBase__+24;
        HEAP[$1]=$ms;
        HEAP[$2]=$b;
        HEAP[$3]=$s;
        HEAP[$4]=$e;
        var $5=HEAP[$1];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        var $8=_lua_tolstring($7, 3, $l);
        HEAP[$news]=$8;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $9
        var $10=HEAP[$i];
        var $11=HEAP[$l];
        var $12=((($10))>>>0) < ((($11))>>>0);
        if ($12) { __label__ = 2; break; } else { __label__ = 17; break; }
      case 2: // $13
        var $14=HEAP[$i];
        var $15=HEAP[$news];
        var $16=(($15+$14)&4294967295);
        var $17=HEAP[$16];
        var $18=reSign(($17), 8, 0);
        var $19=((($18))|0)!=37;
        if ($19) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $20
        var $21=HEAP[$2];
        var $22=(($21)&4294967295);
        var $23=HEAP[$22];
        var $24=HEAP[$2];
        var $25=(($24+12)&4294967295);
        var $26=(($25)&4294967295);
        var $27=(($26+8192)&4294967295);
        var $28=((($23))>>>0) < ((($27))>>>0);
        if ($28) { __lastLabel__ = 3; __label__ = 5; break; } else { __lastLabel__ = 3; __label__ = 4; break; }
      case 4: // $29
        var $30=HEAP[$2];
        var $31=_luaL_prepbuffer($30);
        var $32=((($31))|0)!=0;
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $33
        var $34=__lastLabel__ == 3 ? 1 : ($32);
        var $35=unSign(($34), 1, 0);
        var $36=HEAP[$i];
        var $37=HEAP[$news];
        var $38=(($37+$36)&4294967295);
        var $39=HEAP[$38];
        var $40=HEAP[$2];
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+1)&4294967295);
        HEAP[$41]=$43;
        HEAP[$42]=$39;
        __label__ = 15; break;
      case 6: // $44
        var $45=HEAP[$i];
        var $46=((($45) + 1)&4294967295);
        HEAP[$i]=$46;
        var $47=HEAP[$i];
        var $48=HEAP[$news];
        var $49=(($48+$47)&4294967295);
        var $50=HEAP[$49];
        var $51=unSign(($50), 8, 0);
        var $52=___ctype_b_loc();
        var $53=HEAP[$52];
        var $54=(($53+2*$51)&4294967295);
        var $55=HEAP[$54];
        var $56=unSign(($55), 16, 0);
        var $57=($56) & 2048;
        var $58=((($57))|0)!=0;
        if ($58) { __label__ = 10; break; } else { __label__ = 7; break; }
      case 7: // $59
        var $60=HEAP[$2];
        var $61=(($60)&4294967295);
        var $62=HEAP[$61];
        var $63=HEAP[$2];
        var $64=(($63+12)&4294967295);
        var $65=(($64)&4294967295);
        var $66=(($65+8192)&4294967295);
        var $67=((($62))>>>0) < ((($66))>>>0);
        if ($67) { __lastLabel__ = 7; __label__ = 9; break; } else { __lastLabel__ = 7; __label__ = 8; break; }
      case 8: // $68
        var $69=HEAP[$2];
        var $70=_luaL_prepbuffer($69);
        var $71=((($70))|0)!=0;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $72
        var $73=__lastLabel__ == 7 ? 1 : ($71);
        var $74=unSign(($73), 1, 0);
        var $75=HEAP[$i];
        var $76=HEAP[$news];
        var $77=(($76+$75)&4294967295);
        var $78=HEAP[$77];
        var $79=HEAP[$2];
        var $80=(($79)&4294967295);
        var $81=HEAP[$80];
        var $82=(($81+1)&4294967295);
        HEAP[$80]=$82;
        HEAP[$81]=$78;
        __label__ = 14; break;
      case 10: // $83
        var $84=HEAP[$i];
        var $85=HEAP[$news];
        var $86=(($85+$84)&4294967295);
        var $87=HEAP[$86];
        var $88=reSign(($87), 8, 0);
        var $89=((($88))|0)==48;
        if ($89) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $90
        var $91=HEAP[$2];
        var $92=HEAP[$3];
        var $93=HEAP[$4];
        var $94=HEAP[$3];
        var $95=($93);
        var $96=($94);
        var $97=((($95) - ($96))&4294967295);
        _luaL_addlstring($91, $92, $97);
        __label__ = 13; break;
      case 12: // $98
        var $99=HEAP[$1];
        var $100=HEAP[$i];
        var $101=HEAP[$news];
        var $102=(($101+$100)&4294967295);
        var $103=HEAP[$102];
        var $104=reSign(($103), 8, 0);
        var $105=((($104) - 49)&4294967295);
        var $106=HEAP[$3];
        var $107=HEAP[$4];
        _push_onecapture($99, $105, $106, $107);
        var $108=HEAP[$2];
        _luaL_addvalue($108);
        __label__ = 13; break;
      case 13: // $109
        __label__ = 14; break;
      case 14: // $110
        __label__ = 15; break;
      case 15: // $111
        __label__ = 16; break;
      case 16: // $112
        var $113=HEAP[$i];
        var $114=((($113) + 1)&4294967295);
        HEAP[$i]=$114;
        __label__ = 1; break;
      case 17: // $115
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _gmatch_aux($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 304; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 304);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $ms=__stackBase__+8;
        var $ls=__stackBase__+280;
        var $s=__stackBase__+284;
        var $p=__stackBase__+288;
        var $src=__stackBase__+292;
        var $e=__stackBase__+296;
        var $newstart=__stackBase__+300;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_lua_tolstring($3, -10003, $ls);
        HEAP[$s]=$4;
        var $5=HEAP[$2];
        var $6=_lua_tolstring($5, -10004, 0);
        HEAP[$p]=$6;
        var $7=HEAP[$2];
        var $8=(($ms+8)&4294967295);
        HEAP[$8]=$7;
        var $9=HEAP[$s];
        var $10=(($ms)&4294967295);
        HEAP[$10]=$9;
        var $11=HEAP[$s];
        var $12=HEAP[$ls];
        var $13=(($11+$12)&4294967295);
        var $14=(($ms+4)&4294967295);
        HEAP[$14]=$13;
        var $15=HEAP[$s];
        var $16=HEAP[$2];
        var $17=_lua_tointeger($16, -10005);
        var $18=(($15+$17)&4294967295);
        HEAP[$src]=$18;
        __label__ = 1; break;
      case 1: // $19
        var $20=HEAP[$src];
        var $21=(($ms+4)&4294967295);
        var $22=HEAP[$21];
        var $23=((($20))>>>0) <= ((($22))>>>0);
        if ($23) { __label__ = 2; break; } else { __label__ = 8; break; }
      case 2: // $24
        var $25=(($ms+12)&4294967295);
        HEAP[$25]=0;
        var $26=HEAP[$src];
        var $27=HEAP[$p];
        var $28=_match($ms, $26, $27);
        HEAP[$e]=$28;
        var $29=((($28))|0)!=0;
        if ($29) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $30
        var $31=HEAP[$e];
        var $32=HEAP[$s];
        var $33=($31);
        var $34=($32);
        var $35=((($33) - ($34))&4294967295);
        HEAP[$newstart]=$35;
        var $36=HEAP[$e];
        var $37=HEAP[$src];
        var $38=((($36))|0)==((($37))|0);
        if ($38) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $39
        var $40=HEAP[$newstart];
        var $41=((($40) + 1)&4294967295);
        HEAP[$newstart]=$41;
        __label__ = 5; break;
      case 5: // $42
        var $43=HEAP[$2];
        var $44=HEAP[$newstart];
        _lua_pushinteger($43, $44);
        var $45=HEAP[$2];
        _lua_replace($45, -10005);
        var $46=HEAP[$src];
        var $47=HEAP[$e];
        var $48=_push_captures($ms, $46, $47);
        HEAP[$1]=$48;
        __label__ = 9; break;
      case 6: // $49
        __label__ = 7; break;
      case 7: // $50
        var $51=HEAP[$src];
        var $52=(($51+1)&4294967295);
        HEAP[$src]=$52;
        __label__ = 1; break;
      case 8: // $53
        HEAP[$1]=0;
        __label__ = 9; break;
      case 9: // $54
        var $55=HEAP[$1];
        STACKTOP = __stackBase__;
        return $55;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _scanformat($L, $strfrmt, $form) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $p=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$strfrmt;
        HEAP[$3]=$form;
        var $4=HEAP[$2];
        HEAP[$p]=$4;
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$p];
        var $7=HEAP[$6];
        var $8=reSign(($7), 8, 0);
        var $9=((($8))|0)!=0;
        if ($9) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $10
        var $11=HEAP[$p];
        var $12=HEAP[$11];
        var $13=reSign(($12), 8, 0);
        var $14=_strchr(((__str34545)&4294967295), $13);
        var $15=((($14))|0)!=0;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $16
        var $17=__lastLabel__ == 1 ? 0 : ($15);
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $18
        var $19=HEAP[$p];
        var $20=(($19+1)&4294967295);
        HEAP[$p]=$20;
        __label__ = 1; break;
      case 5: // $21
        var $22=HEAP[$p];
        var $23=HEAP[$2];
        var $24=($22);
        var $25=($23);
        var $26=((($24) - ($25))&4294967295);
        var $27=((($26))>>>0) >= 6;
        if ($27) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $28
        var $29=HEAP[$1];
        var $30=_luaL_error($29, ((__str35546)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 7; break;
      case 7: // $31
        var $32=HEAP[$p];
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=___ctype_b_loc();
        var $36=HEAP[$35];
        var $37=(($36+2*$34)&4294967295);
        var $38=HEAP[$37];
        var $39=unSign(($38), 16, 0);
        var $40=($39) & 2048;
        var $41=((($40))|0)!=0;
        if ($41) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $42
        var $43=HEAP[$p];
        var $44=(($43+1)&4294967295);
        HEAP[$p]=$44;
        __label__ = 9; break;
      case 9: // $45
        var $46=HEAP[$p];
        var $47=HEAP[$46];
        var $48=unSign(($47), 8, 0);
        var $49=___ctype_b_loc();
        var $50=HEAP[$49];
        var $51=(($50+2*$48)&4294967295);
        var $52=HEAP[$51];
        var $53=unSign(($52), 16, 0);
        var $54=($53) & 2048;
        var $55=((($54))|0)!=0;
        if ($55) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $56
        var $57=HEAP[$p];
        var $58=(($57+1)&4294967295);
        HEAP[$p]=$58;
        __label__ = 11; break;
      case 11: // $59
        var $60=HEAP[$p];
        var $61=HEAP[$60];
        var $62=reSign(($61), 8, 0);
        var $63=((($62))|0)==46;
        if ($63) { __label__ = 12; break; } else { __label__ = 17; break; }
      case 12: // $64
        var $65=HEAP[$p];
        var $66=(($65+1)&4294967295);
        HEAP[$p]=$66;
        var $67=HEAP[$p];
        var $68=HEAP[$67];
        var $69=unSign(($68), 8, 0);
        var $70=___ctype_b_loc();
        var $71=HEAP[$70];
        var $72=(($71+2*$69)&4294967295);
        var $73=HEAP[$72];
        var $74=unSign(($73), 16, 0);
        var $75=($74) & 2048;
        var $76=((($75))|0)!=0;
        if ($76) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $77
        var $78=HEAP[$p];
        var $79=(($78+1)&4294967295);
        HEAP[$p]=$79;
        __label__ = 14; break;
      case 14: // $80
        var $81=HEAP[$p];
        var $82=HEAP[$81];
        var $83=unSign(($82), 8, 0);
        var $84=___ctype_b_loc();
        var $85=HEAP[$84];
        var $86=(($85+2*$83)&4294967295);
        var $87=HEAP[$86];
        var $88=unSign(($87), 16, 0);
        var $89=($88) & 2048;
        var $90=((($89))|0)!=0;
        if ($90) { __label__ = 15; break; } else { __label__ = 16; break; }
      case 15: // $91
        var $92=HEAP[$p];
        var $93=(($92+1)&4294967295);
        HEAP[$p]=$93;
        __label__ = 16; break;
      case 16: // $94
        __label__ = 17; break;
      case 17: // $95
        var $96=HEAP[$p];
        var $97=HEAP[$96];
        var $98=unSign(($97), 8, 0);
        var $99=___ctype_b_loc();
        var $100=HEAP[$99];
        var $101=(($100+2*$98)&4294967295);
        var $102=HEAP[$101];
        var $103=unSign(($102), 16, 0);
        var $104=($103) & 2048;
        var $105=((($104))|0)!=0;
        if ($105) { __label__ = 18; break; } else { __label__ = 19; break; }
      case 18: // $106
        var $107=HEAP[$1];
        var $108=_luaL_error($107, ((__str36547)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 19; break;
      case 19: // $109
        var $110=HEAP[$3];
        var $111=(($110+1)&4294967295);
        HEAP[$3]=$111;
        HEAP[$110]=37;
        var $112=HEAP[$3];
        var $113=HEAP[$2];
        var $114=HEAP[$p];
        var $115=HEAP[$2];
        var $116=($114);
        var $117=($115);
        var $118=((($116) - ($117))&4294967295);
        var $119=((($118) + 1)&4294967295);
        var $120=_strncpy($112, $113, $119);
        var $121=HEAP[$p];
        var $122=HEAP[$2];
        var $123=($121);
        var $124=($122);
        var $125=((($123) - ($124))&4294967295);
        var $126=((($125) + 1)&4294967295);
        var $127=HEAP[$3];
        var $128=(($127+$126)&4294967295);
        HEAP[$3]=$128;
        var $129=HEAP[$3];
        HEAP[$129]=0;
        var $130=HEAP[$p];
        STACKTOP = __stackBase__;
        return $130;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _addintlen($form) {
    var __stackBase__  = STACKTOP; STACKTOP += 9; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 9);
    var __label__;
  
    var $1=__stackBase__;
    var $l=__stackBase__+4;
    var $spec=__stackBase__+8;
    HEAP[$1]=$form;
    var $2=HEAP[$1];
    var $3=_strlen($2);
    HEAP[$l]=$3;
    var $4=HEAP[$l];
    var $5=((($4) - 1)&4294967295);
    var $6=HEAP[$1];
    var $7=(($6+$5)&4294967295);
    var $8=HEAP[$7];
    HEAP[$spec]=$8;
    var $9=HEAP[$1];
    var $10=HEAP[$l];
    var $11=(($9+$10)&4294967295);
    var $12=(($11+-1)&4294967295);
    var $13=_strcpy($12, ((__str33544)&4294967295));
    var $14=HEAP[$spec];
    var $15=HEAP[$l];
    var $16=((($15) + 2)&4294967295);
    var $17=((($16) - 2)&4294967295);
    var $18=HEAP[$1];
    var $19=(($18+$17)&4294967295);
    HEAP[$19]=$14;
    var $20=HEAP[$l];
    var $21=((($20) + 2)&4294967295);
    var $22=((($21) - 1)&4294967295);
    var $23=HEAP[$1];
    var $24=(($23+$22)&4294967295);
    HEAP[$24]=0;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _addquoted($L, $b, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $l=__stackBase__+12;
        var $s=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$b;
        HEAP[$3]=$arg;
        var $4=HEAP[$1];
        var $5=HEAP[$3];
        var $6=_luaL_checklstring($4, $5, $l);
        HEAP[$s]=$6;
        var $7=HEAP[$2];
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=HEAP[$2];
        var $11=(($10+12)&4294967295);
        var $12=(($11)&4294967295);
        var $13=(($12+8192)&4294967295);
        var $14=((($9))>>>0) < ((($13))>>>0);
        if ($14) { __lastLabel__ = 0; __label__ = 2; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $15
        var $16=HEAP[$2];
        var $17=_luaL_prepbuffer($16);
        var $18=((($17))|0)!=0;
        __lastLabel__ = 1; __label__ = 2; break;
      case 2: // $19
        var $20=__lastLabel__ == 0 ? 1 : ($18);
        var $21=unSign(($20), 1, 0);
        var $22=HEAP[$2];
        var $23=(($22)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+1)&4294967295);
        HEAP[$23]=$25;
        HEAP[$24]=34;
        __label__ = 3; break;
      case 3: // $26
        var $27=HEAP[$l];
        var $28=((($27) + -1)&4294967295);
        HEAP[$l]=$28;
        var $29=((($27))|0)!=0;
        if ($29) { __label__ = 4; break; } else { __label__ = 16; break; }
      case 4: // $30
        var $31=HEAP[$s];
        var $32=HEAP[$31];
        var $33=reSign(($32), 8, 0);
        if ($33 == 34) {
          __label__ = 5; break;
        }
        else if ($33 == 92) {
          __label__ = 5; break;
        }
        else if ($33 == 10) {
          __label__ = 5; break;
        }
        else if ($33 == 13) {
          __label__ = 10; break;
        }
        else if ($33 == 0) {
          __label__ = 11; break;
        }
        else {
        __label__ = 12; break;
        }
        
      case 5: // $34
        var $35=HEAP[$2];
        var $36=(($35)&4294967295);
        var $37=HEAP[$36];
        var $38=HEAP[$2];
        var $39=(($38+12)&4294967295);
        var $40=(($39)&4294967295);
        var $41=(($40+8192)&4294967295);
        var $42=((($37))>>>0) < ((($41))>>>0);
        if ($42) { __lastLabel__ = 5; __label__ = 7; break; } else { __lastLabel__ = 5; __label__ = 6; break; }
      case 6: // $43
        var $44=HEAP[$2];
        var $45=_luaL_prepbuffer($44);
        var $46=((($45))|0)!=0;
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $47
        var $48=__lastLabel__ == 5 ? 1 : ($46);
        var $49=unSign(($48), 1, 0);
        var $50=HEAP[$2];
        var $51=(($50)&4294967295);
        var $52=HEAP[$51];
        var $53=(($52+1)&4294967295);
        HEAP[$51]=$53;
        HEAP[$52]=92;
        var $54=HEAP[$2];
        var $55=(($54)&4294967295);
        var $56=HEAP[$55];
        var $57=HEAP[$2];
        var $58=(($57+12)&4294967295);
        var $59=(($58)&4294967295);
        var $60=(($59+8192)&4294967295);
        var $61=((($56))>>>0) < ((($60))>>>0);
        if ($61) { __lastLabel__ = 7; __label__ = 9; break; } else { __lastLabel__ = 7; __label__ = 8; break; }
      case 8: // $62
        var $63=HEAP[$2];
        var $64=_luaL_prepbuffer($63);
        var $65=((($64))|0)!=0;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $66
        var $67=__lastLabel__ == 7 ? 1 : ($65);
        var $68=unSign(($67), 1, 0);
        var $69=HEAP[$s];
        var $70=HEAP[$69];
        var $71=HEAP[$2];
        var $72=(($71)&4294967295);
        var $73=HEAP[$72];
        var $74=(($73+1)&4294967295);
        HEAP[$72]=$74;
        HEAP[$73]=$70;
        __label__ = 15; break;
      case 10: // $75
        var $76=HEAP[$2];
        _luaL_addlstring($76, ((__str31542)&4294967295), 2);
        __label__ = 15; break;
      case 11: // $77
        var $78=HEAP[$2];
        _luaL_addlstring($78, ((__str32543)&4294967295), 4);
        __label__ = 15; break;
      case 12: // $79
        var $80=HEAP[$2];
        var $81=(($80)&4294967295);
        var $82=HEAP[$81];
        var $83=HEAP[$2];
        var $84=(($83+12)&4294967295);
        var $85=(($84)&4294967295);
        var $86=(($85+8192)&4294967295);
        var $87=((($82))>>>0) < ((($86))>>>0);
        if ($87) { __lastLabel__ = 12; __label__ = 14; break; } else { __lastLabel__ = 12; __label__ = 13; break; }
      case 13: // $88
        var $89=HEAP[$2];
        var $90=_luaL_prepbuffer($89);
        var $91=((($90))|0)!=0;
        __lastLabel__ = 13; __label__ = 14; break;
      case 14: // $92
        var $93=__lastLabel__ == 12 ? 1 : ($91);
        var $94=unSign(($93), 1, 0);
        var $95=HEAP[$s];
        var $96=HEAP[$95];
        var $97=HEAP[$2];
        var $98=(($97)&4294967295);
        var $99=HEAP[$98];
        var $100=(($99+1)&4294967295);
        HEAP[$98]=$100;
        HEAP[$99]=$96;
        __label__ = 15; break;
      case 15: // $101
        var $102=HEAP[$s];
        var $103=(($102+1)&4294967295);
        HEAP[$s]=$103;
        __label__ = 3; break;
      case 16: // $104
        var $105=HEAP[$2];
        var $106=(($105)&4294967295);
        var $107=HEAP[$106];
        var $108=HEAP[$2];
        var $109=(($108+12)&4294967295);
        var $110=(($109)&4294967295);
        var $111=(($110+8192)&4294967295);
        var $112=((($107))>>>0) < ((($111))>>>0);
        if ($112) { __lastLabel__ = 16; __label__ = 18; break; } else { __lastLabel__ = 16; __label__ = 17; break; }
      case 17: // $113
        var $114=HEAP[$2];
        var $115=_luaL_prepbuffer($114);
        var $116=((($115))|0)!=0;
        __lastLabel__ = 17; __label__ = 18; break;
      case 18: // $117
        var $118=__lastLabel__ == 16 ? 1 : ($116);
        var $119=unSign(($118), 1, 0);
        var $120=HEAP[$2];
        var $121=(($120)&4294967295);
        var $122=HEAP[$121];
        var $123=(($122+1)&4294967295);
        HEAP[$121]=$123;
        HEAP[$122]=34;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _writer($L, $b, $size, $B) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$b;
    HEAP[$3]=$size;
    HEAP[$4]=$B;
    var $5=HEAP[$1];
    var $6=HEAP[$4];
    var $7=$6;
    var $8=HEAP[$2];
    var $9=HEAP[$3];
    _luaL_addlstring($7, $8, $9);
    STACKTOP = __stackBase__;
    return 0;
  }
  

  function _luaH_next($L, $t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        var $i_o=__stackBase__+20;
        var $o2=__stackBase__+24;
        var $o1=__stackBase__+28;
        var $o21=__stackBase__+32;
        var $o12=__stackBase__+36;
        var $o23=__stackBase__+40;
        var $o14=__stackBase__+44;
        HEAP[$2]=$L;
        HEAP[$3]=$t;
        HEAP[$4]=$key;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=HEAP[$4];
        var $8=_findindex($5, $6, $7);
        HEAP[$i]=$8;
        var $9=HEAP[$i];
        var $10=((($9) + 1)&4294967295);
        HEAP[$i]=$10;
        __label__ = 1; break;
      case 1: // $11
        var $12=HEAP[$i];
        var $13=HEAP[$3];
        var $14=(($13+28)&4294967295);
        var $15=HEAP[$14];
        var $16=((($12))|0) < ((($15))|0);
        if ($16) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $17
        var $18=HEAP[$i];
        var $19=HEAP[$3];
        var $20=(($19+12)&4294967295);
        var $21=HEAP[$20];
        var $22=(($21+12*$18)&4294967295);
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=((($24))|0)==0;
        if ($25) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $26
        var $27=HEAP[$4];
        HEAP[$i_o]=$27;
        var $28=HEAP[$i];
        var $29=((($28) + 1)&4294967295);
        var $30=((($29))|0);
        var $31=HEAP[$i_o];
        var $32=(($31)&4294967295);
        var $33=$32;
        HEAP[$33]=$30;
        var $34=HEAP[$i_o];
        var $35=(($34+8)&4294967295);
        HEAP[$35]=3;
        var $36=HEAP[$i];
        var $37=HEAP[$3];
        var $38=(($37+12)&4294967295);
        var $39=HEAP[$38];
        var $40=(($39+12*$36)&4294967295);
        HEAP[$o2]=$40;
        var $41=HEAP[$4];
        var $42=(($41+12)&4294967295);
        HEAP[$o1]=$42;
        var $43=HEAP[$o1];
        var $44=(($43)&4294967295);
        var $45=HEAP[$o2];
        var $46=(($45)&4294967295);
        var $47=$44;
        var $48=$46;
        _llvm_memcpy_p0i8_p0i8_i32($47, $48, 8, 4, 0);
        var $49=HEAP[$o2];
        var $50=(($49+8)&4294967295);
        var $51=HEAP[$50];
        var $52=HEAP[$o1];
        var $53=(($52+8)&4294967295);
        HEAP[$53]=$51;
        HEAP[$1]=1;
        __label__ = 13; break;
      case 4: // $54
        __label__ = 5; break;
      case 5: // $55
        var $56=HEAP[$i];
        var $57=((($56) + 1)&4294967295);
        HEAP[$i]=$57;
        __label__ = 1; break;
      case 6: // $58
        var $59=HEAP[$3];
        var $60=(($59+28)&4294967295);
        var $61=HEAP[$60];
        var $62=HEAP[$i];
        var $63=((($62) - ($61))&4294967295);
        HEAP[$i]=$63;
        __label__ = 7; break;
      case 7: // $64
        var $65=HEAP[$i];
        var $66=HEAP[$3];
        var $67=(($66+7)&4294967295);
        var $68=HEAP[$67];
        var $69=unSign(($68), 8, 0);
        var $70=1 << ($69);
        var $71=((($65))|0) < ((($70))|0);
        if ($71) { __label__ = 8; break; } else { __label__ = 12; break; }
      case 8: // $72
        var $73=HEAP[$i];
        var $74=HEAP[$3];
        var $75=(($74+16)&4294967295);
        var $76=HEAP[$75];
        var $77=(($76+28*$73)&4294967295);
        var $78=(($77)&4294967295);
        var $79=(($78+8)&4294967295);
        var $80=HEAP[$79];
        var $81=((($80))|0)==0;
        if ($81) { __label__ = 10; break; } else { __label__ = 9; break; }
      case 9: // $82
        var $83=HEAP[$i];
        var $84=HEAP[$3];
        var $85=(($84+16)&4294967295);
        var $86=HEAP[$85];
        var $87=(($86+28*$83)&4294967295);
        var $88=(($87+12)&4294967295);
        var $89=$88;
        HEAP[$o21]=$89;
        var $90=HEAP[$4];
        HEAP[$o12]=$90;
        var $91=HEAP[$o12];
        var $92=(($91)&4294967295);
        var $93=HEAP[$o21];
        var $94=(($93)&4294967295);
        var $95=$92;
        var $96=$94;
        _llvm_memcpy_p0i8_p0i8_i32($95, $96, 8, 4, 0);
        var $97=HEAP[$o21];
        var $98=(($97+8)&4294967295);
        var $99=HEAP[$98];
        var $100=HEAP[$o12];
        var $101=(($100+8)&4294967295);
        HEAP[$101]=$99;
        var $102=HEAP[$i];
        var $103=HEAP[$3];
        var $104=(($103+16)&4294967295);
        var $105=HEAP[$104];
        var $106=(($105+28*$102)&4294967295);
        var $107=(($106)&4294967295);
        HEAP[$o23]=$107;
        var $108=HEAP[$4];
        var $109=(($108+12)&4294967295);
        HEAP[$o14]=$109;
        var $110=HEAP[$o14];
        var $111=(($110)&4294967295);
        var $112=HEAP[$o23];
        var $113=(($112)&4294967295);
        var $114=$111;
        var $115=$113;
        _llvm_memcpy_p0i8_p0i8_i32($114, $115, 8, 4, 0);
        var $116=HEAP[$o23];
        var $117=(($116+8)&4294967295);
        var $118=HEAP[$117];
        var $119=HEAP[$o14];
        var $120=(($119+8)&4294967295);
        HEAP[$120]=$118;
        HEAP[$1]=1;
        __label__ = 13; break;
      case 10: // $121
        __label__ = 11; break;
      case 11: // $122
        var $123=HEAP[$i];
        var $124=((($123) + 1)&4294967295);
        HEAP[$i]=$124;
        __label__ = 7; break;
      case 12: // $125
        HEAP[$1]=0;
        __label__ = 13; break;
      case 13: // $126
        var $127=HEAP[$1];
        STACKTOP = __stackBase__;
        return $127;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _findindex($L, $t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        var $n=__stackBase__+20;
        HEAP[$2]=$L;
        HEAP[$3]=$t;
        HEAP[$4]=$key;
        var $5=HEAP[$4];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        var $8=((($7))|0)==0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        HEAP[$1]=-1;
        __label__ = 15; break;
      case 2: // $10
        var $11=HEAP[$4];
        var $12=_arrayindex($11);
        HEAP[$i]=$12;
        var $13=HEAP[$i];
        var $14=0 < ((($13))|0);
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $15
        var $16=HEAP[$i];
        var $17=HEAP[$3];
        var $18=(($17+28)&4294967295);
        var $19=HEAP[$18];
        var $20=((($16))|0) <= ((($19))|0);
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $21
        var $22=HEAP[$i];
        var $23=((($22) - 1)&4294967295);
        HEAP[$1]=$23;
        __label__ = 15; break;
      case 5: // $24
        var $25=HEAP[$3];
        var $26=HEAP[$4];
        var $27=_mainposition($25, $26);
        HEAP[$n]=$27;
        __label__ = 6; break;
      case 6: // $28
        var $29=HEAP[$n];
        var $30=(($29+12)&4294967295);
        var $31=$30;
        var $32=HEAP[$4];
        var $33=_luaO_rawequalObj($31, $32);
        var $34=((($33))|0)!=0;
        if ($34) { __label__ = 10; break; } else { __label__ = 7; break; }
      case 7: // $35
        var $36=HEAP[$n];
        var $37=(($36+12)&4294967295);
        var $38=$37;
        var $39=(($38+8)&4294967295);
        var $40=HEAP[$39];
        var $41=((($40))|0)==11;
        if ($41) { __label__ = 8; break; } else { __label__ = 11; break; }
      case 8: // $42
        var $43=HEAP[$4];
        var $44=(($43+8)&4294967295);
        var $45=HEAP[$44];
        var $46=((($45))|0) >= 4;
        if ($46) { __label__ = 9; break; } else { __label__ = 11; break; }
      case 9: // $47
        var $48=HEAP[$n];
        var $49=(($48+12)&4294967295);
        var $50=$49;
        var $51=(($50)&4294967295);
        var $52=$51;
        var $53=HEAP[$52];
        var $54=HEAP[$4];
        var $55=(($54)&4294967295);
        var $56=$55;
        var $57=HEAP[$56];
        var $58=((($53))|0)==((($57))|0);
        if ($58) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $59
        var $60=HEAP[$n];
        var $61=HEAP[$3];
        var $62=(($61+16)&4294967295);
        var $63=HEAP[$62];
        var $64=(($63)&4294967295);
        var $65=($60);
        var $66=($64);
        var $67=((($65) - ($66))&4294967295);
        var $68=((((($67))|0)/28)|0);
        HEAP[$i]=$68;
        var $69=HEAP[$i];
        var $70=HEAP[$3];
        var $71=(($70+28)&4294967295);
        var $72=HEAP[$71];
        var $73=((($69) + ($72))&4294967295);
        HEAP[$1]=$73;
        __label__ = 15; break;
      case 11: // $74
        var $75=HEAP[$n];
        var $76=(($75+12)&4294967295);
        var $77=$76;
        var $78=(($77+12)&4294967295);
        var $79=HEAP[$78];
        HEAP[$n]=$79;
        __label__ = 12; break;
      case 12: // $80
        __label__ = 13; break;
      case 13: // $81
        var $82=HEAP[$n];
        var $83=((($82))|0)!=0;
        if ($83) { __label__ = 6; break; } else { __label__ = 14; break; }
      case 14: // $84
        var $85=HEAP[$2];
        _luaG_runerror($85, ((__str3555)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=0;
        __label__ = 15; break;
      case 15: // $86
        var $87=HEAP[$1];
        STACKTOP = __stackBase__;
        return $87;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_resizearray($L, $t, $nasize) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $nsize=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        HEAP[$3]=$nasize;
        var $4=HEAP[$2];
        var $5=(($4+16)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==(((_dummynode_))|0);
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $9
        var $10=HEAP[$2];
        var $11=(($10+7)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=1 << ($13);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $15
        var $16=__lastLabel__ == 1 ? 0 : ($14);
        HEAP[$nsize]=$16;
        var $17=HEAP[$1];
        var $18=HEAP[$2];
        var $19=HEAP[$3];
        var $20=HEAP[$nsize];
        _resize($17, $18, $19, $20);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _resize($L, $t, $nasize, $nhsize) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        var $oldasize=__stackBase__+20;
        var $oldhsize=__stackBase__+24;
        var $nold=__stackBase__+28;
        var $o2=__stackBase__+32;
        var $o1=__stackBase__+36;
        var $old=__stackBase__+40;
        var $o21=__stackBase__+44;
        var $o12=__stackBase__+48;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        HEAP[$3]=$nasize;
        HEAP[$4]=$nhsize;
        var $5=HEAP[$2];
        var $6=(($5+28)&4294967295);
        var $7=HEAP[$6];
        HEAP[$oldasize]=$7;
        var $8=HEAP[$2];
        var $9=(($8+7)&4294967295);
        var $10=HEAP[$9];
        var $11=unSign(($10), 8, 0);
        HEAP[$oldhsize]=$11;
        var $12=HEAP[$2];
        var $13=(($12+16)&4294967295);
        var $14=HEAP[$13];
        HEAP[$nold]=$14;
        var $15=HEAP[$3];
        var $16=HEAP[$oldasize];
        var $17=((($15))|0) > ((($16))|0);
        if ($17) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $18
        var $19=HEAP[$1];
        var $20=HEAP[$2];
        var $21=HEAP[$3];
        _setarrayvector($19, $20, $21);
        __label__ = 2; break;
      case 2: // $22
        var $23=HEAP[$1];
        var $24=HEAP[$2];
        var $25=HEAP[$4];
        _setnodevector($23, $24, $25);
        var $26=HEAP[$3];
        var $27=HEAP[$oldasize];
        var $28=((($26))|0) < ((($27))|0);
        if ($28) { __label__ = 3; break; } else { __label__ = 13; break; }
      case 3: // $29
        var $30=HEAP[$3];
        var $31=HEAP[$2];
        var $32=(($31+28)&4294967295);
        HEAP[$32]=$30;
        var $33=HEAP[$3];
        HEAP[$i]=$33;
        __label__ = 4; break;
      case 4: // $34
        var $35=HEAP[$i];
        var $36=HEAP[$oldasize];
        var $37=((($35))|0) < ((($36))|0);
        if ($37) { __label__ = 5; break; } else { __label__ = 9; break; }
      case 5: // $38
        var $39=HEAP[$i];
        var $40=HEAP[$2];
        var $41=(($40+12)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+12*$39)&4294967295);
        var $44=(($43+8)&4294967295);
        var $45=HEAP[$44];
        var $46=((($45))|0)==0;
        if ($46) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $47
        var $48=HEAP[$i];
        var $49=HEAP[$2];
        var $50=(($49+12)&4294967295);
        var $51=HEAP[$50];
        var $52=(($51+12*$48)&4294967295);
        HEAP[$o2]=$52;
        var $53=HEAP[$1];
        var $54=HEAP[$2];
        var $55=HEAP[$i];
        var $56=((($55) + 1)&4294967295);
        var $57=_luaH_setnum($53, $54, $56);
        HEAP[$o1]=$57;
        var $58=HEAP[$o1];
        var $59=(($58)&4294967295);
        var $60=HEAP[$o2];
        var $61=(($60)&4294967295);
        var $62=$59;
        var $63=$61;
        _llvm_memcpy_p0i8_p0i8_i32($62, $63, 8, 4, 0);
        var $64=HEAP[$o2];
        var $65=(($64+8)&4294967295);
        var $66=HEAP[$65];
        var $67=HEAP[$o1];
        var $68=(($67+8)&4294967295);
        HEAP[$68]=$66;
        __label__ = 7; break;
      case 7: // $69
        __label__ = 8; break;
      case 8: // $70
        var $71=HEAP[$i];
        var $72=((($71) + 1)&4294967295);
        HEAP[$i]=$72;
        __label__ = 4; break;
      case 9: // $73
        var $74=HEAP[$3];
        var $75=((($74) + 1)&4294967295);
        var $76=((($75))>>>0) <= 357913941;
        if ($76) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $77
        var $78=HEAP[$1];
        var $79=HEAP[$2];
        var $80=(($79+12)&4294967295);
        var $81=HEAP[$80];
        var $82=$81;
        var $83=HEAP[$oldasize];
        var $84=((($83) * 12)&4294967295);
        var $85=HEAP[$3];
        var $86=((($85) * 12)&4294967295);
        var $87=_luaM_realloc_($78, $82, $84, $86);
        __lastLabel__ = 10; __label__ = 12; break;
      case 11: // $88
        var $89=HEAP[$1];
        var $90=_luaM_toobig($89);
        __lastLabel__ = 11; __label__ = 12; break;
      case 12: // $91
        var $92=__lastLabel__ == 10 ? $87 : ($90);
        var $93=$92;
        var $94=HEAP[$2];
        var $95=(($94+12)&4294967295);
        HEAP[$95]=$93;
        __label__ = 13; break;
      case 13: // $96
        var $97=HEAP[$oldhsize];
        var $98=1 << ($97);
        var $99=((($98) - 1)&4294967295);
        HEAP[$i]=$99;
        __label__ = 14; break;
      case 14: // $100
        var $101=HEAP[$i];
        var $102=((($101))|0) >= 0;
        if ($102) { __label__ = 15; break; } else { __label__ = 19; break; }
      case 15: // $103
        var $104=HEAP[$nold];
        var $105=HEAP[$i];
        var $106=(($104+28*$105)&4294967295);
        HEAP[$old]=$106;
        var $107=HEAP[$old];
        var $108=(($107)&4294967295);
        var $109=(($108+8)&4294967295);
        var $110=HEAP[$109];
        var $111=((($110))|0)==0;
        if ($111) { __label__ = 17; break; } else { __label__ = 16; break; }
      case 16: // $112
        var $113=HEAP[$old];
        var $114=(($113)&4294967295);
        HEAP[$o21]=$114;
        var $115=HEAP[$1];
        var $116=HEAP[$2];
        var $117=HEAP[$old];
        var $118=(($117+12)&4294967295);
        var $119=$118;
        var $120=_luaH_set($115, $116, $119);
        HEAP[$o12]=$120;
        var $121=HEAP[$o12];
        var $122=(($121)&4294967295);
        var $123=HEAP[$o21];
        var $124=(($123)&4294967295);
        var $125=$122;
        var $126=$124;
        _llvm_memcpy_p0i8_p0i8_i32($125, $126, 8, 4, 0);
        var $127=HEAP[$o21];
        var $128=(($127+8)&4294967295);
        var $129=HEAP[$128];
        var $130=HEAP[$o12];
        var $131=(($130+8)&4294967295);
        HEAP[$131]=$129;
        __label__ = 17; break;
      case 17: // $132
        __label__ = 18; break;
      case 18: // $133
        var $134=HEAP[$i];
        var $135=((($134) + -1)&4294967295);
        HEAP[$i]=$135;
        __label__ = 14; break;
      case 19: // $136
        var $137=HEAP[$nold];
        var $138=((($137))|0)!=(((_dummynode_))|0);
        if ($138) { __label__ = 20; break; } else { __label__ = 21; break; }
      case 20: // $139
        var $140=HEAP[$1];
        var $141=HEAP[$nold];
        var $142=$141;
        var $143=HEAP[$oldhsize];
        var $144=1 << ($143);
        var $145=((($144) * 28)&4294967295);
        var $146=_luaM_realloc_($140, $142, $145, 0);
        __label__ = 21; break;
      case 21: // $147
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_new($L, $narray, $nhash) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $t=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$narray;
    HEAP[$3]=$nhash;
    var $4=HEAP[$1];
    var $5=_luaM_realloc_($4, 0, 0, 32);
    var $6=$5;
    HEAP[$t]=$6;
    var $7=HEAP[$1];
    var $8=HEAP[$t];
    var $9=$8;
    _luaC_link($7, $9, 5);
    var $10=HEAP[$t];
    var $11=(($10+8)&4294967295);
    HEAP[$11]=0;
    var $12=HEAP[$t];
    var $13=(($12+6)&4294967295);
    HEAP[$13]=-1;
    var $14=HEAP[$t];
    var $15=(($14+12)&4294967295);
    HEAP[$15]=0;
    var $16=HEAP[$t];
    var $17=(($16+28)&4294967295);
    HEAP[$17]=0;
    var $18=HEAP[$t];
    var $19=(($18+7)&4294967295);
    HEAP[$19]=0;
    var $20=HEAP[$t];
    var $21=(($20+16)&4294967295);
    HEAP[$21]=_dummynode_;
    var $22=HEAP[$1];
    var $23=HEAP[$t];
    var $24=HEAP[$2];
    _setarrayvector($22, $23, $24);
    var $25=HEAP[$1];
    var $26=HEAP[$t];
    var $27=HEAP[$3];
    _setnodevector($25, $26, $27);
    var $28=HEAP[$t];
    STACKTOP = __stackBase__;
    return $28;
  }
  

  function _setarrayvector($L, $t, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        HEAP[$3]=$size;
        var $4=HEAP[$3];
        var $5=((($4) + 1)&4294967295);
        var $6=((($5))>>>0) <= 357913941;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$2];
        var $10=(($9+12)&4294967295);
        var $11=HEAP[$10];
        var $12=$11;
        var $13=HEAP[$2];
        var $14=(($13+28)&4294967295);
        var $15=HEAP[$14];
        var $16=((($15) * 12)&4294967295);
        var $17=HEAP[$3];
        var $18=((($17) * 12)&4294967295);
        var $19=_luaM_realloc_($8, $12, $16, $18);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $20
        var $21=HEAP[$1];
        var $22=_luaM_toobig($21);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $23
        var $24=__lastLabel__ == 1 ? $19 : ($22);
        var $25=$24;
        var $26=HEAP[$2];
        var $27=(($26+12)&4294967295);
        HEAP[$27]=$25;
        var $28=HEAP[$2];
        var $29=(($28+28)&4294967295);
        var $30=HEAP[$29];
        HEAP[$i]=$30;
        __label__ = 4; break;
      case 4: // $31
        var $32=HEAP[$i];
        var $33=HEAP[$3];
        var $34=((($32))|0) < ((($33))|0);
        if ($34) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $35
        var $36=HEAP[$i];
        var $37=HEAP[$2];
        var $38=(($37+12)&4294967295);
        var $39=HEAP[$38];
        var $40=(($39+12*$36)&4294967295);
        var $41=(($40+8)&4294967295);
        HEAP[$41]=0;
        __label__ = 6; break;
      case 6: // $42
        var $43=HEAP[$i];
        var $44=((($43) + 1)&4294967295);
        HEAP[$i]=$44;
        __label__ = 4; break;
      case 7: // $45
        var $46=HEAP[$3];
        var $47=HEAP[$2];
        var $48=(($47+28)&4294967295);
        HEAP[$48]=$46;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setnodevector($L, $t, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $lsize=__stackBase__+12;
        var $i=__stackBase__+16;
        var $n=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        HEAP[$3]=$size;
        var $4=HEAP[$3];
        var $5=((($4))|0)==0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$2];
        var $8=(($7+16)&4294967295);
        HEAP[$8]=_dummynode_;
        HEAP[$lsize]=0;
        __label__ = 12; break;
      case 2: // $9
        var $10=HEAP[$3];
        var $11=((($10) - 1)&4294967295);
        var $12=_luaO_log2($11);
        var $13=((($12) + 1)&4294967295);
        HEAP[$lsize]=$13;
        var $14=HEAP[$lsize];
        var $15=((($14))|0) > 26;
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $16
        var $17=HEAP[$1];
        _luaG_runerror($17, ((__str2554)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 4; break;
      case 4: // $18
        var $19=HEAP[$lsize];
        var $20=1 << ($19);
        HEAP[$3]=$20;
        var $21=HEAP[$3];
        var $22=((($21) + 1)&4294967295);
        var $23=((($22))>>>0) <= 153391689;
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$3];
        var $27=((($26) * 28)&4294967295);
        var $28=_luaM_realloc_($25, 0, 0, $27);
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $29
        var $30=HEAP[$1];
        var $31=_luaM_toobig($30);
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $32
        var $33=__lastLabel__ == 5 ? $28 : ($31);
        var $34=$33;
        var $35=HEAP[$2];
        var $36=(($35+16)&4294967295);
        HEAP[$36]=$34;
        HEAP[$i]=0;
        __label__ = 8; break;
      case 8: // $37
        var $38=HEAP[$i];
        var $39=HEAP[$3];
        var $40=((($38))|0) < ((($39))|0);
        if ($40) { __label__ = 9; break; } else { __label__ = 11; break; }
      case 9: // $41
        var $42=HEAP[$i];
        var $43=HEAP[$2];
        var $44=(($43+16)&4294967295);
        var $45=HEAP[$44];
        var $46=(($45+28*$42)&4294967295);
        HEAP[$n]=$46;
        var $47=HEAP[$n];
        var $48=(($47+12)&4294967295);
        var $49=$48;
        var $50=(($49+12)&4294967295);
        HEAP[$50]=0;
        var $51=HEAP[$n];
        var $52=(($51+12)&4294967295);
        var $53=$52;
        var $54=(($53+8)&4294967295);
        HEAP[$54]=0;
        var $55=HEAP[$n];
        var $56=(($55)&4294967295);
        var $57=(($56+8)&4294967295);
        HEAP[$57]=0;
        __label__ = 10; break;
      case 10: // $58
        var $59=HEAP[$i];
        var $60=((($59) + 1)&4294967295);
        HEAP[$i]=$60;
        __label__ = 8; break;
      case 11: // $61
        __label__ = 12; break;
      case 12: // $62
        var $63=HEAP[$lsize];
        var $64=((($63)) & 255);
        var $65=HEAP[$2];
        var $66=(($65+7)&4294967295);
        HEAP[$66]=$64;
        var $67=HEAP[$3];
        var $68=HEAP[$2];
        var $69=(($68+16)&4294967295);
        var $70=HEAP[$69];
        var $71=(($70+28*$67)&4294967295);
        var $72=HEAP[$2];
        var $73=(($72+20)&4294967295);
        HEAP[$73]=$71;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_free($L, $t) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        var $3=HEAP[$2];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)!=(((_dummynode_))|0);
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$2];
        var $10=(($9+16)&4294967295);
        var $11=HEAP[$10];
        var $12=$11;
        var $13=HEAP[$2];
        var $14=(($13+7)&4294967295);
        var $15=HEAP[$14];
        var $16=unSign(($15), 8, 0);
        var $17=1 << ($16);
        var $18=((($17) * 28)&4294967295);
        var $19=_luaM_realloc_($8, $12, $18, 0);
        __label__ = 2; break;
      case 2: // $20
        var $21=HEAP[$1];
        var $22=HEAP[$2];
        var $23=(($22+12)&4294967295);
        var $24=HEAP[$23];
        var $25=$24;
        var $26=HEAP[$2];
        var $27=(($26+28)&4294967295);
        var $28=HEAP[$27];
        var $29=((($28) * 12)&4294967295);
        var $30=_luaM_realloc_($21, $25, $29, 0);
        var $31=HEAP[$1];
        var $32=HEAP[$2];
        var $33=$32;
        var $34=_luaM_realloc_($31, $33, 32, 0);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_getnum($t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $nk=__stackBase__+12;
        var $n=__stackBase__+20;
        HEAP[$2]=$t;
        HEAP[$3]=$key;
        var $4=HEAP[$3];
        var $5=((($4) - 1)&4294967295);
        var $6=HEAP[$2];
        var $7=(($6+28)&4294967295);
        var $8=HEAP[$7];
        var $9=((($5))>>>0) < ((($8))>>>0);
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$3];
        var $12=((($11) - 1)&4294967295);
        var $13=HEAP[$2];
        var $14=(($13+12)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+12*$12)&4294967295);
        HEAP[$1]=$16;
        __label__ = 10; break;
      case 2: // $17
        var $18=HEAP[$3];
        var $19=((($18))|0);
        HEAP[$nk]=$19;
        var $20=HEAP[$2];
        var $21=HEAP[$nk];
        var $22=_hashnum($20, $21);
        HEAP[$n]=$22;
        __label__ = 3; break;
      case 3: // $23
        var $24=HEAP[$n];
        var $25=(($24+12)&4294967295);
        var $26=$25;
        var $27=(($26+8)&4294967295);
        var $28=HEAP[$27];
        var $29=((($28))|0)==3;
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $30
        var $31=HEAP[$n];
        var $32=(($31+12)&4294967295);
        var $33=$32;
        var $34=(($33)&4294967295);
        var $35=$34;
        var $36=HEAP[$35];
        var $37=HEAP[$nk];
        var $38=($36) == ($37);
        if ($38) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $39
        var $40=HEAP[$n];
        var $41=(($40)&4294967295);
        HEAP[$1]=$41;
        __label__ = 10; break;
      case 6: // $42
        var $43=HEAP[$n];
        var $44=(($43+12)&4294967295);
        var $45=$44;
        var $46=(($45+12)&4294967295);
        var $47=HEAP[$46];
        HEAP[$n]=$47;
        __label__ = 7; break;
      case 7: // $48
        __label__ = 8; break;
      case 8: // $49
        var $50=HEAP[$n];
        var $51=((($50))|0)!=0;
        if ($51) { __label__ = 3; break; } else { __label__ = 9; break; }
      case 9: // $52
        HEAP[$1]=_luaO_nilobject_;
        __label__ = 10; break;
      case 10: // $53
        var $54=HEAP[$1];
        STACKTOP = __stackBase__;
        return $54;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hashnum($t, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $a=__stackBase__+16;
        var $i=__stackBase__+24;
        HEAP[$2]=$t;
        HEAP[$3]=$n;
        var $4=HEAP[$3];
        var $5=($4) == 0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$2];
        var $8=(($7+16)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9)&4294967295);
        HEAP[$1]=$10;
        __label__ = 7; break;
      case 2: // $11
        var $12=(($a)&4294967295);
        var $13=$12;
        var $14=$3;
        _llvm_memcpy_p0i8_p0i8_i32($13, $14, 8, 1, 0);
        HEAP[$i]=1;
        __label__ = 3; break;
      case 3: // $15
        var $16=HEAP[$i];
        var $17=((($16))|0) < 2;
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $18
        var $19=HEAP[$i];
        var $20=(($a+$19*4)&4294967295);
        var $21=HEAP[$20];
        var $22=(($a)&4294967295);
        var $23=HEAP[$22];
        var $24=((($23) + ($21))&4294967295);
        HEAP[$22]=$24;
        __label__ = 5; break;
      case 5: // $25
        var $26=HEAP[$i];
        var $27=((($26) + 1)&4294967295);
        HEAP[$i]=$27;
        __label__ = 3; break;
      case 6: // $28
        var $29=(($a)&4294967295);
        var $30=HEAP[$29];
        var $31=HEAP[$2];
        var $32=(($31+7)&4294967295);
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=1 << ($34);
        var $36=((($35) - 1)&4294967295);
        var $37=($36) | 1;
        var $38=((($30))>>>0) % ((($37))>>>0);
        var $39=HEAP[$2];
        var $40=(($39+16)&4294967295);
        var $41=HEAP[$40];
        var $42=(($41+28*$38)&4294967295);
        HEAP[$1]=$42;
        __label__ = 7; break;
      case 7: // $43
        var $44=HEAP[$1];
        STACKTOP = __stackBase__;
        return $44;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_getstr($t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $n=__stackBase__+12;
        HEAP[$2]=$t;
        HEAP[$3]=$key;
        var $4=HEAP[$3];
        var $5=$4;
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        var $8=HEAP[$2];
        var $9=(($8+7)&4294967295);
        var $10=HEAP[$9];
        var $11=unSign(($10), 8, 0);
        var $12=1 << ($11);
        var $13=((($12) - 1)&4294967295);
        var $14=($7) & ($13);
        var $15=HEAP[$2];
        var $16=(($15+16)&4294967295);
        var $17=HEAP[$16];
        var $18=(($17+28*$14)&4294967295);
        HEAP[$n]=$18;
        __label__ = 1; break;
      case 1: // $19
        var $20=HEAP[$n];
        var $21=(($20+12)&4294967295);
        var $22=$21;
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=((($24))|0)==4;
        if ($25) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $26
        var $27=HEAP[$n];
        var $28=(($27+12)&4294967295);
        var $29=$28;
        var $30=(($29)&4294967295);
        var $31=$30;
        var $32=HEAP[$31];
        var $33=$32;
        var $34=HEAP[$3];
        var $35=((($33))|0)==((($34))|0);
        if ($35) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $36
        var $37=HEAP[$n];
        var $38=(($37)&4294967295);
        HEAP[$1]=$38;
        __label__ = 8; break;
      case 4: // $39
        var $40=HEAP[$n];
        var $41=(($40+12)&4294967295);
        var $42=$41;
        var $43=(($42+12)&4294967295);
        var $44=HEAP[$43];
        HEAP[$n]=$44;
        __label__ = 5; break;
      case 5: // $45
        __label__ = 6; break;
      case 6: // $46
        var $47=HEAP[$n];
        var $48=((($47))|0)!=0;
        if ($48) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 7: // $49
        HEAP[$1]=_luaO_nilobject_;
        __label__ = 8; break;
      case 8: // $50
        var $51=HEAP[$1];
        STACKTOP = __stackBase__;
        return $51;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_get($t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $k=__stackBase__+12;
        var $n=__stackBase__+16;
        var $n1=__stackBase__+24;
        HEAP[$2]=$t;
        HEAP[$3]=$key;
        var $4=HEAP[$3];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        if ($6 == 0) {
          __label__ = 1; break;
        }
        else if ($6 == 4) {
          __label__ = 2; break;
        }
        else if ($6 == 3) {
          __label__ = 3; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 1: // $7
        HEAP[$1]=_luaO_nilobject_;
        __label__ = 13; break;
      case 2: // $8
        var $9=HEAP[$2];
        var $10=HEAP[$3];
        var $11=(($10)&4294967295);
        var $12=$11;
        var $13=HEAP[$12];
        var $14=$13;
        var $15=_luaH_getstr($9, $14);
        HEAP[$1]=$15;
        __label__ = 13; break;
      case 3: // $16
        var $17=HEAP[$3];
        var $18=(($17)&4294967295);
        var $19=$18;
        var $20=HEAP[$19];
        HEAP[$n]=$20;
        var $21=HEAP[$n];
        var $22=((($21))|0);
        HEAP[$k]=$22;
        var $23=HEAP[$k];
        var $24=((($23))|0);
        var $25=HEAP[$3];
        var $26=(($25)&4294967295);
        var $27=$26;
        var $28=HEAP[$27];
        var $29=($24) == ($28);
        if ($29) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $30
        var $31=HEAP[$2];
        var $32=HEAP[$k];
        var $33=_luaH_getnum($31, $32);
        HEAP[$1]=$33;
        __label__ = 13; break;
      case 5: // $34
        __label__ = 6; break;
      case 6: // $35
        var $36=HEAP[$2];
        var $37=HEAP[$3];
        var $38=_mainposition($36, $37);
        HEAP[$n1]=$38;
        __label__ = 7; break;
      case 7: // $39
        var $40=HEAP[$n1];
        var $41=(($40+12)&4294967295);
        var $42=$41;
        var $43=HEAP[$3];
        var $44=_luaO_rawequalObj($42, $43);
        var $45=((($44))|0)!=0;
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $46
        var $47=HEAP[$n1];
        var $48=(($47)&4294967295);
        HEAP[$1]=$48;
        __label__ = 13; break;
      case 9: // $49
        var $50=HEAP[$n1];
        var $51=(($50+12)&4294967295);
        var $52=$51;
        var $53=(($52+12)&4294967295);
        var $54=HEAP[$53];
        HEAP[$n1]=$54;
        __label__ = 10; break;
      case 10: // $55
        __label__ = 11; break;
      case 11: // $56
        var $57=HEAP[$n1];
        var $58=((($57))|0)!=0;
        if ($58) { __label__ = 7; break; } else { __label__ = 12; break; }
      case 12: // $59
        HEAP[$1]=_luaO_nilobject_;
        __label__ = 13; break;
      case 13: // $60
        var $61=HEAP[$1];
        STACKTOP = __stackBase__;
        return $61;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _mainposition($t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$t;
        HEAP[$3]=$key;
        var $4=HEAP[$3];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        if ($6 == 3) {
          __label__ = 1; break;
        }
        else if ($6 == 4) {
          __label__ = 2; break;
        }
        else if ($6 == 1) {
          __label__ = 3; break;
        }
        else if ($6 == 2) {
          __label__ = 4; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $7
        var $8=HEAP[$2];
        var $9=HEAP[$3];
        var $10=(($9)&4294967295);
        var $11=$10;
        var $12=HEAP[$11];
        var $13=_hashnum($8, $12);
        HEAP[$1]=$13;
        __label__ = 6; break;
      case 2: // $14
        var $15=HEAP[$3];
        var $16=(($15)&4294967295);
        var $17=$16;
        var $18=HEAP[$17];
        var $19=$18;
        var $20=$19;
        var $21=(($20+8)&4294967295);
        var $22=HEAP[$21];
        var $23=HEAP[$2];
        var $24=(($23+7)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=1 << ($26);
        var $28=((($27) - 1)&4294967295);
        var $29=($22) & ($28);
        var $30=HEAP[$2];
        var $31=(($30+16)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+28*$29)&4294967295);
        HEAP[$1]=$33;
        __label__ = 6; break;
      case 3: // $34
        var $35=HEAP[$3];
        var $36=(($35)&4294967295);
        var $37=$36;
        var $38=HEAP[$37];
        var $39=HEAP[$2];
        var $40=(($39+7)&4294967295);
        var $41=HEAP[$40];
        var $42=unSign(($41), 8, 0);
        var $43=1 << ($42);
        var $44=((($43) - 1)&4294967295);
        var $45=($38) & ($44);
        var $46=HEAP[$2];
        var $47=(($46+16)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48+28*$45)&4294967295);
        HEAP[$1]=$49;
        __label__ = 6; break;
      case 4: // $50
        var $51=HEAP[$3];
        var $52=(($51)&4294967295);
        var $53=$52;
        var $54=HEAP[$53];
        var $55=($54);
        var $56=HEAP[$2];
        var $57=(($56+7)&4294967295);
        var $58=HEAP[$57];
        var $59=unSign(($58), 8, 0);
        var $60=1 << ($59);
        var $61=((($60) - 1)&4294967295);
        var $62=($61) | 1;
        var $63=((($55))>>>0) % ((($62))>>>0);
        var $64=HEAP[$2];
        var $65=(($64+16)&4294967295);
        var $66=HEAP[$65];
        var $67=(($66+28*$63)&4294967295);
        HEAP[$1]=$67;
        __label__ = 6; break;
      case 5: // $68
        var $69=HEAP[$3];
        var $70=(($69)&4294967295);
        var $71=$70;
        var $72=HEAP[$71];
        var $73=($72);
        var $74=HEAP[$2];
        var $75=(($74+7)&4294967295);
        var $76=HEAP[$75];
        var $77=unSign(($76), 8, 0);
        var $78=1 << ($77);
        var $79=((($78) - 1)&4294967295);
        var $80=($79) | 1;
        var $81=((($73))>>>0) % ((($80))>>>0);
        var $82=HEAP[$2];
        var $83=(($82+16)&4294967295);
        var $84=HEAP[$83];
        var $85=(($84+28*$81)&4294967295);
        HEAP[$1]=$85;
        __label__ = 6; break;
      case 6: // $86
        var $87=HEAP[$1];
        STACKTOP = __stackBase__;
        return $87;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_set($L, $t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $p=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$t;
        HEAP[$4]=$key;
        var $5=HEAP[$3];
        var $6=HEAP[$4];
        var $7=_luaH_get($5, $6);
        HEAP[$p]=$7;
        var $8=HEAP[$3];
        var $9=(($8+6)&4294967295);
        HEAP[$9]=0;
        var $10=HEAP[$p];
        var $11=((($10))|0)!=(((_luaO_nilobject_))|0);
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$p];
        HEAP[$1]=$13;
        __label__ = 9; break;
      case 2: // $14
        var $15=HEAP[$4];
        var $16=(($15+8)&4294967295);
        var $17=HEAP[$16];
        var $18=((($17))|0)==0;
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $19
        var $20=HEAP[$2];
        _luaG_runerror($20, ((__str552)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 8; break;
      case 4: // $21
        var $22=HEAP[$4];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=((($24))|0)==3;
        if ($25) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $26
        var $27=HEAP[$4];
        var $28=(($27)&4294967295);
        var $29=$28;
        var $30=HEAP[$29];
        var $31=HEAP[$4];
        var $32=(($31)&4294967295);
        var $33=$32;
        var $34=HEAP[$33];
        var $35=($30) == ($34);
        if ($35) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $36
        var $37=HEAP[$2];
        _luaG_runerror($37, ((__str1553)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 7; break;
      case 7: // $38
        __label__ = 8; break;
      case 8: // $39
        var $40=HEAP[$2];
        var $41=HEAP[$3];
        var $42=HEAP[$4];
        var $43=_newkey($40, $41, $42);
        HEAP[$1]=$43;
        __label__ = 9; break;
      case 9: // $44
        var $45=HEAP[$1];
        STACKTOP = __stackBase__;
        return $45;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newkey($L, $t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $mp=__stackBase__+16;
        var $othern=__stackBase__+20;
        var $n=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$3]=$t;
        HEAP[$4]=$key;
        var $5=HEAP[$3];
        var $6=HEAP[$4];
        var $7=_mainposition($5, $6);
        HEAP[$mp]=$7;
        var $8=HEAP[$mp];
        var $9=(($8)&4294967295);
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        var $14=HEAP[$mp];
        var $15=((($14))|0)==(((_dummynode_))|0);
        if ($15) { __label__ = 2; break; } else { __label__ = 11; break; }
      case 2: // $16
        var $17=HEAP[$3];
        var $18=_getfreepos($17);
        HEAP[$n]=$18;
        var $19=HEAP[$n];
        var $20=((($19))|0)==0;
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $21
        var $22=HEAP[$2];
        var $23=HEAP[$3];
        var $24=HEAP[$4];
        _rehash($22, $23, $24);
        var $25=HEAP[$2];
        var $26=HEAP[$3];
        var $27=HEAP[$4];
        var $28=_luaH_set($25, $26, $27);
        HEAP[$1]=$28;
        __label__ = 16; break;
      case 4: // $29
        var $30=HEAP[$3];
        var $31=HEAP[$mp];
        var $32=(($31+12)&4294967295);
        var $33=$32;
        var $34=_mainposition($30, $33);
        HEAP[$othern]=$34;
        var $35=HEAP[$othern];
        var $36=HEAP[$mp];
        var $37=((($35))|0)!=((($36))|0);
        if ($37) { __label__ = 5; break; } else { __label__ = 9; break; }
      case 5: // $38
        __label__ = 6; break;
      case 6: // $39
        var $40=HEAP[$othern];
        var $41=(($40+12)&4294967295);
        var $42=$41;
        var $43=(($42+12)&4294967295);
        var $44=HEAP[$43];
        var $45=HEAP[$mp];
        var $46=((($44))|0)!=((($45))|0);
        if ($46) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $47
        var $48=HEAP[$othern];
        var $49=(($48+12)&4294967295);
        var $50=$49;
        var $51=(($50+12)&4294967295);
        var $52=HEAP[$51];
        HEAP[$othern]=$52;
        __label__ = 6; break;
      case 8: // $53
        var $54=HEAP[$n];
        var $55=HEAP[$othern];
        var $56=(($55+12)&4294967295);
        var $57=$56;
        var $58=(($57+12)&4294967295);
        HEAP[$58]=$54;
        var $59=HEAP[$n];
        var $60=HEAP[$mp];
        var $61=$59;
        var $62=$60;
        _llvm_memcpy_p0i8_p0i8_i32($61, $62, 28, 4, 0);
        var $63=HEAP[$mp];
        var $64=(($63+12)&4294967295);
        var $65=$64;
        var $66=(($65+12)&4294967295);
        HEAP[$66]=0;
        var $67=HEAP[$mp];
        var $68=(($67)&4294967295);
        var $69=(($68+8)&4294967295);
        HEAP[$69]=0;
        __label__ = 10; break;
      case 9: // $70
        var $71=HEAP[$mp];
        var $72=(($71+12)&4294967295);
        var $73=$72;
        var $74=(($73+12)&4294967295);
        var $75=HEAP[$74];
        var $76=HEAP[$n];
        var $77=(($76+12)&4294967295);
        var $78=$77;
        var $79=(($78+12)&4294967295);
        HEAP[$79]=$75;
        var $80=HEAP[$n];
        var $81=HEAP[$mp];
        var $82=(($81+12)&4294967295);
        var $83=$82;
        var $84=(($83+12)&4294967295);
        HEAP[$84]=$80;
        var $85=HEAP[$n];
        HEAP[$mp]=$85;
        __label__ = 10; break;
      case 10: // $86
        __label__ = 11; break;
      case 11: // $87
        var $88=HEAP[$mp];
        var $89=(($88+12)&4294967295);
        var $90=$89;
        var $91=(($90)&4294967295);
        var $92=HEAP[$4];
        var $93=(($92)&4294967295);
        var $94=$91;
        var $95=$93;
        _llvm_memcpy_p0i8_p0i8_i32($94, $95, 8, 4, 0);
        var $96=HEAP[$4];
        var $97=(($96+8)&4294967295);
        var $98=HEAP[$97];
        var $99=HEAP[$mp];
        var $100=(($99+12)&4294967295);
        var $101=$100;
        var $102=(($101+8)&4294967295);
        HEAP[$102]=$98;
        var $103=HEAP[$4];
        var $104=(($103+8)&4294967295);
        var $105=HEAP[$104];
        var $106=((($105))|0) >= 4;
        if ($106) { __label__ = 12; break; } else { __label__ = 15; break; }
      case 12: // $107
        var $108=HEAP[$4];
        var $109=(($108)&4294967295);
        var $110=$109;
        var $111=HEAP[$110];
        var $112=$111;
        var $113=(($112+5)&4294967295);
        var $114=HEAP[$113];
        var $115=unSign(($114), 8, 0);
        var $116=($115) & 3;
        var $117=((($116))|0)!=0;
        if ($117) { __label__ = 13; break; } else { __label__ = 15; break; }
      case 13: // $118
        var $119=HEAP[$3];
        var $120=$119;
        var $121=$120;
        var $122=(($121+5)&4294967295);
        var $123=HEAP[$122];
        var $124=unSign(($123), 8, 0);
        var $125=($124) & 4;
        var $126=((($125))|0)!=0;
        if ($126) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $127
        var $128=HEAP[$2];
        var $129=HEAP[$3];
        _luaC_barrierback($128, $129);
        __label__ = 15; break;
      case 15: // $130
        var $131=HEAP[$mp];
        var $132=(($131)&4294967295);
        HEAP[$1]=$132;
        __label__ = 16; break;
      case 16: // $133
        var $134=HEAP[$1];
        STACKTOP = __stackBase__;
        return $134;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_setnum($L, $t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $p=__stackBase__+16;
        var $k=__stackBase__+20;
        var $i_o=__stackBase__+32;
        HEAP[$2]=$L;
        HEAP[$3]=$t;
        HEAP[$4]=$key;
        var $5=HEAP[$3];
        var $6=HEAP[$4];
        var $7=_luaH_getnum($5, $6);
        HEAP[$p]=$7;
        var $8=HEAP[$p];
        var $9=((($8))|0)!=(((_luaO_nilobject_))|0);
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$p];
        HEAP[$1]=$11;
        __label__ = 3; break;
      case 2: // $12
        HEAP[$i_o]=$k;
        var $13=HEAP[$4];
        var $14=((($13))|0);
        var $15=HEAP[$i_o];
        var $16=(($15)&4294967295);
        var $17=$16;
        HEAP[$17]=$14;
        var $18=HEAP[$i_o];
        var $19=(($18+8)&4294967295);
        HEAP[$19]=3;
        var $20=HEAP[$2];
        var $21=HEAP[$3];
        var $22=_newkey($20, $21, $k);
        HEAP[$1]=$22;
        __label__ = 3; break;
      case 3: // $23
        var $24=HEAP[$1];
        STACKTOP = __stackBase__;
        return $24;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_setstr($L, $t, $key) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $p=__stackBase__+16;
        var $k=__stackBase__+20;
        var $i_o=__stackBase__+32;
        HEAP[$2]=$L;
        HEAP[$3]=$t;
        HEAP[$4]=$key;
        var $5=HEAP[$3];
        var $6=HEAP[$4];
        var $7=_luaH_getstr($5, $6);
        HEAP[$p]=$7;
        var $8=HEAP[$p];
        var $9=((($8))|0)!=(((_luaO_nilobject_))|0);
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$p];
        HEAP[$1]=$11;
        __label__ = 3; break;
      case 2: // $12
        HEAP[$i_o]=$k;
        var $13=HEAP[$4];
        var $14=$13;
        var $15=HEAP[$i_o];
        var $16=(($15)&4294967295);
        var $17=$16;
        HEAP[$17]=$14;
        var $18=HEAP[$i_o];
        var $19=(($18+8)&4294967295);
        HEAP[$19]=4;
        var $20=HEAP[$2];
        var $21=HEAP[$3];
        var $22=_newkey($20, $21, $k);
        HEAP[$1]=$22;
        __label__ = 3; break;
      case 3: // $23
        var $24=HEAP[$1];
        STACKTOP = __stackBase__;
        return $24;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaH_getn($t) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $j=__stackBase__+8;
        var $i=__stackBase__+12;
        var $m=__stackBase__+16;
        HEAP[$2]=$t;
        var $3=HEAP[$2];
        var $4=(($3+28)&4294967295);
        var $5=HEAP[$4];
        HEAP[$j]=$5;
        var $6=HEAP[$j];
        var $7=((($6))>>>0) > 0;
        if ($7) { __label__ = 1; break; } else { __label__ = 9; break; }
      case 1: // $8
        var $9=HEAP[$j];
        var $10=((($9) - 1)&4294967295);
        var $11=HEAP[$2];
        var $12=(($11+12)&4294967295);
        var $13=HEAP[$12];
        var $14=(($13+12*$10)&4294967295);
        var $15=(($14+8)&4294967295);
        var $16=HEAP[$15];
        var $17=((($16))|0)==0;
        if ($17) { __label__ = 2; break; } else { __label__ = 9; break; }
      case 2: // $18
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $19
        var $20=HEAP[$j];
        var $21=HEAP[$i];
        var $22=((($20) - ($21))&4294967295);
        var $23=((($22))>>>0) > 1;
        if ($23) { __label__ = 4; break; } else { __label__ = 8; break; }
      case 4: // $24
        var $25=HEAP[$i];
        var $26=HEAP[$j];
        var $27=((($25) + ($26))&4294967295);
        var $28=Math.floor(((($27))>>>0)/2);
        HEAP[$m]=$28;
        var $29=HEAP[$m];
        var $30=((($29) - 1)&4294967295);
        var $31=HEAP[$2];
        var $32=(($31+12)&4294967295);
        var $33=HEAP[$32];
        var $34=(($33+12*$30)&4294967295);
        var $35=(($34+8)&4294967295);
        var $36=HEAP[$35];
        var $37=((($36))|0)==0;
        if ($37) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $38
        var $39=HEAP[$m];
        HEAP[$j]=$39;
        __label__ = 7; break;
      case 6: // $40
        var $41=HEAP[$m];
        HEAP[$i]=$41;
        __label__ = 7; break;
      case 7: // $42
        __label__ = 3; break;
      case 8: // $43
        var $44=HEAP[$i];
        HEAP[$1]=$44;
        __label__ = 12; break;
      case 9: // $45
        var $46=HEAP[$2];
        var $47=(($46+16)&4294967295);
        var $48=HEAP[$47];
        var $49=((($48))|0)==(((_dummynode_))|0);
        if ($49) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $50
        var $51=HEAP[$j];
        HEAP[$1]=$51;
        __label__ = 12; break;
      case 11: // $52
        var $53=HEAP[$2];
        var $54=HEAP[$j];
        var $55=_unbound_search($53, $54);
        HEAP[$1]=$55;
        __label__ = 12; break;
      case 12: // $56
        var $57=HEAP[$1];
        STACKTOP = __stackBase__;
        return $57;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unbound_search($t, $j) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $m=__stackBase__+16;
        HEAP[$2]=$t;
        HEAP[$3]=$j;
        var $4=HEAP[$3];
        HEAP[$i]=$4;
        var $5=HEAP[$3];
        var $6=((($5) + 1)&4294967295);
        HEAP[$3]=$6;
        __label__ = 1; break;
      case 1: // $7
        var $8=HEAP[$2];
        var $9=HEAP[$3];
        var $10=_luaH_getnum($8, $9);
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        var $13=((($12))|0)==0;
        var $14=($13) ^ 1;
        if ($14) { __label__ = 2; break; } else { __label__ = 8; break; }
      case 2: // $15
        var $16=HEAP[$3];
        HEAP[$i]=$16;
        var $17=HEAP[$3];
        var $18=((($17) * 2)&4294967295);
        HEAP[$3]=$18;
        var $19=HEAP[$3];
        var $20=((($19))>>>0) > 2147483645;
        if ($20) { __label__ = 3; break; } else { __label__ = 7; break; }
      case 3: // $21
        HEAP[$i]=1;
        __label__ = 4; break;
      case 4: // $22
        var $23=HEAP[$2];
        var $24=HEAP[$i];
        var $25=_luaH_getnum($23, $24);
        var $26=(($25+8)&4294967295);
        var $27=HEAP[$26];
        var $28=((($27))|0)==0;
        var $29=($28) ^ 1;
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $30
        var $31=HEAP[$i];
        var $32=((($31) + 1)&4294967295);
        HEAP[$i]=$32;
        __label__ = 4; break;
      case 6: // $33
        var $34=HEAP[$i];
        var $35=((($34) - 1)&4294967295);
        HEAP[$1]=$35;
        __label__ = 15; break;
      case 7: // $36
        __label__ = 1; break;
      case 8: // $37
        __label__ = 9; break;
      case 9: // $38
        var $39=HEAP[$3];
        var $40=HEAP[$i];
        var $41=((($39) - ($40))&4294967295);
        var $42=((($41))>>>0) > 1;
        if ($42) { __label__ = 10; break; } else { __label__ = 14; break; }
      case 10: // $43
        var $44=HEAP[$i];
        var $45=HEAP[$3];
        var $46=((($44) + ($45))&4294967295);
        var $47=Math.floor(((($46))>>>0)/2);
        HEAP[$m]=$47;
        var $48=HEAP[$2];
        var $49=HEAP[$m];
        var $50=_luaH_getnum($48, $49);
        var $51=(($50+8)&4294967295);
        var $52=HEAP[$51];
        var $53=((($52))|0)==0;
        if ($53) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $54
        var $55=HEAP[$m];
        HEAP[$3]=$55;
        __label__ = 13; break;
      case 12: // $56
        var $57=HEAP[$m];
        HEAP[$i]=$57;
        __label__ = 13; break;
      case 13: // $58
        __label__ = 9; break;
      case 14: // $59
        var $60=HEAP[$i];
        HEAP[$1]=$60;
        __label__ = 15; break;
      case 15: // $61
        var $62=HEAP[$1];
        STACKTOP = __stackBase__;
        return $62;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getfreepos($t) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$t;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$2];
        var $5=(($4+20)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+-28)&4294967295);
        HEAP[$5]=$7;
        var $8=HEAP[$2];
        var $9=(($8+16)&4294967295);
        var $10=HEAP[$9];
        var $11=((($6))>>>0) > ((($10))>>>0);
        if ($11) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $12
        var $13=HEAP[$2];
        var $14=(($13+20)&4294967295);
        var $15=HEAP[$14];
        var $16=(($15+12)&4294967295);
        var $17=$16;
        var $18=(($17+8)&4294967295);
        var $19=HEAP[$18];
        var $20=((($19))|0)==0;
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $21
        var $22=HEAP[$2];
        var $23=(($22+20)&4294967295);
        var $24=HEAP[$23];
        HEAP[$1]=$24;
        __label__ = 6; break;
      case 4: // $25
        __label__ = 1; break;
      case 5: // $26
        HEAP[$1]=0;
        __label__ = 6; break;
      case 6: // $27
        var $28=HEAP[$1];
        STACKTOP = __stackBase__;
        return $28;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _rehash($L, $t, $ek) {
    var __stackBase__  = STACKTOP; STACKTOP += 136; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 136);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $nasize=__stackBase__+12;
        var $na=__stackBase__+16;
        var $nums=__stackBase__+20;
        var $i=__stackBase__+128;
        var $totaluse=__stackBase__+132;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        HEAP[$3]=$ek;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$i];
        var $6=((($5))|0) <= 26;
        if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $7
        var $8=HEAP[$i];
        var $9=(($nums+$8*4)&4294967295);
        HEAP[$9]=0;
        __label__ = 3; break;
      case 3: // $10
        var $11=HEAP[$i];
        var $12=((($11) + 1)&4294967295);
        HEAP[$i]=$12;
        __label__ = 1; break;
      case 4: // $13
        var $14=HEAP[$2];
        var $15=(($nums)&4294967295);
        var $16=_numusearray($14, $15);
        HEAP[$nasize]=$16;
        var $17=HEAP[$nasize];
        HEAP[$totaluse]=$17;
        var $18=HEAP[$2];
        var $19=(($nums)&4294967295);
        var $20=_numusehash($18, $19, $nasize);
        var $21=HEAP[$totaluse];
        var $22=((($21) + ($20))&4294967295);
        HEAP[$totaluse]=$22;
        var $23=HEAP[$3];
        var $24=(($nums)&4294967295);
        var $25=_countint($23, $24);
        var $26=HEAP[$nasize];
        var $27=((($26) + ($25))&4294967295);
        HEAP[$nasize]=$27;
        var $28=HEAP[$totaluse];
        var $29=((($28) + 1)&4294967295);
        HEAP[$totaluse]=$29;
        var $30=(($nums)&4294967295);
        var $31=_computesizes($30, $nasize);
        HEAP[$na]=$31;
        var $32=HEAP[$1];
        var $33=HEAP[$2];
        var $34=HEAP[$nasize];
        var $35=HEAP[$totaluse];
        var $36=HEAP[$na];
        var $37=((($35) - ($36))&4294967295);
        _resize($32, $33, $34, $37);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _numusearray($t, $nums) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $lg=__stackBase__+8;
        var $ttlg=__stackBase__+12;
        var $ause=__stackBase__+16;
        var $i=__stackBase__+20;
        var $lc=__stackBase__+24;
        var $lim=__stackBase__+28;
        HEAP[$1]=$t;
        HEAP[$2]=$nums;
        HEAP[$ause]=0;
        HEAP[$i]=1;
        HEAP[$lg]=0;
        HEAP[$ttlg]=1;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$lg];
        var $5=((($4))|0) <= 26;
        if ($5) { __label__ = 2; break; } else { __label__ = 14; break; }
      case 2: // $6
        HEAP[$lc]=0;
        var $7=HEAP[$ttlg];
        HEAP[$lim]=$7;
        var $8=HEAP[$lim];
        var $9=HEAP[$1];
        var $10=(($9+28)&4294967295);
        var $11=HEAP[$10];
        var $12=((($8))|0) > ((($11))|0);
        if ($12) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $13
        var $14=HEAP[$1];
        var $15=(($14+28)&4294967295);
        var $16=HEAP[$15];
        HEAP[$lim]=$16;
        var $17=HEAP[$i];
        var $18=HEAP[$lim];
        var $19=((($17))|0) > ((($18))|0);
        if ($19) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $20
        __label__ = 14; break;
      case 5: // $21
        __label__ = 6; break;
      case 6: // $22
        __label__ = 7; break;
      case 7: // $23
        var $24=HEAP[$i];
        var $25=HEAP[$lim];
        var $26=((($24))|0) <= ((($25))|0);
        if ($26) { __label__ = 8; break; } else { __label__ = 12; break; }
      case 8: // $27
        var $28=HEAP[$i];
        var $29=((($28) - 1)&4294967295);
        var $30=HEAP[$1];
        var $31=(($30+12)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+12*$29)&4294967295);
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=((($35))|0)==0;
        if ($36) { __label__ = 10; break; } else { __label__ = 9; break; }
      case 9: // $37
        var $38=HEAP[$lc];
        var $39=((($38) + 1)&4294967295);
        HEAP[$lc]=$39;
        __label__ = 10; break;
      case 10: // $40
        __label__ = 11; break;
      case 11: // $41
        var $42=HEAP[$i];
        var $43=((($42) + 1)&4294967295);
        HEAP[$i]=$43;
        __label__ = 7; break;
      case 12: // $44
        var $45=HEAP[$lc];
        var $46=HEAP[$lg];
        var $47=HEAP[$2];
        var $48=(($47+4*$46)&4294967295);
        var $49=HEAP[$48];
        var $50=((($49) + ($45))&4294967295);
        HEAP[$48]=$50;
        var $51=HEAP[$lc];
        var $52=HEAP[$ause];
        var $53=((($52) + ($51))&4294967295);
        HEAP[$ause]=$53;
        __label__ = 13; break;
      case 13: // $54
        var $55=HEAP[$lg];
        var $56=((($55) + 1)&4294967295);
        HEAP[$lg]=$56;
        var $57=HEAP[$ttlg];
        var $58=((($57) * 2)&4294967295);
        HEAP[$ttlg]=$58;
        __label__ = 1; break;
      case 14: // $59
        var $60=HEAP[$ause];
        STACKTOP = __stackBase__;
        return $60;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _numusehash($t, $nums, $pnasize) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $totaluse=__stackBase__+12;
        var $ause=__stackBase__+16;
        var $i=__stackBase__+20;
        var $n=__stackBase__+24;
        HEAP[$1]=$t;
        HEAP[$2]=$nums;
        HEAP[$3]=$pnasize;
        HEAP[$totaluse]=0;
        HEAP[$ause]=0;
        var $4=HEAP[$1];
        var $5=(($4+7)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        var $8=1 << ($7);
        HEAP[$i]=$8;
        __label__ = 1; break;
      case 1: // $9
        var $10=HEAP[$i];
        var $11=((($10) + -1)&4294967295);
        HEAP[$i]=$11;
        var $12=((($10))|0)!=0;
        if ($12) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $13
        var $14=HEAP[$i];
        var $15=HEAP[$1];
        var $16=(($15+16)&4294967295);
        var $17=HEAP[$16];
        var $18=(($17+28*$14)&4294967295);
        HEAP[$n]=$18;
        var $19=HEAP[$n];
        var $20=(($19)&4294967295);
        var $21=(($20+8)&4294967295);
        var $22=HEAP[$21];
        var $23=((($22))|0)==0;
        if ($23) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $24
        var $25=HEAP[$n];
        var $26=(($25+12)&4294967295);
        var $27=$26;
        var $28=HEAP[$2];
        var $29=_countint($27, $28);
        var $30=HEAP[$ause];
        var $31=((($30) + ($29))&4294967295);
        HEAP[$ause]=$31;
        var $32=HEAP[$totaluse];
        var $33=((($32) + 1)&4294967295);
        HEAP[$totaluse]=$33;
        __label__ = 4; break;
      case 4: // $34
        __label__ = 1; break;
      case 5: // $35
        var $36=HEAP[$ause];
        var $37=HEAP[$3];
        var $38=HEAP[$37];
        var $39=((($38) + ($36))&4294967295);
        HEAP[$37]=$39;
        var $40=HEAP[$totaluse];
        STACKTOP = __stackBase__;
        return $40;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _countint($key, $nums) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $k=__stackBase__+12;
        HEAP[$2]=$key;
        HEAP[$3]=$nums;
        var $4=HEAP[$2];
        var $5=_arrayindex($4);
        HEAP[$k]=$5;
        var $6=HEAP[$k];
        var $7=0 < ((($6))|0);
        if ($7) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $8
        var $9=HEAP[$k];
        var $10=((($9))|0) <= 67108864;
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $11
        var $12=HEAP[$k];
        var $13=((($12) - 1)&4294967295);
        var $14=_luaO_log2($13);
        var $15=((($14) + 1)&4294967295);
        var $16=HEAP[$3];
        var $17=(($16+4*$15)&4294967295);
        var $18=HEAP[$17];
        var $19=((($18) + 1)&4294967295);
        HEAP[$17]=$19;
        HEAP[$1]=1;
        __label__ = 4; break;
      case 3: // $20
        HEAP[$1]=0;
        __label__ = 4; break;
      case 4: // $21
        var $22=HEAP[$1];
        STACKTOP = __stackBase__;
        return $22;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _computesizes($nums, $narray) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $twotoi=__stackBase__+12;
        var $a=__stackBase__+16;
        var $na=__stackBase__+20;
        var $n=__stackBase__+24;
        HEAP[$1]=$nums;
        HEAP[$2]=$narray;
        HEAP[$a]=0;
        HEAP[$na]=0;
        HEAP[$n]=0;
        HEAP[$i]=0;
        HEAP[$twotoi]=1;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$twotoi];
        var $5=((((($4))|0)/2)|0);
        var $6=HEAP[$2];
        var $7=HEAP[$6];
        var $8=((($5))|0) < ((($7))|0);
        if ($8) { __label__ = 2; break; } else { __label__ = 10; break; }
      case 2: // $9
        var $10=HEAP[$i];
        var $11=HEAP[$1];
        var $12=(($11+4*$10)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0) > 0;
        if ($14) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $15
        var $16=HEAP[$i];
        var $17=HEAP[$1];
        var $18=(($17+4*$16)&4294967295);
        var $19=HEAP[$18];
        var $20=HEAP[$a];
        var $21=((($20) + ($19))&4294967295);
        HEAP[$a]=$21;
        var $22=HEAP[$a];
        var $23=HEAP[$twotoi];
        var $24=((((($23))|0)/2)|0);
        var $25=((($22))|0) > ((($24))|0);
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $26
        var $27=HEAP[$twotoi];
        HEAP[$n]=$27;
        var $28=HEAP[$a];
        HEAP[$na]=$28;
        __label__ = 5; break;
      case 5: // $29
        __label__ = 6; break;
      case 6: // $30
        var $31=HEAP[$a];
        var $32=HEAP[$2];
        var $33=HEAP[$32];
        var $34=((($31))|0)==((($33))|0);
        if ($34) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $35
        __label__ = 10; break;
      case 8: // $36
        __label__ = 9; break;
      case 9: // $37
        var $38=HEAP[$i];
        var $39=((($38) + 1)&4294967295);
        HEAP[$i]=$39;
        var $40=HEAP[$twotoi];
        var $41=((($40) * 2)&4294967295);
        HEAP[$twotoi]=$41;
        __label__ = 1; break;
      case 10: // $42
        var $43=HEAP[$n];
        var $44=HEAP[$2];
        HEAP[$44]=$43;
        var $45=HEAP[$na];
        STACKTOP = __stackBase__;
        return $45;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _arrayindex($key) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $n=__stackBase__+8;
        var $k=__stackBase__+16;
        HEAP[$2]=$key;
        var $3=HEAP[$2];
        var $4=(($3+8)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)==3;
        if ($6) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $7
        var $8=HEAP[$2];
        var $9=(($8)&4294967295);
        var $10=$9;
        var $11=HEAP[$10];
        HEAP[$n]=$11;
        var $12=HEAP[$n];
        var $13=((($12))|0);
        HEAP[$k]=$13;
        var $14=HEAP[$k];
        var $15=((($14))|0);
        var $16=HEAP[$n];
        var $17=($15) == ($16);
        if ($17) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $18
        var $19=HEAP[$k];
        HEAP[$1]=$19;
        __label__ = 5; break;
      case 3: // $20
        __label__ = 4; break;
      case 4: // $21
        HEAP[$1]=-1;
        __label__ = 5; break;
      case 5: // $22
        var $23=HEAP[$1];
        STACKTOP = __stackBase__;
        return $23;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaopen_table($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_register($2, ((__str565)&4294967295), ((_tab_funcs)&4294967295));
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _tconcat($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8224; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8224);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $b=__stackBase__+4;
        var $lsep=__stackBase__+8208;
        var $i=__stackBase__+8212;
        var $last=__stackBase__+8216;
        var $sep=__stackBase__+8220;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_optlstring($2, 2, ((__str10575)&4294967295), $lsep);
        HEAP[$sep]=$3;
        var $4=HEAP[$1];
        _luaL_checktype($4, 1, 5);
        var $5=HEAP[$1];
        var $6=_luaL_optinteger($5, 3, 1);
        HEAP[$i]=$6;
        var $7=HEAP[$1];
        var $8=_lua_type($7, 4);
        var $9=((($8))|0) <= 0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$1];
        var $12=_lua_objlen($11, 1);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $13
        var $14=HEAP[$1];
        var $15=_luaL_checkinteger($14, 4);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $16
        var $17=__lastLabel__ == 1 ? $12 : ($15);
        HEAP[$last]=$17;
        var $18=HEAP[$1];
        _luaL_buffinit($18, $b);
        __label__ = 4; break;
      case 4: // $19
        var $20=HEAP[$i];
        var $21=HEAP[$last];
        var $22=((($20))|0) < ((($21))|0);
        if ($22) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$i];
        _addfield($24, $b, $25);
        var $26=HEAP[$sep];
        var $27=HEAP[$lsep];
        _luaL_addlstring($b, $26, $27);
        __label__ = 6; break;
      case 6: // $28
        var $29=HEAP[$i];
        var $30=((($29) + 1)&4294967295);
        HEAP[$i]=$30;
        __label__ = 4; break;
      case 7: // $31
        var $32=HEAP[$i];
        var $33=HEAP[$last];
        var $34=((($32))|0)==((($33))|0);
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $35
        var $36=HEAP[$1];
        var $37=HEAP[$i];
        _addfield($36, $b, $37);
        __label__ = 9; break;
      case 9: // $38
        _luaL_pushresult($b);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _foreach($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checktype($3, 1, 5);
        var $4=HEAP[$2];
        _luaL_checktype($4, 2, 6);
        var $5=HEAP[$2];
        _lua_pushnil($5);
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$2];
        var $8=_lua_next($7, 1);
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $10
        var $11=HEAP[$2];
        _lua_pushvalue($11, 2);
        var $12=HEAP[$2];
        _lua_pushvalue($12, -3);
        var $13=HEAP[$2];
        _lua_pushvalue($13, -3);
        var $14=HEAP[$2];
        _lua_call($14, 2, 1);
        var $15=HEAP[$2];
        var $16=_lua_type($15, -1);
        var $17=((($16))|0)==0;
        if ($17) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $18
        HEAP[$1]=1;
        __label__ = 6; break;
      case 4: // $19
        var $20=HEAP[$2];
        _lua_settop($20, -3);
        __label__ = 1; break;
      case 5: // $21
        HEAP[$1]=0;
        __label__ = 6; break;
      case 6: // $22
        var $23=HEAP[$1];
        STACKTOP = __stackBase__;
        return $23;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _foreachi($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $n=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checktype($3, 1, 5);
        var $4=HEAP[$2];
        var $5=_lua_objlen($4, 1);
        HEAP[$n]=$5;
        var $6=HEAP[$2];
        _luaL_checktype($6, 2, 6);
        HEAP[$i]=1;
        __label__ = 1; break;
      case 1: // $7
        var $8=HEAP[$i];
        var $9=HEAP[$n];
        var $10=((($8))|0) <= ((($9))|0);
        if ($10) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $11
        var $12=HEAP[$2];
        _lua_pushvalue($12, 2);
        var $13=HEAP[$2];
        var $14=HEAP[$i];
        _lua_pushinteger($13, $14);
        var $15=HEAP[$2];
        var $16=HEAP[$i];
        _lua_rawgeti($15, 1, $16);
        var $17=HEAP[$2];
        _lua_call($17, 2, 1);
        var $18=HEAP[$2];
        var $19=_lua_type($18, -1);
        var $20=((($19))|0)==0;
        if ($20) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $21
        HEAP[$1]=1;
        __label__ = 7; break;
      case 4: // $22
        var $23=HEAP[$2];
        _lua_settop($23, -2);
        __label__ = 5; break;
      case 5: // $24
        var $25=HEAP[$i];
        var $26=((($25) + 1)&4294967295);
        HEAP[$i]=$26;
        __label__ = 1; break;
      case 6: // $27
        HEAP[$1]=0;
        __label__ = 7; break;
      case 7: // $28
        var $29=HEAP[$1];
        STACKTOP = __stackBase__;
        return $29;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getn($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=HEAP[$1];
    _luaL_checktype($3, 1, 5);
    var $4=HEAP[$1];
    var $5=_lua_objlen($4, 1);
    _lua_pushinteger($2, $5);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _maxn($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $max=__stackBase__+4;
        var $v=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$max]=0;
        var $2=HEAP[$1];
        _luaL_checktype($2, 1, 5);
        var $3=HEAP[$1];
        _lua_pushnil($3);
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$1];
        var $6=_lua_next($5, 1);
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 2; break; } else { __label__ = 7; break; }
      case 2: // $8
        var $9=HEAP[$1];
        _lua_settop($9, -2);
        var $10=HEAP[$1];
        var $11=_lua_type($10, -1);
        var $12=((($11))|0)==3;
        if ($12) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $13
        var $14=HEAP[$1];
        var $15=_lua_tonumber($14, -1);
        HEAP[$v]=$15;
        var $16=HEAP[$v];
        var $17=HEAP[$max];
        var $18=($16) > ($17);
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $19
        var $20=HEAP[$v];
        HEAP[$max]=$20;
        __label__ = 5; break;
      case 5: // $21
        __label__ = 6; break;
      case 6: // $22
        __label__ = 1; break;
      case 7: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$max];
        _lua_pushnumber($24, $25);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tinsert($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $e=__stackBase__+8;
        var $pos=__stackBase__+12;
        var $i=__stackBase__+16;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checktype($3, 1, 5);
        var $4=HEAP[$2];
        var $5=_lua_objlen($4, 1);
        var $6=((($5) + 1)&4294967295);
        HEAP[$e]=$6;
        var $7=HEAP[$2];
        var $8=_lua_gettop($7);
        if ($8 == 2) {
          __label__ = 1; break;
        }
        else if ($8 == 3) {
          __label__ = 2; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 1: // $9
        var $10=HEAP[$e];
        HEAP[$pos]=$10;
        __label__ = 10; break;
      case 2: // $11
        var $12=HEAP[$2];
        var $13=_luaL_checkinteger($12, 2);
        HEAP[$pos]=$13;
        var $14=HEAP[$pos];
        var $15=HEAP[$e];
        var $16=((($14))|0) > ((($15))|0);
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        var $18=HEAP[$pos];
        HEAP[$e]=$18;
        __label__ = 4; break;
      case 4: // $19
        var $20=HEAP[$e];
        HEAP[$i]=$20;
        __label__ = 5; break;
      case 5: // $21
        var $22=HEAP[$i];
        var $23=HEAP[$pos];
        var $24=((($22))|0) > ((($23))|0);
        if ($24) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $25
        var $26=HEAP[$2];
        var $27=HEAP[$i];
        var $28=((($27) - 1)&4294967295);
        _lua_rawgeti($26, 1, $28);
        var $29=HEAP[$2];
        var $30=HEAP[$i];
        _lua_rawseti($29, 1, $30);
        __label__ = 7; break;
      case 7: // $31
        var $32=HEAP[$i];
        var $33=((($32) + -1)&4294967295);
        HEAP[$i]=$33;
        __label__ = 5; break;
      case 8: // $34
        __label__ = 10; break;
      case 9: // $35
        var $36=HEAP[$2];
        var $37=_luaL_error($36, ((__str13578)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$37;
        __label__ = 11; break;
      case 10: // $38
        var $39=HEAP[$2];
        var $40=HEAP[$pos];
        _lua_rawseti($39, 1, $40);
        HEAP[$1]=0;
        __label__ = 11; break;
      case 11: // $41
        var $42=HEAP[$1];
        STACKTOP = __stackBase__;
        return $42;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tremove($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $e=__stackBase__+8;
        var $pos=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        _luaL_checktype($3, 1, 5);
        var $4=HEAP[$2];
        var $5=_lua_objlen($4, 1);
        HEAP[$e]=$5;
        var $6=HEAP[$2];
        var $7=HEAP[$e];
        var $8=_luaL_optinteger($6, 2, $7);
        HEAP[$pos]=$8;
        var $9=HEAP[$pos];
        var $10=1 <= ((($9))|0);
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=HEAP[$pos];
        var $13=HEAP[$e];
        var $14=((($12))|0) <= ((($13))|0);
        if ($14) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $15
        HEAP[$1]=0;
        __label__ = 8; break;
      case 3: // $16
        var $17=HEAP[$2];
        var $18=HEAP[$pos];
        _lua_rawgeti($17, 1, $18);
        __label__ = 4; break;
      case 4: // $19
        var $20=HEAP[$pos];
        var $21=HEAP[$e];
        var $22=((($20))|0) < ((($21))|0);
        if ($22) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $23
        var $24=HEAP[$2];
        var $25=HEAP[$pos];
        var $26=((($25) + 1)&4294967295);
        _lua_rawgeti($24, 1, $26);
        var $27=HEAP[$2];
        var $28=HEAP[$pos];
        _lua_rawseti($27, 1, $28);
        __label__ = 6; break;
      case 6: // $29
        var $30=HEAP[$pos];
        var $31=((($30) + 1)&4294967295);
        HEAP[$pos]=$31;
        __label__ = 4; break;
      case 7: // $32
        var $33=HEAP[$2];
        _lua_pushnil($33);
        var $34=HEAP[$2];
        var $35=HEAP[$e];
        _lua_rawseti($34, 1, $35);
        HEAP[$1]=1;
        __label__ = 8; break;
      case 8: // $36
        var $37=HEAP[$1];
        STACKTOP = __stackBase__;
        return $37;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setn($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checktype($2, 1, 5);
    var $3=HEAP[$1];
    var $4=_luaL_error($3, ((__str12577)&4294967295), allocate(1, "i32", ALLOC_STACK));
    var $5=HEAP[$1];
    _lua_pushvalue($5, 1);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _sort($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $n=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        _luaL_checktype($2, 1, 5);
        var $3=HEAP[$1];
        var $4=_lua_objlen($3, 1);
        HEAP[$n]=$4;
        var $5=HEAP[$1];
        _luaL_checkstack($5, 40, ((__str10575)&4294967295));
        var $6=HEAP[$1];
        var $7=_lua_type($6, 2);
        var $8=((($7))|0) <= 0;
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $9
        var $10=HEAP[$1];
        _luaL_checktype($10, 2, 6);
        __label__ = 2; break;
      case 2: // $11
        var $12=HEAP[$1];
        _lua_settop($12, 2);
        var $13=HEAP[$1];
        var $14=HEAP[$n];
        _auxsort($13, 1, $14);
        STACKTOP = __stackBase__;
        return 0;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _auxsort($L, $l, $u) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $j=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$l;
        HEAP[$3]=$u;
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=((($5))|0) < ((($6))|0);
        if ($7) { __label__ = 2; break; } else { __label__ = 33; break; }
      case 2: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$2];
        _lua_rawgeti($9, 1, $10);
        var $11=HEAP[$1];
        var $12=HEAP[$3];
        _lua_rawgeti($11, 1, $12);
        var $13=HEAP[$1];
        var $14=_sort_comp($13, -1, -2);
        var $15=((($14))|0)!=0;
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $16
        var $17=HEAP[$1];
        var $18=HEAP[$2];
        var $19=HEAP[$3];
        _set2($17, $18, $19);
        __label__ = 5; break;
      case 4: // $20
        var $21=HEAP[$1];
        _lua_settop($21, -3);
        __label__ = 5; break;
      case 5: // $22
        var $23=HEAP[$3];
        var $24=HEAP[$2];
        var $25=((($23) - ($24))&4294967295);
        var $26=((($25))|0)==1;
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $27
        __label__ = 33; break;
      case 7: // $28
        var $29=HEAP[$2];
        var $30=HEAP[$3];
        var $31=((($29) + ($30))&4294967295);
        var $32=((((($31))|0)/2)|0);
        HEAP[$i]=$32;
        var $33=HEAP[$1];
        var $34=HEAP[$i];
        _lua_rawgeti($33, 1, $34);
        var $35=HEAP[$1];
        var $36=HEAP[$2];
        _lua_rawgeti($35, 1, $36);
        var $37=HEAP[$1];
        var $38=_sort_comp($37, -2, -1);
        var $39=((($38))|0)!=0;
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $40
        var $41=HEAP[$1];
        var $42=HEAP[$i];
        var $43=HEAP[$2];
        _set2($41, $42, $43);
        __label__ = 13; break;
      case 9: // $44
        var $45=HEAP[$1];
        _lua_settop($45, -2);
        var $46=HEAP[$1];
        var $47=HEAP[$3];
        _lua_rawgeti($46, 1, $47);
        var $48=HEAP[$1];
        var $49=_sort_comp($48, -1, -2);
        var $50=((($49))|0)!=0;
        if ($50) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $51
        var $52=HEAP[$1];
        var $53=HEAP[$i];
        var $54=HEAP[$3];
        _set2($52, $53, $54);
        __label__ = 12; break;
      case 11: // $55
        var $56=HEAP[$1];
        _lua_settop($56, -3);
        __label__ = 12; break;
      case 12: // $57
        __label__ = 13; break;
      case 13: // $58
        var $59=HEAP[$3];
        var $60=HEAP[$2];
        var $61=((($59) - ($60))&4294967295);
        var $62=((($61))|0)==2;
        if ($62) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $63
        __label__ = 33; break;
      case 15: // $64
        var $65=HEAP[$1];
        var $66=HEAP[$i];
        _lua_rawgeti($65, 1, $66);
        var $67=HEAP[$1];
        _lua_pushvalue($67, -1);
        var $68=HEAP[$1];
        var $69=HEAP[$3];
        var $70=((($69) - 1)&4294967295);
        _lua_rawgeti($68, 1, $70);
        var $71=HEAP[$1];
        var $72=HEAP[$i];
        var $73=HEAP[$3];
        var $74=((($73) - 1)&4294967295);
        _set2($71, $72, $74);
        var $75=HEAP[$2];
        HEAP[$i]=$75;
        var $76=HEAP[$3];
        var $77=((($76) - 1)&4294967295);
        HEAP[$j]=$77;
        __label__ = 16; break;
      case 16: // $78
        __label__ = 17; break;
      case 17: // $79
        var $80=HEAP[$1];
        var $81=HEAP[$i];
        var $82=((($81) + 1)&4294967295);
        HEAP[$i]=$82;
        _lua_rawgeti($80, 1, $82);
        var $83=HEAP[$1];
        var $84=_sort_comp($83, -1, -2);
        var $85=((($84))|0)!=0;
        if ($85) { __label__ = 18; break; } else { __label__ = 21; break; }
      case 18: // $86
        var $87=HEAP[$i];
        var $88=HEAP[$3];
        var $89=((($87))|0) > ((($88))|0);
        if ($89) { __label__ = 19; break; } else { __label__ = 20; break; }
      case 19: // $90
        var $91=HEAP[$1];
        var $92=_luaL_error($91, ((__str11576)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 20; break;
      case 20: // $93
        var $94=HEAP[$1];
        _lua_settop($94, -2);
        __label__ = 17; break;
      case 21: // $95
        __label__ = 22; break;
      case 22: // $96
        var $97=HEAP[$1];
        var $98=HEAP[$j];
        var $99=((($98) + -1)&4294967295);
        HEAP[$j]=$99;
        _lua_rawgeti($97, 1, $99);
        var $100=HEAP[$1];
        var $101=_sort_comp($100, -3, -1);
        var $102=((($101))|0)!=0;
        if ($102) { __label__ = 23; break; } else { __label__ = 26; break; }
      case 23: // $103
        var $104=HEAP[$j];
        var $105=HEAP[$2];
        var $106=((($104))|0) < ((($105))|0);
        if ($106) { __label__ = 24; break; } else { __label__ = 25; break; }
      case 24: // $107
        var $108=HEAP[$1];
        var $109=_luaL_error($108, ((__str11576)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 25; break;
      case 25: // $110
        var $111=HEAP[$1];
        _lua_settop($111, -2);
        __label__ = 22; break;
      case 26: // $112
        var $113=HEAP[$j];
        var $114=HEAP[$i];
        var $115=((($113))|0) < ((($114))|0);
        if ($115) { __label__ = 27; break; } else { __label__ = 28; break; }
      case 27: // $116
        var $117=HEAP[$1];
        _lua_settop($117, -4);
        __label__ = 29; break;
      case 28: // $118
        var $119=HEAP[$1];
        var $120=HEAP[$i];
        var $121=HEAP[$j];
        _set2($119, $120, $121);
        __label__ = 16; break;
      case 29: // $122
        var $123=HEAP[$1];
        var $124=HEAP[$3];
        var $125=((($124) - 1)&4294967295);
        _lua_rawgeti($123, 1, $125);
        var $126=HEAP[$1];
        var $127=HEAP[$i];
        _lua_rawgeti($126, 1, $127);
        var $128=HEAP[$1];
        var $129=HEAP[$3];
        var $130=((($129) - 1)&4294967295);
        var $131=HEAP[$i];
        _set2($128, $130, $131);
        var $132=HEAP[$i];
        var $133=HEAP[$2];
        var $134=((($132) - ($133))&4294967295);
        var $135=HEAP[$3];
        var $136=HEAP[$i];
        var $137=((($135) - ($136))&4294967295);
        var $138=((($134))|0) < ((($137))|0);
        if ($138) { __label__ = 30; break; } else { __label__ = 31; break; }
      case 30: // $139
        var $140=HEAP[$2];
        HEAP[$j]=$140;
        var $141=HEAP[$i];
        var $142=((($141) - 1)&4294967295);
        HEAP[$i]=$142;
        var $143=HEAP[$i];
        var $144=((($143) + 2)&4294967295);
        HEAP[$2]=$144;
        __label__ = 32; break;
      case 31: // $145
        var $146=HEAP[$i];
        var $147=((($146) + 1)&4294967295);
        HEAP[$j]=$147;
        var $148=HEAP[$3];
        HEAP[$i]=$148;
        var $149=HEAP[$j];
        var $150=((($149) - 2)&4294967295);
        HEAP[$3]=$150;
        __label__ = 32; break;
      case 32: // $151
        var $152=HEAP[$1];
        var $153=HEAP[$j];
        var $154=HEAP[$i];
        _auxsort($152, $153, $154);
        __label__ = 1; break;
      case 33: // $155
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sort_comp($L, $a, $b) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $res=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$a;
        HEAP[$4]=$b;
        var $5=HEAP[$2];
        var $6=_lua_type($5, 2);
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$2];
        _lua_pushvalue($9, 2);
        var $10=HEAP[$2];
        var $11=HEAP[$3];
        var $12=((($11) - 1)&4294967295);
        _lua_pushvalue($10, $12);
        var $13=HEAP[$2];
        var $14=HEAP[$4];
        var $15=((($14) - 2)&4294967295);
        _lua_pushvalue($13, $15);
        var $16=HEAP[$2];
        _lua_call($16, 2, 1);
        var $17=HEAP[$2];
        var $18=_lua_toboolean($17, -1);
        HEAP[$res]=$18;
        var $19=HEAP[$2];
        _lua_settop($19, -2);
        var $20=HEAP[$res];
        HEAP[$1]=$20;
        __label__ = 3; break;
      case 2: // $21
        var $22=HEAP[$2];
        var $23=HEAP[$3];
        var $24=HEAP[$4];
        var $25=_lua_lessthan($22, $23, $24);
        HEAP[$1]=$25;
        __label__ = 3; break;
      case 3: // $26
        var $27=HEAP[$1];
        STACKTOP = __stackBase__;
        return $27;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _set2($L, $i, $j) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$i;
    HEAP[$3]=$j;
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    _lua_rawseti($4, 1, $5);
    var $6=HEAP[$1];
    var $7=HEAP[$3];
    _lua_rawseti($6, 1, $7);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _addfield($L, $b, $i) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$b;
        HEAP[$3]=$i;
        var $4=HEAP[$1];
        var $5=HEAP[$3];
        _lua_rawgeti($4, 1, $5);
        var $6=HEAP[$1];
        var $7=_lua_isstring($6, -1);
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $9
        var $10=HEAP[$1];
        var $11=HEAP[$1];
        var $12=HEAP[$1];
        var $13=_lua_type($12, -1);
        var $14=_lua_typename($11, $13);
        var $15=HEAP[$3];
        var $16=_luaL_error($10, ((__str14579)&4294967295), allocate([$14,0,0,0,$15,0,0,0], ["i8*",0,0,0,"i32",0,0,0], ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $17
        var $18=HEAP[$2];
        _luaL_addvalue($18);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaT_init($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        HEAP[$1]=$L;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$i];
        var $4=((($3))|0) < 17;
        if ($4) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $5
        var $6=HEAP[$1];
        var $7=HEAP[$i];
        var $8=((_luaT_init_luaT_eventname+$7*4)&4294967295);
        var $9=HEAP[$8];
        var $10=HEAP[$i];
        var $11=((_luaT_init_luaT_eventname+$10*4)&4294967295);
        var $12=HEAP[$11];
        var $13=_strlen($12);
        var $14=_luaS_newlstr($6, $9, $13);
        var $15=HEAP[$i];
        var $16=HEAP[$1];
        var $17=(($16+16)&4294967295);
        var $18=HEAP[$17];
        var $19=(($18+168)&4294967295);
        var $20=(($19+$15*4)&4294967295);
        HEAP[$20]=$14;
        var $21=HEAP[$i];
        var $22=HEAP[$1];
        var $23=(($22+16)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+168)&4294967295);
        var $26=(($25+$21*4)&4294967295);
        var $27=HEAP[$26];
        var $28=$27;
        var $29=(($28+5)&4294967295);
        var $30=HEAP[$29];
        var $31=unSign(($30), 8, 0);
        var $32=($31) | 32;
        var $33=((($32)) & 255);
        HEAP[$29]=$33;
        __label__ = 3; break;
      case 3: // $34
        var $35=HEAP[$i];
        var $36=((($35) + 1)&4294967295);
        HEAP[$i]=$36;
        __label__ = 1; break;
      case 4: // $37
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaT_gettm($events, $event, $ename) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $tm=__stackBase__+16;
        HEAP[$2]=$events;
        HEAP[$3]=$event;
        HEAP[$4]=$ename;
        var $5=HEAP[$2];
        var $6=HEAP[$4];
        var $7=_luaH_getstr($5, $6);
        HEAP[$tm]=$7;
        var $8=HEAP[$tm];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10))|0)==0;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$3];
        var $14=1 << ($13);
        var $15=((($14)) & 255);
        var $16=unSign(($15), 8, 0);
        var $17=HEAP[$2];
        var $18=(($17+6)&4294967295);
        var $19=HEAP[$18];
        var $20=unSign(($19), 8, 0);
        var $21=($20) | ($16);
        var $22=((($21)) & 255);
        HEAP[$18]=$22;
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $23
        var $24=HEAP[$tm];
        HEAP[$1]=$24;
        __label__ = 3; break;
      case 3: // $25
        var $26=HEAP[$1];
        STACKTOP = __stackBase__;
        return $26;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaT_gettmbyobj($L, $o, $event) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $mt=__stackBase__+12;
        HEAP[$1]=$L;
        HEAP[$2]=$o;
        HEAP[$3]=$event;
        var $4=HEAP[$2];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        if ($6 == 5) {
          __label__ = 1; break;
        }
        else if ($6 == 7) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $7
        var $8=HEAP[$2];
        var $9=(($8)&4294967295);
        var $10=$9;
        var $11=HEAP[$10];
        var $12=$11;
        var $13=(($12+8)&4294967295);
        var $14=HEAP[$13];
        HEAP[$mt]=$14;
        __label__ = 4; break;
      case 2: // $15
        var $16=HEAP[$2];
        var $17=(($16)&4294967295);
        var $18=$17;
        var $19=HEAP[$18];
        var $20=$19;
        var $21=$20;
        var $22=(($21+8)&4294967295);
        var $23=HEAP[$22];
        HEAP[$mt]=$23;
        __label__ = 4; break;
      case 3: // $24
        var $25=HEAP[$2];
        var $26=(($25+8)&4294967295);
        var $27=HEAP[$26];
        var $28=HEAP[$1];
        var $29=(($28+16)&4294967295);
        var $30=HEAP[$29];
        var $31=(($30+132)&4294967295);
        var $32=(($31+$27*4)&4294967295);
        var $33=HEAP[$32];
        HEAP[$mt]=$33;
        __label__ = 4; break;
      case 4: // $34
        var $35=HEAP[$mt];
        var $36=((($35))|0)!=0;
        if ($36) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $37
        var $38=HEAP[$mt];
        var $39=HEAP[$3];
        var $40=HEAP[$1];
        var $41=(($40+16)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+168)&4294967295);
        var $44=(($43+$39*4)&4294967295);
        var $45=HEAP[$44];
        var $46=_luaH_getstr($38, $45);
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $47
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $48
        var $49=__lastLabel__ == 5 ? $46 : (_luaO_nilobject_);
        STACKTOP = __stackBase__;
        return $49;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaU_undump($L, $Z, $buff, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $S=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$Z;
        HEAP[$3]=$buff;
        HEAP[$4]=$name;
        var $5=HEAP[$4];
        var $6=HEAP[$5];
        var $7=reSign(($6), 8, 0);
        var $8=((($7))|0)==64;
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $9
        var $10=HEAP[$4];
        var $11=HEAP[$10];
        var $12=reSign(($11), 8, 0);
        var $13=((($12))|0)==61;
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $14
        var $15=HEAP[$4];
        var $16=(($15+1)&4294967295);
        var $17=(($S+12)&4294967295);
        HEAP[$17]=$16;
        __label__ = 7; break;
      case 3: // $18
        var $19=HEAP[$4];
        var $20=HEAP[$19];
        var $21=reSign(($20), 8, 0);
        var $22=HEAP[((__str612)&4294967295)];
        var $23=reSign(($22), 8, 0);
        var $24=((($21))|0)==((($23))|0);
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $25
        var $26=(($S+12)&4294967295);
        HEAP[$26]=((__str1613)&4294967295);
        __label__ = 6; break;
      case 5: // $27
        var $28=HEAP[$4];
        var $29=(($S+12)&4294967295);
        HEAP[$29]=$28;
        __label__ = 6; break;
      case 6: // $30
        __label__ = 7; break;
      case 7: // $31
        var $32=HEAP[$1];
        var $33=(($S)&4294967295);
        HEAP[$33]=$32;
        var $34=HEAP[$2];
        var $35=(($S+4)&4294967295);
        HEAP[$35]=$34;
        var $36=HEAP[$3];
        var $37=(($S+8)&4294967295);
        HEAP[$37]=$36;
        _LoadHeader($S);
        var $38=HEAP[$1];
        var $39=_luaS_newlstr($38, ((__str2614)&4294967295), 2);
        var $40=_LoadFunction($S, $39);
        STACKTOP = __stackBase__;
        return $40;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _LoadHeader($S) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $h=__stackBase__+4;
        var $s=__stackBase__+16;
        HEAP[$1]=$S;
        var $2=(($h)&4294967295);
        _luaU_header($2);
        var $3=HEAP[$1];
        var $4=(($s)&4294967295);
        _LoadBlock($3, $4, 12);
        var $5=(($h)&4294967295);
        var $6=(($s)&4294967295);
        var $7=_memcmp($5, $6, 12);
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$1];
        _error($10, ((__str9621)&4294967295));
        __label__ = 2; break;
      case 2: // $11
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _LoadFunction($S, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $f=__stackBase__+8;
        var $i_o=__stackBase__+12;
        HEAP[$1]=$S;
        HEAP[$2]=$p;
        var $3=HEAP[$1];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=(($5+52)&4294967295);
        var $7=HEAP[$6];
        var $8=((($7) + 1)&65535);
        HEAP[$6]=$8;
        var $9=unSign(($8), 16, 0);
        var $10=((($9))|0) > 200;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=HEAP[$1];
        _error($12, ((__str3615)&4294967295));
        __label__ = 2; break;
      case 2: // $13
        var $14=HEAP[$1];
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        var $17=_luaF_newproto($16);
        HEAP[$f]=$17;
        var $18=HEAP[$1];
        var $19=(($18)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+8)&4294967295);
        var $22=HEAP[$21];
        HEAP[$i_o]=$22;
        var $23=HEAP[$f];
        var $24=$23;
        var $25=HEAP[$i_o];
        var $26=(($25)&4294967295);
        var $27=$26;
        HEAP[$27]=$24;
        var $28=HEAP[$i_o];
        var $29=(($28+8)&4294967295);
        HEAP[$29]=9;
        var $30=HEAP[$1];
        var $31=(($30)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+28)&4294967295);
        var $34=HEAP[$33];
        var $35=$34;
        var $36=HEAP[$1];
        var $37=(($36)&4294967295);
        var $38=HEAP[$37];
        var $39=(($38+8)&4294967295);
        var $40=HEAP[$39];
        var $41=$40;
        var $42=($35);
        var $43=($41);
        var $44=((($42) - ($43))&4294967295);
        var $45=((($44))|0) <= 12;
        if ($45) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $46
        var $47=HEAP[$1];
        var $48=(($47)&4294967295);
        var $49=HEAP[$48];
        _luaD_growstack($49, 1);
        __label__ = 5; break;
      case 4: // $50
        __label__ = 5; break;
      case 5: // $51
        var $52=HEAP[$1];
        var $53=(($52)&4294967295);
        var $54=HEAP[$53];
        var $55=(($54+8)&4294967295);
        var $56=HEAP[$55];
        var $57=(($56+12)&4294967295);
        HEAP[$55]=$57;
        var $58=HEAP[$1];
        var $59=_LoadString($58);
        var $60=HEAP[$f];
        var $61=(($60+32)&4294967295);
        HEAP[$61]=$59;
        var $62=HEAP[$f];
        var $63=(($62+32)&4294967295);
        var $64=HEAP[$63];
        var $65=((($64))|0)==0;
        if ($65) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $66
        var $67=HEAP[$2];
        var $68=HEAP[$f];
        var $69=(($68+32)&4294967295);
        HEAP[$69]=$67;
        __label__ = 7; break;
      case 7: // $70
        var $71=HEAP[$1];
        var $72=_LoadInt($71);
        var $73=HEAP[$f];
        var $74=(($73+60)&4294967295);
        HEAP[$74]=$72;
        var $75=HEAP[$1];
        var $76=_LoadInt($75);
        var $77=HEAP[$f];
        var $78=(($77+64)&4294967295);
        HEAP[$78]=$76;
        var $79=HEAP[$1];
        var $80=_LoadChar($79);
        var $81=((($80)) & 255);
        var $82=HEAP[$f];
        var $83=(($82+72)&4294967295);
        HEAP[$83]=$81;
        var $84=HEAP[$1];
        var $85=_LoadChar($84);
        var $86=((($85)) & 255);
        var $87=HEAP[$f];
        var $88=(($87+73)&4294967295);
        HEAP[$88]=$86;
        var $89=HEAP[$1];
        var $90=_LoadChar($89);
        var $91=((($90)) & 255);
        var $92=HEAP[$f];
        var $93=(($92+74)&4294967295);
        HEAP[$93]=$91;
        var $94=HEAP[$1];
        var $95=_LoadChar($94);
        var $96=((($95)) & 255);
        var $97=HEAP[$f];
        var $98=(($97+75)&4294967295);
        HEAP[$98]=$96;
        var $99=HEAP[$1];
        var $100=HEAP[$f];
        _LoadCode($99, $100);
        var $101=HEAP[$1];
        var $102=HEAP[$f];
        _LoadConstants($101, $102);
        var $103=HEAP[$1];
        var $104=HEAP[$f];
        _LoadDebug($103, $104);
        var $105=HEAP[$f];
        var $106=_luaG_checkcode($105);
        var $107=((($106))|0)!=0;
        if ($107) { __label__ = 9; break; } else { __label__ = 8; break; }
      case 8: // $108
        var $109=HEAP[$1];
        _error($109, ((__str4616)&4294967295));
        __label__ = 9; break;
      case 9: // $110
        var $111=HEAP[$1];
        var $112=(($111)&4294967295);
        var $113=HEAP[$112];
        var $114=(($113+8)&4294967295);
        var $115=HEAP[$114];
        var $116=(($115+-12)&4294967295);
        HEAP[$114]=$116;
        var $117=HEAP[$1];
        var $118=(($117)&4294967295);
        var $119=HEAP[$118];
        var $120=(($119+52)&4294967295);
        var $121=HEAP[$120];
        var $122=((($121) + -1)&65535);
        HEAP[$120]=$122;
        var $123=HEAP[$f];
        STACKTOP = __stackBase__;
        return $123;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaU_header($h) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $x=__stackBase__+4;
    HEAP[$1]=$h;
    HEAP[$x]=1;
    var $2=HEAP[$1];
    _llvm_memcpy_p0i8_p0i8_i32($2, ((__str612)&4294967295), 4, 1, 0);
    var $3=HEAP[$1];
    var $4=(($3+4)&4294967295);
    HEAP[$1]=$4;
    var $5=HEAP[$1];
    var $6=(($5+1)&4294967295);
    HEAP[$1]=$6;
    HEAP[$5]=81;
    var $7=HEAP[$1];
    var $8=(($7+1)&4294967295);
    HEAP[$1]=$8;
    HEAP[$7]=0;
    var $9=$x;
    var $10=HEAP[$9];
    var $11=HEAP[$1];
    var $12=(($11+1)&4294967295);
    HEAP[$1]=$12;
    HEAP[$11]=$10;
    var $13=HEAP[$1];
    var $14=(($13+1)&4294967295);
    HEAP[$1]=$14;
    HEAP[$13]=4;
    var $15=HEAP[$1];
    var $16=(($15+1)&4294967295);
    HEAP[$1]=$16;
    HEAP[$15]=4;
    var $17=HEAP[$1];
    var $18=(($17+1)&4294967295);
    HEAP[$1]=$18;
    HEAP[$17]=4;
    var $19=HEAP[$1];
    var $20=(($19+1)&4294967295);
    HEAP[$1]=$20;
    HEAP[$19]=8;
    var $21=HEAP[$1];
    var $22=(($21+1)&4294967295);
    HEAP[$1]=$22;
    HEAP[$21]=0;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _error($S, $why) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$S;
    HEAP[$2]=$why;
    var $3=HEAP[$1];
    var $4=(($3)&4294967295);
    var $5=HEAP[$4];
    var $6=HEAP[$1];
    var $7=(($6+12)&4294967295);
    var $8=HEAP[$7];
    var $9=HEAP[$2];
    var $10=_luaO_pushfstring($5, ((__str8620)&4294967295), allocate([$8,0,0,0,$9,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
    var $11=HEAP[$1];
    var $12=(($11)&4294967295);
    var $13=HEAP[$12];
    _luaD_throw($13, 3);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _LoadString($S) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $size=__stackBase__+8;
        var $s=__stackBase__+12;
        HEAP[$2]=$S;
        var $3=HEAP[$2];
        var $4=$size;
        _LoadBlock($3, $4, 4);
        var $5=HEAP[$size];
        var $6=((($5))|0)==0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $8
        var $9=HEAP[$2];
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        var $12=HEAP[$2];
        var $13=(($12+8)&4294967295);
        var $14=HEAP[$13];
        var $15=HEAP[$size];
        var $16=_luaZ_openspace($11, $14, $15);
        HEAP[$s]=$16;
        var $17=HEAP[$2];
        var $18=HEAP[$s];
        var $19=HEAP[$size];
        _LoadBlock($17, $18, $19);
        var $20=HEAP[$2];
        var $21=(($20)&4294967295);
        var $22=HEAP[$21];
        var $23=HEAP[$s];
        var $24=HEAP[$size];
        var $25=((($24) - 1)&4294967295);
        var $26=_luaS_newlstr($22, $23, $25);
        HEAP[$1]=$26;
        __label__ = 3; break;
      case 3: // $27
        var $28=HEAP[$1];
        STACKTOP = __stackBase__;
        return $28;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _LoadInt($S) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $x=__stackBase__+4;
        HEAP[$1]=$S;
        var $2=HEAP[$1];
        var $3=$x;
        _LoadBlock($2, $3, 4);
        var $4=HEAP[$x];
        var $5=((($4))|0) < 0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$1];
        _error($7, ((__str7619)&4294967295));
        __label__ = 2; break;
      case 2: // $8
        var $9=HEAP[$x];
        STACKTOP = __stackBase__;
        return $9;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _LoadChar($S) {
    var __stackBase__  = STACKTOP; STACKTOP += 5; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 5);
    var __label__;
  
    var $1=__stackBase__;
    var $x=__stackBase__+4;
    HEAP[$1]=$S;
    var $2=HEAP[$1];
    _LoadBlock($2, $x, 1);
    var $3=HEAP[$x];
    var $4=reSign(($3), 8, 0);
    STACKTOP = __stackBase__;
    return $4;
  }
  

  function _LoadCode($S, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $n=__stackBase__+8;
        HEAP[$1]=$S;
        HEAP[$2]=$f;
        var $3=HEAP[$1];
        var $4=_LoadInt($3);
        HEAP[$n]=$4;
        var $5=HEAP[$n];
        var $6=((($5) + 1)&4294967295);
        var $7=((($6))>>>0) <= 1073741823;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        var $12=HEAP[$n];
        var $13=((($12) * 4)&4294967295);
        var $14=_luaM_realloc_($11, 0, 0, $13);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $15
        var $16=HEAP[$1];
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=_luaM_toobig($18);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $20
        var $21=__lastLabel__ == 1 ? $14 : ($19);
        var $22=$21;
        var $23=HEAP[$2];
        var $24=(($23+12)&4294967295);
        HEAP[$24]=$22;
        var $25=HEAP[$n];
        var $26=HEAP[$2];
        var $27=(($26+44)&4294967295);
        HEAP[$27]=$25;
        var $28=HEAP[$1];
        var $29=HEAP[$2];
        var $30=(($29+12)&4294967295);
        var $31=HEAP[$30];
        var $32=$31;
        var $33=HEAP[$n];
        var $34=((($33) * 4)&4294967295);
        _LoadBlock($28, $32, $34);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _LoadConstants($S, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $n=__stackBase__+12;
        var $o=__stackBase__+16;
        var $t=__stackBase__+20;
        var $i_o=__stackBase__+24;
        var $i_o1=__stackBase__+28;
        var $i_o2=__stackBase__+32;
        HEAP[$1]=$S;
        HEAP[$2]=$f;
        var $3=HEAP[$1];
        var $4=_LoadInt($3);
        HEAP[$n]=$4;
        var $5=HEAP[$n];
        var $6=((($5) + 1)&4294967295);
        var $7=((($6))>>>0) <= 357913941;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        var $12=HEAP[$n];
        var $13=((($12) * 12)&4294967295);
        var $14=_luaM_realloc_($11, 0, 0, $13);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $15
        var $16=HEAP[$1];
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=_luaM_toobig($18);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $20
        var $21=__lastLabel__ == 1 ? $14 : ($19);
        var $22=$21;
        var $23=HEAP[$2];
        var $24=(($23+8)&4294967295);
        HEAP[$24]=$22;
        var $25=HEAP[$n];
        var $26=HEAP[$2];
        var $27=(($26+40)&4294967295);
        HEAP[$27]=$25;
        HEAP[$i]=0;
        __label__ = 4; break;
      case 4: // $28
        var $29=HEAP[$i];
        var $30=HEAP[$n];
        var $31=((($29))|0) < ((($30))|0);
        if ($31) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $32
        var $33=HEAP[$i];
        var $34=HEAP[$2];
        var $35=(($34+8)&4294967295);
        var $36=HEAP[$35];
        var $37=(($36+12*$33)&4294967295);
        var $38=(($37+8)&4294967295);
        HEAP[$38]=0;
        __label__ = 6; break;
      case 6: // $39
        var $40=HEAP[$i];
        var $41=((($40) + 1)&4294967295);
        HEAP[$i]=$41;
        __label__ = 4; break;
      case 7: // $42
        HEAP[$i]=0;
        __label__ = 8; break;
      case 8: // $43
        var $44=HEAP[$i];
        var $45=HEAP[$n];
        var $46=((($44))|0) < ((($45))|0);
        if ($46) { __label__ = 9; break; } else { __label__ = 17; break; }
      case 9: // $47
        var $48=HEAP[$i];
        var $49=HEAP[$2];
        var $50=(($49+8)&4294967295);
        var $51=HEAP[$50];
        var $52=(($51+12*$48)&4294967295);
        HEAP[$o]=$52;
        var $53=HEAP[$1];
        var $54=_LoadChar($53);
        HEAP[$t]=$54;
        var $55=HEAP[$t];
        if ($55 == 0) {
          __label__ = 10; break;
        }
        else if ($55 == 1) {
          __label__ = 11; break;
        }
        else if ($55 == 3) {
          __label__ = 12; break;
        }
        else if ($55 == 4) {
          __label__ = 13; break;
        }
        else {
        __label__ = 14; break;
        }
        
      case 10: // $56
        var $57=HEAP[$o];
        var $58=(($57+8)&4294967295);
        HEAP[$58]=0;
        __label__ = 15; break;
      case 11: // $59
        var $60=HEAP[$o];
        HEAP[$i_o]=$60;
        var $61=HEAP[$1];
        var $62=_LoadChar($61);
        var $63=((($62))|0)!=0;
        var $64=unSign(($63), 1, 0);
        var $65=HEAP[$i_o];
        var $66=(($65)&4294967295);
        var $67=$66;
        HEAP[$67]=$64;
        var $68=HEAP[$i_o];
        var $69=(($68+8)&4294967295);
        HEAP[$69]=1;
        __label__ = 15; break;
      case 12: // $70
        var $71=HEAP[$o];
        HEAP[$i_o1]=$71;
        var $72=HEAP[$1];
        var $73=_LoadNumber($72);
        var $74=HEAP[$i_o1];
        var $75=(($74)&4294967295);
        var $76=$75;
        HEAP[$76]=$73;
        var $77=HEAP[$i_o1];
        var $78=(($77+8)&4294967295);
        HEAP[$78]=3;
        __label__ = 15; break;
      case 13: // $79
        var $80=HEAP[$o];
        HEAP[$i_o2]=$80;
        var $81=HEAP[$1];
        var $82=_LoadString($81);
        var $83=$82;
        var $84=HEAP[$i_o2];
        var $85=(($84)&4294967295);
        var $86=$85;
        HEAP[$86]=$83;
        var $87=HEAP[$i_o2];
        var $88=(($87+8)&4294967295);
        HEAP[$88]=4;
        __label__ = 15; break;
      case 14: // $89
        var $90=HEAP[$1];
        _error($90, ((__str6618)&4294967295));
        __label__ = 15; break;
      case 15: // $91
        __label__ = 16; break;
      case 16: // $92
        var $93=HEAP[$i];
        var $94=((($93) + 1)&4294967295);
        HEAP[$i]=$94;
        __label__ = 8; break;
      case 17: // $95
        var $96=HEAP[$1];
        var $97=_LoadInt($96);
        HEAP[$n]=$97;
        var $98=HEAP[$n];
        var $99=((($98) + 1)&4294967295);
        var $100=((($99))>>>0) <= 1073741823;
        if ($100) { __label__ = 18; break; } else { __label__ = 19; break; }
      case 18: // $101
        var $102=HEAP[$1];
        var $103=(($102)&4294967295);
        var $104=HEAP[$103];
        var $105=HEAP[$n];
        var $106=((($105) * 4)&4294967295);
        var $107=_luaM_realloc_($104, 0, 0, $106);
        __lastLabel__ = 18; __label__ = 20; break;
      case 19: // $108
        var $109=HEAP[$1];
        var $110=(($109)&4294967295);
        var $111=HEAP[$110];
        var $112=_luaM_toobig($111);
        __lastLabel__ = 19; __label__ = 20; break;
      case 20: // $113
        var $114=__lastLabel__ == 18 ? $107 : ($112);
        var $115=$114;
        var $116=HEAP[$2];
        var $117=(($116+16)&4294967295);
        HEAP[$117]=$115;
        var $118=HEAP[$n];
        var $119=HEAP[$2];
        var $120=(($119+52)&4294967295);
        HEAP[$120]=$118;
        HEAP[$i]=0;
        __label__ = 21; break;
      case 21: // $121
        var $122=HEAP[$i];
        var $123=HEAP[$n];
        var $124=((($122))|0) < ((($123))|0);
        if ($124) { __label__ = 22; break; } else { __label__ = 24; break; }
      case 22: // $125
        var $126=HEAP[$i];
        var $127=HEAP[$2];
        var $128=(($127+16)&4294967295);
        var $129=HEAP[$128];
        var $130=(($129+4*$126)&4294967295);
        HEAP[$130]=0;
        __label__ = 23; break;
      case 23: // $131
        var $132=HEAP[$i];
        var $133=((($132) + 1)&4294967295);
        HEAP[$i]=$133;
        __label__ = 21; break;
      case 24: // $134
        HEAP[$i]=0;
        __label__ = 25; break;
      case 25: // $135
        var $136=HEAP[$i];
        var $137=HEAP[$n];
        var $138=((($136))|0) < ((($137))|0);
        if ($138) { __label__ = 26; break; } else { __label__ = 28; break; }
      case 26: // $139
        var $140=HEAP[$1];
        var $141=HEAP[$2];
        var $142=(($141+32)&4294967295);
        var $143=HEAP[$142];
        var $144=_LoadFunction($140, $143);
        var $145=HEAP[$i];
        var $146=HEAP[$2];
        var $147=(($146+16)&4294967295);
        var $148=HEAP[$147];
        var $149=(($148+4*$145)&4294967295);
        HEAP[$149]=$144;
        __label__ = 27; break;
      case 27: // $150
        var $151=HEAP[$i];
        var $152=((($151) + 1)&4294967295);
        HEAP[$i]=$152;
        __label__ = 25; break;
      case 28: // $153
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _LoadDebug($S, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $n=__stackBase__+12;
        HEAP[$1]=$S;
        HEAP[$2]=$f;
        var $3=HEAP[$1];
        var $4=_LoadInt($3);
        HEAP[$n]=$4;
        var $5=HEAP[$n];
        var $6=((($5) + 1)&4294967295);
        var $7=((($6))>>>0) <= 1073741823;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        var $12=HEAP[$n];
        var $13=((($12) * 4)&4294967295);
        var $14=_luaM_realloc_($11, 0, 0, $13);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $15
        var $16=HEAP[$1];
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=_luaM_toobig($18);
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $20
        var $21=__lastLabel__ == 1 ? $14 : ($19);
        var $22=$21;
        var $23=HEAP[$2];
        var $24=(($23+20)&4294967295);
        HEAP[$24]=$22;
        var $25=HEAP[$n];
        var $26=HEAP[$2];
        var $27=(($26+48)&4294967295);
        HEAP[$27]=$25;
        var $28=HEAP[$1];
        var $29=HEAP[$2];
        var $30=(($29+20)&4294967295);
        var $31=HEAP[$30];
        var $32=$31;
        var $33=HEAP[$n];
        var $34=((($33) * 4)&4294967295);
        _LoadBlock($28, $32, $34);
        var $35=HEAP[$1];
        var $36=_LoadInt($35);
        HEAP[$n]=$36;
        var $37=HEAP[$n];
        var $38=((($37) + 1)&4294967295);
        var $39=((($38))>>>0) <= 357913941;
        if ($39) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $40
        var $41=HEAP[$1];
        var $42=(($41)&4294967295);
        var $43=HEAP[$42];
        var $44=HEAP[$n];
        var $45=((($44) * 12)&4294967295);
        var $46=_luaM_realloc_($43, 0, 0, $45);
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $47
        var $48=HEAP[$1];
        var $49=(($48)&4294967295);
        var $50=HEAP[$49];
        var $51=_luaM_toobig($50);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $52
        var $53=__lastLabel__ == 4 ? $46 : ($51);
        var $54=$53;
        var $55=HEAP[$2];
        var $56=(($55+24)&4294967295);
        HEAP[$56]=$54;
        var $57=HEAP[$n];
        var $58=HEAP[$2];
        var $59=(($58+56)&4294967295);
        HEAP[$59]=$57;
        HEAP[$i]=0;
        __label__ = 7; break;
      case 7: // $60
        var $61=HEAP[$i];
        var $62=HEAP[$n];
        var $63=((($61))|0) < ((($62))|0);
        if ($63) { __label__ = 8; break; } else { __label__ = 10; break; }
      case 8: // $64
        var $65=HEAP[$i];
        var $66=HEAP[$2];
        var $67=(($66+24)&4294967295);
        var $68=HEAP[$67];
        var $69=(($68+12*$65)&4294967295);
        var $70=(($69)&4294967295);
        HEAP[$70]=0;
        __label__ = 9; break;
      case 9: // $71
        var $72=HEAP[$i];
        var $73=((($72) + 1)&4294967295);
        HEAP[$i]=$73;
        __label__ = 7; break;
      case 10: // $74
        HEAP[$i]=0;
        __label__ = 11; break;
      case 11: // $75
        var $76=HEAP[$i];
        var $77=HEAP[$n];
        var $78=((($76))|0) < ((($77))|0);
        if ($78) { __label__ = 12; break; } else { __label__ = 14; break; }
      case 12: // $79
        var $80=HEAP[$1];
        var $81=_LoadString($80);
        var $82=HEAP[$i];
        var $83=HEAP[$2];
        var $84=(($83+24)&4294967295);
        var $85=HEAP[$84];
        var $86=(($85+12*$82)&4294967295);
        var $87=(($86)&4294967295);
        HEAP[$87]=$81;
        var $88=HEAP[$1];
        var $89=_LoadInt($88);
        var $90=HEAP[$i];
        var $91=HEAP[$2];
        var $92=(($91+24)&4294967295);
        var $93=HEAP[$92];
        var $94=(($93+12*$90)&4294967295);
        var $95=(($94+4)&4294967295);
        HEAP[$95]=$89;
        var $96=HEAP[$1];
        var $97=_LoadInt($96);
        var $98=HEAP[$i];
        var $99=HEAP[$2];
        var $100=(($99+24)&4294967295);
        var $101=HEAP[$100];
        var $102=(($101+12*$98)&4294967295);
        var $103=(($102+8)&4294967295);
        HEAP[$103]=$97;
        __label__ = 13; break;
      case 13: // $104
        var $105=HEAP[$i];
        var $106=((($105) + 1)&4294967295);
        HEAP[$i]=$106;
        __label__ = 11; break;
      case 14: // $107
        var $108=HEAP[$1];
        var $109=_LoadInt($108);
        HEAP[$n]=$109;
        var $110=HEAP[$n];
        var $111=((($110) + 1)&4294967295);
        var $112=((($111))>>>0) <= 1073741823;
        if ($112) { __label__ = 15; break; } else { __label__ = 16; break; }
      case 15: // $113
        var $114=HEAP[$1];
        var $115=(($114)&4294967295);
        var $116=HEAP[$115];
        var $117=HEAP[$n];
        var $118=((($117) * 4)&4294967295);
        var $119=_luaM_realloc_($116, 0, 0, $118);
        __lastLabel__ = 15; __label__ = 17; break;
      case 16: // $120
        var $121=HEAP[$1];
        var $122=(($121)&4294967295);
        var $123=HEAP[$122];
        var $124=_luaM_toobig($123);
        __lastLabel__ = 16; __label__ = 17; break;
      case 17: // $125
        var $126=__lastLabel__ == 15 ? $119 : ($124);
        var $127=$126;
        var $128=HEAP[$2];
        var $129=(($128+28)&4294967295);
        HEAP[$129]=$127;
        var $130=HEAP[$n];
        var $131=HEAP[$2];
        var $132=(($131+36)&4294967295);
        HEAP[$132]=$130;
        HEAP[$i]=0;
        __label__ = 18; break;
      case 18: // $133
        var $134=HEAP[$i];
        var $135=HEAP[$n];
        var $136=((($134))|0) < ((($135))|0);
        if ($136) { __label__ = 19; break; } else { __label__ = 21; break; }
      case 19: // $137
        var $138=HEAP[$i];
        var $139=HEAP[$2];
        var $140=(($139+28)&4294967295);
        var $141=HEAP[$140];
        var $142=(($141+4*$138)&4294967295);
        HEAP[$142]=0;
        __label__ = 20; break;
      case 20: // $143
        var $144=HEAP[$i];
        var $145=((($144) + 1)&4294967295);
        HEAP[$i]=$145;
        __label__ = 18; break;
      case 21: // $146
        HEAP[$i]=0;
        __label__ = 22; break;
      case 22: // $147
        var $148=HEAP[$i];
        var $149=HEAP[$n];
        var $150=((($148))|0) < ((($149))|0);
        if ($150) { __label__ = 23; break; } else { __label__ = 25; break; }
      case 23: // $151
        var $152=HEAP[$1];
        var $153=_LoadString($152);
        var $154=HEAP[$i];
        var $155=HEAP[$2];
        var $156=(($155+28)&4294967295);
        var $157=HEAP[$156];
        var $158=(($157+4*$154)&4294967295);
        HEAP[$158]=$153;
        __label__ = 24; break;
      case 24: // $159
        var $160=HEAP[$i];
        var $161=((($160) + 1)&4294967295);
        HEAP[$i]=$161;
        __label__ = 22; break;
      case 25: // $162
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _LoadBlock($S, $b, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $r=__stackBase__+12;
        HEAP[$1]=$S;
        HEAP[$2]=$b;
        HEAP[$3]=$size;
        var $4=HEAP[$1];
        var $5=(($4+4)&4294967295);
        var $6=HEAP[$5];
        var $7=HEAP[$2];
        var $8=HEAP[$3];
        var $9=_luaZ_read($6, $7, $8);
        HEAP[$r]=$9;
        var $10=HEAP[$r];
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$1];
        _error($13, ((__str5617)&4294967295));
        __label__ = 2; break;
      case 2: // $14
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _LoadNumber($S) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $x=__stackBase__+4;
    HEAP[$1]=$S;
    var $2=HEAP[$1];
    var $3=$x;
    _LoadBlock($2, $3, 8);
    var $4=HEAP[$x];
    STACKTOP = __stackBase__;
    return $4;
  }
  

  function _luaV_tonumber($obj, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $num=__stackBase__+12;
        var $i_o=__stackBase__+20;
        HEAP[$2]=$obj;
        HEAP[$3]=$n;
        var $4=HEAP[$2];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==3;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$2];
        HEAP[$1]=$9;
        __label__ = 6; break;
      case 2: // $10
        var $11=HEAP[$2];
        var $12=(($11+8)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0)==4;
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $15
        var $16=HEAP[$2];
        var $17=(($16)&4294967295);
        var $18=$17;
        var $19=HEAP[$18];
        var $20=$19;
        var $21=(($20+16)&4294967295);
        var $22=$21;
        var $23=_luaO_str2d($22, $num);
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $25
        var $26=HEAP[$3];
        HEAP[$i_o]=$26;
        var $27=HEAP[$num];
        var $28=HEAP[$i_o];
        var $29=(($28)&4294967295);
        var $30=$29;
        HEAP[$30]=$27;
        var $31=HEAP[$i_o];
        var $32=(($31+8)&4294967295);
        HEAP[$32]=3;
        var $33=HEAP[$3];
        HEAP[$1]=$33;
        __label__ = 6; break;
      case 5: // $34
        HEAP[$1]=0;
        __label__ = 6; break;
      case 6: // $35
        var $36=HEAP[$1];
        STACKTOP = __stackBase__;
        return $36;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaV_tostring($L, $obj) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $s=__stackBase__+12;
        var $n=__stackBase__+44;
        var $i_o=__stackBase__+52;
        HEAP[$2]=$L;
        HEAP[$3]=$obj;
        var $4=HEAP[$3];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==3;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $9
        var $10=HEAP[$3];
        var $11=(($10)&4294967295);
        var $12=$11;
        var $13=HEAP[$12];
        HEAP[$n]=$13;
        var $14=(($s)&4294967295);
        var $15=HEAP[$n];
        var $16=_sprintf($14, ((__str624)&4294967295), allocate([$15,0,0,0,0,0,0,0], ["double",0,0,0,0,0,0,0], ALLOC_STACK));
        var $17=HEAP[$3];
        HEAP[$i_o]=$17;
        var $18=HEAP[$2];
        var $19=(($s)&4294967295);
        var $20=(($s)&4294967295);
        var $21=_strlen($20);
        var $22=_luaS_newlstr($18, $19, $21);
        var $23=$22;
        var $24=HEAP[$i_o];
        var $25=(($24)&4294967295);
        var $26=$25;
        HEAP[$26]=$23;
        var $27=HEAP[$i_o];
        var $28=(($27+8)&4294967295);
        HEAP[$28]=4;
        HEAP[$1]=1;
        __label__ = 3; break;
      case 3: // $29
        var $30=HEAP[$1];
        STACKTOP = __stackBase__;
        return $30;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaV_gettable($L, $t, $key, $val) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $loop=__stackBase__+16;
        var $tm=__stackBase__+20;
        var $h=__stackBase__+24;
        var $res=__stackBase__+28;
        var $o2=__stackBase__+32;
        var $o1=__stackBase__+36;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        HEAP[$3]=$key;
        HEAP[$4]=$val;
        HEAP[$loop]=0;
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$loop];
        var $7=((($6))|0) < 100;
        if ($7) { __label__ = 2; break; } else { __label__ = 20; break; }
      case 2: // $8
        var $9=HEAP[$2];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))|0)==5;
        if ($12) { __label__ = 3; break; } else { __label__ = 13; break; }
      case 3: // $13
        var $14=HEAP[$2];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        var $18=$17;
        HEAP[$h]=$18;
        var $19=HEAP[$h];
        var $20=HEAP[$3];
        var $21=_luaH_get($19, $20);
        HEAP[$res]=$21;
        var $22=HEAP[$res];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=((($24))|0)==0;
        if ($25) { __label__ = 4; break; } else { __label__ = 11; break; }
      case 4: // $26
        var $27=HEAP[$h];
        var $28=(($27+8)&4294967295);
        var $29=HEAP[$28];
        var $30=((($29))|0)==0;
        if ($30) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $31
        __lastLabel__ = 5; __label__ = 10; break;
      case 6: // $32
        var $33=HEAP[$h];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+6)&4294967295);
        var $37=HEAP[$36];
        var $38=unSign(($37), 8, 0);
        var $39=($38) & 1;
        var $40=((($39))|0)!=0;
        if ($40) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $41
        __lastLabel__ = 7; __label__ = 9; break;
      case 8: // $42
        var $43=HEAP[$h];
        var $44=(($43+8)&4294967295);
        var $45=HEAP[$44];
        var $46=HEAP[$1];
        var $47=(($46+16)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48+168)&4294967295);
        var $50=(($49)&4294967295);
        var $51=HEAP[$50];
        var $52=_luaT_gettm($45, 0, $51);
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $53
        var $54=__lastLabel__ == 7 ? 0 : ($52);
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $55
        var $56=__lastLabel__ == 5 ? 0 : ($54);
        HEAP[$tm]=$56;
        var $57=((($56))|0)==0;
        if ($57) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $58
        var $59=HEAP[$res];
        HEAP[$o2]=$59;
        var $60=HEAP[$4];
        HEAP[$o1]=$60;
        var $61=HEAP[$o1];
        var $62=(($61)&4294967295);
        var $63=HEAP[$o2];
        var $64=(($63)&4294967295);
        var $65=$62;
        var $66=$64;
        _llvm_memcpy_p0i8_p0i8_i32($65, $66, 8, 4, 0);
        var $67=HEAP[$o2];
        var $68=(($67+8)&4294967295);
        var $69=HEAP[$68];
        var $70=HEAP[$o1];
        var $71=(($70+8)&4294967295);
        HEAP[$71]=$69;
        __label__ = 21; break;
      case 12: // $72
        __label__ = 16; break;
      case 13: // $73
        var $74=HEAP[$1];
        var $75=HEAP[$2];
        var $76=_luaT_gettmbyobj($74, $75, 0);
        HEAP[$tm]=$76;
        var $77=(($76+8)&4294967295);
        var $78=HEAP[$77];
        var $79=((($78))|0)==0;
        if ($79) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $80
        var $81=HEAP[$1];
        var $82=HEAP[$2];
        _luaG_typeerror($81, $82, ((__str1625)&4294967295));
        __label__ = 15; break;
      case 15: // $83
        __label__ = 16; break;
      case 16: // $84
        var $85=HEAP[$tm];
        var $86=(($85+8)&4294967295);
        var $87=HEAP[$86];
        var $88=((($87))|0)==6;
        if ($88) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $89
        var $90=HEAP[$1];
        var $91=HEAP[$4];
        var $92=HEAP[$tm];
        var $93=HEAP[$2];
        var $94=HEAP[$3];
        _callTMres($90, $91, $92, $93, $94);
        __label__ = 21; break;
      case 18: // $95
        var $96=HEAP[$tm];
        HEAP[$2]=$96;
        __label__ = 19; break;
      case 19: // $97
        var $98=HEAP[$loop];
        var $99=((($98) + 1)&4294967295);
        HEAP[$loop]=$99;
        __label__ = 1; break;
      case 20: // $100
        var $101=HEAP[$1];
        _luaG_runerror($101, ((__str2626)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 21; break;
      case 21: // $102
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _callTMres($L, $res, $f, $p1, $p2) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $result=__stackBase__+20;
        var $o2=__stackBase__+24;
        var $o1=__stackBase__+28;
        var $o21=__stackBase__+32;
        var $o12=__stackBase__+36;
        var $o23=__stackBase__+40;
        var $o14=__stackBase__+44;
        var $o25=__stackBase__+48;
        var $o16=__stackBase__+52;
        HEAP[$1]=$L;
        HEAP[$2]=$res;
        HEAP[$3]=$f;
        HEAP[$4]=$p1;
        HEAP[$5]=$p2;
        var $6=HEAP[$2];
        var $7=$6;
        var $8=HEAP[$1];
        var $9=(($8+32)&4294967295);
        var $10=HEAP[$9];
        var $11=$10;
        var $12=($7);
        var $13=($11);
        var $14=((($12) - ($13))&4294967295);
        HEAP[$result]=$14;
        var $15=HEAP[$3];
        HEAP[$o2]=$15;
        var $16=HEAP[$1];
        var $17=(($16+8)&4294967295);
        var $18=HEAP[$17];
        HEAP[$o1]=$18;
        var $19=HEAP[$o1];
        var $20=(($19)&4294967295);
        var $21=HEAP[$o2];
        var $22=(($21)&4294967295);
        var $23=$20;
        var $24=$22;
        _llvm_memcpy_p0i8_p0i8_i32($23, $24, 8, 4, 0);
        var $25=HEAP[$o2];
        var $26=(($25+8)&4294967295);
        var $27=HEAP[$26];
        var $28=HEAP[$o1];
        var $29=(($28+8)&4294967295);
        HEAP[$29]=$27;
        var $30=HEAP[$4];
        HEAP[$o21]=$30;
        var $31=HEAP[$1];
        var $32=(($31+8)&4294967295);
        var $33=HEAP[$32];
        var $34=(($33+12)&4294967295);
        HEAP[$o12]=$34;
        var $35=HEAP[$o12];
        var $36=(($35)&4294967295);
        var $37=HEAP[$o21];
        var $38=(($37)&4294967295);
        var $39=$36;
        var $40=$38;
        _llvm_memcpy_p0i8_p0i8_i32($39, $40, 8, 4, 0);
        var $41=HEAP[$o21];
        var $42=(($41+8)&4294967295);
        var $43=HEAP[$42];
        var $44=HEAP[$o12];
        var $45=(($44+8)&4294967295);
        HEAP[$45]=$43;
        var $46=HEAP[$5];
        HEAP[$o23]=$46;
        var $47=HEAP[$1];
        var $48=(($47+8)&4294967295);
        var $49=HEAP[$48];
        var $50=(($49+24)&4294967295);
        HEAP[$o14]=$50;
        var $51=HEAP[$o14];
        var $52=(($51)&4294967295);
        var $53=HEAP[$o23];
        var $54=(($53)&4294967295);
        var $55=$52;
        var $56=$54;
        _llvm_memcpy_p0i8_p0i8_i32($55, $56, 8, 4, 0);
        var $57=HEAP[$o23];
        var $58=(($57+8)&4294967295);
        var $59=HEAP[$58];
        var $60=HEAP[$o14];
        var $61=(($60+8)&4294967295);
        HEAP[$61]=$59;
        var $62=HEAP[$1];
        var $63=(($62+28)&4294967295);
        var $64=HEAP[$63];
        var $65=$64;
        var $66=HEAP[$1];
        var $67=(($66+8)&4294967295);
        var $68=HEAP[$67];
        var $69=$68;
        var $70=($65);
        var $71=($69);
        var $72=((($70) - ($71))&4294967295);
        var $73=((($72))|0) <= 36;
        if ($73) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $74
        var $75=HEAP[$1];
        _luaD_growstack($75, 3);
        __label__ = 3; break;
      case 2: // $76
        __label__ = 3; break;
      case 3: // $77
        var $78=HEAP[$1];
        var $79=(($78+8)&4294967295);
        var $80=HEAP[$79];
        var $81=(($80+36)&4294967295);
        HEAP[$79]=$81;
        var $82=HEAP[$1];
        var $83=HEAP[$1];
        var $84=(($83+8)&4294967295);
        var $85=HEAP[$84];
        var $86=(($85+-36)&4294967295);
        _luaD_call($82, $86, 1);
        var $87=HEAP[$1];
        var $88=(($87+32)&4294967295);
        var $89=HEAP[$88];
        var $90=$89;
        var $91=HEAP[$result];
        var $92=(($90+$91)&4294967295);
        var $93=$92;
        HEAP[$2]=$93;
        var $94=HEAP[$1];
        var $95=(($94+8)&4294967295);
        var $96=HEAP[$95];
        var $97=(($96+-12)&4294967295);
        HEAP[$95]=$97;
        var $98=HEAP[$1];
        var $99=(($98+8)&4294967295);
        var $100=HEAP[$99];
        HEAP[$o25]=$100;
        var $101=HEAP[$2];
        HEAP[$o16]=$101;
        var $102=HEAP[$o16];
        var $103=(($102)&4294967295);
        var $104=HEAP[$o25];
        var $105=(($104)&4294967295);
        var $106=$103;
        var $107=$105;
        _llvm_memcpy_p0i8_p0i8_i32($106, $107, 8, 4, 0);
        var $108=HEAP[$o25];
        var $109=(($108+8)&4294967295);
        var $110=HEAP[$109];
        var $111=HEAP[$o16];
        var $112=(($111+8)&4294967295);
        HEAP[$112]=$110;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaV_settable($L, $t, $key, $val) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $loop=__stackBase__+16;
        var $tm=__stackBase__+20;
        var $h=__stackBase__+24;
        var $oldval=__stackBase__+28;
        var $o2=__stackBase__+32;
        var $o1=__stackBase__+36;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        HEAP[$3]=$key;
        HEAP[$4]=$val;
        HEAP[$loop]=0;
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$loop];
        var $7=((($6))|0) < 100;
        if ($7) { __label__ = 2; break; } else { __label__ = 24; break; }
      case 2: // $8
        var $9=HEAP[$2];
        var $10=(($9+8)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))|0)==5;
        if ($12) { __label__ = 3; break; } else { __label__ = 17; break; }
      case 3: // $13
        var $14=HEAP[$2];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        var $18=$17;
        HEAP[$h]=$18;
        var $19=HEAP[$1];
        var $20=HEAP[$h];
        var $21=HEAP[$3];
        var $22=_luaH_set($19, $20, $21);
        HEAP[$oldval]=$22;
        var $23=HEAP[$oldval];
        var $24=(($23+8)&4294967295);
        var $25=HEAP[$24];
        var $26=((($25))|0)==0;
        if ($26) { __label__ = 4; break; } else { __label__ = 11; break; }
      case 4: // $27
        var $28=HEAP[$h];
        var $29=(($28+8)&4294967295);
        var $30=HEAP[$29];
        var $31=((($30))|0)==0;
        if ($31) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $32
        __lastLabel__ = 5; __label__ = 10; break;
      case 6: // $33
        var $34=HEAP[$h];
        var $35=(($34+8)&4294967295);
        var $36=HEAP[$35];
        var $37=(($36+6)&4294967295);
        var $38=HEAP[$37];
        var $39=unSign(($38), 8, 0);
        var $40=($39) & 2;
        var $41=((($40))|0)!=0;
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $42
        __lastLabel__ = 7; __label__ = 9; break;
      case 8: // $43
        var $44=HEAP[$h];
        var $45=(($44+8)&4294967295);
        var $46=HEAP[$45];
        var $47=HEAP[$1];
        var $48=(($47+16)&4294967295);
        var $49=HEAP[$48];
        var $50=(($49+168)&4294967295);
        var $51=(($50+4)&4294967295);
        var $52=HEAP[$51];
        var $53=_luaT_gettm($46, 1, $52);
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $54
        var $55=__lastLabel__ == 7 ? 0 : ($53);
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $56
        var $57=__lastLabel__ == 5 ? 0 : ($55);
        HEAP[$tm]=$57;
        var $58=((($57))|0)==0;
        if ($58) { __label__ = 11; break; } else { __label__ = 16; break; }
      case 11: // $59
        var $60=HEAP[$4];
        HEAP[$o2]=$60;
        var $61=HEAP[$oldval];
        HEAP[$o1]=$61;
        var $62=HEAP[$o1];
        var $63=(($62)&4294967295);
        var $64=HEAP[$o2];
        var $65=(($64)&4294967295);
        var $66=$63;
        var $67=$65;
        _llvm_memcpy_p0i8_p0i8_i32($66, $67, 8, 4, 0);
        var $68=HEAP[$o2];
        var $69=(($68+8)&4294967295);
        var $70=HEAP[$69];
        var $71=HEAP[$o1];
        var $72=(($71+8)&4294967295);
        HEAP[$72]=$70;
        var $73=HEAP[$4];
        var $74=(($73+8)&4294967295);
        var $75=HEAP[$74];
        var $76=((($75))|0) >= 4;
        if ($76) { __label__ = 12; break; } else { __label__ = 15; break; }
      case 12: // $77
        var $78=HEAP[$4];
        var $79=(($78)&4294967295);
        var $80=$79;
        var $81=HEAP[$80];
        var $82=$81;
        var $83=(($82+5)&4294967295);
        var $84=HEAP[$83];
        var $85=unSign(($84), 8, 0);
        var $86=($85) & 3;
        var $87=((($86))|0)!=0;
        if ($87) { __label__ = 13; break; } else { __label__ = 15; break; }
      case 13: // $88
        var $89=HEAP[$h];
        var $90=$89;
        var $91=$90;
        var $92=(($91+5)&4294967295);
        var $93=HEAP[$92];
        var $94=unSign(($93), 8, 0);
        var $95=($94) & 4;
        var $96=((($95))|0)!=0;
        if ($96) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $97
        var $98=HEAP[$1];
        var $99=HEAP[$h];
        _luaC_barrierback($98, $99);
        __label__ = 15; break;
      case 15: // $100
        __label__ = 25; break;
      case 16: // $101
        __label__ = 20; break;
      case 17: // $102
        var $103=HEAP[$1];
        var $104=HEAP[$2];
        var $105=_luaT_gettmbyobj($103, $104, 1);
        HEAP[$tm]=$105;
        var $106=(($105+8)&4294967295);
        var $107=HEAP[$106];
        var $108=((($107))|0)==0;
        if ($108) { __label__ = 18; break; } else { __label__ = 19; break; }
      case 18: // $109
        var $110=HEAP[$1];
        var $111=HEAP[$2];
        _luaG_typeerror($110, $111, ((__str1625)&4294967295));
        __label__ = 19; break;
      case 19: // $112
        __label__ = 20; break;
      case 20: // $113
        var $114=HEAP[$tm];
        var $115=(($114+8)&4294967295);
        var $116=HEAP[$115];
        var $117=((($116))|0)==6;
        if ($117) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $118
        var $119=HEAP[$1];
        var $120=HEAP[$tm];
        var $121=HEAP[$2];
        var $122=HEAP[$3];
        var $123=HEAP[$4];
        _callTM($119, $120, $121, $122, $123);
        __label__ = 25; break;
      case 22: // $124
        var $125=HEAP[$tm];
        HEAP[$2]=$125;
        __label__ = 23; break;
      case 23: // $126
        var $127=HEAP[$loop];
        var $128=((($127) + 1)&4294967295);
        HEAP[$loop]=$128;
        __label__ = 1; break;
      case 24: // $129
        var $130=HEAP[$1];
        _luaG_runerror($130, ((__str3627)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 25; break;
      case 25: // $131
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _callTM($L, $f, $p1, $p2, $p3) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $o2=__stackBase__+20;
        var $o1=__stackBase__+24;
        var $o21=__stackBase__+28;
        var $o12=__stackBase__+32;
        var $o23=__stackBase__+36;
        var $o14=__stackBase__+40;
        var $o25=__stackBase__+44;
        var $o16=__stackBase__+48;
        HEAP[$1]=$L;
        HEAP[$2]=$f;
        HEAP[$3]=$p1;
        HEAP[$4]=$p2;
        HEAP[$5]=$p3;
        var $6=HEAP[$2];
        HEAP[$o2]=$6;
        var $7=HEAP[$1];
        var $8=(($7+8)&4294967295);
        var $9=HEAP[$8];
        HEAP[$o1]=$9;
        var $10=HEAP[$o1];
        var $11=(($10)&4294967295);
        var $12=HEAP[$o2];
        var $13=(($12)&4294967295);
        var $14=$11;
        var $15=$13;
        _llvm_memcpy_p0i8_p0i8_i32($14, $15, 8, 4, 0);
        var $16=HEAP[$o2];
        var $17=(($16+8)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$o1];
        var $20=(($19+8)&4294967295);
        HEAP[$20]=$18;
        var $21=HEAP[$3];
        HEAP[$o21]=$21;
        var $22=HEAP[$1];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+12)&4294967295);
        HEAP[$o12]=$25;
        var $26=HEAP[$o12];
        var $27=(($26)&4294967295);
        var $28=HEAP[$o21];
        var $29=(($28)&4294967295);
        var $30=$27;
        var $31=$29;
        _llvm_memcpy_p0i8_p0i8_i32($30, $31, 8, 4, 0);
        var $32=HEAP[$o21];
        var $33=(($32+8)&4294967295);
        var $34=HEAP[$33];
        var $35=HEAP[$o12];
        var $36=(($35+8)&4294967295);
        HEAP[$36]=$34;
        var $37=HEAP[$4];
        HEAP[$o23]=$37;
        var $38=HEAP[$1];
        var $39=(($38+8)&4294967295);
        var $40=HEAP[$39];
        var $41=(($40+24)&4294967295);
        HEAP[$o14]=$41;
        var $42=HEAP[$o14];
        var $43=(($42)&4294967295);
        var $44=HEAP[$o23];
        var $45=(($44)&4294967295);
        var $46=$43;
        var $47=$45;
        _llvm_memcpy_p0i8_p0i8_i32($46, $47, 8, 4, 0);
        var $48=HEAP[$o23];
        var $49=(($48+8)&4294967295);
        var $50=HEAP[$49];
        var $51=HEAP[$o14];
        var $52=(($51+8)&4294967295);
        HEAP[$52]=$50;
        var $53=HEAP[$5];
        HEAP[$o25]=$53;
        var $54=HEAP[$1];
        var $55=(($54+8)&4294967295);
        var $56=HEAP[$55];
        var $57=(($56+36)&4294967295);
        HEAP[$o16]=$57;
        var $58=HEAP[$o16];
        var $59=(($58)&4294967295);
        var $60=HEAP[$o25];
        var $61=(($60)&4294967295);
        var $62=$59;
        var $63=$61;
        _llvm_memcpy_p0i8_p0i8_i32($62, $63, 8, 4, 0);
        var $64=HEAP[$o25];
        var $65=(($64+8)&4294967295);
        var $66=HEAP[$65];
        var $67=HEAP[$o16];
        var $68=(($67+8)&4294967295);
        HEAP[$68]=$66;
        var $69=HEAP[$1];
        var $70=(($69+28)&4294967295);
        var $71=HEAP[$70];
        var $72=$71;
        var $73=HEAP[$1];
        var $74=(($73+8)&4294967295);
        var $75=HEAP[$74];
        var $76=$75;
        var $77=($72);
        var $78=($76);
        var $79=((($77) - ($78))&4294967295);
        var $80=((($79))|0) <= 48;
        if ($80) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $81
        var $82=HEAP[$1];
        _luaD_growstack($82, 4);
        __label__ = 3; break;
      case 2: // $83
        __label__ = 3; break;
      case 3: // $84
        var $85=HEAP[$1];
        var $86=(($85+8)&4294967295);
        var $87=HEAP[$86];
        var $88=(($87+48)&4294967295);
        HEAP[$86]=$88;
        var $89=HEAP[$1];
        var $90=HEAP[$1];
        var $91=(($90+8)&4294967295);
        var $92=HEAP[$91];
        var $93=(($92+-48)&4294967295);
        _luaD_call($89, $93, 0);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaV_lessthan($L, $l, $r) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $res=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$l;
        HEAP[$4]=$r;
        var $5=HEAP[$3];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        var $8=HEAP[$4];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        var $11=((($7))|0)!=((($10))|0);
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$3];
        var $15=HEAP[$4];
        var $16=_luaG_ordererror($13, $14, $15);
        HEAP[$1]=$16;
        __label__ = 12; break;
      case 2: // $17
        var $18=HEAP[$3];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        var $21=((($20))|0)==3;
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $22
        var $23=HEAP[$3];
        var $24=(($23)&4294967295);
        var $25=$24;
        var $26=HEAP[$25];
        var $27=HEAP[$4];
        var $28=(($27)&4294967295);
        var $29=$28;
        var $30=HEAP[$29];
        var $31=($26) < ($30);
        var $32=unSign(($31), 1, 0);
        HEAP[$1]=$32;
        __label__ = 12; break;
      case 4: // $33
        var $34=HEAP[$3];
        var $35=(($34+8)&4294967295);
        var $36=HEAP[$35];
        var $37=((($36))|0)==4;
        if ($37) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $38
        var $39=HEAP[$3];
        var $40=(($39)&4294967295);
        var $41=$40;
        var $42=HEAP[$41];
        var $43=$42;
        var $44=HEAP[$4];
        var $45=(($44)&4294967295);
        var $46=$45;
        var $47=HEAP[$46];
        var $48=$47;
        var $49=_l_strcmp($43, $48);
        var $50=((($49))|0) < 0;
        var $51=unSign(($50), 1, 0);
        HEAP[$1]=$51;
        __label__ = 12; break;
      case 6: // $52
        var $53=HEAP[$2];
        var $54=HEAP[$3];
        var $55=HEAP[$4];
        var $56=_call_orderTM($53, $54, $55, 13);
        HEAP[$res]=$56;
        var $57=((($56))|0)!=-1;
        if ($57) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $58
        var $59=HEAP[$res];
        HEAP[$1]=$59;
        __label__ = 12; break;
      case 8: // $60
        __label__ = 9; break;
      case 9: // $61
        __label__ = 10; break;
      case 10: // $62
        __label__ = 11; break;
      case 11: // $63
        var $64=HEAP[$2];
        var $65=HEAP[$3];
        var $66=HEAP[$4];
        var $67=_luaG_ordererror($64, $65, $66);
        HEAP[$1]=$67;
        __label__ = 12; break;
      case 12: // $68
        var $69=HEAP[$1];
        STACKTOP = __stackBase__;
        return $69;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _l_strcmp($ls, $rs) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $l=__stackBase__+12;
        var $ll=__stackBase__+16;
        var $r=__stackBase__+20;
        var $lr=__stackBase__+24;
        var $temp=__stackBase__+28;
        var $len=__stackBase__+32;
        HEAP[$2]=$ls;
        HEAP[$3]=$rs;
        var $4=HEAP[$2];
        var $5=(($4+16)&4294967295);
        var $6=$5;
        HEAP[$l]=$6;
        var $7=HEAP[$2];
        var $8=$7;
        var $9=(($8+12)&4294967295);
        var $10=HEAP[$9];
        HEAP[$ll]=$10;
        var $11=HEAP[$3];
        var $12=(($11+16)&4294967295);
        var $13=$12;
        HEAP[$r]=$13;
        var $14=HEAP[$3];
        var $15=$14;
        var $16=(($15+12)&4294967295);
        var $17=HEAP[$16];
        HEAP[$lr]=$17;
        __label__ = 1; break;
      case 1: // $18
        var $19=HEAP[$l];
        var $20=HEAP[$r];
        var $21=_strcoll($19, $20);
        HEAP[$temp]=$21;
        var $22=HEAP[$temp];
        var $23=((($22))|0)!=0;
        if ($23) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $24
        var $25=HEAP[$temp];
        HEAP[$1]=$25;
        __label__ = 10; break;
      case 3: // $26
        var $27=HEAP[$l];
        var $28=_strlen($27);
        HEAP[$len]=$28;
        var $29=HEAP[$len];
        var $30=HEAP[$lr];
        var $31=((($29))|0)==((($30))|0);
        if ($31) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $32
        var $33=HEAP[$len];
        var $34=HEAP[$ll];
        var $35=((($33))|0)==((($34))|0);
        var $36=($35) ? 0 : 1;
        HEAP[$1]=$36;
        __label__ = 10; break;
      case 5: // $37
        var $38=HEAP[$len];
        var $39=HEAP[$ll];
        var $40=((($38))|0)==((($39))|0);
        if ($40) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $41
        HEAP[$1]=-1;
        __label__ = 10; break;
      case 7: // $42
        __label__ = 8; break;
      case 8: // $43
        var $44=HEAP[$len];
        var $45=((($44) + 1)&4294967295);
        HEAP[$len]=$45;
        var $46=HEAP[$len];
        var $47=HEAP[$l];
        var $48=(($47+$46)&4294967295);
        HEAP[$l]=$48;
        var $49=HEAP[$len];
        var $50=HEAP[$ll];
        var $51=((($50) - ($49))&4294967295);
        HEAP[$ll]=$51;
        var $52=HEAP[$len];
        var $53=HEAP[$r];
        var $54=(($53+$52)&4294967295);
        HEAP[$r]=$54;
        var $55=HEAP[$len];
        var $56=HEAP[$lr];
        var $57=((($56) - ($55))&4294967295);
        HEAP[$lr]=$57;
        __label__ = 9; break;
      case 9: // $58
        __label__ = 1; break;
      case 10: // $59
        var $60=HEAP[$1];
        STACKTOP = __stackBase__;
        return $60;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_orderTM($L, $p1, $p2, $event) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $tm1=__stackBase__+20;
        var $tm2=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$3]=$p1;
        HEAP[$4]=$p2;
        HEAP[$5]=$event;
        var $6=HEAP[$2];
        var $7=HEAP[$3];
        var $8=HEAP[$5];
        var $9=_luaT_gettmbyobj($6, $7, $8);
        HEAP[$tm1]=$9;
        var $10=HEAP[$tm1];
        var $11=(($10+8)&4294967295);
        var $12=HEAP[$11];
        var $13=((($12))|0)==0;
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $14
        HEAP[$1]=-1;
        __label__ = 9; break;
      case 2: // $15
        var $16=HEAP[$2];
        var $17=HEAP[$4];
        var $18=HEAP[$5];
        var $19=_luaT_gettmbyobj($16, $17, $18);
        HEAP[$tm2]=$19;
        var $20=HEAP[$tm1];
        var $21=HEAP[$tm2];
        var $22=_luaO_rawequalObj($20, $21);
        var $23=((($22))|0)!=0;
        if ($23) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $24
        HEAP[$1]=-1;
        __label__ = 9; break;
      case 4: // $25
        var $26=HEAP[$2];
        var $27=HEAP[$2];
        var $28=(($27+8)&4294967295);
        var $29=HEAP[$28];
        var $30=HEAP[$tm1];
        var $31=HEAP[$3];
        var $32=HEAP[$4];
        _callTMres($26, $29, $30, $31, $32);
        var $33=HEAP[$2];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+8)&4294967295);
        var $37=HEAP[$36];
        var $38=((($37))|0)==0;
        if ($38) { __lastLabel__ = 4; __label__ = 8; break; } else { __lastLabel__ = 4; __label__ = 5; break; }
      case 5: // $39
        var $40=HEAP[$2];
        var $41=(($40+8)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+8)&4294967295);
        var $44=HEAP[$43];
        var $45=((($44))|0)==1;
        if ($45) { __lastLabel__ = 5; __label__ = 6; break; } else { __lastLabel__ = 5; __label__ = 7; break; }
      case 6: // $46
        var $47=HEAP[$2];
        var $48=(($47+8)&4294967295);
        var $49=HEAP[$48];
        var $50=(($49)&4294967295);
        var $51=$50;
        var $52=HEAP[$51];
        var $53=((($52))|0)==0;
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $54
        var $55=__lastLabel__ == 5 ? 0 : ($53);
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $56
        var $57=__lastLabel__ == 4 ? 1 : ($55);
        var $58=($57) ^ 1;
        var $59=unSign(($58), 1, 0);
        HEAP[$1]=$59;
        __label__ = 9; break;
      case 9: // $60
        var $61=HEAP[$1];
        STACKTOP = __stackBase__;
        return $61;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaV_equalval($L, $t1, $t2) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $tm=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$t1;
        HEAP[$4]=$t2;
        var $5=HEAP[$3];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        if ($7 == 0) {
          __label__ = 1; break;
        }
        else if ($7 == 3) {
          __label__ = 2; break;
        }
        else if ($7 == 1) {
          __label__ = 3; break;
        }
        else if ($7 == 2) {
          __label__ = 4; break;
        }
        else if ($7 == 7) {
          __label__ = 5; break;
        }
        else if ($7 == 5) {
          __label__ = 8; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 1: // $8
        HEAP[$1]=1;
        __label__ = 19; break;
      case 2: // $9
        var $10=HEAP[$3];
        var $11=(($10)&4294967295);
        var $12=$11;
        var $13=HEAP[$12];
        var $14=HEAP[$4];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        var $18=($13) == ($17);
        var $19=unSign(($18), 1, 0);
        HEAP[$1]=$19;
        __label__ = 19; break;
      case 3: // $20
        var $21=HEAP[$3];
        var $22=(($21)&4294967295);
        var $23=$22;
        var $24=HEAP[$23];
        var $25=HEAP[$4];
        var $26=(($25)&4294967295);
        var $27=$26;
        var $28=HEAP[$27];
        var $29=((($24))|0)==((($28))|0);
        var $30=unSign(($29), 1, 0);
        HEAP[$1]=$30;
        __label__ = 19; break;
      case 4: // $31
        var $32=HEAP[$3];
        var $33=(($32)&4294967295);
        var $34=$33;
        var $35=HEAP[$34];
        var $36=HEAP[$4];
        var $37=(($36)&4294967295);
        var $38=$37;
        var $39=HEAP[$38];
        var $40=((($35))|0)==((($39))|0);
        var $41=unSign(($40), 1, 0);
        HEAP[$1]=$41;
        __label__ = 19; break;
      case 5: // $42
        var $43=HEAP[$3];
        var $44=(($43)&4294967295);
        var $45=$44;
        var $46=HEAP[$45];
        var $47=$46;
        var $48=$47;
        var $49=HEAP[$4];
        var $50=(($49)&4294967295);
        var $51=$50;
        var $52=HEAP[$51];
        var $53=$52;
        var $54=$53;
        var $55=((($48))|0)==((($54))|0);
        if ($55) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $56
        HEAP[$1]=1;
        __label__ = 19; break;
      case 7: // $57
        var $58=HEAP[$2];
        var $59=HEAP[$3];
        var $60=(($59)&4294967295);
        var $61=$60;
        var $62=HEAP[$61];
        var $63=$62;
        var $64=$63;
        var $65=(($64+8)&4294967295);
        var $66=HEAP[$65];
        var $67=HEAP[$4];
        var $68=(($67)&4294967295);
        var $69=$68;
        var $70=HEAP[$69];
        var $71=$70;
        var $72=$71;
        var $73=(($72+8)&4294967295);
        var $74=HEAP[$73];
        var $75=_get_compTM($58, $66, $74, 4);
        HEAP[$tm]=$75;
        __label__ = 12; break;
      case 8: // $76
        var $77=HEAP[$3];
        var $78=(($77)&4294967295);
        var $79=$78;
        var $80=HEAP[$79];
        var $81=$80;
        var $82=HEAP[$4];
        var $83=(($82)&4294967295);
        var $84=$83;
        var $85=HEAP[$84];
        var $86=$85;
        var $87=((($81))|0)==((($86))|0);
        if ($87) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $88
        HEAP[$1]=1;
        __label__ = 19; break;
      case 10: // $89
        var $90=HEAP[$2];
        var $91=HEAP[$3];
        var $92=(($91)&4294967295);
        var $93=$92;
        var $94=HEAP[$93];
        var $95=$94;
        var $96=(($95+8)&4294967295);
        var $97=HEAP[$96];
        var $98=HEAP[$4];
        var $99=(($98)&4294967295);
        var $100=$99;
        var $101=HEAP[$100];
        var $102=$101;
        var $103=(($102+8)&4294967295);
        var $104=HEAP[$103];
        var $105=_get_compTM($90, $97, $104, 4);
        HEAP[$tm]=$105;
        __label__ = 12; break;
      case 11: // $106
        var $107=HEAP[$3];
        var $108=(($107)&4294967295);
        var $109=$108;
        var $110=HEAP[$109];
        var $111=HEAP[$4];
        var $112=(($111)&4294967295);
        var $113=$112;
        var $114=HEAP[$113];
        var $115=((($110))|0)==((($114))|0);
        var $116=unSign(($115), 1, 0);
        HEAP[$1]=$116;
        __label__ = 19; break;
      case 12: // $117
        var $118=HEAP[$tm];
        var $119=((($118))|0)==0;
        if ($119) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $120
        HEAP[$1]=0;
        __label__ = 19; break;
      case 14: // $121
        var $122=HEAP[$2];
        var $123=HEAP[$2];
        var $124=(($123+8)&4294967295);
        var $125=HEAP[$124];
        var $126=HEAP[$tm];
        var $127=HEAP[$3];
        var $128=HEAP[$4];
        _callTMres($122, $125, $126, $127, $128);
        var $129=HEAP[$2];
        var $130=(($129+8)&4294967295);
        var $131=HEAP[$130];
        var $132=(($131+8)&4294967295);
        var $133=HEAP[$132];
        var $134=((($133))|0)==0;
        if ($134) { __lastLabel__ = 14; __label__ = 18; break; } else { __lastLabel__ = 14; __label__ = 15; break; }
      case 15: // $135
        var $136=HEAP[$2];
        var $137=(($136+8)&4294967295);
        var $138=HEAP[$137];
        var $139=(($138+8)&4294967295);
        var $140=HEAP[$139];
        var $141=((($140))|0)==1;
        if ($141) { __lastLabel__ = 15; __label__ = 16; break; } else { __lastLabel__ = 15; __label__ = 17; break; }
      case 16: // $142
        var $143=HEAP[$2];
        var $144=(($143+8)&4294967295);
        var $145=HEAP[$144];
        var $146=(($145)&4294967295);
        var $147=$146;
        var $148=HEAP[$147];
        var $149=((($148))|0)==0;
        __lastLabel__ = 16; __label__ = 17; break;
      case 17: // $150
        var $151=__lastLabel__ == 15 ? 0 : ($149);
        __lastLabel__ = 17; __label__ = 18; break;
      case 18: // $152
        var $153=__lastLabel__ == 14 ? 1 : ($151);
        var $154=($153) ^ 1;
        var $155=unSign(($154), 1, 0);
        HEAP[$1]=$155;
        __label__ = 19; break;
      case 19: // $156
        var $157=HEAP[$1];
        STACKTOP = __stackBase__;
        return $157;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_compTM($L, $mt1, $mt2, $event) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $tm1=__stackBase__+20;
        var $tm2=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$3]=$mt1;
        HEAP[$4]=$mt2;
        HEAP[$5]=$event;
        var $6=HEAP[$3];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        __lastLabel__ = 1; __label__ = 6; break;
      case 2: // $9
        var $10=HEAP[$3];
        var $11=(($10+6)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=HEAP[$5];
        var $15=1 << ($14);
        var $16=($13) & ($15);
        var $17=((($16))|0)!=0;
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $18
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $19
        var $20=HEAP[$3];
        var $21=HEAP[$5];
        var $22=HEAP[$5];
        var $23=HEAP[$2];
        var $24=(($23+16)&4294967295);
        var $25=HEAP[$24];
        var $26=(($25+168)&4294967295);
        var $27=(($26+$22*4)&4294967295);
        var $28=HEAP[$27];
        var $29=_luaT_gettm($20, $21, $28);
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $30
        var $31=__lastLabel__ == 3 ? 0 : ($29);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $32
        var $33=__lastLabel__ == 1 ? 0 : ($31);
        HEAP[$tm1]=$33;
        var $34=HEAP[$tm1];
        var $35=((($34))|0)==0;
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $36
        HEAP[$1]=0;
        __label__ = 21; break;
      case 8: // $37
        var $38=HEAP[$3];
        var $39=HEAP[$4];
        var $40=((($38))|0)==((($39))|0);
        if ($40) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $41
        var $42=HEAP[$tm1];
        HEAP[$1]=$42;
        __label__ = 21; break;
      case 10: // $43
        var $44=HEAP[$4];
        var $45=((($44))|0)==0;
        if ($45) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $46
        __lastLabel__ = 11; __label__ = 16; break;
      case 12: // $47
        var $48=HEAP[$4];
        var $49=(($48+6)&4294967295);
        var $50=HEAP[$49];
        var $51=unSign(($50), 8, 0);
        var $52=HEAP[$5];
        var $53=1 << ($52);
        var $54=($51) & ($53);
        var $55=((($54))|0)!=0;
        if ($55) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $56
        __lastLabel__ = 13; __label__ = 15; break;
      case 14: // $57
        var $58=HEAP[$4];
        var $59=HEAP[$5];
        var $60=HEAP[$5];
        var $61=HEAP[$2];
        var $62=(($61+16)&4294967295);
        var $63=HEAP[$62];
        var $64=(($63+168)&4294967295);
        var $65=(($64+$60*4)&4294967295);
        var $66=HEAP[$65];
        var $67=_luaT_gettm($58, $59, $66);
        __lastLabel__ = 14; __label__ = 15; break;
      case 15: // $68
        var $69=__lastLabel__ == 13 ? 0 : ($67);
        __lastLabel__ = 15; __label__ = 16; break;
      case 16: // $70
        var $71=__lastLabel__ == 11 ? 0 : ($69);
        HEAP[$tm2]=$71;
        var $72=HEAP[$tm2];
        var $73=((($72))|0)==0;
        if ($73) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $74
        HEAP[$1]=0;
        __label__ = 21; break;
      case 18: // $75
        var $76=HEAP[$tm1];
        var $77=HEAP[$tm2];
        var $78=_luaO_rawequalObj($76, $77);
        var $79=((($78))|0)!=0;
        if ($79) { __label__ = 19; break; } else { __label__ = 20; break; }
      case 19: // $80
        var $81=HEAP[$tm1];
        HEAP[$1]=$81;
        __label__ = 21; break;
      case 20: // $82
        HEAP[$1]=0;
        __label__ = 21; break;
      case 21: // $83
        var $84=HEAP[$1];
        STACKTOP = __stackBase__;
        return $84;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaV_concat($L, $total, $last) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $top=__stackBase__+12;
        var $n=__stackBase__+16;
        var $tl=__stackBase__+20;
        var $buffer=__stackBase__+24;
        var $i=__stackBase__+28;
        var $l=__stackBase__+32;
        var $l1=__stackBase__+36;
        var $i_o=__stackBase__+40;
        HEAP[$1]=$L;
        HEAP[$2]=$total;
        HEAP[$3]=$last;
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$1];
        var $6=(($5+12)&4294967295);
        var $7=HEAP[$6];
        var $8=HEAP[$3];
        var $9=(($7+12*$8)&4294967295);
        var $10=(($9+12)&4294967295);
        HEAP[$top]=$10;
        HEAP[$n]=2;
        var $11=HEAP[$top];
        var $12=(($11+-24)&4294967295);
        var $13=(($12+8)&4294967295);
        var $14=HEAP[$13];
        var $15=((($14))|0)==4;
        if ($15) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $16
        var $17=HEAP[$top];
        var $18=(($17+-24)&4294967295);
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        var $21=((($20))|0)==3;
        if ($21) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $22
        var $23=HEAP[$top];
        var $24=(($23+-12)&4294967295);
        var $25=(($24+8)&4294967295);
        var $26=HEAP[$25];
        var $27=((($26))|0)==4;
        if ($27) { __label__ = 8; break; } else { __label__ = 4; break; }
      case 4: // $28
        var $29=HEAP[$1];
        var $30=HEAP[$top];
        var $31=(($30+-12)&4294967295);
        var $32=_luaV_tostring($29, $31);
        var $33=((($32))|0)!=0;
        if ($33) { __label__ = 8; break; } else { __label__ = 5; break; }
      case 5: // $34
        var $35=HEAP[$1];
        var $36=HEAP[$top];
        var $37=(($36+-24)&4294967295);
        var $38=HEAP[$top];
        var $39=(($38+-12)&4294967295);
        var $40=HEAP[$top];
        var $41=(($40+-24)&4294967295);
        var $42=_call_binTM($35, $37, $39, $41, 15);
        var $43=((($42))|0)!=0;
        if ($43) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $44
        var $45=HEAP[$1];
        var $46=HEAP[$top];
        var $47=(($46+-24)&4294967295);
        var $48=HEAP[$top];
        var $49=(($48+-12)&4294967295);
        _luaG_concaterror($45, $47, $49);
        __label__ = 7; break;
      case 7: // $50
        __label__ = 28; break;
      case 8: // $51
        var $52=HEAP[$top];
        var $53=(($52+-12)&4294967295);
        var $54=(($53)&4294967295);
        var $55=$54;
        var $56=HEAP[$55];
        var $57=$56;
        var $58=$57;
        var $59=(($58+12)&4294967295);
        var $60=HEAP[$59];
        var $61=((($60))|0)==0;
        if ($61) { __label__ = 9; break; } else { __label__ = 12; break; }
      case 9: // $62
        var $63=HEAP[$top];
        var $64=(($63+-24)&4294967295);
        var $65=(($64+8)&4294967295);
        var $66=HEAP[$65];
        var $67=((($66))|0)==4;
        if ($67) { __lastLabel__ = 9; __label__ = 11; break; } else { __lastLabel__ = 9; __label__ = 10; break; }
      case 10: // $68
        var $69=HEAP[$1];
        var $70=HEAP[$top];
        var $71=(($70+-24)&4294967295);
        var $72=_luaV_tostring($69, $71);
        var $73=((($72))|0)!=0;
        __lastLabel__ = 10; __label__ = 11; break;
      case 11: // $74
        var $75=__lastLabel__ == 9 ? 1 : ($73);
        var $76=unSign(($75), 1, 0);
        __label__ = 27; break;
      case 12: // $77
        var $78=HEAP[$top];
        var $79=(($78+-12)&4294967295);
        var $80=(($79)&4294967295);
        var $81=$80;
        var $82=HEAP[$81];
        var $83=$82;
        var $84=$83;
        var $85=(($84+12)&4294967295);
        var $86=HEAP[$85];
        HEAP[$tl]=$86;
        HEAP[$n]=1;
        __label__ = 13; break;
      case 13: // $87
        var $88=HEAP[$n];
        var $89=HEAP[$2];
        var $90=((($88))|0) < ((($89))|0);
        if ($90) { __lastLabel__ = 13; __label__ = 14; break; } else { __lastLabel__ = 13; __label__ = 17; break; }
      case 14: // $91
        var $92=HEAP[$top];
        var $93=HEAP[$n];
        var $94=((0 - ($93))&4294967295);
        var $95=(($92+12*$94)&4294967295);
        var $96=(($95+-12)&4294967295);
        var $97=(($96+8)&4294967295);
        var $98=HEAP[$97];
        var $99=((($98))|0)==4;
        if ($99) { __lastLabel__ = 14; __label__ = 16; break; } else { __lastLabel__ = 14; __label__ = 15; break; }
      case 15: // $100
        var $101=HEAP[$1];
        var $102=HEAP[$top];
        var $103=HEAP[$n];
        var $104=((0 - ($103))&4294967295);
        var $105=(($102+12*$104)&4294967295);
        var $106=(($105+-12)&4294967295);
        var $107=_luaV_tostring($101, $106);
        var $108=((($107))|0)!=0;
        __lastLabel__ = 15; __label__ = 16; break;
      case 16: // $109
        var $110=__lastLabel__ == 14 ? 1 : ($108);
        __lastLabel__ = 16; __label__ = 17; break;
      case 17: // $111
        var $112=__lastLabel__ == 13 ? 0 : ($110);
        if ($112) { __label__ = 18; break; } else { __label__ = 22; break; }
      case 18: // $113
        var $114=HEAP[$top];
        var $115=HEAP[$n];
        var $116=((0 - ($115))&4294967295);
        var $117=(($114+12*$116)&4294967295);
        var $118=(($117+-12)&4294967295);
        var $119=(($118)&4294967295);
        var $120=$119;
        var $121=HEAP[$120];
        var $122=$121;
        var $123=$122;
        var $124=(($123+12)&4294967295);
        var $125=HEAP[$124];
        HEAP[$l]=$125;
        var $126=HEAP[$l];
        var $127=HEAP[$tl];
        var $128=((-3 - ($127))&4294967295);
        var $129=((($126))>>>0) >= ((($128))>>>0);
        if ($129) { __label__ = 19; break; } else { __label__ = 20; break; }
      case 19: // $130
        var $131=HEAP[$1];
        _luaG_runerror($131, ((__str4628)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 20; break;
      case 20: // $132
        var $133=HEAP[$l];
        var $134=HEAP[$tl];
        var $135=((($134) + ($133))&4294967295);
        HEAP[$tl]=$135;
        __label__ = 21; break;
      case 21: // $136
        var $137=HEAP[$n];
        var $138=((($137) + 1)&4294967295);
        HEAP[$n]=$138;
        __label__ = 13; break;
      case 22: // $139
        var $140=HEAP[$1];
        var $141=HEAP[$1];
        var $142=(($141+16)&4294967295);
        var $143=HEAP[$142];
        var $144=(($143+52)&4294967295);
        var $145=HEAP[$tl];
        var $146=_luaZ_openspace($140, $144, $145);
        HEAP[$buffer]=$146;
        HEAP[$tl]=0;
        var $147=HEAP[$n];
        HEAP[$i]=$147;
        __label__ = 23; break;
      case 23: // $148
        var $149=HEAP[$i];
        var $150=((($149))|0) > 0;
        if ($150) { __label__ = 24; break; } else { __label__ = 26; break; }
      case 24: // $151
        var $152=HEAP[$top];
        var $153=HEAP[$i];
        var $154=((0 - ($153))&4294967295);
        var $155=(($152+12*$154)&4294967295);
        var $156=(($155)&4294967295);
        var $157=$156;
        var $158=HEAP[$157];
        var $159=$158;
        var $160=$159;
        var $161=(($160+12)&4294967295);
        var $162=HEAP[$161];
        HEAP[$l1]=$162;
        var $163=HEAP[$buffer];
        var $164=HEAP[$tl];
        var $165=(($163+$164)&4294967295);
        var $166=HEAP[$top];
        var $167=HEAP[$i];
        var $168=((0 - ($167))&4294967295);
        var $169=(($166+12*$168)&4294967295);
        var $170=(($169)&4294967295);
        var $171=$170;
        var $172=HEAP[$171];
        var $173=$172;
        var $174=(($173+16)&4294967295);
        var $175=$174;
        var $176=HEAP[$l1];
        _llvm_memcpy_p0i8_p0i8_i32($165, $175, $176, 1, 0);
        var $177=HEAP[$l1];
        var $178=HEAP[$tl];
        var $179=((($178) + ($177))&4294967295);
        HEAP[$tl]=$179;
        __label__ = 25; break;
      case 25: // $180
        var $181=HEAP[$i];
        var $182=((($181) + -1)&4294967295);
        HEAP[$i]=$182;
        __label__ = 23; break;
      case 26: // $183
        var $184=HEAP[$top];
        var $185=HEAP[$n];
        var $186=((0 - ($185))&4294967295);
        var $187=(($184+12*$186)&4294967295);
        HEAP[$i_o]=$187;
        var $188=HEAP[$1];
        var $189=HEAP[$buffer];
        var $190=HEAP[$tl];
        var $191=_luaS_newlstr($188, $189, $190);
        var $192=$191;
        var $193=HEAP[$i_o];
        var $194=(($193)&4294967295);
        var $195=$194;
        HEAP[$195]=$192;
        var $196=HEAP[$i_o];
        var $197=(($196+8)&4294967295);
        HEAP[$197]=4;
        __label__ = 27; break;
      case 27: // $198
        __label__ = 28; break;
      case 28: // $199
        var $200=HEAP[$n];
        var $201=((($200) - 1)&4294967295);
        var $202=HEAP[$2];
        var $203=((($202) - ($201))&4294967295);
        HEAP[$2]=$203;
        var $204=HEAP[$n];
        var $205=((($204) - 1)&4294967295);
        var $206=HEAP[$3];
        var $207=((($206) - ($205))&4294967295);
        HEAP[$3]=$207;
        __label__ = 29; break;
      case 29: // $208
        var $209=HEAP[$2];
        var $210=((($209))|0) > 1;
        if ($210) { __label__ = 1; break; } else { __label__ = 30; break; }
      case 30: // $211
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_binTM($L, $p1, $p2, $res, $event) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $6=__stackBase__+20;
        var $tm=__stackBase__+24;
        HEAP[$2]=$L;
        HEAP[$3]=$p1;
        HEAP[$4]=$p2;
        HEAP[$5]=$res;
        HEAP[$6]=$event;
        var $7=HEAP[$2];
        var $8=HEAP[$3];
        var $9=HEAP[$6];
        var $10=_luaT_gettmbyobj($7, $8, $9);
        HEAP[$tm]=$10;
        var $11=HEAP[$tm];
        var $12=(($11+8)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0)==0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$2];
        var $17=HEAP[$4];
        var $18=HEAP[$6];
        var $19=_luaT_gettmbyobj($16, $17, $18);
        HEAP[$tm]=$19;
        __label__ = 2; break;
      case 2: // $20
        var $21=HEAP[$tm];
        var $22=(($21+8)&4294967295);
        var $23=HEAP[$22];
        var $24=((($23))|0)==0;
        if ($24) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $25
        HEAP[$1]=0;
        __label__ = 5; break;
      case 4: // $26
        var $27=HEAP[$2];
        var $28=HEAP[$5];
        var $29=HEAP[$tm];
        var $30=HEAP[$3];
        var $31=HEAP[$4];
        _callTMres($27, $28, $29, $30, $31);
        HEAP[$1]=1;
        __label__ = 5; break;
      case 5: // $32
        var $33=HEAP[$1];
        STACKTOP = __stackBase__;
        return $33;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaV_execute($L, $nexeccalls) {
    var __stackBase__  = STACKTOP; STACKTOP += 576; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 576);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $cl=__stackBase__+8;
        var $base=__stackBase__+12;
        var $k=__stackBase__+16;
        var $pc=__stackBase__+20;
        var $i=__stackBase__+24;
        var $ra=__stackBase__+28;
        var $o2=__stackBase__+32;
        var $o1=__stackBase__+36;
        var $o21=__stackBase__+40;
        var $o12=__stackBase__+44;
        var $i_o=__stackBase__+48;
        var $rb=__stackBase__+52;
        var $b=__stackBase__+56;
        var $o23=__stackBase__+60;
        var $o14=__stackBase__+64;
        var $g=__stackBase__+68;
        var $rb5=__stackBase__+80;
        var $i_o6=__stackBase__+84;
        var $g7=__stackBase__+88;
        var $i_o8=__stackBase__+100;
        var $uv=__stackBase__+104;
        var $o29=__stackBase__+108;
        var $o110=__stackBase__+112;
        var $b11=__stackBase__+116;
        var $c=__stackBase__+120;
        var $i_o12=__stackBase__+124;
        var $rb13=__stackBase__+128;
        var $o214=__stackBase__+132;
        var $o115=__stackBase__+136;
        var $rb16=__stackBase__+140;
        var $rc=__stackBase__+144;
        var $nb=__stackBase__+148;
        var $nc=__stackBase__+156;
        var $i_o17=__stackBase__+164;
        var $rb18=__stackBase__+168;
        var $rc19=__stackBase__+172;
        var $nb20=__stackBase__+176;
        var $nc21=__stackBase__+184;
        var $i_o22=__stackBase__+192;
        var $rb23=__stackBase__+196;
        var $rc24=__stackBase__+200;
        var $nb25=__stackBase__+204;
        var $nc26=__stackBase__+212;
        var $i_o27=__stackBase__+220;
        var $rb28=__stackBase__+224;
        var $rc29=__stackBase__+228;
        var $nb30=__stackBase__+232;
        var $nc31=__stackBase__+240;
        var $i_o32=__stackBase__+248;
        var $rb33=__stackBase__+252;
        var $rc34=__stackBase__+256;
        var $nb35=__stackBase__+260;
        var $nc36=__stackBase__+268;
        var $i_o37=__stackBase__+276;
        var $rb38=__stackBase__+280;
        var $rc39=__stackBase__+284;
        var $nb40=__stackBase__+288;
        var $nc41=__stackBase__+296;
        var $i_o42=__stackBase__+304;
        var $rb43=__stackBase__+308;
        var $nb44=__stackBase__+312;
        var $i_o45=__stackBase__+320;
        var $res=__stackBase__+324;
        var $i_o46=__stackBase__+328;
        var $rb47=__stackBase__+332;
        var $i_o48=__stackBase__+336;
        var $i_o49=__stackBase__+340;
        var $b50=__stackBase__+344;
        var $c51=__stackBase__+348;
        var $o252=__stackBase__+352;
        var $o153=__stackBase__+356;
        var $rb54=__stackBase__+360;
        var $rc55=__stackBase__+364;
        var $rb56=__stackBase__+368;
        var $o257=__stackBase__+372;
        var $o158=__stackBase__+376;
        var $b59=__stackBase__+380;
        var $nresults=__stackBase__+384;
        var $b60=__stackBase__+388;
        var $ci=__stackBase__+392;
        var $aux=__stackBase__+396;
        var $func=__stackBase__+400;
        var $pfunc=__stackBase__+404;
        var $o261=__stackBase__+408;
        var $o162=__stackBase__+412;
        var $b63=__stackBase__+416;
        var $step=__stackBase__+420;
        var $idx=__stackBase__+428;
        var $limit=__stackBase__+436;
        var $i_o64=__stackBase__+444;
        var $i_o65=__stackBase__+448;
        var $init=__stackBase__+452;
        var $plimit=__stackBase__+456;
        var $pstep=__stackBase__+460;
        var $i_o66=__stackBase__+464;
        var $cb=__stackBase__+468;
        var $o267=__stackBase__+472;
        var $o168=__stackBase__+476;
        var $o269=__stackBase__+480;
        var $o170=__stackBase__+484;
        var $o271=__stackBase__+488;
        var $o172=__stackBase__+492;
        var $o273=__stackBase__+496;
        var $o174=__stackBase__+500;
        var $n=__stackBase__+504;
        var $c75=__stackBase__+508;
        var $last=__stackBase__+512;
        var $h=__stackBase__+516;
        var $val=__stackBase__+520;
        var $o276=__stackBase__+524;
        var $o177=__stackBase__+528;
        var $p=__stackBase__+532;
        var $ncl=__stackBase__+536;
        var $nup=__stackBase__+540;
        var $j=__stackBase__+544;
        var $i_o78=__stackBase__+548;
        var $b79=__stackBase__+552;
        var $j80=__stackBase__+556;
        var $ci81=__stackBase__+560;
        var $n82=__stackBase__+564;
        var $o283=__stackBase__+568;
        var $o184=__stackBase__+572;
        HEAP[$1]=$L;
        HEAP[$2]=$nexeccalls;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$1];
        var $5=(($4+24)&4294967295);
        var $6=HEAP[$5];
        HEAP[$pc]=$6;
        var $7=HEAP[$1];
        var $8=(($7+20)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9+4)&4294967295);
        var $11=HEAP[$10];
        var $12=(($11)&4294967295);
        var $13=$12;
        var $14=HEAP[$13];
        var $15=$14;
        var $16=$15;
        HEAP[$cl]=$16;
        var $17=HEAP[$1];
        var $18=(($17+12)&4294967295);
        var $19=HEAP[$18];
        HEAP[$base]=$19;
        var $20=HEAP[$cl];
        var $21=(($20+16)&4294967295);
        var $22=HEAP[$21];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        HEAP[$k]=$24;
        __label__ = 2; break;
      case 2: // $25
        var $26=HEAP[$pc];
        var $27=(($26+4)&4294967295);
        HEAP[$pc]=$27;
        var $28=HEAP[$26];
        HEAP[$i]=$28;
        var $29=HEAP[$1];
        var $30=(($29+56)&4294967295);
        var $31=HEAP[$30];
        var $32=unSign(($31), 8, 0);
        var $33=($32) & 12;
        var $34=((($33))|0)!=0;
        if ($34) { __label__ = 3; break; } else { __label__ = 8; break; }
      case 3: // $35
        var $36=HEAP[$1];
        var $37=(($36+64)&4294967295);
        var $38=HEAP[$37];
        var $39=((($38) + -1)&4294967295);
        HEAP[$37]=$39;
        var $40=((($39))|0)==0;
        if ($40) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $41
        var $42=HEAP[$1];
        var $43=(($42+56)&4294967295);
        var $44=HEAP[$43];
        var $45=unSign(($44), 8, 0);
        var $46=($45) & 4;
        var $47=((($46))|0)!=0;
        if ($47) { __label__ = 5; break; } else { __label__ = 8; break; }
      case 5: // $48
        var $49=HEAP[$1];
        var $50=HEAP[$pc];
        _traceexec($49, $50);
        var $51=HEAP[$1];
        var $52=(($51+6)&4294967295);
        var $53=HEAP[$52];
        var $54=unSign(($53), 8, 0);
        var $55=((($54))|0)==1;
        if ($55) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $56
        var $57=HEAP[$pc];
        var $58=(($57+-4)&4294967295);
        var $59=HEAP[$1];
        var $60=(($59+24)&4294967295);
        HEAP[$60]=$58;
        __label__ = 264; break;
      case 7: // $61
        var $62=HEAP[$1];
        var $63=(($62+12)&4294967295);
        var $64=HEAP[$63];
        HEAP[$base]=$64;
        __label__ = 8; break;
      case 8: // $65
        var $66=HEAP[$base];
        var $67=HEAP[$i];
        var $68=((($67))>>>0) >>> 6;
        var $69=($68) & 255;
        var $70=(($66+12*$69)&4294967295);
        HEAP[$ra]=$70;
        var $71=HEAP[$i];
        var $72=((($71))>>>0) >>> 0;
        var $73=($72) & 63;
        if ($73 == 0) {
          __label__ = 9; break;
        }
        else if ($73 == 1) {
          __label__ = 10; break;
        }
        else if ($73 == 2) {
          __label__ = 11; break;
        }
        else if ($73 == 3) {
          __label__ = 14; break;
        }
        else if ($73 == 4) {
          __label__ = 18; break;
        }
        else if ($73 == 5) {
          __label__ = 19; break;
        }
        else if ($73 == 6) {
          __label__ = 20; break;
        }
        else if ($73 == 7) {
          __label__ = 24; break;
        }
        else if ($73 == 8) {
          __label__ = 25; break;
        }
        else if ($73 == 9) {
          __label__ = 30; break;
        }
        else if ($73 == 10) {
          __label__ = 37; break;
        }
        else if ($73 == 11) {
          __label__ = 40; break;
        }
        else if ($73 == 12) {
          __label__ = 44; break;
        }
        else if ($73 == 13) {
          __label__ = 55; break;
        }
        else if ($73 == 14) {
          __label__ = 66; break;
        }
        else if ($73 == 15) {
          __label__ = 77; break;
        }
        else if ($73 == 16) {
          __label__ = 88; break;
        }
        else if ($73 == 17) {
          __label__ = 99; break;
        }
        else if ($73 == 18) {
          __label__ = 110; break;
        }
        else if ($73 == 19) {
          __label__ = 114; break;
        }
        else if ($73 == 20) {
          __label__ = 119; break;
        }
        else if ($73 == 21) {
          __label__ = 126; break;
        }
        else if ($73 == 22) {
          __label__ = 129; break;
        }
        else if ($73 == 23) {
          __label__ = 130; break;
        }
        else if ($73 == 24) {
          __label__ = 141; break;
        }
        else if ($73 == 25) {
          __label__ = 150; break;
        }
        else if ($73 == 26) {
          __label__ = 159; break;
        }
        else if ($73 == 27) {
          __label__ = 166; break;
        }
        else if ($73 == 28) {
          __label__ = 173; break;
        }
        else if ($73 == 29) {
          __label__ = 181; break;
        }
        else if ($73 == 30) {
          __label__ = 193; break;
        }
        else if ($73 == 31) {
          __label__ = 202; break;
        }
        else if ($73 == 32) {
          __label__ = 207; break;
        }
        else if ($73 == 33) {
          __label__ = 219; break;
        }
        else if ($73 == 34) {
          __label__ = 222; break;
        }
        else if ($73 == 35) {
          __label__ = 239; break;
        }
        else if ($73 == 36) {
          __label__ = 240; break;
        }
        else if ($73 == 37) {
          __label__ = 250; break;
        }
        else {
        __label__ = 263; break;
        }
        
      case 9: // $74
        var $75=HEAP[$base];
        var $76=HEAP[$i];
        var $77=((($76))>>>0) >>> 23;
        var $78=($77) & 511;
        var $79=(($75+12*$78)&4294967295);
        HEAP[$o2]=$79;
        var $80=HEAP[$ra];
        HEAP[$o1]=$80;
        var $81=HEAP[$o1];
        var $82=(($81)&4294967295);
        var $83=HEAP[$o2];
        var $84=(($83)&4294967295);
        var $85=$82;
        var $86=$84;
        _llvm_memcpy_p0i8_p0i8_i32($85, $86, 8, 4, 0);
        var $87=HEAP[$o2];
        var $88=(($87+8)&4294967295);
        var $89=HEAP[$88];
        var $90=HEAP[$o1];
        var $91=(($90+8)&4294967295);
        HEAP[$91]=$89;
        __label__ = 2; break;
      case 10: // $92
        var $93=HEAP[$k];
        var $94=HEAP[$i];
        var $95=((($94))>>>0) >>> 14;
        var $96=($95) & 262143;
        var $97=(($93+12*$96)&4294967295);
        HEAP[$o21]=$97;
        var $98=HEAP[$ra];
        HEAP[$o12]=$98;
        var $99=HEAP[$o12];
        var $100=(($99)&4294967295);
        var $101=HEAP[$o21];
        var $102=(($101)&4294967295);
        var $103=$100;
        var $104=$102;
        _llvm_memcpy_p0i8_p0i8_i32($103, $104, 8, 4, 0);
        var $105=HEAP[$o21];
        var $106=(($105+8)&4294967295);
        var $107=HEAP[$106];
        var $108=HEAP[$o12];
        var $109=(($108+8)&4294967295);
        HEAP[$109]=$107;
        __label__ = 2; break;
      case 11: // $110
        var $111=HEAP[$ra];
        HEAP[$i_o]=$111;
        var $112=HEAP[$i];
        var $113=((($112))>>>0) >>> 23;
        var $114=($113) & 511;
        var $115=HEAP[$i_o];
        var $116=(($115)&4294967295);
        var $117=$116;
        HEAP[$117]=$114;
        var $118=HEAP[$i_o];
        var $119=(($118+8)&4294967295);
        HEAP[$119]=1;
        var $120=HEAP[$i];
        var $121=((($120))>>>0) >>> 14;
        var $122=($121) & 511;
        var $123=((($122))|0)!=0;
        if ($123) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $124
        var $125=HEAP[$pc];
        var $126=(($125+4)&4294967295);
        HEAP[$pc]=$126;
        __label__ = 13; break;
      case 13: // $127
        __label__ = 2; break;
      case 14: // $128
        var $129=HEAP[$base];
        var $130=HEAP[$i];
        var $131=((($130))>>>0) >>> 23;
        var $132=($131) & 511;
        var $133=(($129+12*$132)&4294967295);
        HEAP[$rb]=$133;
        __label__ = 15; break;
      case 15: // $134
        var $135=HEAP[$rb];
        var $136=(($135+-12)&4294967295);
        HEAP[$rb]=$136;
        var $137=(($135+8)&4294967295);
        HEAP[$137]=0;
        __label__ = 16; break;
      case 16: // $138
        var $139=HEAP[$rb];
        var $140=HEAP[$ra];
        var $141=((($139))>>>0) >= ((($140))>>>0);
        if ($141) { __label__ = 15; break; } else { __label__ = 17; break; }
      case 17: // $142
        __label__ = 2; break;
      case 18: // $143
        var $144=HEAP[$i];
        var $145=((($144))>>>0) >>> 23;
        var $146=($145) & 511;
        HEAP[$b]=$146;
        var $147=HEAP[$b];
        var $148=HEAP[$cl];
        var $149=(($148+20)&4294967295);
        var $150=(($149+$147*4)&4294967295);
        var $151=HEAP[$150];
        var $152=(($151+8)&4294967295);
        var $153=HEAP[$152];
        HEAP[$o23]=$153;
        var $154=HEAP[$ra];
        HEAP[$o14]=$154;
        var $155=HEAP[$o14];
        var $156=(($155)&4294967295);
        var $157=HEAP[$o23];
        var $158=(($157)&4294967295);
        var $159=$156;
        var $160=$158;
        _llvm_memcpy_p0i8_p0i8_i32($159, $160, 8, 4, 0);
        var $161=HEAP[$o23];
        var $162=(($161+8)&4294967295);
        var $163=HEAP[$162];
        var $164=HEAP[$o14];
        var $165=(($164+8)&4294967295);
        HEAP[$165]=$163;
        __label__ = 2; break;
      case 19: // $166
        var $167=HEAP[$k];
        var $168=HEAP[$i];
        var $169=((($168))>>>0) >>> 14;
        var $170=($169) & 262143;
        var $171=(($167+12*$170)&4294967295);
        HEAP[$rb5]=$171;
        HEAP[$i_o6]=$g;
        var $172=HEAP[$cl];
        var $173=(($172+12)&4294967295);
        var $174=HEAP[$173];
        var $175=$174;
        var $176=HEAP[$i_o6];
        var $177=(($176)&4294967295);
        var $178=$177;
        HEAP[$178]=$175;
        var $179=HEAP[$i_o6];
        var $180=(($179+8)&4294967295);
        HEAP[$180]=5;
        var $181=HEAP[$pc];
        var $182=HEAP[$1];
        var $183=(($182+24)&4294967295);
        HEAP[$183]=$181;
        var $184=HEAP[$1];
        var $185=HEAP[$rb5];
        var $186=HEAP[$ra];
        _luaV_gettable($184, $g, $185, $186);
        var $187=HEAP[$1];
        var $188=(($187+12)&4294967295);
        var $189=HEAP[$188];
        HEAP[$base]=$189;
        __label__ = 2; break;
      case 20: // $190
        var $191=HEAP[$pc];
        var $192=HEAP[$1];
        var $193=(($192+24)&4294967295);
        HEAP[$193]=$191;
        var $194=HEAP[$1];
        var $195=HEAP[$base];
        var $196=HEAP[$i];
        var $197=((($196))>>>0) >>> 23;
        var $198=($197) & 511;
        var $199=(($195+12*$198)&4294967295);
        var $200=HEAP[$i];
        var $201=((($200))>>>0) >>> 14;
        var $202=($201) & 511;
        var $203=($202) & 256;
        var $204=((($203))|0)!=0;
        if ($204) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $205
        var $206=HEAP[$k];
        var $207=HEAP[$i];
        var $208=((($207))>>>0) >>> 14;
        var $209=($208) & 511;
        var $210=($209) & -257;
        var $211=(($206+12*$210)&4294967295);
        __lastLabel__ = 21; __label__ = 23; break;
      case 22: // $212
        var $213=HEAP[$base];
        var $214=HEAP[$i];
        var $215=((($214))>>>0) >>> 14;
        var $216=($215) & 511;
        var $217=(($213+12*$216)&4294967295);
        __lastLabel__ = 22; __label__ = 23; break;
      case 23: // $218
        var $219=__lastLabel__ == 21 ? $211 : ($217);
        var $220=HEAP[$ra];
        _luaV_gettable($194, $199, $219, $220);
        var $221=HEAP[$1];
        var $222=(($221+12)&4294967295);
        var $223=HEAP[$222];
        HEAP[$base]=$223;
        __label__ = 2; break;
      case 24: // $224
        HEAP[$i_o8]=$g7;
        var $225=HEAP[$cl];
        var $226=(($225+12)&4294967295);
        var $227=HEAP[$226];
        var $228=$227;
        var $229=HEAP[$i_o8];
        var $230=(($229)&4294967295);
        var $231=$230;
        HEAP[$231]=$228;
        var $232=HEAP[$i_o8];
        var $233=(($232+8)&4294967295);
        HEAP[$233]=5;
        var $234=HEAP[$pc];
        var $235=HEAP[$1];
        var $236=(($235+24)&4294967295);
        HEAP[$236]=$234;
        var $237=HEAP[$1];
        var $238=HEAP[$k];
        var $239=HEAP[$i];
        var $240=((($239))>>>0) >>> 14;
        var $241=($240) & 262143;
        var $242=(($238+12*$241)&4294967295);
        var $243=HEAP[$ra];
        _luaV_settable($237, $g7, $242, $243);
        var $244=HEAP[$1];
        var $245=(($244+12)&4294967295);
        var $246=HEAP[$245];
        HEAP[$base]=$246;
        __label__ = 2; break;
      case 25: // $247
        var $248=HEAP[$i];
        var $249=((($248))>>>0) >>> 23;
        var $250=($249) & 511;
        var $251=HEAP[$cl];
        var $252=(($251+20)&4294967295);
        var $253=(($252+$250*4)&4294967295);
        var $254=HEAP[$253];
        HEAP[$uv]=$254;
        var $255=HEAP[$ra];
        HEAP[$o29]=$255;
        var $256=HEAP[$uv];
        var $257=(($256+8)&4294967295);
        var $258=HEAP[$257];
        HEAP[$o110]=$258;
        var $259=HEAP[$o110];
        var $260=(($259)&4294967295);
        var $261=HEAP[$o29];
        var $262=(($261)&4294967295);
        var $263=$260;
        var $264=$262;
        _llvm_memcpy_p0i8_p0i8_i32($263, $264, 8, 4, 0);
        var $265=HEAP[$o29];
        var $266=(($265+8)&4294967295);
        var $267=HEAP[$266];
        var $268=HEAP[$o110];
        var $269=(($268+8)&4294967295);
        HEAP[$269]=$267;
        var $270=HEAP[$ra];
        var $271=(($270+8)&4294967295);
        var $272=HEAP[$271];
        var $273=((($272))|0) >= 4;
        if ($273) { __label__ = 26; break; } else { __label__ = 29; break; }
      case 26: // $274
        var $275=HEAP[$ra];
        var $276=(($275)&4294967295);
        var $277=$276;
        var $278=HEAP[$277];
        var $279=$278;
        var $280=(($279+5)&4294967295);
        var $281=HEAP[$280];
        var $282=unSign(($281), 8, 0);
        var $283=($282) & 3;
        var $284=((($283))|0)!=0;
        if ($284) { __label__ = 27; break; } else { __label__ = 29; break; }
      case 27: // $285
        var $286=HEAP[$uv];
        var $287=$286;
        var $288=$287;
        var $289=(($288+5)&4294967295);
        var $290=HEAP[$289];
        var $291=unSign(($290), 8, 0);
        var $292=($291) & 4;
        var $293=((($292))|0)!=0;
        if ($293) { __label__ = 28; break; } else { __label__ = 29; break; }
      case 28: // $294
        var $295=HEAP[$1];
        var $296=HEAP[$uv];
        var $297=$296;
        var $298=HEAP[$ra];
        var $299=(($298)&4294967295);
        var $300=$299;
        var $301=HEAP[$300];
        _luaC_barrierf($295, $297, $301);
        __label__ = 29; break;
      case 29: // $302
        __label__ = 2; break;
      case 30: // $303
        var $304=HEAP[$pc];
        var $305=HEAP[$1];
        var $306=(($305+24)&4294967295);
        HEAP[$306]=$304;
        var $307=HEAP[$1];
        var $308=HEAP[$ra];
        var $309=HEAP[$i];
        var $310=((($309))>>>0) >>> 23;
        var $311=($310) & 511;
        var $312=($311) & 256;
        var $313=((($312))|0)!=0;
        if ($313) { __label__ = 31; break; } else { __label__ = 32; break; }
      case 31: // $314
        var $315=HEAP[$k];
        var $316=HEAP[$i];
        var $317=((($316))>>>0) >>> 23;
        var $318=($317) & 511;
        var $319=($318) & -257;
        var $320=(($315+12*$319)&4294967295);
        __lastLabel__ = 31; __label__ = 33; break;
      case 32: // $321
        var $322=HEAP[$base];
        var $323=HEAP[$i];
        var $324=((($323))>>>0) >>> 23;
        var $325=($324) & 511;
        var $326=(($322+12*$325)&4294967295);
        __lastLabel__ = 32; __label__ = 33; break;
      case 33: // $327
        var $328=__lastLabel__ == 31 ? $320 : ($326);
        var $329=HEAP[$i];
        var $330=((($329))>>>0) >>> 14;
        var $331=($330) & 511;
        var $332=($331) & 256;
        var $333=((($332))|0)!=0;
        if ($333) { __label__ = 34; break; } else { __label__ = 35; break; }
      case 34: // $334
        var $335=HEAP[$k];
        var $336=HEAP[$i];
        var $337=((($336))>>>0) >>> 14;
        var $338=($337) & 511;
        var $339=($338) & -257;
        var $340=(($335+12*$339)&4294967295);
        __lastLabel__ = 34; __label__ = 36; break;
      case 35: // $341
        var $342=HEAP[$base];
        var $343=HEAP[$i];
        var $344=((($343))>>>0) >>> 14;
        var $345=($344) & 511;
        var $346=(($342+12*$345)&4294967295);
        __lastLabel__ = 35; __label__ = 36; break;
      case 36: // $347
        var $348=__lastLabel__ == 34 ? $340 : ($346);
        _luaV_settable($307, $308, $328, $348);
        var $349=HEAP[$1];
        var $350=(($349+12)&4294967295);
        var $351=HEAP[$350];
        HEAP[$base]=$351;
        __label__ = 2; break;
      case 37: // $352
        var $353=HEAP[$i];
        var $354=((($353))>>>0) >>> 23;
        var $355=($354) & 511;
        HEAP[$b11]=$355;
        var $356=HEAP[$i];
        var $357=((($356))>>>0) >>> 14;
        var $358=($357) & 511;
        HEAP[$c]=$358;
        var $359=HEAP[$ra];
        HEAP[$i_o12]=$359;
        var $360=HEAP[$1];
        var $361=HEAP[$b11];
        var $362=_luaO_fb2int($361);
        var $363=HEAP[$c];
        var $364=_luaO_fb2int($363);
        var $365=_luaH_new($360, $362, $364);
        var $366=$365;
        var $367=HEAP[$i_o12];
        var $368=(($367)&4294967295);
        var $369=$368;
        HEAP[$369]=$366;
        var $370=HEAP[$i_o12];
        var $371=(($370+8)&4294967295);
        HEAP[$371]=5;
        var $372=HEAP[$pc];
        var $373=HEAP[$1];
        var $374=(($373+24)&4294967295);
        HEAP[$374]=$372;
        var $375=HEAP[$1];
        var $376=(($375+16)&4294967295);
        var $377=HEAP[$376];
        var $378=(($377+68)&4294967295);
        var $379=HEAP[$378];
        var $380=HEAP[$1];
        var $381=(($380+16)&4294967295);
        var $382=HEAP[$381];
        var $383=(($382+64)&4294967295);
        var $384=HEAP[$383];
        var $385=((($379))>>>0) >= ((($384))>>>0);
        if ($385) { __label__ = 38; break; } else { __label__ = 39; break; }
      case 38: // $386
        var $387=HEAP[$1];
        _luaC_step($387);
        __label__ = 39; break;
      case 39: // $388
        var $389=HEAP[$1];
        var $390=(($389+12)&4294967295);
        var $391=HEAP[$390];
        HEAP[$base]=$391;
        __label__ = 2; break;
      case 40: // $392
        var $393=HEAP[$base];
        var $394=HEAP[$i];
        var $395=((($394))>>>0) >>> 23;
        var $396=($395) & 511;
        var $397=(($393+12*$396)&4294967295);
        HEAP[$rb13]=$397;
        var $398=HEAP[$rb13];
        HEAP[$o214]=$398;
        var $399=HEAP[$ra];
        var $400=(($399+12)&4294967295);
        HEAP[$o115]=$400;
        var $401=HEAP[$o115];
        var $402=(($401)&4294967295);
        var $403=HEAP[$o214];
        var $404=(($403)&4294967295);
        var $405=$402;
        var $406=$404;
        _llvm_memcpy_p0i8_p0i8_i32($405, $406, 8, 4, 0);
        var $407=HEAP[$o214];
        var $408=(($407+8)&4294967295);
        var $409=HEAP[$408];
        var $410=HEAP[$o115];
        var $411=(($410+8)&4294967295);
        HEAP[$411]=$409;
        var $412=HEAP[$pc];
        var $413=HEAP[$1];
        var $414=(($413+24)&4294967295);
        HEAP[$414]=$412;
        var $415=HEAP[$1];
        var $416=HEAP[$rb13];
        var $417=HEAP[$i];
        var $418=((($417))>>>0) >>> 14;
        var $419=($418) & 511;
        var $420=($419) & 256;
        var $421=((($420))|0)!=0;
        if ($421) { __label__ = 41; break; } else { __label__ = 42; break; }
      case 41: // $422
        var $423=HEAP[$k];
        var $424=HEAP[$i];
        var $425=((($424))>>>0) >>> 14;
        var $426=($425) & 511;
        var $427=($426) & -257;
        var $428=(($423+12*$427)&4294967295);
        __lastLabel__ = 41; __label__ = 43; break;
      case 42: // $429
        var $430=HEAP[$base];
        var $431=HEAP[$i];
        var $432=((($431))>>>0) >>> 14;
        var $433=($432) & 511;
        var $434=(($430+12*$433)&4294967295);
        __lastLabel__ = 42; __label__ = 43; break;
      case 43: // $435
        var $436=__lastLabel__ == 41 ? $428 : ($434);
        var $437=HEAP[$ra];
        _luaV_gettable($415, $416, $436, $437);
        var $438=HEAP[$1];
        var $439=(($438+12)&4294967295);
        var $440=HEAP[$439];
        HEAP[$base]=$440;
        __label__ = 2; break;
      case 44: // $441
        var $442=HEAP[$i];
        var $443=((($442))>>>0) >>> 23;
        var $444=($443) & 511;
        var $445=($444) & 256;
        var $446=((($445))|0)!=0;
        if ($446) { __label__ = 45; break; } else { __label__ = 46; break; }
      case 45: // $447
        var $448=HEAP[$k];
        var $449=HEAP[$i];
        var $450=((($449))>>>0) >>> 23;
        var $451=($450) & 511;
        var $452=($451) & -257;
        var $453=(($448+12*$452)&4294967295);
        __lastLabel__ = 45; __label__ = 47; break;
      case 46: // $454
        var $455=HEAP[$base];
        var $456=HEAP[$i];
        var $457=((($456))>>>0) >>> 23;
        var $458=($457) & 511;
        var $459=(($455+12*$458)&4294967295);
        __lastLabel__ = 46; __label__ = 47; break;
      case 47: // $460
        var $461=__lastLabel__ == 45 ? $453 : ($459);
        HEAP[$rb16]=$461;
        var $462=HEAP[$i];
        var $463=((($462))>>>0) >>> 14;
        var $464=($463) & 511;
        var $465=($464) & 256;
        var $466=((($465))|0)!=0;
        if ($466) { __label__ = 48; break; } else { __label__ = 49; break; }
      case 48: // $467
        var $468=HEAP[$k];
        var $469=HEAP[$i];
        var $470=((($469))>>>0) >>> 14;
        var $471=($470) & 511;
        var $472=($471) & -257;
        var $473=(($468+12*$472)&4294967295);
        __lastLabel__ = 48; __label__ = 50; break;
      case 49: // $474
        var $475=HEAP[$base];
        var $476=HEAP[$i];
        var $477=((($476))>>>0) >>> 14;
        var $478=($477) & 511;
        var $479=(($475+12*$478)&4294967295);
        __lastLabel__ = 49; __label__ = 50; break;
      case 50: // $480
        var $481=__lastLabel__ == 48 ? $473 : ($479);
        HEAP[$rc]=$481;
        var $482=HEAP[$rb16];
        var $483=(($482+8)&4294967295);
        var $484=HEAP[$483];
        var $485=((($484))|0)==3;
        if ($485) { __label__ = 51; break; } else { __label__ = 53; break; }
      case 51: // $486
        var $487=HEAP[$rc];
        var $488=(($487+8)&4294967295);
        var $489=HEAP[$488];
        var $490=((($489))|0)==3;
        if ($490) { __label__ = 52; break; } else { __label__ = 53; break; }
      case 52: // $491
        var $492=HEAP[$rb16];
        var $493=(($492)&4294967295);
        var $494=$493;
        var $495=HEAP[$494];
        HEAP[$nb]=$495;
        var $496=HEAP[$rc];
        var $497=(($496)&4294967295);
        var $498=$497;
        var $499=HEAP[$498];
        HEAP[$nc]=$499;
        var $500=HEAP[$ra];
        HEAP[$i_o17]=$500;
        var $501=HEAP[$nb];
        var $502=HEAP[$nc];
        var $503=($501) + ($502);
        var $504=HEAP[$i_o17];
        var $505=(($504)&4294967295);
        var $506=$505;
        HEAP[$506]=$503;
        var $507=HEAP[$i_o17];
        var $508=(($507+8)&4294967295);
        HEAP[$508]=3;
        __label__ = 54; break;
      case 53: // $509
        var $510=HEAP[$pc];
        var $511=HEAP[$1];
        var $512=(($511+24)&4294967295);
        HEAP[$512]=$510;
        var $513=HEAP[$1];
        var $514=HEAP[$ra];
        var $515=HEAP[$rb16];
        var $516=HEAP[$rc];
        _Arith($513, $514, $515, $516, 5);
        var $517=HEAP[$1];
        var $518=(($517+12)&4294967295);
        var $519=HEAP[$518];
        HEAP[$base]=$519;
        __label__ = 54; break;
      case 54: // $520
        __label__ = 2; break;
      case 55: // $521
        var $522=HEAP[$i];
        var $523=((($522))>>>0) >>> 23;
        var $524=($523) & 511;
        var $525=($524) & 256;
        var $526=((($525))|0)!=0;
        if ($526) { __label__ = 56; break; } else { __label__ = 57; break; }
      case 56: // $527
        var $528=HEAP[$k];
        var $529=HEAP[$i];
        var $530=((($529))>>>0) >>> 23;
        var $531=($530) & 511;
        var $532=($531) & -257;
        var $533=(($528+12*$532)&4294967295);
        __lastLabel__ = 56; __label__ = 58; break;
      case 57: // $534
        var $535=HEAP[$base];
        var $536=HEAP[$i];
        var $537=((($536))>>>0) >>> 23;
        var $538=($537) & 511;
        var $539=(($535+12*$538)&4294967295);
        __lastLabel__ = 57; __label__ = 58; break;
      case 58: // $540
        var $541=__lastLabel__ == 56 ? $533 : ($539);
        HEAP[$rb18]=$541;
        var $542=HEAP[$i];
        var $543=((($542))>>>0) >>> 14;
        var $544=($543) & 511;
        var $545=($544) & 256;
        var $546=((($545))|0)!=0;
        if ($546) { __label__ = 59; break; } else { __label__ = 60; break; }
      case 59: // $547
        var $548=HEAP[$k];
        var $549=HEAP[$i];
        var $550=((($549))>>>0) >>> 14;
        var $551=($550) & 511;
        var $552=($551) & -257;
        var $553=(($548+12*$552)&4294967295);
        __lastLabel__ = 59; __label__ = 61; break;
      case 60: // $554
        var $555=HEAP[$base];
        var $556=HEAP[$i];
        var $557=((($556))>>>0) >>> 14;
        var $558=($557) & 511;
        var $559=(($555+12*$558)&4294967295);
        __lastLabel__ = 60; __label__ = 61; break;
      case 61: // $560
        var $561=__lastLabel__ == 59 ? $553 : ($559);
        HEAP[$rc19]=$561;
        var $562=HEAP[$rb18];
        var $563=(($562+8)&4294967295);
        var $564=HEAP[$563];
        var $565=((($564))|0)==3;
        if ($565) { __label__ = 62; break; } else { __label__ = 64; break; }
      case 62: // $566
        var $567=HEAP[$rc19];
        var $568=(($567+8)&4294967295);
        var $569=HEAP[$568];
        var $570=((($569))|0)==3;
        if ($570) { __label__ = 63; break; } else { __label__ = 64; break; }
      case 63: // $571
        var $572=HEAP[$rb18];
        var $573=(($572)&4294967295);
        var $574=$573;
        var $575=HEAP[$574];
        HEAP[$nb20]=$575;
        var $576=HEAP[$rc19];
        var $577=(($576)&4294967295);
        var $578=$577;
        var $579=HEAP[$578];
        HEAP[$nc21]=$579;
        var $580=HEAP[$ra];
        HEAP[$i_o22]=$580;
        var $581=HEAP[$nb20];
        var $582=HEAP[$nc21];
        var $583=($581) - ($582);
        var $584=HEAP[$i_o22];
        var $585=(($584)&4294967295);
        var $586=$585;
        HEAP[$586]=$583;
        var $587=HEAP[$i_o22];
        var $588=(($587+8)&4294967295);
        HEAP[$588]=3;
        __label__ = 65; break;
      case 64: // $589
        var $590=HEAP[$pc];
        var $591=HEAP[$1];
        var $592=(($591+24)&4294967295);
        HEAP[$592]=$590;
        var $593=HEAP[$1];
        var $594=HEAP[$ra];
        var $595=HEAP[$rb18];
        var $596=HEAP[$rc19];
        _Arith($593, $594, $595, $596, 6);
        var $597=HEAP[$1];
        var $598=(($597+12)&4294967295);
        var $599=HEAP[$598];
        HEAP[$base]=$599;
        __label__ = 65; break;
      case 65: // $600
        __label__ = 2; break;
      case 66: // $601
        var $602=HEAP[$i];
        var $603=((($602))>>>0) >>> 23;
        var $604=($603) & 511;
        var $605=($604) & 256;
        var $606=((($605))|0)!=0;
        if ($606) { __label__ = 67; break; } else { __label__ = 68; break; }
      case 67: // $607
        var $608=HEAP[$k];
        var $609=HEAP[$i];
        var $610=((($609))>>>0) >>> 23;
        var $611=($610) & 511;
        var $612=($611) & -257;
        var $613=(($608+12*$612)&4294967295);
        __lastLabel__ = 67; __label__ = 69; break;
      case 68: // $614
        var $615=HEAP[$base];
        var $616=HEAP[$i];
        var $617=((($616))>>>0) >>> 23;
        var $618=($617) & 511;
        var $619=(($615+12*$618)&4294967295);
        __lastLabel__ = 68; __label__ = 69; break;
      case 69: // $620
        var $621=__lastLabel__ == 67 ? $613 : ($619);
        HEAP[$rb23]=$621;
        var $622=HEAP[$i];
        var $623=((($622))>>>0) >>> 14;
        var $624=($623) & 511;
        var $625=($624) & 256;
        var $626=((($625))|0)!=0;
        if ($626) { __label__ = 70; break; } else { __label__ = 71; break; }
      case 70: // $627
        var $628=HEAP[$k];
        var $629=HEAP[$i];
        var $630=((($629))>>>0) >>> 14;
        var $631=($630) & 511;
        var $632=($631) & -257;
        var $633=(($628+12*$632)&4294967295);
        __lastLabel__ = 70; __label__ = 72; break;
      case 71: // $634
        var $635=HEAP[$base];
        var $636=HEAP[$i];
        var $637=((($636))>>>0) >>> 14;
        var $638=($637) & 511;
        var $639=(($635+12*$638)&4294967295);
        __lastLabel__ = 71; __label__ = 72; break;
      case 72: // $640
        var $641=__lastLabel__ == 70 ? $633 : ($639);
        HEAP[$rc24]=$641;
        var $642=HEAP[$rb23];
        var $643=(($642+8)&4294967295);
        var $644=HEAP[$643];
        var $645=((($644))|0)==3;
        if ($645) { __label__ = 73; break; } else { __label__ = 75; break; }
      case 73: // $646
        var $647=HEAP[$rc24];
        var $648=(($647+8)&4294967295);
        var $649=HEAP[$648];
        var $650=((($649))|0)==3;
        if ($650) { __label__ = 74; break; } else { __label__ = 75; break; }
      case 74: // $651
        var $652=HEAP[$rb23];
        var $653=(($652)&4294967295);
        var $654=$653;
        var $655=HEAP[$654];
        HEAP[$nb25]=$655;
        var $656=HEAP[$rc24];
        var $657=(($656)&4294967295);
        var $658=$657;
        var $659=HEAP[$658];
        HEAP[$nc26]=$659;
        var $660=HEAP[$ra];
        HEAP[$i_o27]=$660;
        var $661=HEAP[$nb25];
        var $662=HEAP[$nc26];
        var $663=($661) * ($662);
        var $664=HEAP[$i_o27];
        var $665=(($664)&4294967295);
        var $666=$665;
        HEAP[$666]=$663;
        var $667=HEAP[$i_o27];
        var $668=(($667+8)&4294967295);
        HEAP[$668]=3;
        __label__ = 76; break;
      case 75: // $669
        var $670=HEAP[$pc];
        var $671=HEAP[$1];
        var $672=(($671+24)&4294967295);
        HEAP[$672]=$670;
        var $673=HEAP[$1];
        var $674=HEAP[$ra];
        var $675=HEAP[$rb23];
        var $676=HEAP[$rc24];
        _Arith($673, $674, $675, $676, 7);
        var $677=HEAP[$1];
        var $678=(($677+12)&4294967295);
        var $679=HEAP[$678];
        HEAP[$base]=$679;
        __label__ = 76; break;
      case 76: // $680
        __label__ = 2; break;
      case 77: // $681
        var $682=HEAP[$i];
        var $683=((($682))>>>0) >>> 23;
        var $684=($683) & 511;
        var $685=($684) & 256;
        var $686=((($685))|0)!=0;
        if ($686) { __label__ = 78; break; } else { __label__ = 79; break; }
      case 78: // $687
        var $688=HEAP[$k];
        var $689=HEAP[$i];
        var $690=((($689))>>>0) >>> 23;
        var $691=($690) & 511;
        var $692=($691) & -257;
        var $693=(($688+12*$692)&4294967295);
        __lastLabel__ = 78; __label__ = 80; break;
      case 79: // $694
        var $695=HEAP[$base];
        var $696=HEAP[$i];
        var $697=((($696))>>>0) >>> 23;
        var $698=($697) & 511;
        var $699=(($695+12*$698)&4294967295);
        __lastLabel__ = 79; __label__ = 80; break;
      case 80: // $700
        var $701=__lastLabel__ == 78 ? $693 : ($699);
        HEAP[$rb28]=$701;
        var $702=HEAP[$i];
        var $703=((($702))>>>0) >>> 14;
        var $704=($703) & 511;
        var $705=($704) & 256;
        var $706=((($705))|0)!=0;
        if ($706) { __label__ = 81; break; } else { __label__ = 82; break; }
      case 81: // $707
        var $708=HEAP[$k];
        var $709=HEAP[$i];
        var $710=((($709))>>>0) >>> 14;
        var $711=($710) & 511;
        var $712=($711) & -257;
        var $713=(($708+12*$712)&4294967295);
        __lastLabel__ = 81; __label__ = 83; break;
      case 82: // $714
        var $715=HEAP[$base];
        var $716=HEAP[$i];
        var $717=((($716))>>>0) >>> 14;
        var $718=($717) & 511;
        var $719=(($715+12*$718)&4294967295);
        __lastLabel__ = 82; __label__ = 83; break;
      case 83: // $720
        var $721=__lastLabel__ == 81 ? $713 : ($719);
        HEAP[$rc29]=$721;
        var $722=HEAP[$rb28];
        var $723=(($722+8)&4294967295);
        var $724=HEAP[$723];
        var $725=((($724))|0)==3;
        if ($725) { __label__ = 84; break; } else { __label__ = 86; break; }
      case 84: // $726
        var $727=HEAP[$rc29];
        var $728=(($727+8)&4294967295);
        var $729=HEAP[$728];
        var $730=((($729))|0)==3;
        if ($730) { __label__ = 85; break; } else { __label__ = 86; break; }
      case 85: // $731
        var $732=HEAP[$rb28];
        var $733=(($732)&4294967295);
        var $734=$733;
        var $735=HEAP[$734];
        HEAP[$nb30]=$735;
        var $736=HEAP[$rc29];
        var $737=(($736)&4294967295);
        var $738=$737;
        var $739=HEAP[$738];
        HEAP[$nc31]=$739;
        var $740=HEAP[$ra];
        HEAP[$i_o32]=$740;
        var $741=HEAP[$nb30];
        var $742=HEAP[$nc31];
        var $743=($741) / ($742);
        var $744=HEAP[$i_o32];
        var $745=(($744)&4294967295);
        var $746=$745;
        HEAP[$746]=$743;
        var $747=HEAP[$i_o32];
        var $748=(($747+8)&4294967295);
        HEAP[$748]=3;
        __label__ = 87; break;
      case 86: // $749
        var $750=HEAP[$pc];
        var $751=HEAP[$1];
        var $752=(($751+24)&4294967295);
        HEAP[$752]=$750;
        var $753=HEAP[$1];
        var $754=HEAP[$ra];
        var $755=HEAP[$rb28];
        var $756=HEAP[$rc29];
        _Arith($753, $754, $755, $756, 8);
        var $757=HEAP[$1];
        var $758=(($757+12)&4294967295);
        var $759=HEAP[$758];
        HEAP[$base]=$759;
        __label__ = 87; break;
      case 87: // $760
        __label__ = 2; break;
      case 88: // $761
        var $762=HEAP[$i];
        var $763=((($762))>>>0) >>> 23;
        var $764=($763) & 511;
        var $765=($764) & 256;
        var $766=((($765))|0)!=0;
        if ($766) { __label__ = 89; break; } else { __label__ = 90; break; }
      case 89: // $767
        var $768=HEAP[$k];
        var $769=HEAP[$i];
        var $770=((($769))>>>0) >>> 23;
        var $771=($770) & 511;
        var $772=($771) & -257;
        var $773=(($768+12*$772)&4294967295);
        __lastLabel__ = 89; __label__ = 91; break;
      case 90: // $774
        var $775=HEAP[$base];
        var $776=HEAP[$i];
        var $777=((($776))>>>0) >>> 23;
        var $778=($777) & 511;
        var $779=(($775+12*$778)&4294967295);
        __lastLabel__ = 90; __label__ = 91; break;
      case 91: // $780
        var $781=__lastLabel__ == 89 ? $773 : ($779);
        HEAP[$rb33]=$781;
        var $782=HEAP[$i];
        var $783=((($782))>>>0) >>> 14;
        var $784=($783) & 511;
        var $785=($784) & 256;
        var $786=((($785))|0)!=0;
        if ($786) { __label__ = 92; break; } else { __label__ = 93; break; }
      case 92: // $787
        var $788=HEAP[$k];
        var $789=HEAP[$i];
        var $790=((($789))>>>0) >>> 14;
        var $791=($790) & 511;
        var $792=($791) & -257;
        var $793=(($788+12*$792)&4294967295);
        __lastLabel__ = 92; __label__ = 94; break;
      case 93: // $794
        var $795=HEAP[$base];
        var $796=HEAP[$i];
        var $797=((($796))>>>0) >>> 14;
        var $798=($797) & 511;
        var $799=(($795+12*$798)&4294967295);
        __lastLabel__ = 93; __label__ = 94; break;
      case 94: // $800
        var $801=__lastLabel__ == 92 ? $793 : ($799);
        HEAP[$rc34]=$801;
        var $802=HEAP[$rb33];
        var $803=(($802+8)&4294967295);
        var $804=HEAP[$803];
        var $805=((($804))|0)==3;
        if ($805) { __label__ = 95; break; } else { __label__ = 97; break; }
      case 95: // $806
        var $807=HEAP[$rc34];
        var $808=(($807+8)&4294967295);
        var $809=HEAP[$808];
        var $810=((($809))|0)==3;
        if ($810) { __label__ = 96; break; } else { __label__ = 97; break; }
      case 96: // $811
        var $812=HEAP[$rb33];
        var $813=(($812)&4294967295);
        var $814=$813;
        var $815=HEAP[$814];
        HEAP[$nb35]=$815;
        var $816=HEAP[$rc34];
        var $817=(($816)&4294967295);
        var $818=$817;
        var $819=HEAP[$818];
        HEAP[$nc36]=$819;
        var $820=HEAP[$ra];
        HEAP[$i_o37]=$820;
        var $821=HEAP[$nb35];
        var $822=HEAP[$nb35];
        var $823=HEAP[$nc36];
        var $824=($822) / ($823);
        var $825=_floor($824);
        var $826=HEAP[$nc36];
        var $827=($825) * ($826);
        var $828=($821) - ($827);
        var $829=HEAP[$i_o37];
        var $830=(($829)&4294967295);
        var $831=$830;
        HEAP[$831]=$828;
        var $832=HEAP[$i_o37];
        var $833=(($832+8)&4294967295);
        HEAP[$833]=3;
        __label__ = 98; break;
      case 97: // $834
        var $835=HEAP[$pc];
        var $836=HEAP[$1];
        var $837=(($836+24)&4294967295);
        HEAP[$837]=$835;
        var $838=HEAP[$1];
        var $839=HEAP[$ra];
        var $840=HEAP[$rb33];
        var $841=HEAP[$rc34];
        _Arith($838, $839, $840, $841, 9);
        var $842=HEAP[$1];
        var $843=(($842+12)&4294967295);
        var $844=HEAP[$843];
        HEAP[$base]=$844;
        __label__ = 98; break;
      case 98: // $845
        __label__ = 2; break;
      case 99: // $846
        var $847=HEAP[$i];
        var $848=((($847))>>>0) >>> 23;
        var $849=($848) & 511;
        var $850=($849) & 256;
        var $851=((($850))|0)!=0;
        if ($851) { __label__ = 100; break; } else { __label__ = 101; break; }
      case 100: // $852
        var $853=HEAP[$k];
        var $854=HEAP[$i];
        var $855=((($854))>>>0) >>> 23;
        var $856=($855) & 511;
        var $857=($856) & -257;
        var $858=(($853+12*$857)&4294967295);
        __lastLabel__ = 100; __label__ = 102; break;
      case 101: // $859
        var $860=HEAP[$base];
        var $861=HEAP[$i];
        var $862=((($861))>>>0) >>> 23;
        var $863=($862) & 511;
        var $864=(($860+12*$863)&4294967295);
        __lastLabel__ = 101; __label__ = 102; break;
      case 102: // $865
        var $866=__lastLabel__ == 100 ? $858 : ($864);
        HEAP[$rb38]=$866;
        var $867=HEAP[$i];
        var $868=((($867))>>>0) >>> 14;
        var $869=($868) & 511;
        var $870=($869) & 256;
        var $871=((($870))|0)!=0;
        if ($871) { __label__ = 103; break; } else { __label__ = 104; break; }
      case 103: // $872
        var $873=HEAP[$k];
        var $874=HEAP[$i];
        var $875=((($874))>>>0) >>> 14;
        var $876=($875) & 511;
        var $877=($876) & -257;
        var $878=(($873+12*$877)&4294967295);
        __lastLabel__ = 103; __label__ = 105; break;
      case 104: // $879
        var $880=HEAP[$base];
        var $881=HEAP[$i];
        var $882=((($881))>>>0) >>> 14;
        var $883=($882) & 511;
        var $884=(($880+12*$883)&4294967295);
        __lastLabel__ = 104; __label__ = 105; break;
      case 105: // $885
        var $886=__lastLabel__ == 103 ? $878 : ($884);
        HEAP[$rc39]=$886;
        var $887=HEAP[$rb38];
        var $888=(($887+8)&4294967295);
        var $889=HEAP[$888];
        var $890=((($889))|0)==3;
        if ($890) { __label__ = 106; break; } else { __label__ = 108; break; }
      case 106: // $891
        var $892=HEAP[$rc39];
        var $893=(($892+8)&4294967295);
        var $894=HEAP[$893];
        var $895=((($894))|0)==3;
        if ($895) { __label__ = 107; break; } else { __label__ = 108; break; }
      case 107: // $896
        var $897=HEAP[$rb38];
        var $898=(($897)&4294967295);
        var $899=$898;
        var $900=HEAP[$899];
        HEAP[$nb40]=$900;
        var $901=HEAP[$rc39];
        var $902=(($901)&4294967295);
        var $903=$902;
        var $904=HEAP[$903];
        HEAP[$nc41]=$904;
        var $905=HEAP[$ra];
        HEAP[$i_o42]=$905;
        var $906=HEAP[$nb40];
        var $907=HEAP[$nc41];
        var $908=_llvm_pow_f64($906, $907);
        var $909=HEAP[$i_o42];
        var $910=(($909)&4294967295);
        var $911=$910;
        HEAP[$911]=$908;
        var $912=HEAP[$i_o42];
        var $913=(($912+8)&4294967295);
        HEAP[$913]=3;
        __label__ = 109; break;
      case 108: // $914
        var $915=HEAP[$pc];
        var $916=HEAP[$1];
        var $917=(($916+24)&4294967295);
        HEAP[$917]=$915;
        var $918=HEAP[$1];
        var $919=HEAP[$ra];
        var $920=HEAP[$rb38];
        var $921=HEAP[$rc39];
        _Arith($918, $919, $920, $921, 10);
        var $922=HEAP[$1];
        var $923=(($922+12)&4294967295);
        var $924=HEAP[$923];
        HEAP[$base]=$924;
        __label__ = 109; break;
      case 109: // $925
        __label__ = 2; break;
      case 110: // $926
        var $927=HEAP[$base];
        var $928=HEAP[$i];
        var $929=((($928))>>>0) >>> 23;
        var $930=($929) & 511;
        var $931=(($927+12*$930)&4294967295);
        HEAP[$rb43]=$931;
        var $932=HEAP[$rb43];
        var $933=(($932+8)&4294967295);
        var $934=HEAP[$933];
        var $935=((($934))|0)==3;
        if ($935) { __label__ = 111; break; } else { __label__ = 112; break; }
      case 111: // $936
        var $937=HEAP[$rb43];
        var $938=(($937)&4294967295);
        var $939=$938;
        var $940=HEAP[$939];
        HEAP[$nb44]=$940;
        var $941=HEAP[$ra];
        HEAP[$i_o45]=$941;
        var $942=HEAP[$nb44];
        var $943=0 - ($942);
        var $944=HEAP[$i_o45];
        var $945=(($944)&4294967295);
        var $946=$945;
        HEAP[$946]=$943;
        var $947=HEAP[$i_o45];
        var $948=(($947+8)&4294967295);
        HEAP[$948]=3;
        __label__ = 113; break;
      case 112: // $949
        var $950=HEAP[$pc];
        var $951=HEAP[$1];
        var $952=(($951+24)&4294967295);
        HEAP[$952]=$950;
        var $953=HEAP[$1];
        var $954=HEAP[$ra];
        var $955=HEAP[$rb43];
        var $956=HEAP[$rb43];
        _Arith($953, $954, $955, $956, 11);
        var $957=HEAP[$1];
        var $958=(($957+12)&4294967295);
        var $959=HEAP[$958];
        HEAP[$base]=$959;
        __label__ = 113; break;
      case 113: // $960
        __label__ = 2; break;
      case 114: // $961
        var $962=HEAP[$base];
        var $963=HEAP[$i];
        var $964=((($963))>>>0) >>> 23;
        var $965=($964) & 511;
        var $966=(($962+12*$965)&4294967295);
        var $967=(($966+8)&4294967295);
        var $968=HEAP[$967];
        var $969=((($968))|0)==0;
        if ($969) { __lastLabel__ = 114; __label__ = 118; break; } else { __lastLabel__ = 114; __label__ = 115; break; }
      case 115: // $970
        var $971=HEAP[$base];
        var $972=HEAP[$i];
        var $973=((($972))>>>0) >>> 23;
        var $974=($973) & 511;
        var $975=(($971+12*$974)&4294967295);
        var $976=(($975+8)&4294967295);
        var $977=HEAP[$976];
        var $978=((($977))|0)==1;
        if ($978) { __lastLabel__ = 115; __label__ = 116; break; } else { __lastLabel__ = 115; __label__ = 117; break; }
      case 116: // $979
        var $980=HEAP[$base];
        var $981=HEAP[$i];
        var $982=((($981))>>>0) >>> 23;
        var $983=($982) & 511;
        var $984=(($980+12*$983)&4294967295);
        var $985=(($984)&4294967295);
        var $986=$985;
        var $987=HEAP[$986];
        var $988=((($987))|0)==0;
        __lastLabel__ = 116; __label__ = 117; break;
      case 117: // $989
        var $990=__lastLabel__ == 115 ? 0 : ($988);
        __lastLabel__ = 117; __label__ = 118; break;
      case 118: // $991
        var $992=__lastLabel__ == 114 ? 1 : ($990);
        var $993=unSign(($992), 1, 0);
        HEAP[$res]=$993;
        var $994=HEAP[$ra];
        HEAP[$i_o46]=$994;
        var $995=HEAP[$res];
        var $996=HEAP[$i_o46];
        var $997=(($996)&4294967295);
        var $998=$997;
        HEAP[$998]=$995;
        var $999=HEAP[$i_o46];
        var $1000=(($999+8)&4294967295);
        HEAP[$1000]=1;
        __label__ = 2; break;
      case 119: // $1001
        var $1002=HEAP[$base];
        var $1003=HEAP[$i];
        var $1004=((($1003))>>>0) >>> 23;
        var $1005=($1004) & 511;
        var $1006=(($1002+12*$1005)&4294967295);
        HEAP[$rb47]=$1006;
        var $1007=HEAP[$rb47];
        var $1008=(($1007+8)&4294967295);
        var $1009=HEAP[$1008];
        if ($1009 == 5) {
          __label__ = 120; break;
        }
        else if ($1009 == 4) {
          __label__ = 121; break;
        }
        else {
        __label__ = 122; break;
        }
        
      case 120: // $1010
        var $1011=HEAP[$ra];
        HEAP[$i_o48]=$1011;
        var $1012=HEAP[$rb47];
        var $1013=(($1012)&4294967295);
        var $1014=$1013;
        var $1015=HEAP[$1014];
        var $1016=$1015;
        var $1017=_luaH_getn($1016);
        var $1018=((($1017))|0);
        var $1019=HEAP[$i_o48];
        var $1020=(($1019)&4294967295);
        var $1021=$1020;
        HEAP[$1021]=$1018;
        var $1022=HEAP[$i_o48];
        var $1023=(($1022+8)&4294967295);
        HEAP[$1023]=3;
        __label__ = 125; break;
      case 121: // $1024
        var $1025=HEAP[$ra];
        HEAP[$i_o49]=$1025;
        var $1026=HEAP[$rb47];
        var $1027=(($1026)&4294967295);
        var $1028=$1027;
        var $1029=HEAP[$1028];
        var $1030=$1029;
        var $1031=$1030;
        var $1032=(($1031+12)&4294967295);
        var $1033=HEAP[$1032];
        var $1034=((($1033))>>>0);
        var $1035=HEAP[$i_o49];
        var $1036=(($1035)&4294967295);
        var $1037=$1036;
        HEAP[$1037]=$1034;
        var $1038=HEAP[$i_o49];
        var $1039=(($1038+8)&4294967295);
        HEAP[$1039]=3;
        __label__ = 125; break;
      case 122: // $1040
        var $1041=HEAP[$pc];
        var $1042=HEAP[$1];
        var $1043=(($1042+24)&4294967295);
        HEAP[$1043]=$1041;
        var $1044=HEAP[$1];
        var $1045=HEAP[$rb47];
        var $1046=HEAP[$ra];
        var $1047=_call_binTM($1044, $1045, _luaO_nilobject_, $1046, 12);
        var $1048=((($1047))|0)!=0;
        if ($1048) { __label__ = 124; break; } else { __label__ = 123; break; }
      case 123: // $1049
        var $1050=HEAP[$1];
        var $1051=HEAP[$rb47];
        _luaG_typeerror($1050, $1051, ((__str5629)&4294967295));
        __label__ = 124; break;
      case 124: // $1052
        var $1053=HEAP[$1];
        var $1054=(($1053+12)&4294967295);
        var $1055=HEAP[$1054];
        HEAP[$base]=$1055;
        __label__ = 125; break;
      case 125: // $1056
        __label__ = 2; break;
      case 126: // $1057
        var $1058=HEAP[$i];
        var $1059=((($1058))>>>0) >>> 23;
        var $1060=($1059) & 511;
        HEAP[$b50]=$1060;
        var $1061=HEAP[$i];
        var $1062=((($1061))>>>0) >>> 14;
        var $1063=($1062) & 511;
        HEAP[$c51]=$1063;
        var $1064=HEAP[$pc];
        var $1065=HEAP[$1];
        var $1066=(($1065+24)&4294967295);
        HEAP[$1066]=$1064;
        var $1067=HEAP[$1];
        var $1068=HEAP[$c51];
        var $1069=HEAP[$b50];
        var $1070=((($1068) - ($1069))&4294967295);
        var $1071=((($1070) + 1)&4294967295);
        var $1072=HEAP[$c51];
        _luaV_concat($1067, $1071, $1072);
        var $1073=HEAP[$1];
        var $1074=(($1073+16)&4294967295);
        var $1075=HEAP[$1074];
        var $1076=(($1075+68)&4294967295);
        var $1077=HEAP[$1076];
        var $1078=HEAP[$1];
        var $1079=(($1078+16)&4294967295);
        var $1080=HEAP[$1079];
        var $1081=(($1080+64)&4294967295);
        var $1082=HEAP[$1081];
        var $1083=((($1077))>>>0) >= ((($1082))>>>0);
        if ($1083) { __label__ = 127; break; } else { __label__ = 128; break; }
      case 127: // $1084
        var $1085=HEAP[$1];
        _luaC_step($1085);
        __label__ = 128; break;
      case 128: // $1086
        var $1087=HEAP[$1];
        var $1088=(($1087+12)&4294967295);
        var $1089=HEAP[$1088];
        HEAP[$base]=$1089;
        var $1090=HEAP[$base];
        var $1091=HEAP[$b50];
        var $1092=(($1090+12*$1091)&4294967295);
        HEAP[$o252]=$1092;
        var $1093=HEAP[$base];
        var $1094=HEAP[$i];
        var $1095=((($1094))>>>0) >>> 6;
        var $1096=($1095) & 255;
        var $1097=(($1093+12*$1096)&4294967295);
        HEAP[$o153]=$1097;
        var $1098=HEAP[$o153];
        var $1099=(($1098)&4294967295);
        var $1100=HEAP[$o252];
        var $1101=(($1100)&4294967295);
        var $1102=$1099;
        var $1103=$1101;
        _llvm_memcpy_p0i8_p0i8_i32($1102, $1103, 8, 4, 0);
        var $1104=HEAP[$o252];
        var $1105=(($1104+8)&4294967295);
        var $1106=HEAP[$1105];
        var $1107=HEAP[$o153];
        var $1108=(($1107+8)&4294967295);
        HEAP[$1108]=$1106;
        __label__ = 2; break;
      case 129: // $1109
        var $1110=HEAP[$i];
        var $1111=((($1110))>>>0) >>> 14;
        var $1112=($1111) & 262143;
        var $1113=((($1112) - 131071)&4294967295);
        var $1114=HEAP[$pc];
        var $1115=(($1114+4*$1113)&4294967295);
        HEAP[$pc]=$1115;
        __label__ = 2; break;
      case 130: // $1116
        var $1117=HEAP[$i];
        var $1118=((($1117))>>>0) >>> 23;
        var $1119=($1118) & 511;
        var $1120=($1119) & 256;
        var $1121=((($1120))|0)!=0;
        if ($1121) { __label__ = 131; break; } else { __label__ = 132; break; }
      case 131: // $1122
        var $1123=HEAP[$k];
        var $1124=HEAP[$i];
        var $1125=((($1124))>>>0) >>> 23;
        var $1126=($1125) & 511;
        var $1127=($1126) & -257;
        var $1128=(($1123+12*$1127)&4294967295);
        __lastLabel__ = 131; __label__ = 133; break;
      case 132: // $1129
        var $1130=HEAP[$base];
        var $1131=HEAP[$i];
        var $1132=((($1131))>>>0) >>> 23;
        var $1133=($1132) & 511;
        var $1134=(($1130+12*$1133)&4294967295);
        __lastLabel__ = 132; __label__ = 133; break;
      case 133: // $1135
        var $1136=__lastLabel__ == 131 ? $1128 : ($1134);
        HEAP[$rb54]=$1136;
        var $1137=HEAP[$i];
        var $1138=((($1137))>>>0) >>> 14;
        var $1139=($1138) & 511;
        var $1140=($1139) & 256;
        var $1141=((($1140))|0)!=0;
        if ($1141) { __label__ = 134; break; } else { __label__ = 135; break; }
      case 134: // $1142
        var $1143=HEAP[$k];
        var $1144=HEAP[$i];
        var $1145=((($1144))>>>0) >>> 14;
        var $1146=($1145) & 511;
        var $1147=($1146) & -257;
        var $1148=(($1143+12*$1147)&4294967295);
        __lastLabel__ = 134; __label__ = 136; break;
      case 135: // $1149
        var $1150=HEAP[$base];
        var $1151=HEAP[$i];
        var $1152=((($1151))>>>0) >>> 14;
        var $1153=($1152) & 511;
        var $1154=(($1150+12*$1153)&4294967295);
        __lastLabel__ = 135; __label__ = 136; break;
      case 136: // $1155
        var $1156=__lastLabel__ == 134 ? $1148 : ($1154);
        HEAP[$rc55]=$1156;
        var $1157=HEAP[$pc];
        var $1158=HEAP[$1];
        var $1159=(($1158+24)&4294967295);
        HEAP[$1159]=$1157;
        var $1160=HEAP[$rb54];
        var $1161=(($1160+8)&4294967295);
        var $1162=HEAP[$1161];
        var $1163=HEAP[$rc55];
        var $1164=(($1163+8)&4294967295);
        var $1165=HEAP[$1164];
        var $1166=((($1162))|0)==((($1165))|0);
        if ($1166) { __lastLabel__ = 136; __label__ = 137; break; } else { __lastLabel__ = 136; __label__ = 138; break; }
      case 137: // $1167
        var $1168=HEAP[$1];
        var $1169=HEAP[$rb54];
        var $1170=HEAP[$rc55];
        var $1171=_luaV_equalval($1168, $1169, $1170);
        var $1172=((($1171))|0)!=0;
        __lastLabel__ = 137; __label__ = 138; break;
      case 138: // $1173
        var $1174=__lastLabel__ == 136 ? 0 : ($1172);
        var $1175=unSign(($1174), 1, 0);
        var $1176=HEAP[$i];
        var $1177=((($1176))>>>0) >>> 6;
        var $1178=($1177) & 255;
        var $1179=((($1175))|0)==((($1178))|0);
        if ($1179) { __label__ = 139; break; } else { __label__ = 140; break; }
      case 139: // $1180
        var $1181=HEAP[$pc];
        var $1182=HEAP[$1181];
        var $1183=((($1182))>>>0) >>> 14;
        var $1184=($1183) & 262143;
        var $1185=((($1184) - 131071)&4294967295);
        var $1186=HEAP[$pc];
        var $1187=(($1186+4*$1185)&4294967295);
        HEAP[$pc]=$1187;
        __label__ = 140; break;
      case 140: // $1188
        var $1189=HEAP[$1];
        var $1190=(($1189+12)&4294967295);
        var $1191=HEAP[$1190];
        HEAP[$base]=$1191;
        var $1192=HEAP[$pc];
        var $1193=(($1192+4)&4294967295);
        HEAP[$pc]=$1193;
        __label__ = 2; break;
      case 141: // $1194
        var $1195=HEAP[$pc];
        var $1196=HEAP[$1];
        var $1197=(($1196+24)&4294967295);
        HEAP[$1197]=$1195;
        var $1198=HEAP[$1];
        var $1199=HEAP[$i];
        var $1200=((($1199))>>>0) >>> 23;
        var $1201=($1200) & 511;
        var $1202=($1201) & 256;
        var $1203=((($1202))|0)!=0;
        if ($1203) { __label__ = 142; break; } else { __label__ = 143; break; }
      case 142: // $1204
        var $1205=HEAP[$k];
        var $1206=HEAP[$i];
        var $1207=((($1206))>>>0) >>> 23;
        var $1208=($1207) & 511;
        var $1209=($1208) & -257;
        var $1210=(($1205+12*$1209)&4294967295);
        __lastLabel__ = 142; __label__ = 144; break;
      case 143: // $1211
        var $1212=HEAP[$base];
        var $1213=HEAP[$i];
        var $1214=((($1213))>>>0) >>> 23;
        var $1215=($1214) & 511;
        var $1216=(($1212+12*$1215)&4294967295);
        __lastLabel__ = 143; __label__ = 144; break;
      case 144: // $1217
        var $1218=__lastLabel__ == 142 ? $1210 : ($1216);
        var $1219=HEAP[$i];
        var $1220=((($1219))>>>0) >>> 14;
        var $1221=($1220) & 511;
        var $1222=($1221) & 256;
        var $1223=((($1222))|0)!=0;
        if ($1223) { __label__ = 145; break; } else { __label__ = 146; break; }
      case 145: // $1224
        var $1225=HEAP[$k];
        var $1226=HEAP[$i];
        var $1227=((($1226))>>>0) >>> 14;
        var $1228=($1227) & 511;
        var $1229=($1228) & -257;
        var $1230=(($1225+12*$1229)&4294967295);
        __lastLabel__ = 145; __label__ = 147; break;
      case 146: // $1231
        var $1232=HEAP[$base];
        var $1233=HEAP[$i];
        var $1234=((($1233))>>>0) >>> 14;
        var $1235=($1234) & 511;
        var $1236=(($1232+12*$1235)&4294967295);
        __lastLabel__ = 146; __label__ = 147; break;
      case 147: // $1237
        var $1238=__lastLabel__ == 145 ? $1230 : ($1236);
        var $1239=_luaV_lessthan($1198, $1218, $1238);
        var $1240=HEAP[$i];
        var $1241=((($1240))>>>0) >>> 6;
        var $1242=($1241) & 255;
        var $1243=((($1239))|0)==((($1242))|0);
        if ($1243) { __label__ = 148; break; } else { __label__ = 149; break; }
      case 148: // $1244
        var $1245=HEAP[$pc];
        var $1246=HEAP[$1245];
        var $1247=((($1246))>>>0) >>> 14;
        var $1248=($1247) & 262143;
        var $1249=((($1248) - 131071)&4294967295);
        var $1250=HEAP[$pc];
        var $1251=(($1250+4*$1249)&4294967295);
        HEAP[$pc]=$1251;
        __label__ = 149; break;
      case 149: // $1252
        var $1253=HEAP[$1];
        var $1254=(($1253+12)&4294967295);
        var $1255=HEAP[$1254];
        HEAP[$base]=$1255;
        var $1256=HEAP[$pc];
        var $1257=(($1256+4)&4294967295);
        HEAP[$pc]=$1257;
        __label__ = 2; break;
      case 150: // $1258
        var $1259=HEAP[$pc];
        var $1260=HEAP[$1];
        var $1261=(($1260+24)&4294967295);
        HEAP[$1261]=$1259;
        var $1262=HEAP[$1];
        var $1263=HEAP[$i];
        var $1264=((($1263))>>>0) >>> 23;
        var $1265=($1264) & 511;
        var $1266=($1265) & 256;
        var $1267=((($1266))|0)!=0;
        if ($1267) { __label__ = 151; break; } else { __label__ = 152; break; }
      case 151: // $1268
        var $1269=HEAP[$k];
        var $1270=HEAP[$i];
        var $1271=((($1270))>>>0) >>> 23;
        var $1272=($1271) & 511;
        var $1273=($1272) & -257;
        var $1274=(($1269+12*$1273)&4294967295);
        __lastLabel__ = 151; __label__ = 153; break;
      case 152: // $1275
        var $1276=HEAP[$base];
        var $1277=HEAP[$i];
        var $1278=((($1277))>>>0) >>> 23;
        var $1279=($1278) & 511;
        var $1280=(($1276+12*$1279)&4294967295);
        __lastLabel__ = 152; __label__ = 153; break;
      case 153: // $1281
        var $1282=__lastLabel__ == 151 ? $1274 : ($1280);
        var $1283=HEAP[$i];
        var $1284=((($1283))>>>0) >>> 14;
        var $1285=($1284) & 511;
        var $1286=($1285) & 256;
        var $1287=((($1286))|0)!=0;
        if ($1287) { __label__ = 154; break; } else { __label__ = 155; break; }
      case 154: // $1288
        var $1289=HEAP[$k];
        var $1290=HEAP[$i];
        var $1291=((($1290))>>>0) >>> 14;
        var $1292=($1291) & 511;
        var $1293=($1292) & -257;
        var $1294=(($1289+12*$1293)&4294967295);
        __lastLabel__ = 154; __label__ = 156; break;
      case 155: // $1295
        var $1296=HEAP[$base];
        var $1297=HEAP[$i];
        var $1298=((($1297))>>>0) >>> 14;
        var $1299=($1298) & 511;
        var $1300=(($1296+12*$1299)&4294967295);
        __lastLabel__ = 155; __label__ = 156; break;
      case 156: // $1301
        var $1302=__lastLabel__ == 154 ? $1294 : ($1300);
        var $1303=_lessequal($1262, $1282, $1302);
        var $1304=HEAP[$i];
        var $1305=((($1304))>>>0) >>> 6;
        var $1306=($1305) & 255;
        var $1307=((($1303))|0)==((($1306))|0);
        if ($1307) { __label__ = 157; break; } else { __label__ = 158; break; }
      case 157: // $1308
        var $1309=HEAP[$pc];
        var $1310=HEAP[$1309];
        var $1311=((($1310))>>>0) >>> 14;
        var $1312=($1311) & 262143;
        var $1313=((($1312) - 131071)&4294967295);
        var $1314=HEAP[$pc];
        var $1315=(($1314+4*$1313)&4294967295);
        HEAP[$pc]=$1315;
        __label__ = 158; break;
      case 158: // $1316
        var $1317=HEAP[$1];
        var $1318=(($1317+12)&4294967295);
        var $1319=HEAP[$1318];
        HEAP[$base]=$1319;
        var $1320=HEAP[$pc];
        var $1321=(($1320+4)&4294967295);
        HEAP[$pc]=$1321;
        __label__ = 2; break;
      case 159: // $1322
        var $1323=HEAP[$ra];
        var $1324=(($1323+8)&4294967295);
        var $1325=HEAP[$1324];
        var $1326=((($1325))|0)==0;
        if ($1326) { __lastLabel__ = 159; __label__ = 163; break; } else { __lastLabel__ = 159; __label__ = 160; break; }
      case 160: // $1327
        var $1328=HEAP[$ra];
        var $1329=(($1328+8)&4294967295);
        var $1330=HEAP[$1329];
        var $1331=((($1330))|0)==1;
        if ($1331) { __lastLabel__ = 160; __label__ = 161; break; } else { __lastLabel__ = 160; __label__ = 162; break; }
      case 161: // $1332
        var $1333=HEAP[$ra];
        var $1334=(($1333)&4294967295);
        var $1335=$1334;
        var $1336=HEAP[$1335];
        var $1337=((($1336))|0)==0;
        __lastLabel__ = 161; __label__ = 162; break;
      case 162: // $1338
        var $1339=__lastLabel__ == 160 ? 0 : ($1337);
        __lastLabel__ = 162; __label__ = 163; break;
      case 163: // $1340
        var $1341=__lastLabel__ == 159 ? 1 : ($1339);
        var $1342=unSign(($1341), 1, 0);
        var $1343=HEAP[$i];
        var $1344=((($1343))>>>0) >>> 14;
        var $1345=($1344) & 511;
        var $1346=((($1342))|0)!=((($1345))|0);
        if ($1346) { __label__ = 164; break; } else { __label__ = 165; break; }
      case 164: // $1347
        var $1348=HEAP[$pc];
        var $1349=HEAP[$1348];
        var $1350=((($1349))>>>0) >>> 14;
        var $1351=($1350) & 262143;
        var $1352=((($1351) - 131071)&4294967295);
        var $1353=HEAP[$pc];
        var $1354=(($1353+4*$1352)&4294967295);
        HEAP[$pc]=$1354;
        __label__ = 165; break;
      case 165: // $1355
        var $1356=HEAP[$pc];
        var $1357=(($1356+4)&4294967295);
        HEAP[$pc]=$1357;
        __label__ = 2; break;
      case 166: // $1358
        var $1359=HEAP[$base];
        var $1360=HEAP[$i];
        var $1361=((($1360))>>>0) >>> 23;
        var $1362=($1361) & 511;
        var $1363=(($1359+12*$1362)&4294967295);
        HEAP[$rb56]=$1363;
        var $1364=HEAP[$rb56];
        var $1365=(($1364+8)&4294967295);
        var $1366=HEAP[$1365];
        var $1367=((($1366))|0)==0;
        if ($1367) { __lastLabel__ = 166; __label__ = 170; break; } else { __lastLabel__ = 166; __label__ = 167; break; }
      case 167: // $1368
        var $1369=HEAP[$rb56];
        var $1370=(($1369+8)&4294967295);
        var $1371=HEAP[$1370];
        var $1372=((($1371))|0)==1;
        if ($1372) { __lastLabel__ = 167; __label__ = 168; break; } else { __lastLabel__ = 167; __label__ = 169; break; }
      case 168: // $1373
        var $1374=HEAP[$rb56];
        var $1375=(($1374)&4294967295);
        var $1376=$1375;
        var $1377=HEAP[$1376];
        var $1378=((($1377))|0)==0;
        __lastLabel__ = 168; __label__ = 169; break;
      case 169: // $1379
        var $1380=__lastLabel__ == 167 ? 0 : ($1378);
        __lastLabel__ = 169; __label__ = 170; break;
      case 170: // $1381
        var $1382=__lastLabel__ == 166 ? 1 : ($1380);
        var $1383=unSign(($1382), 1, 0);
        var $1384=HEAP[$i];
        var $1385=((($1384))>>>0) >>> 14;
        var $1386=($1385) & 511;
        var $1387=((($1383))|0)!=((($1386))|0);
        if ($1387) { __label__ = 171; break; } else { __label__ = 172; break; }
      case 171: // $1388
        var $1389=HEAP[$rb56];
        HEAP[$o257]=$1389;
        var $1390=HEAP[$ra];
        HEAP[$o158]=$1390;
        var $1391=HEAP[$o158];
        var $1392=(($1391)&4294967295);
        var $1393=HEAP[$o257];
        var $1394=(($1393)&4294967295);
        var $1395=$1392;
        var $1396=$1394;
        _llvm_memcpy_p0i8_p0i8_i32($1395, $1396, 8, 4, 0);
        var $1397=HEAP[$o257];
        var $1398=(($1397+8)&4294967295);
        var $1399=HEAP[$1398];
        var $1400=HEAP[$o158];
        var $1401=(($1400+8)&4294967295);
        HEAP[$1401]=$1399;
        var $1402=HEAP[$pc];
        var $1403=HEAP[$1402];
        var $1404=((($1403))>>>0) >>> 14;
        var $1405=($1404) & 262143;
        var $1406=((($1405) - 131071)&4294967295);
        var $1407=HEAP[$pc];
        var $1408=(($1407+4*$1406)&4294967295);
        HEAP[$pc]=$1408;
        __label__ = 172; break;
      case 172: // $1409
        var $1410=HEAP[$pc];
        var $1411=(($1410+4)&4294967295);
        HEAP[$pc]=$1411;
        __label__ = 2; break;
      case 173: // $1412
        var $1413=HEAP[$i];
        var $1414=((($1413))>>>0) >>> 23;
        var $1415=($1414) & 511;
        HEAP[$b59]=$1415;
        var $1416=HEAP[$i];
        var $1417=((($1416))>>>0) >>> 14;
        var $1418=($1417) & 511;
        var $1419=((($1418) - 1)&4294967295);
        HEAP[$nresults]=$1419;
        var $1420=HEAP[$b59];
        var $1421=((($1420))|0)!=0;
        if ($1421) { __label__ = 174; break; } else { __label__ = 175; break; }
      case 174: // $1422
        var $1423=HEAP[$ra];
        var $1424=HEAP[$b59];
        var $1425=(($1423+12*$1424)&4294967295);
        var $1426=HEAP[$1];
        var $1427=(($1426+8)&4294967295);
        HEAP[$1427]=$1425;
        __label__ = 175; break;
      case 175: // $1428
        var $1429=HEAP[$pc];
        var $1430=HEAP[$1];
        var $1431=(($1430+24)&4294967295);
        HEAP[$1431]=$1429;
        var $1432=HEAP[$1];
        var $1433=HEAP[$ra];
        var $1434=HEAP[$nresults];
        var $1435=_luaD_precall($1432, $1433, $1434);
        if ($1435 == 0) {
          __label__ = 176; break;
        }
        else if ($1435 == 1) {
          __label__ = 177; break;
        }
        else {
        __label__ = 180; break;
        }
        
      case 176: // $1436
        var $1437=HEAP[$2];
        var $1438=((($1437) + 1)&4294967295);
        HEAP[$2]=$1438;
        __label__ = 1; break;
      case 177: // $1439
        var $1440=HEAP[$nresults];
        var $1441=((($1440))|0) >= 0;
        if ($1441) { __label__ = 178; break; } else { __label__ = 179; break; }
      case 178: // $1442
        var $1443=HEAP[$1];
        var $1444=(($1443+20)&4294967295);
        var $1445=HEAP[$1444];
        var $1446=(($1445+8)&4294967295);
        var $1447=HEAP[$1446];
        var $1448=HEAP[$1];
        var $1449=(($1448+8)&4294967295);
        HEAP[$1449]=$1447;
        __label__ = 179; break;
      case 179: // $1450
        var $1451=HEAP[$1];
        var $1452=(($1451+12)&4294967295);
        var $1453=HEAP[$1452];
        HEAP[$base]=$1453;
        __label__ = 2; break;
      case 180: // $1454
        __label__ = 264; break;
      case 181: // $1455
        var $1456=HEAP[$i];
        var $1457=((($1456))>>>0) >>> 23;
        var $1458=($1457) & 511;
        HEAP[$b60]=$1458;
        var $1459=HEAP[$b60];
        var $1460=((($1459))|0)!=0;
        if ($1460) { __label__ = 182; break; } else { __label__ = 183; break; }
      case 182: // $1461
        var $1462=HEAP[$ra];
        var $1463=HEAP[$b60];
        var $1464=(($1462+12*$1463)&4294967295);
        var $1465=HEAP[$1];
        var $1466=(($1465+8)&4294967295);
        HEAP[$1466]=$1464;
        __label__ = 183; break;
      case 183: // $1467
        var $1468=HEAP[$pc];
        var $1469=HEAP[$1];
        var $1470=(($1469+24)&4294967295);
        HEAP[$1470]=$1468;
        var $1471=HEAP[$1];
        var $1472=HEAP[$ra];
        var $1473=_luaD_precall($1471, $1472, -1);
        if ($1473 == 0) {
          __label__ = 184; break;
        }
        else if ($1473 == 1) {
          __label__ = 191; break;
        }
        else {
        __label__ = 192; break;
        }
        
      case 184: // $1474
        var $1475=HEAP[$1];
        var $1476=(($1475+20)&4294967295);
        var $1477=HEAP[$1476];
        var $1478=(($1477+-24)&4294967295);
        HEAP[$ci]=$1478;
        var $1479=HEAP[$ci];
        var $1480=(($1479+4)&4294967295);
        var $1481=HEAP[$1480];
        HEAP[$func]=$1481;
        var $1482=HEAP[$ci];
        var $1483=(($1482+24)&4294967295);
        var $1484=(($1483+4)&4294967295);
        var $1485=HEAP[$1484];
        HEAP[$pfunc]=$1485;
        var $1486=HEAP[$1];
        var $1487=(($1486+96)&4294967295);
        var $1488=HEAP[$1487];
        var $1489=((($1488))|0)!=0;
        if ($1489) { __label__ = 185; break; } else { __label__ = 186; break; }
      case 185: // $1490
        var $1491=HEAP[$1];
        var $1492=HEAP[$ci];
        var $1493=(($1492)&4294967295);
        var $1494=HEAP[$1493];
        _luaF_close($1491, $1494);
        __label__ = 186; break;
      case 186: // $1495
        var $1496=HEAP[$ci];
        var $1497=(($1496+4)&4294967295);
        var $1498=HEAP[$1497];
        var $1499=HEAP[$ci];
        var $1500=(($1499+24)&4294967295);
        var $1501=(($1500)&4294967295);
        var $1502=HEAP[$1501];
        var $1503=HEAP[$pfunc];
        var $1504=($1502);
        var $1505=($1503);
        var $1506=((($1504) - ($1505))&4294967295);
        var $1507=((((($1506))|0)/12)|0);
        var $1508=(($1498+12*$1507)&4294967295);
        var $1509=HEAP[$ci];
        var $1510=(($1509)&4294967295);
        HEAP[$1510]=$1508;
        var $1511=HEAP[$1];
        var $1512=(($1511+12)&4294967295);
        HEAP[$1512]=$1508;
        HEAP[$aux]=0;
        __label__ = 187; break;
      case 187: // $1513
        var $1514=HEAP[$pfunc];
        var $1515=HEAP[$aux];
        var $1516=(($1514+12*$1515)&4294967295);
        var $1517=HEAP[$1];
        var $1518=(($1517+8)&4294967295);
        var $1519=HEAP[$1518];
        var $1520=((($1516))>>>0) < ((($1519))>>>0);
        if ($1520) { __label__ = 188; break; } else { __label__ = 190; break; }
      case 188: // $1521
        var $1522=HEAP[$pfunc];
        var $1523=HEAP[$aux];
        var $1524=(($1522+12*$1523)&4294967295);
        HEAP[$o261]=$1524;
        var $1525=HEAP[$func];
        var $1526=HEAP[$aux];
        var $1527=(($1525+12*$1526)&4294967295);
        HEAP[$o162]=$1527;
        var $1528=HEAP[$o162];
        var $1529=(($1528)&4294967295);
        var $1530=HEAP[$o261];
        var $1531=(($1530)&4294967295);
        var $1532=$1529;
        var $1533=$1531;
        _llvm_memcpy_p0i8_p0i8_i32($1532, $1533, 8, 4, 0);
        var $1534=HEAP[$o261];
        var $1535=(($1534+8)&4294967295);
        var $1536=HEAP[$1535];
        var $1537=HEAP[$o162];
        var $1538=(($1537+8)&4294967295);
        HEAP[$1538]=$1536;
        __label__ = 189; break;
      case 189: // $1539
        var $1540=HEAP[$aux];
        var $1541=((($1540) + 1)&4294967295);
        HEAP[$aux]=$1541;
        __label__ = 187; break;
      case 190: // $1542
        var $1543=HEAP[$func];
        var $1544=HEAP[$aux];
        var $1545=(($1543+12*$1544)&4294967295);
        var $1546=HEAP[$1];
        var $1547=(($1546+8)&4294967295);
        HEAP[$1547]=$1545;
        var $1548=HEAP[$ci];
        var $1549=(($1548+8)&4294967295);
        HEAP[$1549]=$1545;
        var $1550=HEAP[$1];
        var $1551=(($1550+24)&4294967295);
        var $1552=HEAP[$1551];
        var $1553=HEAP[$ci];
        var $1554=(($1553+12)&4294967295);
        HEAP[$1554]=$1552;
        var $1555=HEAP[$ci];
        var $1556=(($1555+20)&4294967295);
        var $1557=HEAP[$1556];
        var $1558=((($1557) + 1)&4294967295);
        HEAP[$1556]=$1558;
        var $1559=HEAP[$1];
        var $1560=(($1559+20)&4294967295);
        var $1561=HEAP[$1560];
        var $1562=(($1561+-24)&4294967295);
        HEAP[$1560]=$1562;
        __label__ = 1; break;
      case 191: // $1563
        var $1564=HEAP[$1];
        var $1565=(($1564+12)&4294967295);
        var $1566=HEAP[$1565];
        HEAP[$base]=$1566;
        __label__ = 2; break;
      case 192: // $1567
        __label__ = 264; break;
      case 193: // $1568
        var $1569=HEAP[$i];
        var $1570=((($1569))>>>0) >>> 23;
        var $1571=($1570) & 511;
        HEAP[$b63]=$1571;
        var $1572=HEAP[$b63];
        var $1573=((($1572))|0)!=0;
        if ($1573) { __label__ = 194; break; } else { __label__ = 195; break; }
      case 194: // $1574
        var $1575=HEAP[$ra];
        var $1576=HEAP[$b63];
        var $1577=(($1575+12*$1576)&4294967295);
        var $1578=(($1577+-12)&4294967295);
        var $1579=HEAP[$1];
        var $1580=(($1579+8)&4294967295);
        HEAP[$1580]=$1578;
        __label__ = 195; break;
      case 195: // $1581
        var $1582=HEAP[$1];
        var $1583=(($1582+96)&4294967295);
        var $1584=HEAP[$1583];
        var $1585=((($1584))|0)!=0;
        if ($1585) { __label__ = 196; break; } else { __label__ = 197; break; }
      case 196: // $1586
        var $1587=HEAP[$1];
        var $1588=HEAP[$base];
        _luaF_close($1587, $1588);
        __label__ = 197; break;
      case 197: // $1589
        var $1590=HEAP[$pc];
        var $1591=HEAP[$1];
        var $1592=(($1591+24)&4294967295);
        HEAP[$1592]=$1590;
        var $1593=HEAP[$1];
        var $1594=HEAP[$ra];
        var $1595=_luaD_poscall($1593, $1594);
        HEAP[$b63]=$1595;
        var $1596=HEAP[$2];
        var $1597=((($1596) + -1)&4294967295);
        HEAP[$2]=$1597;
        var $1598=((($1597))|0)==0;
        if ($1598) { __label__ = 198; break; } else { __label__ = 199; break; }
      case 198: // $1599
        __label__ = 264; break;
      case 199: // $1600
        var $1601=HEAP[$b63];
        var $1602=((($1601))|0)!=0;
        if ($1602) { __label__ = 200; break; } else { __label__ = 201; break; }
      case 200: // $1603
        var $1604=HEAP[$1];
        var $1605=(($1604+20)&4294967295);
        var $1606=HEAP[$1605];
        var $1607=(($1606+8)&4294967295);
        var $1608=HEAP[$1607];
        var $1609=HEAP[$1];
        var $1610=(($1609+8)&4294967295);
        HEAP[$1610]=$1608;
        __label__ = 201; break;
      case 201: // $1611
        __label__ = 1; break;
      case 202: // $1612
        var $1613=HEAP[$ra];
        var $1614=(($1613+24)&4294967295);
        var $1615=(($1614)&4294967295);
        var $1616=$1615;
        var $1617=HEAP[$1616];
        HEAP[$step]=$1617;
        var $1618=HEAP[$ra];
        var $1619=(($1618)&4294967295);
        var $1620=$1619;
        var $1621=HEAP[$1620];
        var $1622=HEAP[$step];
        var $1623=($1621) + ($1622);
        HEAP[$idx]=$1623;
        var $1624=HEAP[$ra];
        var $1625=(($1624+12)&4294967295);
        var $1626=(($1625)&4294967295);
        var $1627=$1626;
        var $1628=HEAP[$1627];
        HEAP[$limit]=$1628;
        var $1629=HEAP[$step];
        var $1630=0 < ($1629);
        if ($1630) { __label__ = 203; break; } else { __label__ = 204; break; }
      case 203: // $1631
        var $1632=HEAP[$idx];
        var $1633=HEAP[$limit];
        var $1634=($1632) <= ($1633);
        if ($1634) { __label__ = 205; break; } else { __label__ = 206; break; }
      case 204: // $1635
        var $1636=HEAP[$limit];
        var $1637=HEAP[$idx];
        var $1638=($1636) <= ($1637);
        if ($1638) { __label__ = 205; break; } else { __label__ = 206; break; }
      case 205: // $1639
        var $1640=HEAP[$i];
        var $1641=((($1640))>>>0) >>> 14;
        var $1642=($1641) & 262143;
        var $1643=((($1642) - 131071)&4294967295);
        var $1644=HEAP[$pc];
        var $1645=(($1644+4*$1643)&4294967295);
        HEAP[$pc]=$1645;
        var $1646=HEAP[$ra];
        HEAP[$i_o64]=$1646;
        var $1647=HEAP[$idx];
        var $1648=HEAP[$i_o64];
        var $1649=(($1648)&4294967295);
        var $1650=$1649;
        HEAP[$1650]=$1647;
        var $1651=HEAP[$i_o64];
        var $1652=(($1651+8)&4294967295);
        HEAP[$1652]=3;
        var $1653=HEAP[$ra];
        var $1654=(($1653+36)&4294967295);
        HEAP[$i_o65]=$1654;
        var $1655=HEAP[$idx];
        var $1656=HEAP[$i_o65];
        var $1657=(($1656)&4294967295);
        var $1658=$1657;
        HEAP[$1658]=$1655;
        var $1659=HEAP[$i_o65];
        var $1660=(($1659+8)&4294967295);
        HEAP[$1660]=3;
        __label__ = 206; break;
      case 206: // $1661
        __label__ = 2; break;
      case 207: // $1662
        var $1663=HEAP[$ra];
        HEAP[$init]=$1663;
        var $1664=HEAP[$ra];
        var $1665=(($1664+12)&4294967295);
        HEAP[$plimit]=$1665;
        var $1666=HEAP[$ra];
        var $1667=(($1666+24)&4294967295);
        HEAP[$pstep]=$1667;
        var $1668=HEAP[$pc];
        var $1669=HEAP[$1];
        var $1670=(($1669+24)&4294967295);
        HEAP[$1670]=$1668;
        var $1671=HEAP[$init];
        var $1672=(($1671+8)&4294967295);
        var $1673=HEAP[$1672];
        var $1674=((($1673))|0)==3;
        if ($1674) { __label__ = 210; break; } else { __label__ = 208; break; }
      case 208: // $1675
        var $1676=HEAP[$init];
        var $1677=HEAP[$ra];
        var $1678=_luaV_tonumber($1676, $1677);
        HEAP[$init]=$1678;
        var $1679=((($1678))|0)!=0;
        if ($1679) { __label__ = 210; break; } else { __label__ = 209; break; }
      case 209: // $1680
        var $1681=HEAP[$1];
        _luaG_runerror($1681, ((__str6630)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 218; break;
      case 210: // $1682
        var $1683=HEAP[$plimit];
        var $1684=(($1683+8)&4294967295);
        var $1685=HEAP[$1684];
        var $1686=((($1685))|0)==3;
        if ($1686) { __label__ = 213; break; } else { __label__ = 211; break; }
      case 211: // $1687
        var $1688=HEAP[$plimit];
        var $1689=HEAP[$ra];
        var $1690=(($1689+12)&4294967295);
        var $1691=_luaV_tonumber($1688, $1690);
        HEAP[$plimit]=$1691;
        var $1692=((($1691))|0)!=0;
        if ($1692) { __label__ = 213; break; } else { __label__ = 212; break; }
      case 212: // $1693
        var $1694=HEAP[$1];
        _luaG_runerror($1694, ((__str7631)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 217; break;
      case 213: // $1695
        var $1696=HEAP[$pstep];
        var $1697=(($1696+8)&4294967295);
        var $1698=HEAP[$1697];
        var $1699=((($1698))|0)==3;
        if ($1699) { __label__ = 216; break; } else { __label__ = 214; break; }
      case 214: // $1700
        var $1701=HEAP[$pstep];
        var $1702=HEAP[$ra];
        var $1703=(($1702+24)&4294967295);
        var $1704=_luaV_tonumber($1701, $1703);
        HEAP[$pstep]=$1704;
        var $1705=((($1704))|0)!=0;
        if ($1705) { __label__ = 216; break; } else { __label__ = 215; break; }
      case 215: // $1706
        var $1707=HEAP[$1];
        _luaG_runerror($1707, ((__str8632)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 216; break;
      case 216: // $1708
        __label__ = 217; break;
      case 217: // $1709
        __label__ = 218; break;
      case 218: // $1710
        var $1711=HEAP[$ra];
        HEAP[$i_o66]=$1711;
        var $1712=HEAP[$ra];
        var $1713=(($1712)&4294967295);
        var $1714=$1713;
        var $1715=HEAP[$1714];
        var $1716=HEAP[$pstep];
        var $1717=(($1716)&4294967295);
        var $1718=$1717;
        var $1719=HEAP[$1718];
        var $1720=($1715) - ($1719);
        var $1721=HEAP[$i_o66];
        var $1722=(($1721)&4294967295);
        var $1723=$1722;
        HEAP[$1723]=$1720;
        var $1724=HEAP[$i_o66];
        var $1725=(($1724+8)&4294967295);
        HEAP[$1725]=3;
        var $1726=HEAP[$i];
        var $1727=((($1726))>>>0) >>> 14;
        var $1728=($1727) & 262143;
        var $1729=((($1728) - 131071)&4294967295);
        var $1730=HEAP[$pc];
        var $1731=(($1730+4*$1729)&4294967295);
        HEAP[$pc]=$1731;
        __label__ = 2; break;
      case 219: // $1732
        var $1733=HEAP[$ra];
        var $1734=(($1733+36)&4294967295);
        HEAP[$cb]=$1734;
        var $1735=HEAP[$ra];
        var $1736=(($1735+24)&4294967295);
        HEAP[$o267]=$1736;
        var $1737=HEAP[$cb];
        var $1738=(($1737+24)&4294967295);
        HEAP[$o168]=$1738;
        var $1739=HEAP[$o168];
        var $1740=(($1739)&4294967295);
        var $1741=HEAP[$o267];
        var $1742=(($1741)&4294967295);
        var $1743=$1740;
        var $1744=$1742;
        _llvm_memcpy_p0i8_p0i8_i32($1743, $1744, 8, 4, 0);
        var $1745=HEAP[$o267];
        var $1746=(($1745+8)&4294967295);
        var $1747=HEAP[$1746];
        var $1748=HEAP[$o168];
        var $1749=(($1748+8)&4294967295);
        HEAP[$1749]=$1747;
        var $1750=HEAP[$ra];
        var $1751=(($1750+12)&4294967295);
        HEAP[$o269]=$1751;
        var $1752=HEAP[$cb];
        var $1753=(($1752+12)&4294967295);
        HEAP[$o170]=$1753;
        var $1754=HEAP[$o170];
        var $1755=(($1754)&4294967295);
        var $1756=HEAP[$o269];
        var $1757=(($1756)&4294967295);
        var $1758=$1755;
        var $1759=$1757;
        _llvm_memcpy_p0i8_p0i8_i32($1758, $1759, 8, 4, 0);
        var $1760=HEAP[$o269];
        var $1761=(($1760+8)&4294967295);
        var $1762=HEAP[$1761];
        var $1763=HEAP[$o170];
        var $1764=(($1763+8)&4294967295);
        HEAP[$1764]=$1762;
        var $1765=HEAP[$ra];
        HEAP[$o271]=$1765;
        var $1766=HEAP[$cb];
        HEAP[$o172]=$1766;
        var $1767=HEAP[$o172];
        var $1768=(($1767)&4294967295);
        var $1769=HEAP[$o271];
        var $1770=(($1769)&4294967295);
        var $1771=$1768;
        var $1772=$1770;
        _llvm_memcpy_p0i8_p0i8_i32($1771, $1772, 8, 4, 0);
        var $1773=HEAP[$o271];
        var $1774=(($1773+8)&4294967295);
        var $1775=HEAP[$1774];
        var $1776=HEAP[$o172];
        var $1777=(($1776+8)&4294967295);
        HEAP[$1777]=$1775;
        var $1778=HEAP[$cb];
        var $1779=(($1778+36)&4294967295);
        var $1780=HEAP[$1];
        var $1781=(($1780+8)&4294967295);
        HEAP[$1781]=$1779;
        var $1782=HEAP[$pc];
        var $1783=HEAP[$1];
        var $1784=(($1783+24)&4294967295);
        HEAP[$1784]=$1782;
        var $1785=HEAP[$1];
        var $1786=HEAP[$cb];
        var $1787=HEAP[$i];
        var $1788=((($1787))>>>0) >>> 14;
        var $1789=($1788) & 511;
        _luaD_call($1785, $1786, $1789);
        var $1790=HEAP[$1];
        var $1791=(($1790+12)&4294967295);
        var $1792=HEAP[$1791];
        HEAP[$base]=$1792;
        var $1793=HEAP[$1];
        var $1794=(($1793+20)&4294967295);
        var $1795=HEAP[$1794];
        var $1796=(($1795+8)&4294967295);
        var $1797=HEAP[$1796];
        var $1798=HEAP[$1];
        var $1799=(($1798+8)&4294967295);
        HEAP[$1799]=$1797;
        var $1800=HEAP[$base];
        var $1801=HEAP[$i];
        var $1802=((($1801))>>>0) >>> 6;
        var $1803=($1802) & 255;
        var $1804=(($1800+12*$1803)&4294967295);
        var $1805=(($1804+36)&4294967295);
        HEAP[$cb]=$1805;
        var $1806=HEAP[$cb];
        var $1807=(($1806+8)&4294967295);
        var $1808=HEAP[$1807];
        var $1809=((($1808))|0)==0;
        if ($1809) { __label__ = 221; break; } else { __label__ = 220; break; }
      case 220: // $1810
        var $1811=HEAP[$cb];
        HEAP[$o273]=$1811;
        var $1812=HEAP[$cb];
        var $1813=(($1812+-12)&4294967295);
        HEAP[$o174]=$1813;
        var $1814=HEAP[$o174];
        var $1815=(($1814)&4294967295);
        var $1816=HEAP[$o273];
        var $1817=(($1816)&4294967295);
        var $1818=$1815;
        var $1819=$1817;
        _llvm_memcpy_p0i8_p0i8_i32($1818, $1819, 8, 4, 0);
        var $1820=HEAP[$o273];
        var $1821=(($1820+8)&4294967295);
        var $1822=HEAP[$1821];
        var $1823=HEAP[$o174];
        var $1824=(($1823+8)&4294967295);
        HEAP[$1824]=$1822;
        var $1825=HEAP[$pc];
        var $1826=HEAP[$1825];
        var $1827=((($1826))>>>0) >>> 14;
        var $1828=($1827) & 262143;
        var $1829=((($1828) - 131071)&4294967295);
        var $1830=HEAP[$pc];
        var $1831=(($1830+4*$1829)&4294967295);
        HEAP[$pc]=$1831;
        __label__ = 221; break;
      case 221: // $1832
        var $1833=HEAP[$pc];
        var $1834=(($1833+4)&4294967295);
        HEAP[$pc]=$1834;
        __label__ = 2; break;
      case 222: // $1835
        var $1836=HEAP[$i];
        var $1837=((($1836))>>>0) >>> 23;
        var $1838=($1837) & 511;
        HEAP[$n]=$1838;
        var $1839=HEAP[$i];
        var $1840=((($1839))>>>0) >>> 14;
        var $1841=($1840) & 511;
        HEAP[$c75]=$1841;
        var $1842=HEAP[$n];
        var $1843=((($1842))|0)==0;
        if ($1843) { __label__ = 223; break; } else { __label__ = 224; break; }
      case 223: // $1844
        var $1845=HEAP[$1];
        var $1846=(($1845+8)&4294967295);
        var $1847=HEAP[$1846];
        var $1848=HEAP[$ra];
        var $1849=($1847);
        var $1850=($1848);
        var $1851=((($1849) - ($1850))&4294967295);
        var $1852=((((($1851))|0)/12)|0);
        var $1853=((($1852) - 1)&4294967295);
        HEAP[$n]=$1853;
        var $1854=HEAP[$1];
        var $1855=(($1854+20)&4294967295);
        var $1856=HEAP[$1855];
        var $1857=(($1856+8)&4294967295);
        var $1858=HEAP[$1857];
        var $1859=HEAP[$1];
        var $1860=(($1859+8)&4294967295);
        HEAP[$1860]=$1858;
        __label__ = 224; break;
      case 224: // $1861
        var $1862=HEAP[$c75];
        var $1863=((($1862))|0)==0;
        if ($1863) { __label__ = 225; break; } else { __label__ = 226; break; }
      case 225: // $1864
        var $1865=HEAP[$pc];
        var $1866=(($1865+4)&4294967295);
        HEAP[$pc]=$1866;
        var $1867=HEAP[$1865];
        HEAP[$c75]=$1867;
        __label__ = 226; break;
      case 226: // $1868
        var $1869=HEAP[$ra];
        var $1870=(($1869+8)&4294967295);
        var $1871=HEAP[$1870];
        var $1872=((($1871))|0)==5;
        if ($1872) { __label__ = 228; break; } else { __label__ = 227; break; }
      case 227: // $1873
        __label__ = 263; break;
      case 228: // $1874
        var $1875=HEAP[$ra];
        var $1876=(($1875)&4294967295);
        var $1877=$1876;
        var $1878=HEAP[$1877];
        var $1879=$1878;
        HEAP[$h]=$1879;
        var $1880=HEAP[$c75];
        var $1881=((($1880) - 1)&4294967295);
        var $1882=((($1881) * 50)&4294967295);
        var $1883=HEAP[$n];
        var $1884=((($1882) + ($1883))&4294967295);
        HEAP[$last]=$1884;
        var $1885=HEAP[$last];
        var $1886=HEAP[$h];
        var $1887=(($1886+28)&4294967295);
        var $1888=HEAP[$1887];
        var $1889=((($1885))|0) > ((($1888))|0);
        if ($1889) { __label__ = 229; break; } else { __label__ = 230; break; }
      case 229: // $1890
        var $1891=HEAP[$1];
        var $1892=HEAP[$h];
        var $1893=HEAP[$last];
        _luaH_resizearray($1891, $1892, $1893);
        __label__ = 230; break;
      case 230: // $1894
        __label__ = 231; break;
      case 231: // $1895
        var $1896=HEAP[$n];
        var $1897=((($1896))|0) > 0;
        if ($1897) { __label__ = 232; break; } else { __label__ = 238; break; }
      case 232: // $1898
        var $1899=HEAP[$ra];
        var $1900=HEAP[$n];
        var $1901=(($1899+12*$1900)&4294967295);
        HEAP[$val]=$1901;
        var $1902=HEAP[$val];
        HEAP[$o276]=$1902;
        var $1903=HEAP[$1];
        var $1904=HEAP[$h];
        var $1905=HEAP[$last];
        var $1906=((($1905) + -1)&4294967295);
        HEAP[$last]=$1906;
        var $1907=_luaH_setnum($1903, $1904, $1905);
        HEAP[$o177]=$1907;
        var $1908=HEAP[$o177];
        var $1909=(($1908)&4294967295);
        var $1910=HEAP[$o276];
        var $1911=(($1910)&4294967295);
        var $1912=$1909;
        var $1913=$1911;
        _llvm_memcpy_p0i8_p0i8_i32($1912, $1913, 8, 4, 0);
        var $1914=HEAP[$o276];
        var $1915=(($1914+8)&4294967295);
        var $1916=HEAP[$1915];
        var $1917=HEAP[$o177];
        var $1918=(($1917+8)&4294967295);
        HEAP[$1918]=$1916;
        var $1919=HEAP[$val];
        var $1920=(($1919+8)&4294967295);
        var $1921=HEAP[$1920];
        var $1922=((($1921))|0) >= 4;
        if ($1922) { __label__ = 233; break; } else { __label__ = 236; break; }
      case 233: // $1923
        var $1924=HEAP[$val];
        var $1925=(($1924)&4294967295);
        var $1926=$1925;
        var $1927=HEAP[$1926];
        var $1928=$1927;
        var $1929=(($1928+5)&4294967295);
        var $1930=HEAP[$1929];
        var $1931=unSign(($1930), 8, 0);
        var $1932=($1931) & 3;
        var $1933=((($1932))|0)!=0;
        if ($1933) { __label__ = 234; break; } else { __label__ = 236; break; }
      case 234: // $1934
        var $1935=HEAP[$h];
        var $1936=$1935;
        var $1937=$1936;
        var $1938=(($1937+5)&4294967295);
        var $1939=HEAP[$1938];
        var $1940=unSign(($1939), 8, 0);
        var $1941=($1940) & 4;
        var $1942=((($1941))|0)!=0;
        if ($1942) { __label__ = 235; break; } else { __label__ = 236; break; }
      case 235: // $1943
        var $1944=HEAP[$1];
        var $1945=HEAP[$h];
        _luaC_barrierback($1944, $1945);
        __label__ = 236; break;
      case 236: // $1946
        __label__ = 237; break;
      case 237: // $1947
        var $1948=HEAP[$n];
        var $1949=((($1948) + -1)&4294967295);
        HEAP[$n]=$1949;
        __label__ = 231; break;
      case 238: // $1950
        __label__ = 2; break;
      case 239: // $1951
        var $1952=HEAP[$1];
        var $1953=HEAP[$ra];
        _luaF_close($1952, $1953);
        __label__ = 2; break;
      case 240: // $1954
        var $1955=HEAP[$i];
        var $1956=((($1955))>>>0) >>> 14;
        var $1957=($1956) & 262143;
        var $1958=HEAP[$cl];
        var $1959=(($1958+16)&4294967295);
        var $1960=HEAP[$1959];
        var $1961=(($1960+16)&4294967295);
        var $1962=HEAP[$1961];
        var $1963=(($1962+4*$1957)&4294967295);
        var $1964=HEAP[$1963];
        HEAP[$p]=$1964;
        var $1965=HEAP[$p];
        var $1966=(($1965+72)&4294967295);
        var $1967=HEAP[$1966];
        var $1968=unSign(($1967), 8, 0);
        HEAP[$nup]=$1968;
        var $1969=HEAP[$1];
        var $1970=HEAP[$nup];
        var $1971=HEAP[$cl];
        var $1972=(($1971+12)&4294967295);
        var $1973=HEAP[$1972];
        var $1974=_luaF_newLclosure($1969, $1970, $1973);
        HEAP[$ncl]=$1974;
        var $1975=HEAP[$p];
        var $1976=HEAP[$ncl];
        var $1977=$1976;
        var $1978=(($1977+16)&4294967295);
        HEAP[$1978]=$1975;
        HEAP[$j]=0;
        __label__ = 241; break;
      case 241: // $1979
        var $1980=HEAP[$j];
        var $1981=HEAP[$nup];
        var $1982=((($1980))|0) < ((($1981))|0);
        if ($1982) { __label__ = 242; break; } else { __label__ = 247; break; }
      case 242: // $1983
        var $1984=HEAP[$pc];
        var $1985=HEAP[$1984];
        var $1986=((($1985))>>>0) >>> 0;
        var $1987=($1986) & 63;
        var $1988=((($1987))|0)==4;
        if ($1988) { __label__ = 243; break; } else { __label__ = 244; break; }
      case 243: // $1989
        var $1990=HEAP[$pc];
        var $1991=HEAP[$1990];
        var $1992=((($1991))>>>0) >>> 23;
        var $1993=($1992) & 511;
        var $1994=HEAP[$cl];
        var $1995=(($1994+20)&4294967295);
        var $1996=(($1995+$1993*4)&4294967295);
        var $1997=HEAP[$1996];
        var $1998=HEAP[$j];
        var $1999=HEAP[$ncl];
        var $2000=$1999;
        var $2001=(($2000+20)&4294967295);
        var $2002=(($2001+$1998*4)&4294967295);
        HEAP[$2002]=$1997;
        __label__ = 245; break;
      case 244: // $2003
        var $2004=HEAP[$1];
        var $2005=HEAP[$base];
        var $2006=HEAP[$pc];
        var $2007=HEAP[$2006];
        var $2008=((($2007))>>>0) >>> 23;
        var $2009=($2008) & 511;
        var $2010=(($2005+12*$2009)&4294967295);
        var $2011=_luaF_findupval($2004, $2010);
        var $2012=HEAP[$j];
        var $2013=HEAP[$ncl];
        var $2014=$2013;
        var $2015=(($2014+20)&4294967295);
        var $2016=(($2015+$2012*4)&4294967295);
        HEAP[$2016]=$2011;
        __label__ = 245; break;
      case 245: // $2017
        __label__ = 246; break;
      case 246: // $2018
        var $2019=HEAP[$j];
        var $2020=((($2019) + 1)&4294967295);
        HEAP[$j]=$2020;
        var $2021=HEAP[$pc];
        var $2022=(($2021+4)&4294967295);
        HEAP[$pc]=$2022;
        __label__ = 241; break;
      case 247: // $2023
        var $2024=HEAP[$ra];
        HEAP[$i_o78]=$2024;
        var $2025=HEAP[$ncl];
        var $2026=$2025;
        var $2027=HEAP[$i_o78];
        var $2028=(($2027)&4294967295);
        var $2029=$2028;
        HEAP[$2029]=$2026;
        var $2030=HEAP[$i_o78];
        var $2031=(($2030+8)&4294967295);
        HEAP[$2031]=6;
        var $2032=HEAP[$pc];
        var $2033=HEAP[$1];
        var $2034=(($2033+24)&4294967295);
        HEAP[$2034]=$2032;
        var $2035=HEAP[$1];
        var $2036=(($2035+16)&4294967295);
        var $2037=HEAP[$2036];
        var $2038=(($2037+68)&4294967295);
        var $2039=HEAP[$2038];
        var $2040=HEAP[$1];
        var $2041=(($2040+16)&4294967295);
        var $2042=HEAP[$2041];
        var $2043=(($2042+64)&4294967295);
        var $2044=HEAP[$2043];
        var $2045=((($2039))>>>0) >= ((($2044))>>>0);
        if ($2045) { __label__ = 248; break; } else { __label__ = 249; break; }
      case 248: // $2046
        var $2047=HEAP[$1];
        _luaC_step($2047);
        __label__ = 249; break;
      case 249: // $2048
        var $2049=HEAP[$1];
        var $2050=(($2049+12)&4294967295);
        var $2051=HEAP[$2050];
        HEAP[$base]=$2051;
        __label__ = 2; break;
      case 250: // $2052
        var $2053=HEAP[$i];
        var $2054=((($2053))>>>0) >>> 23;
        var $2055=($2054) & 511;
        var $2056=((($2055) - 1)&4294967295);
        HEAP[$b79]=$2056;
        var $2057=HEAP[$1];
        var $2058=(($2057+20)&4294967295);
        var $2059=HEAP[$2058];
        HEAP[$ci81]=$2059;
        var $2060=HEAP[$ci81];
        var $2061=(($2060)&4294967295);
        var $2062=HEAP[$2061];
        var $2063=HEAP[$ci81];
        var $2064=(($2063+4)&4294967295);
        var $2065=HEAP[$2064];
        var $2066=($2062);
        var $2067=($2065);
        var $2068=((($2066) - ($2067))&4294967295);
        var $2069=((((($2068))|0)/12)|0);
        var $2070=HEAP[$cl];
        var $2071=(($2070+16)&4294967295);
        var $2072=HEAP[$2071];
        var $2073=(($2072+73)&4294967295);
        var $2074=HEAP[$2073];
        var $2075=unSign(($2074), 8, 0);
        var $2076=((($2069) - ($2075))&4294967295);
        var $2077=((($2076) - 1)&4294967295);
        HEAP[$n82]=$2077;
        var $2078=HEAP[$b79];
        var $2079=((($2078))|0)==-1;
        if ($2079) { __label__ = 251; break; } else { __label__ = 255; break; }
      case 251: // $2080
        var $2081=HEAP[$pc];
        var $2082=HEAP[$1];
        var $2083=(($2082+24)&4294967295);
        HEAP[$2083]=$2081;
        var $2084=HEAP[$1];
        var $2085=(($2084+28)&4294967295);
        var $2086=HEAP[$2085];
        var $2087=$2086;
        var $2088=HEAP[$1];
        var $2089=(($2088+8)&4294967295);
        var $2090=HEAP[$2089];
        var $2091=$2090;
        var $2092=($2087);
        var $2093=($2091);
        var $2094=((($2092) - ($2093))&4294967295);
        var $2095=HEAP[$n82];
        var $2096=((($2095) * 12)&4294967295);
        var $2097=((($2094))|0) <= ((($2096))|0);
        if ($2097) { __label__ = 252; break; } else { __label__ = 253; break; }
      case 252: // $2098
        var $2099=HEAP[$1];
        var $2100=HEAP[$n82];
        _luaD_growstack($2099, $2100);
        __label__ = 254; break;
      case 253: // $2101
        __label__ = 254; break;
      case 254: // $2102
        var $2103=HEAP[$1];
        var $2104=(($2103+12)&4294967295);
        var $2105=HEAP[$2104];
        HEAP[$base]=$2105;
        var $2106=HEAP[$base];
        var $2107=HEAP[$i];
        var $2108=((($2107))>>>0) >>> 6;
        var $2109=($2108) & 255;
        var $2110=(($2106+12*$2109)&4294967295);
        HEAP[$ra]=$2110;
        var $2111=HEAP[$n82];
        HEAP[$b79]=$2111;
        var $2112=HEAP[$ra];
        var $2113=HEAP[$n82];
        var $2114=(($2112+12*$2113)&4294967295);
        var $2115=HEAP[$1];
        var $2116=(($2115+8)&4294967295);
        HEAP[$2116]=$2114;
        __label__ = 255; break;
      case 255: // $2117
        HEAP[$j80]=0;
        __label__ = 256; break;
      case 256: // $2118
        var $2119=HEAP[$j80];
        var $2120=HEAP[$b79];
        var $2121=((($2119))|0) < ((($2120))|0);
        if ($2121) { __label__ = 257; break; } else { __label__ = 262; break; }
      case 257: // $2122
        var $2123=HEAP[$j80];
        var $2124=HEAP[$n82];
        var $2125=((($2123))|0) < ((($2124))|0);
        if ($2125) { __label__ = 258; break; } else { __label__ = 259; break; }
      case 258: // $2126
        var $2127=HEAP[$ci81];
        var $2128=(($2127)&4294967295);
        var $2129=HEAP[$2128];
        var $2130=HEAP[$n82];
        var $2131=((0 - ($2130))&4294967295);
        var $2132=(($2129+12*$2131)&4294967295);
        var $2133=HEAP[$j80];
        var $2134=(($2132+12*$2133)&4294967295);
        HEAP[$o283]=$2134;
        var $2135=HEAP[$ra];
        var $2136=HEAP[$j80];
        var $2137=(($2135+12*$2136)&4294967295);
        HEAP[$o184]=$2137;
        var $2138=HEAP[$o184];
        var $2139=(($2138)&4294967295);
        var $2140=HEAP[$o283];
        var $2141=(($2140)&4294967295);
        var $2142=$2139;
        var $2143=$2141;
        _llvm_memcpy_p0i8_p0i8_i32($2142, $2143, 8, 4, 0);
        var $2144=HEAP[$o283];
        var $2145=(($2144+8)&4294967295);
        var $2146=HEAP[$2145];
        var $2147=HEAP[$o184];
        var $2148=(($2147+8)&4294967295);
        HEAP[$2148]=$2146;
        __label__ = 260; break;
      case 259: // $2149
        var $2150=HEAP[$ra];
        var $2151=HEAP[$j80];
        var $2152=(($2150+12*$2151)&4294967295);
        var $2153=(($2152+8)&4294967295);
        HEAP[$2153]=0;
        __label__ = 260; break;
      case 260: // $2154
        __label__ = 261; break;
      case 261: // $2155
        var $2156=HEAP[$j80];
        var $2157=((($2156) + 1)&4294967295);
        HEAP[$j80]=$2157;
        __label__ = 256; break;
      case 262: // $2158
        __label__ = 2; break;
      case 263: // $2159
        __label__ = 2; break;
      case 264: // $2160
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _traceexec($L, $pc) {
    var __stackBase__  = STACKTOP; STACKTOP += 25; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 25);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $mask=__stackBase__+8;
        var $oldpc=__stackBase__+9;
        var $p=__stackBase__+13;
        var $npc=__stackBase__+17;
        var $newline=__stackBase__+21;
        HEAP[$1]=$L;
        HEAP[$2]=$pc;
        var $3=HEAP[$1];
        var $4=(($3+56)&4294967295);
        var $5=HEAP[$4];
        HEAP[$mask]=$5;
        var $6=HEAP[$1];
        var $7=(($6+24)&4294967295);
        var $8=HEAP[$7];
        HEAP[$oldpc]=$8;
        var $9=HEAP[$2];
        var $10=HEAP[$1];
        var $11=(($10+24)&4294967295);
        HEAP[$11]=$9;
        var $12=HEAP[$mask];
        var $13=unSign(($12), 8, 0);
        var $14=($13) & 8;
        var $15=((($14))|0)!=0;
        if ($15) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $16
        var $17=HEAP[$1];
        var $18=(($17+64)&4294967295);
        var $19=HEAP[$18];
        var $20=((($19))|0)==0;
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $21
        var $22=HEAP[$1];
        var $23=(($22+60)&4294967295);
        var $24=HEAP[$23];
        var $25=HEAP[$1];
        var $26=(($25+64)&4294967295);
        HEAP[$26]=$24;
        var $27=HEAP[$1];
        _luaD_callhook($27, 3, -1);
        __label__ = 3; break;
      case 3: // $28
        var $29=HEAP[$mask];
        var $30=unSign(($29), 8, 0);
        var $31=($30) & 4;
        var $32=((($31))|0)!=0;
        if ($32) { __label__ = 4; break; } else { __label__ = 15; break; }
      case 4: // $33
        var $34=HEAP[$1];
        var $35=(($34+20)&4294967295);
        var $36=HEAP[$35];
        var $37=(($36+4)&4294967295);
        var $38=HEAP[$37];
        var $39=(($38)&4294967295);
        var $40=$39;
        var $41=HEAP[$40];
        var $42=$41;
        var $43=$42;
        var $44=(($43+16)&4294967295);
        var $45=HEAP[$44];
        HEAP[$p]=$45;
        var $46=HEAP[$2];
        var $47=HEAP[$p];
        var $48=(($47+12)&4294967295);
        var $49=HEAP[$48];
        var $50=($46);
        var $51=($49);
        var $52=((($50) - ($51))&4294967295);
        var $53=((((($52))|0)/4)|0);
        var $54=((($53) - 1)&4294967295);
        HEAP[$npc]=$54;
        var $55=HEAP[$p];
        var $56=(($55+20)&4294967295);
        var $57=HEAP[$56];
        var $58=((($57))|0)!=0;
        if ($58) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $59
        var $60=HEAP[$npc];
        var $61=HEAP[$p];
        var $62=(($61+20)&4294967295);
        var $63=HEAP[$62];
        var $64=(($63+4*$60)&4294967295);
        var $65=HEAP[$64];
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $66
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $67
        var $68=__lastLabel__ == 5 ? $65 : (0);
        HEAP[$newline]=$68;
        var $69=HEAP[$npc];
        var $70=((($69))|0)==0;
        if ($70) { __label__ = 13; break; } else { __label__ = 8; break; }
      case 8: // $71
        var $72=HEAP[$2];
        var $73=HEAP[$oldpc];
        var $74=((($72))>>>0) <= ((($73))>>>0);
        if ($74) { __label__ = 13; break; } else { __label__ = 9; break; }
      case 9: // $75
        var $76=HEAP[$newline];
        var $77=HEAP[$p];
        var $78=(($77+20)&4294967295);
        var $79=HEAP[$78];
        var $80=((($79))|0)!=0;
        if ($80) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $81
        var $82=HEAP[$oldpc];
        var $83=HEAP[$p];
        var $84=(($83+12)&4294967295);
        var $85=HEAP[$84];
        var $86=($82);
        var $87=($85);
        var $88=((($86) - ($87))&4294967295);
        var $89=((((($88))|0)/4)|0);
        var $90=((($89) - 1)&4294967295);
        var $91=HEAP[$p];
        var $92=(($91+20)&4294967295);
        var $93=HEAP[$92];
        var $94=(($93+4*$90)&4294967295);
        var $95=HEAP[$94];
        __lastLabel__ = 10; __label__ = 12; break;
      case 11: // $96
        __lastLabel__ = 11; __label__ = 12; break;
      case 12: // $97
        var $98=__lastLabel__ == 10 ? $95 : (0);
        var $99=((($76))|0)!=((($98))|0);
        if ($99) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $100
        var $101=HEAP[$1];
        var $102=HEAP[$newline];
        _luaD_callhook($101, 2, $102);
        __label__ = 14; break;
      case 14: // $103
        __label__ = 15; break;
      case 15: // $104
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Arith($L, $ra, $rb, $rc, $op) {
    var __stackBase__  = STACKTOP; STACKTOP += 96; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 96);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $tempb=__stackBase__+20;
        var $tempc=__stackBase__+32;
        var $b=__stackBase__+44;
        var $c=__stackBase__+48;
        var $nb=__stackBase__+52;
        var $nc=__stackBase__+60;
        var $i_o=__stackBase__+68;
        var $i_o1=__stackBase__+72;
        var $i_o2=__stackBase__+76;
        var $i_o3=__stackBase__+80;
        var $i_o4=__stackBase__+84;
        var $i_o5=__stackBase__+88;
        var $i_o6=__stackBase__+92;
        HEAP[$1]=$L;
        HEAP[$2]=$ra;
        HEAP[$3]=$rb;
        HEAP[$4]=$rc;
        HEAP[$5]=$op;
        var $6=HEAP[$3];
        var $7=_luaV_tonumber($6, $tempb);
        HEAP[$b]=$7;
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 12; break; }
      case 1: // $9
        var $10=HEAP[$4];
        var $11=_luaV_tonumber($10, $tempc);
        HEAP[$c]=$11;
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 2; break; } else { __label__ = 12; break; }
      case 2: // $13
        var $14=HEAP[$b];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        HEAP[$nb]=$17;
        var $18=HEAP[$c];
        var $19=(($18)&4294967295);
        var $20=$19;
        var $21=HEAP[$20];
        HEAP[$nc]=$21;
        var $22=HEAP[$5];
        if ($22 == 5) {
          __label__ = 3; break;
        }
        else if ($22 == 6) {
          __label__ = 4; break;
        }
        else if ($22 == 7) {
          __label__ = 5; break;
        }
        else if ($22 == 8) {
          __label__ = 6; break;
        }
        else if ($22 == 9) {
          __label__ = 7; break;
        }
        else if ($22 == 10) {
          __label__ = 8; break;
        }
        else if ($22 == 11) {
          __label__ = 9; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 3: // $23
        var $24=HEAP[$2];
        HEAP[$i_o]=$24;
        var $25=HEAP[$nb];
        var $26=HEAP[$nc];
        var $27=($25) + ($26);
        var $28=HEAP[$i_o];
        var $29=(($28)&4294967295);
        var $30=$29;
        HEAP[$30]=$27;
        var $31=HEAP[$i_o];
        var $32=(($31+8)&4294967295);
        HEAP[$32]=3;
        __label__ = 11; break;
      case 4: // $33
        var $34=HEAP[$2];
        HEAP[$i_o1]=$34;
        var $35=HEAP[$nb];
        var $36=HEAP[$nc];
        var $37=($35) - ($36);
        var $38=HEAP[$i_o1];
        var $39=(($38)&4294967295);
        var $40=$39;
        HEAP[$40]=$37;
        var $41=HEAP[$i_o1];
        var $42=(($41+8)&4294967295);
        HEAP[$42]=3;
        __label__ = 11; break;
      case 5: // $43
        var $44=HEAP[$2];
        HEAP[$i_o2]=$44;
        var $45=HEAP[$nb];
        var $46=HEAP[$nc];
        var $47=($45) * ($46);
        var $48=HEAP[$i_o2];
        var $49=(($48)&4294967295);
        var $50=$49;
        HEAP[$50]=$47;
        var $51=HEAP[$i_o2];
        var $52=(($51+8)&4294967295);
        HEAP[$52]=3;
        __label__ = 11; break;
      case 6: // $53
        var $54=HEAP[$2];
        HEAP[$i_o3]=$54;
        var $55=HEAP[$nb];
        var $56=HEAP[$nc];
        var $57=($55) / ($56);
        var $58=HEAP[$i_o3];
        var $59=(($58)&4294967295);
        var $60=$59;
        HEAP[$60]=$57;
        var $61=HEAP[$i_o3];
        var $62=(($61+8)&4294967295);
        HEAP[$62]=3;
        __label__ = 11; break;
      case 7: // $63
        var $64=HEAP[$2];
        HEAP[$i_o4]=$64;
        var $65=HEAP[$nb];
        var $66=HEAP[$nb];
        var $67=HEAP[$nc];
        var $68=($66) / ($67);
        var $69=_floor($68);
        var $70=HEAP[$nc];
        var $71=($69) * ($70);
        var $72=($65) - ($71);
        var $73=HEAP[$i_o4];
        var $74=(($73)&4294967295);
        var $75=$74;
        HEAP[$75]=$72;
        var $76=HEAP[$i_o4];
        var $77=(($76+8)&4294967295);
        HEAP[$77]=3;
        __label__ = 11; break;
      case 8: // $78
        var $79=HEAP[$2];
        HEAP[$i_o5]=$79;
        var $80=HEAP[$nb];
        var $81=HEAP[$nc];
        var $82=_llvm_pow_f64($80, $81);
        var $83=HEAP[$i_o5];
        var $84=(($83)&4294967295);
        var $85=$84;
        HEAP[$85]=$82;
        var $86=HEAP[$i_o5];
        var $87=(($86+8)&4294967295);
        HEAP[$87]=3;
        __label__ = 11; break;
      case 9: // $88
        var $89=HEAP[$2];
        HEAP[$i_o6]=$89;
        var $90=HEAP[$nb];
        var $91=0 - ($90);
        var $92=HEAP[$i_o6];
        var $93=(($92)&4294967295);
        var $94=$93;
        HEAP[$94]=$91;
        var $95=HEAP[$i_o6];
        var $96=(($95+8)&4294967295);
        HEAP[$96]=3;
        __label__ = 11; break;
      case 10: // $97
        __label__ = 11; break;
      case 11: // $98
        __label__ = 15; break;
      case 12: // $99
        var $100=HEAP[$1];
        var $101=HEAP[$3];
        var $102=HEAP[$4];
        var $103=HEAP[$2];
        var $104=HEAP[$5];
        var $105=_call_binTM($100, $101, $102, $103, $104);
        var $106=((($105))|0)!=0;
        if ($106) { __label__ = 14; break; } else { __label__ = 13; break; }
      case 13: // $107
        var $108=HEAP[$1];
        var $109=HEAP[$3];
        var $110=HEAP[$4];
        _luaG_aritherror($108, $109, $110);
        __label__ = 14; break;
      case 14: // $111
        __label__ = 15; break;
      case 15: // $112
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lessequal($L, $l, $r) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $res=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$l;
        HEAP[$4]=$r;
        var $5=HEAP[$3];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        var $8=HEAP[$4];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        var $11=((($7))|0)!=((($10))|0);
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$3];
        var $15=HEAP[$4];
        var $16=_luaG_ordererror($13, $14, $15);
        HEAP[$1]=$16;
        __label__ = 15; break;
      case 2: // $17
        var $18=HEAP[$3];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        var $21=((($20))|0)==3;
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $22
        var $23=HEAP[$3];
        var $24=(($23)&4294967295);
        var $25=$24;
        var $26=HEAP[$25];
        var $27=HEAP[$4];
        var $28=(($27)&4294967295);
        var $29=$28;
        var $30=HEAP[$29];
        var $31=($26) <= ($30);
        var $32=unSign(($31), 1, 0);
        HEAP[$1]=$32;
        __label__ = 15; break;
      case 4: // $33
        var $34=HEAP[$3];
        var $35=(($34+8)&4294967295);
        var $36=HEAP[$35];
        var $37=((($36))|0)==4;
        if ($37) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $38
        var $39=HEAP[$3];
        var $40=(($39)&4294967295);
        var $41=$40;
        var $42=HEAP[$41];
        var $43=$42;
        var $44=HEAP[$4];
        var $45=(($44)&4294967295);
        var $46=$45;
        var $47=HEAP[$46];
        var $48=$47;
        var $49=_l_strcmp($43, $48);
        var $50=((($49))|0) <= 0;
        var $51=unSign(($50), 1, 0);
        HEAP[$1]=$51;
        __label__ = 15; break;
      case 6: // $52
        var $53=HEAP[$2];
        var $54=HEAP[$3];
        var $55=HEAP[$4];
        var $56=_call_orderTM($53, $54, $55, 14);
        HEAP[$res]=$56;
        var $57=((($56))|0)!=-1;
        if ($57) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $58
        var $59=HEAP[$res];
        HEAP[$1]=$59;
        __label__ = 15; break;
      case 8: // $60
        var $61=HEAP[$2];
        var $62=HEAP[$4];
        var $63=HEAP[$3];
        var $64=_call_orderTM($61, $62, $63, 13);
        HEAP[$res]=$64;
        var $65=((($64))|0)!=-1;
        if ($65) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $66
        var $67=HEAP[$res];
        var $68=((($67))|0)!=0;
        var $69=($68) ^ 1;
        var $70=unSign(($69), 1, 0);
        HEAP[$1]=$70;
        __label__ = 15; break;
      case 10: // $71
        __label__ = 11; break;
      case 11: // $72
        __label__ = 12; break;
      case 12: // $73
        __label__ = 13; break;
      case 13: // $74
        __label__ = 14; break;
      case 14: // $75
        var $76=HEAP[$2];
        var $77=HEAP[$3];
        var $78=HEAP[$4];
        var $79=_luaG_ordererror($76, $77, $78);
        HEAP[$1]=$79;
        __label__ = 15; break;
      case 15: // $80
        var $81=HEAP[$1];
        STACKTOP = __stackBase__;
        return $81;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaZ_fill($z) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $size=__stackBase__+8;
        var $L=__stackBase__+12;
        var $buff=__stackBase__+16;
        HEAP[$2]=$z;
        var $3=HEAP[$2];
        var $4=(($3+16)&4294967295);
        var $5=HEAP[$4];
        HEAP[$L]=$5;
        var $6=HEAP[$2];
        var $7=(($6+8)&4294967295);
        var $8=HEAP[$7];
        var $9=HEAP[$L];
        var $10=HEAP[$2];
        var $11=(($10+12)&4294967295);
        var $12=HEAP[$11];
        var $13=FUNCTION_TABLE[$8]($9, $12, $size);
        HEAP[$buff]=$13;
        var $14=HEAP[$buff];
        var $15=((($14))|0)==0;
        if ($15) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $16
        var $17=HEAP[$size];
        var $18=((($17))|0)==0;
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $19
        HEAP[$1]=-1;
        __label__ = 4; break;
      case 3: // $20
        var $21=HEAP[$size];
        var $22=((($21) - 1)&4294967295);
        var $23=HEAP[$2];
        var $24=(($23)&4294967295);
        HEAP[$24]=$22;
        var $25=HEAP[$buff];
        var $26=HEAP[$2];
        var $27=(($26+4)&4294967295);
        HEAP[$27]=$25;
        var $28=HEAP[$2];
        var $29=(($28+4)&4294967295);
        var $30=HEAP[$29];
        var $31=(($30+1)&4294967295);
        HEAP[$29]=$31;
        var $32=HEAP[$30];
        var $33=unSign(($32), 8, 0);
        HEAP[$1]=$33;
        __label__ = 4; break;
      case 4: // $34
        var $35=HEAP[$1];
        STACKTOP = __stackBase__;
        return $35;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaZ_lookahead($z) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$z;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=((($5))|0)==0;
        if ($6) { __label__ = 1; break; } else { __label__ = 5; break; }
      case 1: // $7
        var $8=HEAP[$2];
        var $9=_luaZ_fill($8);
        var $10=((($9))|0)==-1;
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $11
        HEAP[$1]=-1;
        __label__ = 6; break;
      case 3: // $12
        var $13=HEAP[$2];
        var $14=(($13)&4294967295);
        var $15=HEAP[$14];
        var $16=((($15) + 1)&4294967295);
        HEAP[$14]=$16;
        var $17=HEAP[$2];
        var $18=(($17+4)&4294967295);
        var $19=HEAP[$18];
        var $20=(($19+-1)&4294967295);
        HEAP[$18]=$20;
        __label__ = 4; break;
      case 4: // $21
        __label__ = 5; break;
      case 5: // $22
        var $23=HEAP[$2];
        var $24=(($23+4)&4294967295);
        var $25=HEAP[$24];
        var $26=HEAP[$25];
        var $27=unSign(($26), 8, 0);
        HEAP[$1]=$27;
        __label__ = 6; break;
      case 6: // $28
        var $29=HEAP[$1];
        STACKTOP = __stackBase__;
        return $29;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaZ_init($L, $z, $reader, $data) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$z;
    HEAP[$3]=$reader;
    HEAP[$4]=$data;
    var $5=HEAP[$1];
    var $6=HEAP[$2];
    var $7=(($6+16)&4294967295);
    HEAP[$7]=$5;
    var $8=HEAP[$3];
    var $9=HEAP[$2];
    var $10=(($9+8)&4294967295);
    HEAP[$10]=$8;
    var $11=HEAP[$4];
    var $12=HEAP[$2];
    var $13=(($12+12)&4294967295);
    HEAP[$13]=$11;
    var $14=HEAP[$2];
    var $15=(($14)&4294967295);
    HEAP[$15]=0;
    var $16=HEAP[$2];
    var $17=(($16+4)&4294967295);
    HEAP[$17]=0;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _luaZ_read($z, $b, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $m=__stackBase__+16;
        HEAP[$2]=$z;
        HEAP[$3]=$b;
        HEAP[$4]=$n;
        __label__ = 1; break;
      case 1: // $5
        var $6=HEAP[$4];
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 2; break; } else { __label__ = 8; break; }
      case 2: // $8
        var $9=HEAP[$2];
        var $10=_luaZ_lookahead($9);
        var $11=((($10))|0)==-1;
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $12
        var $13=HEAP[$4];
        HEAP[$1]=$13;
        __label__ = 9; break;
      case 4: // $14
        var $15=HEAP[$4];
        var $16=HEAP[$2];
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=((($15))>>>0) <= ((($18))>>>0);
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $20
        var $21=HEAP[$4];
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $22
        var $23=HEAP[$2];
        var $24=(($23)&4294967295);
        var $25=HEAP[$24];
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $26
        var $27=__lastLabel__ == 5 ? $21 : ($25);
        HEAP[$m]=$27;
        var $28=HEAP[$3];
        var $29=HEAP[$2];
        var $30=(($29+4)&4294967295);
        var $31=HEAP[$30];
        var $32=HEAP[$m];
        _llvm_memcpy_p0i8_p0i8_i32($28, $31, $32, 1, 0);
        var $33=HEAP[$m];
        var $34=HEAP[$2];
        var $35=(($34)&4294967295);
        var $36=HEAP[$35];
        var $37=((($36) - ($33))&4294967295);
        HEAP[$35]=$37;
        var $38=HEAP[$m];
        var $39=HEAP[$2];
        var $40=(($39+4)&4294967295);
        var $41=HEAP[$40];
        var $42=(($41+$38)&4294967295);
        HEAP[$40]=$42;
        var $43=HEAP[$3];
        var $44=HEAP[$m];
        var $45=(($43+$44)&4294967295);
        HEAP[$3]=$45;
        var $46=HEAP[$m];
        var $47=HEAP[$4];
        var $48=((($47) - ($46))&4294967295);
        HEAP[$4]=$48;
        __label__ = 1; break;
      case 8: // $49
        HEAP[$1]=0;
        __label__ = 9; break;
      case 9: // $50
        var $51=HEAP[$1];
        STACKTOP = __stackBase__;
        return $51;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaZ_openspace($L, $buff, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$buff;
        HEAP[$3]=$n;
        var $4=HEAP[$3];
        var $5=HEAP[$2];
        var $6=(($5+8)&4294967295);
        var $7=HEAP[$6];
        var $8=((($4))>>>0) > ((($7))>>>0);
        if ($8) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 1: // $9
        var $10=HEAP[$3];
        var $11=((($10))>>>0) < 32;
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $12
        HEAP[$3]=32;
        __label__ = 3; break;
      case 3: // $13
        var $14=HEAP[$3];
        var $15=((($14) + 1)&4294967295);
        var $16=((($15))>>>0) <= 4294967293;
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$2];
        var $20=(($19)&4294967295);
        var $21=HEAP[$20];
        var $22=HEAP[$2];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=((($24) * 1)&4294967295);
        var $26=HEAP[$3];
        var $27=((($26) * 1)&4294967295);
        var $28=_luaM_realloc_($18, $21, $25, $27);
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $29
        var $30=HEAP[$1];
        var $31=_luaM_toobig($30);
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $32
        var $33=__lastLabel__ == 4 ? $28 : ($31);
        var $34=HEAP[$2];
        var $35=(($34)&4294967295);
        HEAP[$35]=$33;
        var $36=HEAP[$3];
        var $37=HEAP[$2];
        var $38=(($37+8)&4294967295);
        HEAP[$38]=$36;
        __label__ = 7; break;
      case 7: // $39
        var $40=HEAP[$2];
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        STACKTOP = __stackBase__;
        return $42;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _run_lua($code) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$code;
    var $2=HEAP[_l];
    var $3=HEAP[$1];
    var $4=_luaL_loadstring($2, $3);
    var $5=HEAP[_l];
    _lua_call($5, 0, 0);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _main($argc, $argv) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        HEAP[$1]=0;
        HEAP[$2]=$argc;
        HEAP[$3]=$argv;
        var $4=HEAP[$2];
        var $5=_printf(((__str646)&4294967295), allocate([$4,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$i];
        var $8=HEAP[$2];
        var $9=((($7))|0) < ((($8))|0);
        if ($9) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $10
        var $11=HEAP[$i];
        var $12=HEAP[$3];
        var $13=(($12+4*$11)&4294967295);
        var $14=HEAP[$13];
        var $15=_printf(((__str1647)&4294967295), allocate([$14,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $16
        var $17=HEAP[$i];
        var $18=((($17) + 1)&4294967295);
        HEAP[$i]=$18;
        __label__ = 1; break;
      case 4: // $19
        var $20=_luaL_newstate();
        HEAP[_l]=$20;
        var $21=HEAP[_l];
        _luaL_openlibs($21);
        var $22=HEAP[_l];
        var $23=_luaopen_lpeg($22);
        var $24=HEAP[_l];
        var $25=HEAP[_moonscript_lua_len];
        var $26=_luaL_loadbuffer($24, ((_moonscript_lua)&4294967295), $25, ((__str2648)&4294967295));
        var $27=((($26))|0)!=0;
        var $28=($27) ^ 1;
        var $29=unSign(($28), 1, 0);
        var $30=((($29))|0)==0;
        if ($30) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $31
        var $32=HEAP[_stderr];
        var $33=_fprintf($32, ((__str3649)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=1;
        __label__ = 7; break;
      case 6: // $34
        var $35=HEAP[_l];
        _lua_call($35, 0, 0);
        __label__ = 7; break;
      case 7: // $36
        var $37=HEAP[$1];
        STACKTOP = __stackBase__;
        return $37;
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_main"] = _main;

  function _luaU_print($f, $full) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $n=__stackBase__+12;
        HEAP[$1]=$f;
        HEAP[$2]=$full;
        var $3=HEAP[$1];
        var $4=(($3+52)&4294967295);
        var $5=HEAP[$4];
        HEAP[$n]=$5;
        var $6=HEAP[$1];
        _PrintHeader($6);
        var $7=HEAP[$1];
        _PrintCode($7);
        var $8=HEAP[$2];
        var $9=((($8))|0)!=0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=HEAP[$1];
        _PrintConstants($11);
        var $12=HEAP[$1];
        _PrintLocals($12);
        var $13=HEAP[$1];
        _PrintUpvalues($13);
        __label__ = 2; break;
      case 2: // $14
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $15
        var $16=HEAP[$i];
        var $17=HEAP[$n];
        var $18=((($16))|0) < ((($17))|0);
        if ($18) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $19
        var $20=HEAP[$i];
        var $21=HEAP[$1];
        var $22=(($21+16)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23+4*$20)&4294967295);
        var $25=HEAP[$24];
        var $26=HEAP[$2];
        _luaU_print($25, $26);
        __label__ = 5; break;
      case 5: // $27
        var $28=HEAP[$i];
        var $29=((($28) + 1)&4294967295);
        HEAP[$i]=$29;
        __label__ = 3; break;
      case 6: // $30
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PrintHeader($f) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $s=__stackBase__+4;
        HEAP[$1]=$f;
        var $2=HEAP[$1];
        var $3=(($2+32)&4294967295);
        var $4=HEAP[$3];
        var $5=(($4+16)&4294967295);
        var $6=$5;
        HEAP[$s]=$6;
        var $7=HEAP[$s];
        var $8=HEAP[$7];
        var $9=reSign(($8), 8, 0);
        var $10=((($9))|0)==64;
        if ($10) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $11
        var $12=HEAP[$s];
        var $13=HEAP[$12];
        var $14=reSign(($13), 8, 0);
        var $15=((($14))|0)==61;
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $16
        var $17=HEAP[$s];
        var $18=(($17+1)&4294967295);
        HEAP[$s]=$18;
        __label__ = 7; break;
      case 3: // $19
        var $20=HEAP[$s];
        var $21=HEAP[$20];
        var $22=reSign(($21), 8, 0);
        var $23=HEAP[((__str35685)&4294967295)];
        var $24=reSign(($23), 8, 0);
        var $25=((($22))|0)==((($24))|0);
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $26
        HEAP[$s]=((__str36686)&4294967295);
        __label__ = 6; break;
      case 5: // $27
        HEAP[$s]=((__str37687)&4294967295);
        __label__ = 6; break;
      case 6: // $28
        __label__ = 7; break;
      case 7: // $29
        var $30=HEAP[$1];
        var $31=(($30+60)&4294967295);
        var $32=HEAP[$31];
        var $33=((($32))|0)==0;
        if ($33) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $34
        __lastLabel__ = 8; __label__ = 10; break;
      case 9: // $35
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $36
        var $37=__lastLabel__ == 8 ? ((__str39689)&4294967295) : (((__str40690)&4294967295));
        var $38=HEAP[$s];
        var $39=HEAP[$1];
        var $40=(($39+60)&4294967295);
        var $41=HEAP[$40];
        var $42=HEAP[$1];
        var $43=(($42+64)&4294967295);
        var $44=HEAP[$43];
        var $45=HEAP[$1];
        var $46=(($45+44)&4294967295);
        var $47=HEAP[$46];
        var $48=HEAP[$1];
        var $49=(($48+44)&4294967295);
        var $50=HEAP[$49];
        var $51=((($50))|0)==1;
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $52
        __lastLabel__ = 11; __label__ = 13; break;
      case 12: // $53
        __lastLabel__ = 12; __label__ = 13; break;
      case 13: // $54
        var $55=__lastLabel__ == 11 ? ((__str41691)&4294967295) : (((__str42692)&4294967295));
        var $56=HEAP[$1];
        var $57=(($56+44)&4294967295);
        var $58=HEAP[$57];
        var $59=((($58) * 4)&4294967295);
        var $60=HEAP[$1];
        var $61=$60;
        var $62=_printf(((__str38688)&4294967295), allocate([$37,0,0,0,$38,0,0,0,$41,0,0,0,$44,0,0,0,$47,0,0,0,$55,0,0,0,$59,0,0,0,$61,0,0,0], ["i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        var $63=HEAP[$1];
        var $64=(($63+73)&4294967295);
        var $65=HEAP[$64];
        var $66=unSign(($65), 8, 0);
        var $67=HEAP[$1];
        var $68=(($67+74)&4294967295);
        var $69=HEAP[$68];
        var $70=unSign(($69), 8, 0);
        var $71=((($70))|0)!=0;
        if ($71) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $72
        __lastLabel__ = 14; __label__ = 16; break;
      case 15: // $73
        __lastLabel__ = 15; __label__ = 16; break;
      case 16: // $74
        var $75=__lastLabel__ == 14 ? ((__str44694)&4294967295) : (((__str41691)&4294967295));
        var $76=HEAP[$1];
        var $77=(($76+73)&4294967295);
        var $78=HEAP[$77];
        var $79=unSign(($78), 8, 0);
        var $80=((($79))|0)==1;
        if ($80) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $81
        __lastLabel__ = 17; __label__ = 19; break;
      case 18: // $82
        __lastLabel__ = 18; __label__ = 19; break;
      case 19: // $83
        var $84=__lastLabel__ == 17 ? ((__str41691)&4294967295) : (((__str42692)&4294967295));
        var $85=HEAP[$1];
        var $86=(($85+75)&4294967295);
        var $87=HEAP[$86];
        var $88=unSign(($87), 8, 0);
        var $89=HEAP[$1];
        var $90=(($89+75)&4294967295);
        var $91=HEAP[$90];
        var $92=unSign(($91), 8, 0);
        var $93=((($92))|0)==1;
        if ($93) { __label__ = 20; break; } else { __label__ = 21; break; }
      case 20: // $94
        __lastLabel__ = 20; __label__ = 22; break;
      case 21: // $95
        __lastLabel__ = 21; __label__ = 22; break;
      case 22: // $96
        var $97=__lastLabel__ == 20 ? ((__str41691)&4294967295) : (((__str42692)&4294967295));
        var $98=HEAP[$1];
        var $99=(($98+72)&4294967295);
        var $100=HEAP[$99];
        var $101=unSign(($100), 8, 0);
        var $102=HEAP[$1];
        var $103=(($102+72)&4294967295);
        var $104=HEAP[$103];
        var $105=unSign(($104), 8, 0);
        var $106=((($105))|0)==1;
        if ($106) { __label__ = 23; break; } else { __label__ = 24; break; }
      case 23: // $107
        __lastLabel__ = 23; __label__ = 25; break;
      case 24: // $108
        __lastLabel__ = 24; __label__ = 25; break;
      case 25: // $109
        var $110=__lastLabel__ == 23 ? ((__str41691)&4294967295) : (((__str42692)&4294967295));
        var $111=_printf(((__str43693)&4294967295), allocate([$66,0,0,0,$75,0,0,0,$84,0,0,0,$88,0,0,0,$97,0,0,0,$101,0,0,0,$110,0,0,0], ["i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        var $112=HEAP[$1];
        var $113=(($112+56)&4294967295);
        var $114=HEAP[$113];
        var $115=HEAP[$1];
        var $116=(($115+56)&4294967295);
        var $117=HEAP[$116];
        var $118=((($117))|0)==1;
        if ($118) { __label__ = 26; break; } else { __label__ = 27; break; }
      case 26: // $119
        __lastLabel__ = 26; __label__ = 28; break;
      case 27: // $120
        __lastLabel__ = 27; __label__ = 28; break;
      case 28: // $121
        var $122=__lastLabel__ == 26 ? ((__str41691)&4294967295) : (((__str42692)&4294967295));
        var $123=HEAP[$1];
        var $124=(($123+40)&4294967295);
        var $125=HEAP[$124];
        var $126=HEAP[$1];
        var $127=(($126+40)&4294967295);
        var $128=HEAP[$127];
        var $129=((($128))|0)==1;
        if ($129) { __label__ = 29; break; } else { __label__ = 30; break; }
      case 29: // $130
        __lastLabel__ = 29; __label__ = 31; break;
      case 30: // $131
        __lastLabel__ = 30; __label__ = 31; break;
      case 31: // $132
        var $133=__lastLabel__ == 29 ? ((__str41691)&4294967295) : (((__str42692)&4294967295));
        var $134=HEAP[$1];
        var $135=(($134+52)&4294967295);
        var $136=HEAP[$135];
        var $137=HEAP[$1];
        var $138=(($137+52)&4294967295);
        var $139=HEAP[$138];
        var $140=((($139))|0)==1;
        if ($140) { __label__ = 32; break; } else { __label__ = 33; break; }
      case 32: // $141
        __lastLabel__ = 32; __label__ = 34; break;
      case 33: // $142
        __lastLabel__ = 33; __label__ = 34; break;
      case 34: // $143
        var $144=__lastLabel__ == 32 ? ((__str41691)&4294967295) : (((__str42692)&4294967295));
        var $145=_printf(((__str45695)&4294967295), allocate([$114,0,0,0,$122,0,0,0,$125,0,0,0,$133,0,0,0,$136,0,0,0,$144,0,0,0], ["i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PrintCode($f) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $code=__stackBase__+4;
        var $pc=__stackBase__+8;
        var $n=__stackBase__+12;
        var $i=__stackBase__+16;
        var $o=__stackBase__+20;
        var $a=__stackBase__+24;
        var $b=__stackBase__+28;
        var $c=__stackBase__+32;
        var $bx=__stackBase__+36;
        var $sbx=__stackBase__+40;
        var $line=__stackBase__+44;
        HEAP[$1]=$f;
        var $2=HEAP[$1];
        var $3=(($2+12)&4294967295);
        var $4=HEAP[$3];
        HEAP[$code]=$4;
        var $5=HEAP[$1];
        var $6=(($5+44)&4294967295);
        var $7=HEAP[$6];
        HEAP[$n]=$7;
        HEAP[$pc]=0;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$pc];
        var $10=HEAP[$n];
        var $11=((($9))|0) < ((($10))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 57; break; }
      case 2: // $12
        var $13=HEAP[$pc];
        var $14=HEAP[$code];
        var $15=(($14+4*$13)&4294967295);
        var $16=HEAP[$15];
        HEAP[$i]=$16;
        var $17=HEAP[$i];
        var $18=((($17))>>>0) >>> 0;
        var $19=($18) & 63;
        HEAP[$o]=$19;
        var $20=HEAP[$i];
        var $21=((($20))>>>0) >>> 6;
        var $22=($21) & 255;
        HEAP[$a]=$22;
        var $23=HEAP[$i];
        var $24=((($23))>>>0) >>> 23;
        var $25=($24) & 511;
        HEAP[$b]=$25;
        var $26=HEAP[$i];
        var $27=((($26))>>>0) >>> 14;
        var $28=($27) & 511;
        HEAP[$c]=$28;
        var $29=HEAP[$i];
        var $30=((($29))>>>0) >>> 14;
        var $31=($30) & 262143;
        HEAP[$bx]=$31;
        var $32=HEAP[$i];
        var $33=((($32))>>>0) >>> 14;
        var $34=($33) & 262143;
        var $35=((($34) - 131071)&4294967295);
        HEAP[$sbx]=$35;
        var $36=HEAP[$1];
        var $37=(($36+20)&4294967295);
        var $38=HEAP[$37];
        var $39=((($38))|0)!=0;
        if ($39) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $40
        var $41=HEAP[$pc];
        var $42=HEAP[$1];
        var $43=(($42+20)&4294967295);
        var $44=HEAP[$43];
        var $45=(($44+4*$41)&4294967295);
        var $46=HEAP[$45];
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $47
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $48
        var $49=__lastLabel__ == 3 ? $46 : (0);
        HEAP[$line]=$49;
        var $50=HEAP[$pc];
        var $51=((($50) + 1)&4294967295);
        var $52=_printf(((__str5655)&4294967295), allocate([$51,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        var $53=HEAP[$line];
        var $54=((($53))|0) > 0;
        if ($54) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $55
        var $56=HEAP[$line];
        var $57=_printf(((__str22672)&4294967295), allocate([$56,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 8; break;
      case 7: // $58
        var $59=_printf(((__str23673)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 8; break;
      case 8: // $60
        var $61=HEAP[$o];
        var $62=((_luaP_opnames+$61*4)&4294967295);
        var $63=HEAP[$62];
        var $64=_printf(((__str24674)&4294967295), allocate([$63,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        var $65=HEAP[$o];
        var $66=((_luaP_opmodes+$65)&4294967295);
        var $67=HEAP[$66];
        var $68=unSign(($67), 8, 0);
        var $69=($68) & 3;
        if ($69 == 0) {
          __label__ = 9; break;
        }
        else if ($69 == 1) {
          __label__ = 20; break;
        }
        else if ($69 == 2) {
          __label__ = 24; break;
        }
        else {
        __label__ = 28; break;
        }
        
      case 9: // $70
        var $71=HEAP[$a];
        var $72=_printf(((__str25675)&4294967295), allocate([$71,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        var $73=HEAP[$o];
        var $74=((_luaP_opmodes+$73)&4294967295);
        var $75=HEAP[$74];
        var $76=unSign(($75), 8, 0);
        var $77=((($76))|0) >> 4;
        var $78=($77) & 3;
        var $79=((($78))|0)!=0;
        if ($79) { __label__ = 10; break; } else { __label__ = 14; break; }
      case 10: // $80
        var $81=HEAP[$b];
        var $82=($81) & 256;
        var $83=((($82))|0)!=0;
        if ($83) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $84
        var $85=HEAP[$b];
        var $86=($85) & -257;
        var $87=((-1 - ($86))&4294967295);
        __lastLabel__ = 11; __label__ = 13; break;
      case 12: // $88
        var $89=HEAP[$b];
        __lastLabel__ = 12; __label__ = 13; break;
      case 13: // $90
        var $91=__lastLabel__ == 11 ? $87 : ($89);
        var $92=_printf(((__str26676)&4294967295), allocate([$91,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 14; break;
      case 14: // $93
        var $94=HEAP[$o];
        var $95=((_luaP_opmodes+$94)&4294967295);
        var $96=HEAP[$95];
        var $97=unSign(($96), 8, 0);
        var $98=((($97))|0) >> 2;
        var $99=($98) & 3;
        var $100=((($99))|0)!=0;
        if ($100) { __label__ = 15; break; } else { __label__ = 19; break; }
      case 15: // $101
        var $102=HEAP[$c];
        var $103=($102) & 256;
        var $104=((($103))|0)!=0;
        if ($104) { __label__ = 16; break; } else { __label__ = 17; break; }
      case 16: // $105
        var $106=HEAP[$c];
        var $107=($106) & -257;
        var $108=((-1 - ($107))&4294967295);
        __lastLabel__ = 16; __label__ = 18; break;
      case 17: // $109
        var $110=HEAP[$c];
        __lastLabel__ = 17; __label__ = 18; break;
      case 18: // $111
        var $112=__lastLabel__ == 16 ? $108 : ($110);
        var $113=_printf(((__str26676)&4294967295), allocate([$112,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 19; break;
      case 19: // $114
        __label__ = 28; break;
      case 20: // $115
        var $116=HEAP[$o];
        var $117=((_luaP_opmodes+$116)&4294967295);
        var $118=HEAP[$117];
        var $119=unSign(($118), 8, 0);
        var $120=((($119))|0) >> 4;
        var $121=($120) & 3;
        var $122=((($121))|0)==3;
        if ($122) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $123
        var $124=HEAP[$a];
        var $125=HEAP[$bx];
        var $126=((-1 - ($125))&4294967295);
        var $127=_printf(((__str27677)&4294967295), allocate([$124,0,0,0,$126,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK));
        __label__ = 23; break;
      case 22: // $128
        var $129=HEAP[$a];
        var $130=HEAP[$bx];
        var $131=_printf(((__str27677)&4294967295), allocate([$129,0,0,0,$130,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK));
        __label__ = 23; break;
      case 23: // $132
        __label__ = 28; break;
      case 24: // $133
        var $134=HEAP[$o];
        var $135=((($134))|0)==22;
        if ($135) { __label__ = 25; break; } else { __label__ = 26; break; }
      case 25: // $136
        var $137=HEAP[$sbx];
        var $138=_printf(((__str25675)&4294967295), allocate([$137,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 27; break;
      case 26: // $139
        var $140=HEAP[$a];
        var $141=HEAP[$sbx];
        var $142=_printf(((__str27677)&4294967295), allocate([$140,0,0,0,$141,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK));
        __label__ = 27; break;
      case 27: // $143
        __label__ = 28; break;
      case 28: // $144
        var $145=HEAP[$o];
        if ($145 == 1) {
          __label__ = 29; break;
        }
        else if ($145 == 4) {
          __label__ = 30; break;
        }
        else if ($145 == 8) {
          __label__ = 30; break;
        }
        else if ($145 == 5) {
          __label__ = 34; break;
        }
        else if ($145 == 7) {
          __label__ = 34; break;
        }
        else if ($145 == 6) {
          __label__ = 35; break;
        }
        else if ($145 == 11) {
          __label__ = 35; break;
        }
        else if ($145 == 9) {
          __label__ = 38; break;
        }
        else if ($145 == 12) {
          __label__ = 38; break;
        }
        else if ($145 == 13) {
          __label__ = 38; break;
        }
        else if ($145 == 14) {
          __label__ = 38; break;
        }
        else if ($145 == 15) {
          __label__ = 38; break;
        }
        else if ($145 == 17) {
          __label__ = 38; break;
        }
        else if ($145 == 23) {
          __label__ = 38; break;
        }
        else if ($145 == 24) {
          __label__ = 38; break;
        }
        else if ($145 == 25) {
          __label__ = 38; break;
        }
        else if ($145 == 22) {
          __label__ = 48; break;
        }
        else if ($145 == 31) {
          __label__ = 48; break;
        }
        else if ($145 == 32) {
          __label__ = 48; break;
        }
        else if ($145 == 36) {
          __label__ = 49; break;
        }
        else if ($145 == 34) {
          __label__ = 50; break;
        }
        else {
        __label__ = 54; break;
        }
        
      case 29: // $146
        var $147=_printf(((__str28678)&4294967295), allocate(1, "i32", ALLOC_STACK));
        var $148=HEAP[$1];
        var $149=HEAP[$bx];
        _PrintConstant($148, $149);
        __label__ = 55; break;
      case 30: // $150
        var $151=HEAP[$1];
        var $152=(($151+36)&4294967295);
        var $153=HEAP[$152];
        var $154=((($153))|0) > 0;
        if ($154) { __label__ = 31; break; } else { __label__ = 32; break; }
      case 31: // $155
        var $156=HEAP[$b];
        var $157=HEAP[$1];
        var $158=(($157+28)&4294967295);
        var $159=HEAP[$158];
        var $160=(($159+4*$156)&4294967295);
        var $161=HEAP[$160];
        var $162=(($161+16)&4294967295);
        var $163=$162;
        __lastLabel__ = 31; __label__ = 33; break;
      case 32: // $164
        __lastLabel__ = 32; __label__ = 33; break;
      case 33: // $165
        var $166=__lastLabel__ == 31 ? $163 : (((__str30680)&4294967295));
        var $167=_printf(((__str29679)&4294967295), allocate([$166,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 55; break;
      case 34: // $168
        var $169=HEAP[$bx];
        var $170=HEAP[$1];
        var $171=(($170+8)&4294967295);
        var $172=HEAP[$171];
        var $173=(($172+12*$169)&4294967295);
        var $174=(($173)&4294967295);
        var $175=$174;
        var $176=HEAP[$175];
        var $177=$176;
        var $178=(($177+16)&4294967295);
        var $179=$178;
        var $180=_printf(((__str29679)&4294967295), allocate([$179,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 55; break;
      case 35: // $181
        var $182=HEAP[$c];
        var $183=($182) & 256;
        var $184=((($183))|0)!=0;
        if ($184) { __label__ = 36; break; } else { __label__ = 37; break; }
      case 36: // $185
        var $186=_printf(((__str28678)&4294967295), allocate(1, "i32", ALLOC_STACK));
        var $187=HEAP[$1];
        var $188=HEAP[$c];
        var $189=($188) & -257;
        _PrintConstant($187, $189);
        __label__ = 37; break;
      case 37: // $190
        __label__ = 55; break;
      case 38: // $191
        var $192=HEAP[$b];
        var $193=($192) & 256;
        var $194=((($193))|0)!=0;
        if ($194) { __label__ = 40; break; } else { __label__ = 39; break; }
      case 39: // $195
        var $196=HEAP[$c];
        var $197=($196) & 256;
        var $198=((($197))|0)!=0;
        if ($198) { __label__ = 40; break; } else { __label__ = 47; break; }
      case 40: // $199
        var $200=_printf(((__str28678)&4294967295), allocate(1, "i32", ALLOC_STACK));
        var $201=HEAP[$b];
        var $202=($201) & 256;
        var $203=((($202))|0)!=0;
        if ($203) { __label__ = 41; break; } else { __label__ = 42; break; }
      case 41: // $204
        var $205=HEAP[$1];
        var $206=HEAP[$b];
        var $207=($206) & -257;
        _PrintConstant($205, $207);
        __label__ = 43; break;
      case 42: // $208
        var $209=_printf(((__str30680)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 43; break;
      case 43: // $210
        var $211=_printf(((__str31681)&4294967295), allocate(1, "i32", ALLOC_STACK));
        var $212=HEAP[$c];
        var $213=($212) & 256;
        var $214=((($213))|0)!=0;
        if ($214) { __label__ = 44; break; } else { __label__ = 45; break; }
      case 44: // $215
        var $216=HEAP[$1];
        var $217=HEAP[$c];
        var $218=($217) & -257;
        _PrintConstant($216, $218);
        __label__ = 46; break;
      case 45: // $219
        var $220=_printf(((__str30680)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 46; break;
      case 46: // $221
        __label__ = 47; break;
      case 47: // $222
        __label__ = 55; break;
      case 48: // $223
        var $224=HEAP[$sbx];
        var $225=HEAP[$pc];
        var $226=((($224) + ($225))&4294967295);
        var $227=((($226) + 2)&4294967295);
        var $228=_printf(((__str32682)&4294967295), allocate([$227,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 55; break;
      case 49: // $229
        var $230=HEAP[$bx];
        var $231=HEAP[$1];
        var $232=(($231+16)&4294967295);
        var $233=HEAP[$232];
        var $234=(($233+4*$230)&4294967295);
        var $235=HEAP[$234];
        var $236=$235;
        var $237=_printf(((__str33683)&4294967295), allocate([$236,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 55; break;
      case 50: // $238
        var $239=HEAP[$c];
        var $240=((($239))|0)==0;
        if ($240) { __label__ = 51; break; } else { __label__ = 52; break; }
      case 51: // $241
        var $242=HEAP[$pc];
        var $243=((($242) + 1)&4294967295);
        HEAP[$pc]=$243;
        var $244=HEAP[$code];
        var $245=(($244+4*$243)&4294967295);
        var $246=HEAP[$245];
        var $247=_printf(((__str34684)&4294967295), allocate([$246,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 53; break;
      case 52: // $248
        var $249=HEAP[$c];
        var $250=_printf(((__str34684)&4294967295), allocate([$249,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 53; break;
      case 53: // $251
        __label__ = 55; break;
      case 54: // $252
        __label__ = 55; break;
      case 55: // $253
        var $254=_printf(((__str6656)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 56; break;
      case 56: // $255
        var $256=HEAP[$pc];
        var $257=((($256) + 1)&4294967295);
        HEAP[$pc]=$257;
        __label__ = 1; break;
      case 57: // $258
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PrintConstants($f) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        var $n=__stackBase__+8;
        HEAP[$1]=$f;
        var $2=HEAP[$1];
        var $3=(($2+40)&4294967295);
        var $4=HEAP[$3];
        HEAP[$n]=$4;
        var $5=HEAP[$n];
        var $6=HEAP[$1];
        var $7=$6;
        var $8=_printf(((__str4654)&4294967295), allocate([$5,0,0,0,$7,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $9
        var $10=HEAP[$i];
        var $11=HEAP[$n];
        var $12=((($10))|0) < ((($11))|0);
        if ($12) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $13
        var $14=HEAP[$i];
        var $15=((($14) + 1)&4294967295);
        var $16=_printf(((__str5655)&4294967295), allocate([$15,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        var $17=HEAP[$1];
        var $18=HEAP[$i];
        _PrintConstant($17, $18);
        var $19=_printf(((__str6656)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $20
        var $21=HEAP[$i];
        var $22=((($21) + 1)&4294967295);
        HEAP[$i]=$22;
        __label__ = 1; break;
      case 4: // $23
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PrintLocals($f) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        var $n=__stackBase__+8;
        HEAP[$1]=$f;
        var $2=HEAP[$1];
        var $3=(($2+56)&4294967295);
        var $4=HEAP[$3];
        HEAP[$n]=$4;
        var $5=HEAP[$n];
        var $6=HEAP[$1];
        var $7=$6;
        var $8=_printf(((__str2652)&4294967295), allocate([$5,0,0,0,$7,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $9
        var $10=HEAP[$i];
        var $11=HEAP[$n];
        var $12=((($10))|0) < ((($11))|0);
        if ($12) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $13
        var $14=HEAP[$i];
        var $15=HEAP[$i];
        var $16=HEAP[$1];
        var $17=(($16+24)&4294967295);
        var $18=HEAP[$17];
        var $19=(($18+12*$15)&4294967295);
        var $20=(($19)&4294967295);
        var $21=HEAP[$20];
        var $22=(($21+16)&4294967295);
        var $23=$22;
        var $24=HEAP[$i];
        var $25=HEAP[$1];
        var $26=(($25+24)&4294967295);
        var $27=HEAP[$26];
        var $28=(($27+12*$24)&4294967295);
        var $29=(($28+4)&4294967295);
        var $30=HEAP[$29];
        var $31=((($30) + 1)&4294967295);
        var $32=HEAP[$i];
        var $33=HEAP[$1];
        var $34=(($33+24)&4294967295);
        var $35=HEAP[$34];
        var $36=(($35+12*$32)&4294967295);
        var $37=(($36+8)&4294967295);
        var $38=HEAP[$37];
        var $39=((($38) + 1)&4294967295);
        var $40=_printf(((__str3653)&4294967295), allocate([$14,0,0,0,$23,0,0,0,$31,0,0,0,$39,0,0,0], ["i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $41
        var $42=HEAP[$i];
        var $43=((($42) + 1)&4294967295);
        HEAP[$i]=$43;
        __label__ = 1; break;
      case 4: // $44
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PrintUpvalues($f) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        var $n=__stackBase__+8;
        HEAP[$1]=$f;
        var $2=HEAP[$1];
        var $3=(($2+36)&4294967295);
        var $4=HEAP[$3];
        HEAP[$n]=$4;
        var $5=HEAP[$n];
        var $6=HEAP[$1];
        var $7=$6;
        var $8=_printf(((__str650)&4294967295), allocate([$5,0,0,0,$7,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        var $9=HEAP[$1];
        var $10=(($9+28)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        __label__ = 6; break;
      case 2: // $14
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $15
        var $16=HEAP[$i];
        var $17=HEAP[$n];
        var $18=((($16))|0) < ((($17))|0);
        if ($18) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $19
        var $20=HEAP[$i];
        var $21=HEAP[$i];
        var $22=HEAP[$1];
        var $23=(($22+28)&4294967295);
        var $24=HEAP[$23];
        var $25=(($24+4*$21)&4294967295);
        var $26=HEAP[$25];
        var $27=(($26+16)&4294967295);
        var $28=$27;
        var $29=_printf(((__str1651)&4294967295), allocate([$20,0,0,0,$28,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 5; break;
      case 5: // $30
        var $31=HEAP[$i];
        var $32=((($31) + 1)&4294967295);
        HEAP[$i]=$32;
        __label__ = 3; break;
      case 6: // $33
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PrintConstant($f, $i) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $o=__stackBase__+8;
        HEAP[$1]=$f;
        HEAP[$2]=$i;
        var $3=HEAP[$2];
        var $4=HEAP[$1];
        var $5=(($4+8)&4294967295);
        var $6=HEAP[$5];
        var $7=(($6+12*$3)&4294967295);
        HEAP[$o]=$7;
        var $8=HEAP[$o];
        var $9=(($8+8)&4294967295);
        var $10=HEAP[$9];
        if ($10 == 0) {
          __label__ = 1; break;
        }
        else if ($10 == 1) {
          __label__ = 2; break;
        }
        else if ($10 == 3) {
          __label__ = 6; break;
        }
        else if ($10 == 4) {
          __label__ = 7; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $11
        var $12=_printf(((__str7657)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 9; break;
      case 2: // $13
        var $14=HEAP[$o];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=HEAP[$16];
        var $18=((($17))|0)!=0;
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $19
        __lastLabel__ = 3; __label__ = 5; break;
      case 4: // $20
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $21
        var $22=__lastLabel__ == 3 ? ((__str8658)&4294967295) : (((__str9659)&4294967295));
        var $23=_printf($22, allocate(1, "i32", ALLOC_STACK));
        __label__ = 9; break;
      case 6: // $24
        var $25=HEAP[$o];
        var $26=(($25)&4294967295);
        var $27=$26;
        var $28=HEAP[$27];
        var $29=_printf(((__str10660)&4294967295), allocate([$28,0,0,0,0,0,0,0], ["double",0,0,0,0,0,0,0], ALLOC_STACK));
        __label__ = 9; break;
      case 7: // $30
        var $31=HEAP[$o];
        var $32=(($31)&4294967295);
        var $33=$32;
        var $34=HEAP[$33];
        var $35=$34;
        _PrintString($35);
        __label__ = 9; break;
      case 8: // $36
        var $37=HEAP[$o];
        var $38=(($37+8)&4294967295);
        var $39=HEAP[$38];
        var $40=_printf(((__str11661)&4294967295), allocate([$39,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 9; break;
      case 9: // $41
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PrintString($ts) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $s=__stackBase__+4;
        var $i=__stackBase__+8;
        var $n=__stackBase__+12;
        var $c=__stackBase__+16;
        HEAP[$1]=$ts;
        var $2=HEAP[$1];
        var $3=(($2+16)&4294967295);
        var $4=$3;
        HEAP[$s]=$4;
        var $5=HEAP[$1];
        var $6=$5;
        var $7=(($6+12)&4294967295);
        var $8=HEAP[$7];
        HEAP[$n]=$8;
        var $9=_putchar(34);
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $10
        var $11=HEAP[$i];
        var $12=HEAP[$n];
        var $13=((($11))>>>0) < ((($12))>>>0);
        if ($13) { __label__ = 2; break; } else { __label__ = 18; break; }
      case 2: // $14
        var $15=HEAP[$i];
        var $16=HEAP[$s];
        var $17=(($16+$15)&4294967295);
        var $18=HEAP[$17];
        var $19=reSign(($18), 8, 0);
        HEAP[$c]=$19;
        var $20=HEAP[$c];
        if ($20 == 34) {
          __label__ = 3; break;
        }
        else if ($20 == 92) {
          __label__ = 4; break;
        }
        else if ($20 == 7) {
          __label__ = 5; break;
        }
        else if ($20 == 8) {
          __label__ = 6; break;
        }
        else if ($20 == 12) {
          __label__ = 7; break;
        }
        else if ($20 == 10) {
          __label__ = 8; break;
        }
        else if ($20 == 13) {
          __label__ = 9; break;
        }
        else if ($20 == 9) {
          __label__ = 10; break;
        }
        else if ($20 == 11) {
          __label__ = 11; break;
        }
        else {
        __label__ = 12; break;
        }
        
      case 3: // $21
        var $22=_printf(((__str12662)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 16; break;
      case 4: // $23
        var $24=_printf(((__str13663)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 16; break;
      case 5: // $25
        var $26=_printf(((__str14664)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 16; break;
      case 6: // $27
        var $28=_printf(((__str15665)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 16; break;
      case 7: // $29
        var $30=_printf(((__str16666)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 16; break;
      case 8: // $31
        var $32=_printf(((__str17667)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 16; break;
      case 9: // $33
        var $34=_printf(((__str18668)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 16; break;
      case 10: // $35
        var $36=_printf(((__str19669)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 16; break;
      case 11: // $37
        var $38=_printf(((__str20670)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 16; break;
      case 12: // $39
        var $40=HEAP[$c];
        var $41=((($40)) & 255);
        var $42=unSign(($41), 8, 0);
        var $43=___ctype_b_loc();
        var $44=HEAP[$43];
        var $45=(($44+2*$42)&4294967295);
        var $46=HEAP[$45];
        var $47=unSign(($46), 16, 0);
        var $48=($47) & 16384;
        var $49=((($48))|0)!=0;
        if ($49) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $50
        var $51=HEAP[$c];
        var $52=_putchar($51);
        __label__ = 15; break;
      case 14: // $53
        var $54=HEAP[$c];
        var $55=((($54)) & 255);
        var $56=unSign(($55), 8, 0);
        var $57=_printf(((__str21671)&4294967295), allocate([$56,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 15; break;
      case 15: // $58
        __label__ = 16; break;
      case 16: // $59
        __label__ = 17; break;
      case 17: // $60
        var $61=HEAP[$i];
        var $62=((($61) + 1)&4294967295);
        HEAP[$i]=$62;
        __label__ = 1; break;
      case 18: // $63
        var $64=_putchar(34);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _luaopen_lpeg($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _lua_pushcclosure($2, 56, 0);
    var $3=HEAP[$1];
    _lua_setfield($3, -10000, ((__str696)&4294967295));
    var $4=HEAP[$1];
    var $5=_luaL_newmetatable($4, ((__str1697)&4294967295));
    var $6=HEAP[$1];
    _lua_pushnumber($6, 100);
    var $7=HEAP[$1];
    _lua_setfield($7, -10000, ((__str2698)&4294967295));
    var $8=HEAP[$1];
    _luaL_register($8, 0, ((_metapattreg)&4294967295));
    var $9=HEAP[$1];
    _luaL_register($9, ((__str3699)&4294967295), ((_pattreg)&4294967295));
    var $10=HEAP[$1];
    _lua_pushlstring($10, ((__str4700)&4294967295), 7);
    var $11=HEAP[$1];
    _lua_pushvalue($11, -2);
    var $12=HEAP[$1];
    _lua_settable($12, -4);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _l_newpf($L, $f, $ud, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $n=__stackBase__+16;
        var $p=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$f;
        HEAP[$3]=$ud;
        HEAP[$4]=$l;
        var $5=HEAP[$4];
        var $6=((($5) + 4)&4294967295);
        var $7=((($6) - 1)&4294967295);
        var $8=Math.floor(((($7))>>>0)/4);
        var $9=((($8) + 1)&4294967295);
        var $10=((($9) + 1)&4294967295);
        HEAP[$n]=$10;
        var $11=HEAP[$1];
        var $12=HEAP[$n];
        var $13=_newpatt($11, $12);
        HEAP[$p]=$13;
        var $14=HEAP[$n];
        var $15=((($14))|0) > 255;
        if ($15) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $16
        var $17=HEAP[$1];
        var $18=_luaL_error($17, ((__str161)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $19
        var $20=HEAP[$p];
        var $21=(($20)&4294967295);
        var $22=$21;
        var $23=(($22)&4294967295);
        HEAP[$23]=17;
        var $24=HEAP[$n];
        var $25=((($24) - 2)&4294967295);
        var $26=((($25)) & 255);
        var $27=HEAP[$p];
        var $28=(($27)&4294967295);
        var $29=$28;
        var $30=(($29+1)&4294967295);
        HEAP[$30]=$26;
        var $31=HEAP[$p];
        var $32=(($31)&4294967295);
        var $33=$32;
        var $34=(($33+2)&4294967295);
        HEAP[$34]=0;
        var $35=HEAP[$2];
        var $36=HEAP[$p];
        var $37=(($36+4)&4294967295);
        var $38=$37;
        HEAP[$38]=$35;
        var $39=HEAP[$p];
        var $40=(($39+8)&4294967295);
        var $41=$40;
        var $42=(($41)&4294967295);
        var $43=HEAP[$3];
        var $44=HEAP[$4];
        _llvm_memcpy_p0i8_p0i8_i32($42, $43, $44, 1, 0);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _matchl($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 292; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 292);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $capture=__stackBase__+8;
        var $r=__stackBase__+264;
        var $l=__stackBase__+268;
        var $p=__stackBase__+272;
        var $s=__stackBase__+276;
        var $ptop=__stackBase__+280;
        var $ii=__stackBase__+284;
        var $i=__stackBase__+288;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_getpatt($3, 1, 0);
        HEAP[$p]=$4;
        var $5=HEAP[$2];
        var $6=_luaL_checklstring($5, 2, $l);
        HEAP[$s]=$6;
        var $7=HEAP[$2];
        var $8=_lua_gettop($7);
        HEAP[$ptop]=$8;
        var $9=HEAP[$2];
        var $10=_luaL_optinteger($9, 3, 1);
        HEAP[$ii]=$10;
        var $11=HEAP[$ii];
        var $12=((($11))|0) > 0;
        if ($12) { __label__ = 1; break; } else { __label__ = 5; break; }
      case 1: // $13
        var $14=HEAP[$ii];
        var $15=HEAP[$l];
        var $16=((($14))>>>0) <= ((($15))>>>0);
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $17
        var $18=HEAP[$ii];
        var $19=((($18) - 1)&4294967295);
        __lastLabel__ = 2; __label__ = 4; break;
      case 3: // $20
        var $21=HEAP[$l];
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $22
        var $23=__lastLabel__ == 2 ? $19 : ($21);
        __lastLabel__ = 4; __label__ = 9; break;
      case 5: // $24
        var $25=HEAP[$ii];
        var $26=((0 - ($25))&4294967295);
        var $27=HEAP[$l];
        var $28=((($26))>>>0) <= ((($27))>>>0);
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $29
        var $30=HEAP[$l];
        var $31=HEAP[$ii];
        var $32=((0 - ($31))&4294967295);
        var $33=((($30) - ($32))&4294967295);
        __lastLabel__ = 6; __label__ = 8; break;
      case 7: // $34
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $35
        var $36=__lastLabel__ == 6 ? $33 : (0);
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $37
        var $38=__lastLabel__ == 4 ? $23 : ($36);
        HEAP[$i]=$38;
        var $39=HEAP[$2];
        _lua_pushnil($39);
        var $40=HEAP[$2];
        var $41=(($capture)&4294967295);
        var $42=$41;
        _lua_pushlightuserdata($40, $42);
        var $43=HEAP[$2];
        _lua_getfenv($43, 1);
        var $44=HEAP[$2];
        var $45=HEAP[$s];
        var $46=HEAP[$s];
        var $47=HEAP[$i];
        var $48=(($46+$47)&4294967295);
        var $49=HEAP[$s];
        var $50=HEAP[$l];
        var $51=(($49+$50)&4294967295);
        var $52=HEAP[$p];
        var $53=(($capture)&4294967295);
        var $54=HEAP[$ptop];
        var $55=_match781($44, $45, $48, $51, $52, $53, $54);
        HEAP[$r]=$55;
        var $56=HEAP[$r];
        var $57=((($56))|0)==0;
        if ($57) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $58
        var $59=HEAP[$2];
        _lua_pushnil($59);
        HEAP[$1]=1;
        __label__ = 12; break;
      case 11: // $60
        var $61=HEAP[$2];
        var $62=HEAP[$s];
        var $63=HEAP[$r];
        var $64=HEAP[$ptop];
        var $65=_getcaptures($61, $62, $63, $64);
        HEAP[$1]=$65;
        __label__ = 12; break;
      case 12: // $66
        var $67=HEAP[$1];
        STACKTOP = __stackBase__;
        return $67;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _printpat_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $p=__stackBase__+4;
        var $n=__stackBase__+8;
        var $i=__stackBase__+12;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_getpatt($2, 1, 0);
        HEAP[$p]=$3;
        var $4=HEAP[$1];
        _lua_getfenv($4, 1);
        var $5=HEAP[$1];
        var $6=_ktablelen($5, -1);
        HEAP[$n]=$6;
        var $7=_printf(((__str69765)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$i]=1;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$i];
        var $10=HEAP[$n];
        var $11=((($9))|0) <= ((($10))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 7; break; }
      case 2: // $12
        var $13=HEAP[$i];
        var $14=_printf(((__str70766)&4294967295), allocate([$13,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        var $15=HEAP[$1];
        var $16=HEAP[$i];
        _lua_rawgeti($15, -1, $16);
        var $17=HEAP[$1];
        var $18=_lua_isstring($17, -1);
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $20
        var $21=HEAP[$1];
        var $22=_lua_tolstring($21, -1, 0);
        var $23=_printf(((__str71767)&4294967295), allocate([$22,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 5; break;
      case 4: // $24
        var $25=HEAP[$1];
        var $26=HEAP[$1];
        var $27=_lua_type($26, -1);
        var $28=_lua_typename($25, $27);
        var $29=_printf(((__str71767)&4294967295), allocate([$28,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 5; break;
      case 5: // $30
        var $31=HEAP[$1];
        _lua_settop($31, -2);
        __label__ = 6; break;
      case 6: // $32
        var $33=HEAP[$i];
        var $34=((($33) + 1)&4294967295);
        HEAP[$i]=$34;
        __label__ = 1; break;
      case 7: // $35
        var $36=_printf(((__str72768)&4294967295), allocate(1, "i32", ALLOC_STACK));
        var $37=HEAP[$p];
        _printpatt($37);
        STACKTOP = __stackBase__;
        return 0;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _locale_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_type($2, 1);
        var $4=((($3))|0) <= 0;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$1];
        _lua_settop($6, 0);
        var $7=HEAP[$1];
        _lua_createtable($7, 0, 12);
        __label__ = 3; break;
      case 2: // $8
        var $9=HEAP[$1];
        _luaL_checktype($9, 1, 5);
        var $10=HEAP[$1];
        _lua_settop($10, 1);
        __label__ = 3; break;
      case 3: // $11
        var $12=HEAP[$1];
        _createcat($12, ((__str59755)&4294967295), 58);
        var $13=HEAP[$1];
        _createcat($13, ((__str60756)&4294967295), 60);
        var $14=HEAP[$1];
        _createcat($14, ((__str61757)&4294967295), 62);
        var $15=HEAP[$1];
        _createcat($15, ((__str62758)&4294967295), 64);
        var $16=HEAP[$1];
        _createcat($16, ((__str63759)&4294967295), 66);
        var $17=HEAP[$1];
        _createcat($17, ((__str64760)&4294967295), 68);
        var $18=HEAP[$1];
        _createcat($18, ((__str6702)&4294967295), 70);
        var $19=HEAP[$1];
        _createcat($19, ((__str65761)&4294967295), 72);
        var $20=HEAP[$1];
        _createcat($20, ((__str66762)&4294967295), 74);
        var $21=HEAP[$1];
        _createcat($21, ((__str67763)&4294967295), 76);
        var $22=HEAP[$1];
        _createcat($22, ((__str68764)&4294967295), 78);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setmax($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_luaL_optinteger($2, 1, -1);
    var $4=HEAP[$1];
    _lua_settop($4, 1);
    var $5=HEAP[$1];
    _lua_setfield($5, -10000, ((__str2698)&4294967295));
    STACKTOP = __stackBase__;
    return 0;
  }
  

  function _pattbehind($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 60);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $l1=__stackBase__+4;
        var $st1=__stackBase__+8;
        var $p1=__stackBase__+44;
        var $n=__stackBase__+48;
        var $p=__stackBase__+52;
        var $p2=__stackBase__+56;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_getpatt($2, 1, $l1);
        HEAP[$p1]=$3;
        var $4=HEAP[$1];
        var $5=_luaL_optinteger($4, 2, 1);
        HEAP[$n]=$5;
        var $6=HEAP[$n];
        var $7=((($6))|0) <= 255;
        if ($7) { __lastLabel__ = 0; __label__ = 2; break; } else { __lastLabel__ = 0; __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$1];
        var $10=_luaL_argerror($9, 2, ((__str57753)&4294967295));
        var $11=((($10))|0)!=0;
        __lastLabel__ = 1; __label__ = 2; break;
      case 2: // $12
        var $13=__lastLabel__ == 0 ? 1 : ($11);
        var $14=unSign(($13), 1, 0);
        var $15=HEAP[$p1];
        var $16=_nocalls($15);
        var $17=((($16))|0)!=0;
        if ($17) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $18
        var $19=HEAP[$1];
        var $20=_luaL_error($19, ((__str58754)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 4; break;
      case 4: // $21
        var $22=HEAP[$p1];
        var $23=$22;
        var $24=(($23)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=((($26))|0)==15;
        if ($27) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $28
        var $29=HEAP[$p1];
        var $30=$29;
        var $31=(($30)&4294967295);
        var $32=HEAP[$31];
        var $33=unSign(($32), 8, 0);
        var $34=((($33))|0)==6;
        if ($34) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $35
        var $36=HEAP[$1];
        _lua_pushvalue($36, 1);
        __label__ = 12; break;
      case 7: // $37
        var $38=HEAP[$n];
        var $39=((($38))|0)==1;
        if ($39) { __label__ = 8; break; } else { __label__ = 10; break; }
      case 8: // $40
        var $41=HEAP[$p1];
        var $42=_tocharset($41, $st1);
        var $43=((($42))|0)==1;
        if ($43) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $44
        var $45=HEAP[$1];
        var $46=HEAP[$l1];
        var $47=((1 + ($46))&4294967295);
        var $48=_newpatt($45, $47);
        HEAP[$p]=$48;
        var $49=HEAP[$p];
        _setinstaux($49, 4, 0, 1);
        var $50=HEAP[$p];
        var $51=(($50+4)&4294967295);
        HEAP[$p]=$51;
        var $52=HEAP[$p];
        var $53=$52;
        var $54=HEAP[$p1];
        var $55=$54;
        var $56=HEAP[$l1];
        var $57=((($56) * 4)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($53, $55, $57, 1, 0);
        __label__ = 11; break;
      case 10: // $58
        var $59=HEAP[$1];
        var $60=HEAP[$l1];
        var $61=((2 + ($60))&4294967295);
        var $62=((($61) + 2)&4294967295);
        var $63=_newpatt($59, $62);
        HEAP[$p2]=$63;
        var $64=HEAP[$p2];
        var $65=(($64+4)&4294967295);
        HEAP[$p2]=$65;
        var $66=HEAP[$l1];
        var $67=((2 + ($66))&4294967295);
        var $68=((($67) + 1)&4294967295);
        _setinstaux($64, 7, $68, 0);
        var $69=HEAP[$p2];
        var $70=(($69+4)&4294967295);
        HEAP[$p2]=$70;
        var $71=HEAP[$n];
        _setinstaux($69, 4, 0, $71);
        var $72=HEAP[$1];
        var $73=HEAP[$p2];
        var $74=_addpatt($72, $73, 1);
        var $75=HEAP[$p2];
        var $76=(($75+4*$74)&4294967295);
        HEAP[$p2]=$76;
        var $77=HEAP[$p2];
        var $78=(($77+4)&4294967295);
        HEAP[$p2]=$78;
        _setinstaux($77, 13, 2, 0);
        var $79=HEAP[$p2];
        _setinstaux($79, 15, 0, 0);
        __label__ = 11; break;
      case 11: // $80
        __label__ = 12; break;
      case 12: // $81
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _capture_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_capture_aux($2, 5, 0);
    STACKTOP = __stackBase__;
    return $3;
  }
  

  function _fold_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _luaL_checktype($2, 2, 6);
    var $3=HEAP[$1];
    var $4=_capture_aux($3, 11, 2);
    STACKTOP = __stackBase__;
    return $4;
  }
  

  function _capconst_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        var $j=__stackBase__+8;
        var $n=__stackBase__+12;
        var $p=__stackBase__+16;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_gettop($2);
        HEAP[$n]=$3;
        var $4=HEAP[$1];
        var $5=HEAP[$n];
        var $6=((($5))|0) > 1;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$n];
        var $9=((($8) + 2)&4294967295);
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $10
        var $11=HEAP[$n];
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $12
        var $13=__lastLabel__ == 1 ? $9 : ($11);
        var $14=_newpatt($4, $13);
        HEAP[$p]=$14;
        var $15=HEAP[$1];
        var $16=HEAP[$n];
        _lua_createtable($15, $16, 0);
        var $17=HEAP[$n];
        var $18=((($17))|0) > 1;
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $19
        var $20=HEAP[$p];
        var $21=(($20+4)&4294967295);
        HEAP[$p]=$21;
        _setinstaux($20, 21, 0, 13);
        __label__ = 5; break;
      case 5: // $22
        HEAP[$j]=1;
        HEAP[$i]=1;
        __label__ = 6; break;
      case 6: // $23
        var $24=HEAP[$i];
        var $25=HEAP[$n];
        var $26=((($24))|0) <= ((($25))|0);
        if ($26) { __label__ = 7; break; } else { __label__ = 12; break; }
      case 7: // $27
        var $28=HEAP[$1];
        var $29=HEAP[$i];
        var $30=_lua_type($28, $29);
        var $31=((($30))|0)==0;
        if ($31) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $32
        var $33=HEAP[$p];
        var $34=(($33+4)&4294967295);
        HEAP[$p]=$34;
        _setinstaux($33, 20, 0, 2);
        __label__ = 10; break;
      case 9: // $35
        var $36=HEAP[$p];
        var $37=(($36+4)&4294967295);
        HEAP[$p]=$37;
        var $38=HEAP[$j];
        _setinstaux($36, 20, $38, 2);
        var $39=HEAP[$1];
        var $40=HEAP[$i];
        _lua_pushvalue($39, $40);
        var $41=HEAP[$1];
        var $42=HEAP[$j];
        var $43=((($42) + 1)&4294967295);
        HEAP[$j]=$43;
        _lua_rawseti($41, -2, $42);
        __label__ = 10; break;
      case 10: // $44
        __label__ = 11; break;
      case 11: // $45
        var $46=HEAP[$i];
        var $47=((($46) + 1)&4294967295);
        HEAP[$i]=$47;
        __label__ = 6; break;
      case 12: // $48
        var $49=HEAP[$n];
        var $50=((($49))|0) > 1;
        if ($50) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $51
        var $52=HEAP[$p];
        var $53=(($52+4)&4294967295);
        HEAP[$p]=$53;
        _setinstaux($52, 22, 0, 0);
        __label__ = 14; break;
      case 14: // $54
        var $55=HEAP[$1];
        var $56=_lua_setfenv($55, -2);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _group_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_lua_type($3, 2);
        var $5=((($4))|0) <= 0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$2];
        var $8=_capture_aux($7, 13, 0);
        HEAP[$1]=$8;
        __label__ = 3; break;
      case 2: // $9
        var $10=HEAP[$2];
        var $11=_luaL_checklstring($10, 2, 0);
        var $12=HEAP[$2];
        var $13=_capture_aux($12, 13, 2);
        HEAP[$1]=$13;
        __label__ = 3; break;
      case 3: // $14
        var $15=HEAP[$1];
        STACKTOP = __stackBase__;
        return $15;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _position_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $p=__stackBase__+4;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_newpatt($2, 1);
    HEAP[$p]=$3;
    var $4=HEAP[$p];
    _setinstaux($4, 19, 0, 1);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _backref_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $p=__stackBase__+4;
    var $n=__stackBase__+8;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_newpatt($2, 1);
    HEAP[$p]=$3;
    var $4=HEAP[$1];
    var $5=_getlabel($4, 1);
    HEAP[$n]=$5;
    var $6=HEAP[$p];
    var $7=HEAP[$n];
    _setinstaux($6, 20, $7, 3);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _argcap_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $n=__stackBase__+4;
        var $p=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checkinteger($2, 1);
        HEAP[$n]=$3;
        var $4=HEAP[$1];
        var $5=_newpatt($4, 1);
        HEAP[$p]=$5;
        var $6=HEAP[$n];
        var $7=0 < ((($6))|0);
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$n];
        var $10=((($9))|0) <= 32767;
        if ($10) { __lastLabel__ = 1; __label__ = 3; break; } else { __lastLabel__ = 1; __label__ = 2; break; }
      case 2: // $11
        var $12=HEAP[$1];
        var $13=_luaL_argerror($12, 1, ((__str56752)&4294967295));
        var $14=((($13))|0)!=0;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $15
        var $16=__lastLabel__ == 1 ? 1 : ($14);
        var $17=unSign(($16), 1, 0);
        var $18=HEAP[$p];
        var $19=HEAP[$n];
        _setinstaux($18, 19, $19, 4);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _matchtime_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $l1=__stackBase__+4;
    var $op=__stackBase__+8;
    var $p=__stackBase__+12;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_getpattl($2, 1);
    HEAP[$l1]=$3;
    var $4=HEAP[$1];
    var $5=HEAP[$l1];
    var $6=((1 + ($5))&4294967295);
    var $7=((($6) + 1)&4294967295);
    var $8=_newpatt($4, $7);
    HEAP[$op]=$8;
    var $9=HEAP[$op];
    HEAP[$p]=$9;
    var $10=HEAP[$1];
    _luaL_checktype($10, 2, 6);
    var $11=HEAP[$p];
    var $12=(($11+4)&4294967295);
    HEAP[$p]=$12;
    var $13=HEAP[$1];
    var $14=_value2fenv($13, 2);
    _setinstaux($11, 21, $14, 12);
    var $15=HEAP[$1];
    var $16=HEAP[$p];
    var $17=_addpatt($15, $16, 1);
    var $18=HEAP[$p];
    var $19=(($18+4*$17)&4294967295);
    HEAP[$p]=$19;
    var $20=HEAP[$p];
    _setinstaux($20, 23, 0, 0);
    var $21=HEAP[$op];
    _optimizecaptures($21);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _capsubst_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_capture_aux($2, 10, 0);
    STACKTOP = __stackBase__;
    return $3;
  }
  

  function _tcapture_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    var $3=_capture_aux($2, 6, 0);
    STACKTOP = __stackBase__;
    return $3;
  }
  

  function _pattern_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _lua_settop($2, 1);
    var $3=HEAP[$1];
    var $4=_getpatt($3, 1, 0);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _range_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $arg=__stackBase__+4;
        var $top=__stackBase__+8;
        var $p=__stackBase__+12;
        var $c=__stackBase__+16;
        var $l=__stackBase__+20;
        var $r=__stackBase__+24;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_gettop($2);
        HEAP[$top]=$3;
        var $4=HEAP[$1];
        var $5=_newcharset($4);
        HEAP[$p]=$5;
        HEAP[$arg]=1;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$arg];
        var $8=HEAP[$top];
        var $9=((($7))|0) <= ((($8))|0);
        if ($9) { __label__ = 2; break; } else { __label__ = 10; break; }
      case 2: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$arg];
        var $13=_luaL_checklstring($11, $12, $l);
        HEAP[$r]=$13;
        var $14=HEAP[$l];
        var $15=((($14))|0)==2;
        if ($15) { __lastLabel__ = 2; __label__ = 4; break; } else { __lastLabel__ = 2; __label__ = 3; break; }
      case 3: // $16
        var $17=HEAP[$1];
        var $18=HEAP[$arg];
        var $19=_luaL_argerror($17, $18, ((__str53749)&4294967295));
        var $20=((($19))|0)!=0;
        __lastLabel__ = 3; __label__ = 4; break;
      case 4: // $21
        var $22=__lastLabel__ == 2 ? 1 : ($20);
        var $23=unSign(($22), 1, 0);
        var $24=HEAP[$r];
        var $25=(($24)&4294967295);
        var $26=HEAP[$25];
        var $27=unSign(($26), 8, 0);
        HEAP[$c]=$27;
        __label__ = 5; break;
      case 5: // $28
        var $29=HEAP[$c];
        var $30=HEAP[$r];
        var $31=(($30+1)&4294967295);
        var $32=HEAP[$31];
        var $33=unSign(($32), 8, 0);
        var $34=((($29))|0) <= ((($33))|0);
        if ($34) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $35
        var $36=HEAP[$c];
        var $37=($36) & 7;
        var $38=1 << ($37);
        var $39=HEAP[$c];
        var $40=((($39))|0) >> 3;
        var $41=HEAP[$p];
        var $42=(($41+4)&4294967295);
        var $43=$42;
        var $44=(($43+$40)&4294967295);
        var $45=HEAP[$44];
        var $46=unSign(($45), 8, 0);
        var $47=($46) | ($38);
        var $48=((($47)) & 255);
        HEAP[$44]=$48;
        __label__ = 7; break;
      case 7: // $49
        var $50=HEAP[$c];
        var $51=((($50) + 1)&4294967295);
        HEAP[$c]=$51;
        __label__ = 5; break;
      case 8: // $52
        __label__ = 9; break;
      case 9: // $53
        var $54=HEAP[$arg];
        var $55=((($54) + 1)&4294967295);
        HEAP[$arg]=$55;
        __label__ = 1; break;
      case 10: // $56
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _set_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l=__stackBase__+4;
        var $s=__stackBase__+8;
        var $p=__stackBase__+12;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_luaL_checklstring($2, 1, $l);
        HEAP[$s]=$3;
        var $4=HEAP[$l];
        var $5=((($4))|0)==1;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        var $7=HEAP[$1];
        var $8=_getpatt($7, 1, 0);
        __label__ = 6; break;
      case 2: // $9
        var $10=HEAP[$1];
        var $11=_newcharset($10);
        HEAP[$p]=$11;
        __label__ = 3; break;
      case 3: // $12
        var $13=HEAP[$l];
        var $14=((($13) + -1)&4294967295);
        HEAP[$l]=$14;
        var $15=((($13))|0)!=0;
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $16
        var $17=HEAP[$s];
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=($19) & 7;
        var $21=1 << ($20);
        var $22=HEAP[$s];
        var $23=HEAP[$22];
        var $24=unSign(($23), 8, 0);
        var $25=((($24))|0) >> 3;
        var $26=HEAP[$p];
        var $27=(($26+4)&4294967295);
        var $28=$27;
        var $29=(($28+$25)&4294967295);
        var $30=HEAP[$29];
        var $31=unSign(($30), 8, 0);
        var $32=($31) | ($21);
        var $33=((($32)) & 255);
        HEAP[$29]=$33;
        var $34=HEAP[$s];
        var $35=(($34+1)&4294967295);
        HEAP[$s]=$35;
        __label__ = 3; break;
      case 5: // $36
        __label__ = 6; break;
      case 6: // $37
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _nter_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // $0
        var $1=__stackBase__;
        var $p=__stackBase__+4;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_lua_type($2, 1);
        var $4=((($3))|0) <= 0;
        if ($4) { __lastLabel__ = 0; __label__ = 1; break; } else { __lastLabel__ = 0; __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$1];
        var $7=_luaL_argerror($6, 1, ((__str28724)&4294967295));
        var $8=((($7))|0)!=0;
        __lastLabel__ = 1; __label__ = 2; break;
      case 2: // $9
        var $10=__lastLabel__ == 0 ? 1 : ($8);
        var $11=unSign(($10), 1, 0);
        var $12=HEAP[$1];
        var $13=_newpatt($12, 1);
        HEAP[$p]=$13;
        var $14=HEAP[$p];
        var $15=HEAP[$1];
        var $16=_value2fenv($15, 1);
        _setinstaux($14, 10, $16, 0);
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _type_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_testpattern($2, 1);
        var $4=((($3))|0)!=0;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$1];
        _lua_pushlstring($6, ((__str27723)&4294967295), 7);
        __label__ = 3; break;
      case 2: // $7
        var $8=HEAP[$1];
        _lua_pushnil($8);
        __label__ = 3; break;
      case 3: // $9
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _version_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$L;
    var $2=HEAP[$1];
    _lua_pushstring($2, ((__str26722)&4294967295));
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _testpattern($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=_lua_touserdata($4, $5);
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 6; break; }
      case 1: // $8
        var $9=HEAP[$2];
        var $10=HEAP[$3];
        var $11=_lua_getmetatable($9, $10);
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $13
        var $14=HEAP[$2];
        _lua_getfield($14, -10000, ((__str1697)&4294967295));
        var $15=HEAP[$2];
        var $16=_lua_rawequal($15, -1, -2);
        var $17=((($16))|0)!=0;
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $18
        var $19=HEAP[$2];
        _lua_settop($19, -3);
        HEAP[$1]=1;
        __label__ = 7; break;
      case 4: // $20
        __label__ = 5; break;
      case 5: // $21
        __label__ = 6; break;
      case 6: // $22
        HEAP[$1]=0;
        __label__ = 7; break;
      case 7: // $23
        var $24=HEAP[$1];
        STACKTOP = __stackBase__;
        return $24;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newpatt($L, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $p=__stackBase__+8;
        HEAP[$1]=$L;
        HEAP[$2]=$n;
        var $3=HEAP[$2];
        var $4=((($3))>>>0) >= 32756;
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $5
        var $6=HEAP[$1];
        var $7=_luaL_error($6, ((__str31727)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$2];
        var $11=((($10) + 1)&4294967295);
        var $12=((($11) * 4)&4294967295);
        var $13=_lua_newuserdata($9, $12);
        var $14=$13;
        HEAP[$p]=$14;
        var $15=HEAP[$1];
        _lua_getfield($15, -10000, ((__str1697)&4294967295));
        var $16=HEAP[$1];
        var $17=_lua_setmetatable($16, -2);
        var $18=HEAP[$p];
        var $19=HEAP[$2];
        var $20=(($18+4*$19)&4294967295);
        _setinstaux($20, 6, 0, 0);
        var $21=HEAP[$p];
        STACKTOP = __stackBase__;
        return $21;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setinstaux($i, $op, $offset, $aux) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$1]=$i;
        HEAP[$2]=$op;
        HEAP[$3]=$offset;
        HEAP[$4]=$aux;
        var $5=HEAP[$4];
        var $6=((($5))|0) <= 255;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        __label__ = 3; break;
      case 2: // $8
        ___assert_fail(((__str29725)&4294967295), ((__str30726)&4294967295), 1019, ((___PRETTY_FUNCTION___setinstaux)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 3; break;
      case 3: // $10
        var $11=HEAP[$2];
        var $12=((($11)) & 255);
        var $13=HEAP[$1];
        var $14=$13;
        var $15=(($14)&4294967295);
        HEAP[$15]=$12;
        var $16=HEAP[$3];
        var $17=((($16)) & 65535);
        var $18=HEAP[$1];
        var $19=$18;
        var $20=(($19+2)&4294967295);
        HEAP[$20]=$17;
        var $21=HEAP[$4];
        var $22=((($21)) & 255);
        var $23=HEAP[$1];
        var $24=$23;
        var $25=(($24+1)&4294967295);
        HEAP[$25]=$22;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _value2fenv($L, $vidx) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$L;
    HEAP[$2]=$vidx;
    var $3=HEAP[$1];
    _lua_createtable($3, 1, 0);
    var $4=HEAP[$1];
    var $5=HEAP[$2];
    _lua_pushvalue($4, $5);
    var $6=HEAP[$1];
    _lua_rawseti($6, -2, 1);
    var $7=HEAP[$1];
    var $8=_lua_setfenv($7, -2);
    STACKTOP = __stackBase__;
    return 1;
  }
  

  function _getpatt($L, $idx, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $p=__stackBase__+12;
        var $i=__stackBase__+16;
        var $len=__stackBase__+20;
        var $s=__stackBase__+24;
        var $n=__stackBase__+28;
        var $offset=__stackBase__+32;
        HEAP[$1]=$L;
        HEAP[$2]=$idx;
        HEAP[$3]=$size;
        var $4=HEAP[$1];
        var $5=HEAP[$2];
        var $6=_lua_type($4, $5);
        if ($6 == 4) {
          __label__ = 1; break;
        }
        else if ($6 == 3) {
          __label__ = 6; break;
        }
        else if ($6 == 1) {
          __label__ = 16; break;
        }
        else if ($6 == 5) {
          __label__ = 20; break;
        }
        else if ($6 == 6) {
          __label__ = 21; break;
        }
        else {
        __label__ = 22; break;
        }
        
      case 1: // $7
        var $8=HEAP[$1];
        var $9=HEAP[$2];
        var $10=_lua_tolstring($8, $9, $len);
        HEAP[$s]=$10;
        var $11=HEAP[$1];
        var $12=HEAP[$len];
        var $13=_newpatt($11, $12);
        HEAP[$p]=$13;
        HEAP[$i]=0;
        __label__ = 2; break;
      case 2: // $14
        var $15=HEAP[$i];
        var $16=HEAP[$len];
        var $17=((($15))>>>0) < ((($16))>>>0);
        if ($17) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $18
        var $19=HEAP[$p];
        var $20=HEAP[$i];
        var $21=(($19+4*$20)&4294967295);
        var $22=HEAP[$i];
        var $23=HEAP[$s];
        var $24=(($23+$22)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        _setinstaux($21, 1, 0, $26);
        __label__ = 4; break;
      case 4: // $27
        var $28=HEAP[$i];
        var $29=((($28) + 1)&4294967295);
        HEAP[$i]=$29;
        __label__ = 2; break;
      case 5: // $30
        var $31=HEAP[$1];
        var $32=HEAP[$2];
        _lua_replace($31, $32);
        __label__ = 23; break;
      case 6: // $33
        var $34=HEAP[$1];
        var $35=HEAP[$2];
        var $36=_lua_tointeger($34, $35);
        HEAP[$n]=$36;
        var $37=HEAP[$n];
        var $38=((($37))|0)==0;
        if ($38) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $39
        var $40=HEAP[$1];
        var $41=_newpatt($40, 0);
        HEAP[$p]=$41;
        __label__ = 15; break;
      case 8: // $42
        var $43=HEAP[$n];
        var $44=((($43))|0) > 0;
        if ($44) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $45
        var $46=HEAP[$1];
        var $47=HEAP[$n];
        var $48=_any($46, $47, 0, 0);
        HEAP[$p]=$48;
        __label__ = 14; break;
      case 10: // $49
        var $50=HEAP[$n];
        var $51=((0 - ($50))&4294967295);
        var $52=((($51))|0) <= 255;
        if ($52) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $53
        var $54=HEAP[$1];
        var $55=_newpatt($54, 2);
        HEAP[$p]=$55;
        var $56=HEAP[$p];
        var $57=HEAP[$n];
        var $58=((0 - ($57))&4294967295);
        _setinstaux($56, 0, 2, $58);
        var $59=HEAP[$p];
        var $60=(($59+4)&4294967295);
        _setinstaux($60, 15, 0, 0);
        __label__ = 13; break;
      case 12: // $61
        HEAP[$offset]=2;
        var $62=HEAP[$1];
        var $63=HEAP[$n];
        var $64=((0 - ($63))&4294967295);
        var $65=((($64) - 255)&4294967295);
        var $66=_any($62, $65, 3, $offset);
        HEAP[$p]=$66;
        var $67=HEAP[$p];
        var $68=HEAP[$offset];
        var $69=((($68) + 1)&4294967295);
        _setinstaux($67, 0, $69, 255);
        var $70=HEAP[$p];
        var $71=(($70+4)&4294967295);
        var $72=HEAP[$offset];
        _setinstaux($71, 7, $72, 255);
        var $73=HEAP[$p];
        var $74=HEAP[$offset];
        var $75=(($73+4*$74)&4294967295);
        _setinstaux($75, 14, 0, 0);
        __label__ = 13; break;
      case 13: // $76
        __label__ = 14; break;
      case 14: // $77
        __label__ = 15; break;
      case 15: // $78
        var $79=HEAP[$1];
        var $80=HEAP[$2];
        _lua_replace($79, $80);
        __label__ = 23; break;
      case 16: // $81
        var $82=HEAP[$1];
        var $83=HEAP[$2];
        var $84=_lua_toboolean($82, $83);
        var $85=((($84))|0)!=0;
        if ($85) { __label__ = 17; break; } else { __label__ = 18; break; }
      case 17: // $86
        var $87=HEAP[$1];
        var $88=_newpatt($87, 0);
        HEAP[$p]=$88;
        __label__ = 19; break;
      case 18: // $89
        var $90=HEAP[$1];
        var $91=_newpatt($90, 1);
        HEAP[$p]=$91;
        var $92=HEAP[$p];
        _setinstaux($92, 15, 0, 0);
        __label__ = 19; break;
      case 19: // $93
        var $94=HEAP[$1];
        var $95=HEAP[$2];
        _lua_replace($94, $95);
        __label__ = 23; break;
      case 20: // $96
        var $97=HEAP[$1];
        var $98=HEAP[$2];
        var $99=_fix_l($97, $98);
        HEAP[$p]=$99;
        __label__ = 23; break;
      case 21: // $100
        var $101=HEAP[$1];
        var $102=_newpatt($101, 2);
        HEAP[$p]=$102;
        var $103=HEAP[$p];
        var $104=HEAP[$1];
        var $105=HEAP[$2];
        var $106=_value2fenv($104, $105);
        _setinstaux($103, 21, $106, 12);
        var $107=HEAP[$p];
        var $108=(($107+4)&4294967295);
        _setinstaux($108, 23, 0, 0);
        var $109=HEAP[$1];
        var $110=HEAP[$2];
        _lua_replace($109, $110);
        __label__ = 23; break;
      case 22: // $111
        var $112=HEAP[$1];
        var $113=HEAP[$2];
        var $114=_luaL_checkudata($112, $113, ((__str1697)&4294967295));
        var $115=$114;
        HEAP[$p]=$115;
        __label__ = 23; break;
      case 23: // $116
        var $117=HEAP[$3];
        var $118=((($117))|0)!=0;
        if ($118) { __label__ = 24; break; } else { __label__ = 25; break; }
      case 24: // $119
        var $120=HEAP[$1];
        var $121=HEAP[$2];
        var $122=_lua_objlen($120, $121);
        var $123=Math.floor(((($122))>>>0)/4);
        var $124=((($123) - 1)&4294967295);
        var $125=HEAP[$3];
        HEAP[$125]=$124;
        __label__ = 25; break;
      case 25: // $126
        var $127=HEAP[$p];
        STACKTOP = __stackBase__;
        return $127;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newcharset($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $p=__stackBase__+4;
        var $i=__stackBase__+8;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_newpatt($2, 9);
        HEAP[$p]=$3;
        var $4=HEAP[$p];
        var $5=(($4)&4294967295);
        var $6=$5;
        var $7=(($6)&4294967295);
        HEAP[$7]=2;
        var $8=HEAP[$p];
        var $9=(($8)&4294967295);
        var $10=$9;
        var $11=(($10+2)&4294967295);
        HEAP[$11]=0;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $12
        var $13=HEAP[$i];
        var $14=((($13))|0) < 32;
        if ($14) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $15
        var $16=HEAP[$i];
        var $17=HEAP[$p];
        var $18=(($17+4)&4294967295);
        var $19=$18;
        var $20=(($19+$16)&4294967295);
        HEAP[$20]=0;
        __label__ = 3; break;
      case 3: // $21
        var $22=HEAP[$i];
        var $23=((($22) + 1)&4294967295);
        HEAP[$i]=$23;
        __label__ = 1; break;
      case 4: // $24
        var $25=HEAP[$p];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _any($L, $n, $extra, $offsetp) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $offset=__stackBase__+16;
        var $p=__stackBase__+20;
        var $p1=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$n;
        HEAP[$3]=$extra;
        HEAP[$4]=$offsetp;
        var $5=HEAP[$4];
        var $6=((($5))|0)!=0;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$4];
        var $9=HEAP[$8];
        __lastLabel__ = 1; __label__ = 3; break;
      case 2: // $10
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $11
        var $12=__lastLabel__ == 1 ? $9 : (0);
        HEAP[$offset]=$12;
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=((($14) - 1)&4294967295);
        var $16=((((($15))|0)/255)|0);
        var $17=HEAP[$3];
        var $18=((($16) + ($17))&4294967295);
        var $19=((($18) + 1)&4294967295);
        var $20=_newpatt($13, $19);
        HEAP[$p]=$20;
        var $21=HEAP[$p];
        var $22=HEAP[$offset];
        var $23=(($21+4*$22)&4294967295);
        HEAP[$p1]=$23;
        __label__ = 4; break;
      case 4: // $24
        var $25=HEAP[$2];
        var $26=((($25))|0) > 255;
        if ($26) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $27
        var $28=HEAP[$p1];
        var $29=(($28+4)&4294967295);
        HEAP[$p1]=$29;
        _setinstaux($28, 0, 0, 255);
        __label__ = 6; break;
      case 6: // $30
        var $31=HEAP[$2];
        var $32=((($31) - 255)&4294967295);
        HEAP[$2]=$32;
        __label__ = 4; break;
      case 7: // $33
        var $34=HEAP[$p1];
        var $35=(($34+4)&4294967295);
        HEAP[$p1]=$35;
        var $36=HEAP[$2];
        _setinstaux($34, 0, 0, $36);
        var $37=HEAP[$4];
        var $38=((($37))|0)!=0;
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $39
        var $40=HEAP[$p1];
        var $41=HEAP[$p];
        var $42=($40);
        var $43=($41);
        var $44=((($42) - ($43))&4294967295);
        var $45=((((($44))|0)/4)|0);
        var $46=HEAP[$4];
        HEAP[$46]=$45;
        __label__ = 9; break;
      case 9: // $47
        var $48=HEAP[$p];
        STACKTOP = __stackBase__;
        return $48;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fix_l($L, $t) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $p=__stackBase__+8;
        var $i=__stackBase__+12;
        var $totalsize=__stackBase__+16;
        var $n=__stackBase__+20;
        var $base=__stackBase__+24;
        var $l=__stackBase__+28;
        var $l1=__stackBase__+32;
        var $pos=__stackBase__+36;
        HEAP[$1]=$L;
        HEAP[$2]=$t;
        HEAP[$totalsize]=2;
        HEAP[$n]=0;
        var $3=HEAP[$1];
        var $4=_lua_gettop($3);
        HEAP[$base]=$4;
        var $5=HEAP[$1];
        _lua_createtable($5, 0, 0);
        var $6=HEAP[$1];
        _lua_pushinteger($6, 1);
        var $7=HEAP[$1];
        _lua_pushnil($7);
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$1];
        var $10=HEAP[$2];
        var $11=_lua_next($9, $10);
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 2; break; } else { __label__ = 10; break; }
      case 2: // $13
        var $14=HEAP[$1];
        var $15=_lua_tonumber($14, -2);
        var $16=($15) == 1;
        if ($16) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $17
        var $18=HEAP[$1];
        var $19=_lua_isstring($18, -1);
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $21
        var $22=HEAP[$1];
        var $23=HEAP[$base];
        var $24=((($23) + 2)&4294967295);
        _lua_replace($22, $24);
        __label__ = 1; break;
      case 5: // $25
        var $26=HEAP[$1];
        var $27=_testpattern($26, -1);
        var $28=((($27))|0)!=0;
        if ($28) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $29
        var $30=HEAP[$1];
        var $31=HEAP[$1];
        var $32=_val2str($31, -2);
        var $33=_luaL_error($30, ((__str32728)&4294967295), allocate([$32,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 7; break;
      case 7: // $34
        var $35=HEAP[$1];
        var $36=_lua_objlen($35, -1);
        var $37=Math.floor(((($36))>>>0)/4);
        var $38=((($37) - 1)&4294967295);
        var $39=((($38) + 1)&4294967295);
        HEAP[$l]=$39;
        var $40=HEAP[$totalsize];
        var $41=HEAP[$l];
        var $42=((32757 - ($41))&4294967295);
        var $43=((($40))|0) >= ((($42))|0);
        if ($43) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $44
        var $45=HEAP[$1];
        var $46=_luaL_error($45, ((__str33729)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 9; break;
      case 9: // $47
        var $48=HEAP[$1];
        _luaL_checkstack($48, 20, ((__str34730)&4294967295));
        var $49=HEAP[$1];
        _lua_insert($49, -2);
        var $50=HEAP[$1];
        _lua_pushvalue($50, -1);
        var $51=HEAP[$1];
        _lua_pushvalue($51, -1);
        var $52=HEAP[$1];
        var $53=HEAP[$totalsize];
        _lua_pushinteger($52, $53);
        var $54=HEAP[$1];
        var $55=HEAP[$base];
        var $56=((($55) + 1)&4294967295);
        _lua_settable($54, $56);
        var $57=HEAP[$l];
        var $58=HEAP[$totalsize];
        var $59=((($58) + ($57))&4294967295);
        HEAP[$totalsize]=$59;
        var $60=HEAP[$n];
        var $61=((($60) + 1)&4294967295);
        HEAP[$n]=$61;
        __label__ = 1; break;
      case 10: // $62
        var $63=HEAP[$n];
        var $64=((($63))|0) > 0;
        if ($64) { __lastLabel__ = 10; __label__ = 12; break; } else { __lastLabel__ = 10; __label__ = 11; break; }
      case 11: // $65
        var $66=HEAP[$1];
        var $67=HEAP[$2];
        var $68=_luaL_argerror($66, $67, ((__str35731)&4294967295));
        var $69=((($68))|0)!=0;
        __lastLabel__ = 11; __label__ = 12; break;
      case 12: // $70
        var $71=__lastLabel__ == 10 ? 1 : ($69);
        var $72=unSign(($71), 1, 0);
        var $73=HEAP[$1];
        var $74=HEAP[$totalsize];
        var $75=_newpatt($73, $74);
        HEAP[$p]=$75;
        var $76=HEAP[$p];
        var $77=(($76+4)&4294967295);
        HEAP[$p]=$77;
        var $78=HEAP[$p];
        var $79=(($78+4)&4294967295);
        HEAP[$p]=$79;
        var $80=HEAP[$totalsize];
        var $81=((($80) - 1)&4294967295);
        _setinstaux($78, 8, $81, 0);
        HEAP[$i]=1;
        __label__ = 13; break;
      case 13: // $82
        var $83=HEAP[$i];
        var $84=HEAP[$n];
        var $85=((($83))|0) <= ((($84))|0);
        if ($85) { __label__ = 14; break; } else { __label__ = 16; break; }
      case 14: // $86
        var $87=HEAP[$1];
        var $88=HEAP[$p];
        var $89=HEAP[$base];
        var $90=((($89) + 1)&4294967295);
        var $91=HEAP[$i];
        var $92=((($91) * 2)&4294967295);
        var $93=((($90) + ($92))&4294967295);
        var $94=_addpatt($87, $88, $93);
        var $95=HEAP[$p];
        var $96=(($95+4*$94)&4294967295);
        HEAP[$p]=$96;
        var $97=HEAP[$p];
        var $98=(($97+4)&4294967295);
        HEAP[$p]=$98;
        _setinstaux($97, 5, 0, 0);
        __label__ = 15; break;
      case 15: // $99
        var $100=HEAP[$i];
        var $101=((($100) + 1)&4294967295);
        HEAP[$i]=$101;
        __label__ = 13; break;
      case 16: // $102
        var $103=HEAP[$totalsize];
        var $104=HEAP[$p];
        var $105=((0 - ($103))&4294967295);
        var $106=(($104+4*$105)&4294967295);
        HEAP[$p]=$106;
        HEAP[$totalsize]=2;
        HEAP[$i]=1;
        __label__ = 17; break;
      case 17: // $107
        var $108=HEAP[$i];
        var $109=HEAP[$n];
        var $110=((($108))|0) <= ((($109))|0);
        if ($110) { __label__ = 18; break; } else { __label__ = 20; break; }
      case 18: // $111
        var $112=HEAP[$1];
        var $113=HEAP[$base];
        var $114=((($113) + 1)&4294967295);
        var $115=HEAP[$i];
        var $116=((($115) * 2)&4294967295);
        var $117=((($114) + ($116))&4294967295);
        var $118=_lua_objlen($112, $117);
        var $119=Math.floor(((($118))>>>0)/4);
        var $120=((($119) - 1)&4294967295);
        var $121=((($120) + 1)&4294967295);
        HEAP[$l1]=$121;
        var $122=HEAP[$1];
        var $123=HEAP[$p];
        var $124=HEAP[$totalsize];
        var $125=HEAP[$totalsize];
        var $126=HEAP[$l1];
        var $127=((($125) + ($126))&4294967295);
        var $128=HEAP[$base];
        var $129=((($128) + 1)&4294967295);
        var $130=HEAP[$base];
        var $131=((($130) + 2)&4294967295);
        var $132=HEAP[$i];
        var $133=((($132) * 2)&4294967295);
        var $134=((($131) + ($133))&4294967295);
        _checkrule($122, $123, $124, $127, $129, $134);
        var $135=HEAP[$l1];
        var $136=HEAP[$totalsize];
        var $137=((($136) + ($135))&4294967295);
        HEAP[$totalsize]=$137;
        __label__ = 19; break;
      case 19: // $138
        var $139=HEAP[$i];
        var $140=((($139) + 1)&4294967295);
        HEAP[$i]=$140;
        __label__ = 17; break;
      case 20: // $141
        var $142=HEAP[$1];
        var $143=HEAP[$base];
        var $144=((($143) + 2)&4294967295);
        _lua_pushvalue($142, $144);
        var $145=HEAP[$1];
        var $146=HEAP[$base];
        var $147=((($146) + 1)&4294967295);
        _lua_gettable($145, $147);
        var $148=HEAP[$1];
        var $149=_lua_tonumber($148, -1);
        var $150=((($149))|0);
        HEAP[$i]=$150;
        var $151=HEAP[$1];
        _lua_settop($151, -2);
        var $152=HEAP[$i];
        var $153=((($152))|0)==0;
        if ($153) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $154
        var $155=HEAP[$1];
        var $156=_luaL_error($155, ((__str36732)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 22; break;
      case 22: // $157
        var $158=HEAP[$p];
        var $159=HEAP[$i];
        _setinstaux($158, 9, $159, 0);
        HEAP[$i]=0;
        __label__ = 23; break;
      case 23: // $160
        var $161=HEAP[$i];
        var $162=HEAP[$totalsize];
        var $163=((($161))|0) < ((($162))|0);
        if ($163) { __label__ = 24; break; } else { __label__ = 31; break; }
      case 24: // $164
        var $165=HEAP[$i];
        var $166=HEAP[$p];
        var $167=(($166+4*$165)&4294967295);
        var $168=$167;
        var $169=(($168)&4294967295);
        var $170=HEAP[$169];
        var $171=unSign(($170), 8, 0);
        var $172=((($171))|0)==10;
        if ($172) { __label__ = 25; break; } else { __label__ = 29; break; }
      case 25: // $173
        var $174=HEAP[$1];
        var $175=HEAP[$base];
        var $176=((($175) + 1)&4294967295);
        var $177=HEAP[$i];
        var $178=HEAP[$p];
        var $179=(($178+4*$177)&4294967295);
        var $180=$179;
        var $181=(($180+2)&4294967295);
        var $182=HEAP[$181];
        var $183=reSign(($182), 16, 0);
        var $184=_getposition($174, $176, $183);
        HEAP[$pos]=$184;
        var $185=HEAP[$p];
        var $186=HEAP[$i];
        var $187=((($186) + 1)&4294967295);
        var $188=_target($185, $187);
        var $189=HEAP[$p];
        var $190=(($189+4*$188)&4294967295);
        var $191=$190;
        var $192=(($191)&4294967295);
        var $193=HEAP[$192];
        var $194=unSign(($193), 8, 0);
        var $195=((($194))|0)==5;
        if ($195) { __label__ = 26; break; } else { __label__ = 27; break; }
      case 26: // $196
        __lastLabel__ = 26; __label__ = 28; break;
      case 27: // $197
        __lastLabel__ = 27; __label__ = 28; break;
      case 28: // $198
        var $199=__lastLabel__ == 26 ? 8 : (9);
        var $200=((($199)) & 255);
        var $201=HEAP[$i];
        var $202=HEAP[$p];
        var $203=(($202+4*$201)&4294967295);
        var $204=$203;
        var $205=(($204)&4294967295);
        HEAP[$205]=$200;
        var $206=HEAP[$pos];
        var $207=HEAP[$i];
        var $208=((($206) - ($207))&4294967295);
        var $209=((($208)) & 65535);
        var $210=HEAP[$i];
        var $211=HEAP[$p];
        var $212=(($211+4*$210)&4294967295);
        var $213=$212;
        var $214=(($213+2)&4294967295);
        HEAP[$214]=$209;
        __label__ = 29; break;
      case 29: // $215
        __label__ = 30; break;
      case 30: // $216
        var $217=HEAP[$p];
        var $218=HEAP[$i];
        var $219=(($217+4*$218)&4294967295);
        var $220=_sizei($219);
        var $221=HEAP[$i];
        var $222=((($221) + ($220))&4294967295);
        HEAP[$i]=$222;
        __label__ = 23; break;
      case 31: // $223
        var $224=HEAP[$p];
        _optimizejumps($224);
        var $225=HEAP[$1];
        var $226=HEAP[$2];
        _lua_replace($225, $226);
        var $227=HEAP[$1];
        var $228=HEAP[$base];
        _lua_settop($227, $228);
        var $229=HEAP[$p];
        STACKTOP = __stackBase__;
        return $229;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _val2str($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $k=__stackBase__+12;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=_lua_tolstring($4, $5, 0);
        HEAP[$k]=$6;
        var $7=HEAP[$k];
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        var $10=HEAP[$2];
        var $11=HEAP[$k];
        var $12=_lua_pushfstring($10, ((__str51747)&4294967295), allocate([$11,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$12;
        __label__ = 3; break;
      case 2: // $13
        var $14=HEAP[$2];
        var $15=HEAP[$2];
        var $16=HEAP[$2];
        var $17=HEAP[$3];
        var $18=_lua_type($16, $17);
        var $19=_lua_typename($15, $18);
        var $20=_lua_pushfstring($14, ((__str52748)&4294967295), allocate([$19,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$20;
        __label__ = 3; break;
      case 3: // $21
        var $22=HEAP[$1];
        STACKTOP = __stackBase__;
        return $22;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _addpatt($L, $p, $p1idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $p1=__stackBase__+12;
        var $sz=__stackBase__+16;
        var $corr=__stackBase__+20;
        var $px=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$p;
        HEAP[$3]=$p1idx;
        var $4=HEAP[$1];
        var $5=HEAP[$3];
        var $6=_lua_touserdata($4, $5);
        var $7=$6;
        HEAP[$p1]=$7;
        var $8=HEAP[$1];
        var $9=HEAP[$3];
        var $10=_lua_objlen($8, $9);
        var $11=Math.floor(((($10))>>>0)/4);
        var $12=((($11) - 1)&4294967295);
        HEAP[$sz]=$12;
        var $13=HEAP[$1];
        var $14=HEAP[$3];
        var $15=_jointable($13, $14);
        HEAP[$corr]=$15;
        var $16=HEAP[$2];
        var $17=$16;
        var $18=HEAP[$p1];
        var $19=$18;
        var $20=HEAP[$sz];
        var $21=((($20) + 1)&4294967295);
        var $22=((($21) * 4)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($17, $19, $22, 1, 0);
        var $23=HEAP[$corr];
        var $24=((($23))|0)!=0;
        if ($24) { __label__ = 1; break; } else { __label__ = 9; break; }
      case 1: // $25
        var $26=HEAP[$2];
        HEAP[$px]=$26;
        __label__ = 2; break;
      case 2: // $27
        var $28=HEAP[$px];
        var $29=HEAP[$2];
        var $30=HEAP[$sz];
        var $31=(($29+4*$30)&4294967295);
        var $32=((($28))>>>0) < ((($31))>>>0);
        if ($32) { __label__ = 3; break; } else { __label__ = 8; break; }
      case 3: // $33
        var $34=HEAP[$px];
        var $35=$34;
        var $36=(($35)&4294967295);
        var $37=HEAP[$36];
        var $38=unSign(($37), 8, 0);
        var $39=((_opproperties+$38*4)&4294967295);
        var $40=HEAP[$39];
        var $41=($40) & 64;
        var $42=((($41))|0)!=0;
        if ($42) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $43
        var $44=HEAP[$px];
        var $45=$44;
        var $46=(($45+2)&4294967295);
        var $47=HEAP[$46];
        var $48=reSign(($47), 16, 0);
        var $49=((($48))|0)!=0;
        if ($49) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $50
        var $51=HEAP[$corr];
        var $52=HEAP[$px];
        var $53=$52;
        var $54=(($53+2)&4294967295);
        var $55=HEAP[$54];
        var $56=reSign(($55), 16, 0);
        var $57=((($56) + ($51))&4294967295);
        var $58=((($57)) & 65535);
        HEAP[$54]=$58;
        __label__ = 6; break;
      case 6: // $59
        __label__ = 7; break;
      case 7: // $60
        var $61=HEAP[$px];
        var $62=_sizei($61);
        var $63=HEAP[$px];
        var $64=(($63+4*$62)&4294967295);
        HEAP[$px]=$64;
        __label__ = 2; break;
      case 8: // $65
        __label__ = 9; break;
      case 9: // $66
        var $67=HEAP[$sz];
        STACKTOP = __stackBase__;
        return $67;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _checkrule($L, $op, $from, $to, $postable, $rule) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $6=__stackBase__+20;
        var $i=__stackBase__+24;
        var $lastopen=__stackBase__+28;
        var $start=__stackBase__+32;
        HEAP[$1]=$L;
        HEAP[$2]=$op;
        HEAP[$3]=$from;
        HEAP[$4]=$to;
        HEAP[$5]=$postable;
        HEAP[$6]=$rule;
        HEAP[$lastopen]=0;
        var $7=HEAP[$3];
        HEAP[$i]=$7;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$i];
        var $10=HEAP[$4];
        var $11=((($9))|0) < ((($10))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 18; break; }
      case 2: // $12
        var $13=HEAP[$i];
        var $14=HEAP[$2];
        var $15=(($14+4*$13)&4294967295);
        var $16=$15;
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=((($19))|0)==12;
        if ($20) { __label__ = 3; break; } else { __label__ = 13; break; }
      case 3: // $21
        var $22=HEAP[$i];
        var $23=HEAP[$2];
        var $24=(($23+4*$22)&4294967295);
        var $25=$24;
        var $26=(($25+2)&4294967295);
        var $27=HEAP[$26];
        var $28=reSign(($27), 16, 0);
        var $29=((($28))|0) < 0;
        if ($29) { __label__ = 4; break; } else { __label__ = 13; break; }
      case 4: // $30
        var $31=HEAP[$i];
        var $32=HEAP[$2];
        var $33=HEAP[$i];
        var $34=(($32+4*$33)&4294967295);
        var $35=$34;
        var $36=(($35+2)&4294967295);
        var $37=HEAP[$36];
        var $38=reSign(($37), 16, 0);
        var $39=((($31) + ($38))&4294967295);
        HEAP[$start]=$39;
        var $40=HEAP[$start];
        var $41=((($40) - 1)&4294967295);
        var $42=HEAP[$2];
        var $43=(($42+4*$41)&4294967295);
        var $44=$43;
        var $45=(($44)&4294967295);
        var $46=HEAP[$45];
        var $47=unSign(($46), 8, 0);
        var $48=((($47))|0)==7;
        if ($48) { __label__ = 5; break; } else { __label__ = 7; break; }
      case 5: // $49
        var $50=HEAP[$start];
        var $51=((($50) - 1)&4294967295);
        var $52=HEAP[$2];
        var $53=HEAP[$start];
        var $54=((($53) - 1)&4294967295);
        var $55=(($52+4*$54)&4294967295);
        var $56=$55;
        var $57=(($56+2)&4294967295);
        var $58=HEAP[$57];
        var $59=reSign(($58), 16, 0);
        var $60=((($51) + ($59))&4294967295);
        var $61=HEAP[$2];
        var $62=HEAP[$i];
        var $63=((($62) + 1)&4294967295);
        var $64=_target($61, $63);
        var $65=((($60))|0)==((($64))|0);
        if ($65) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $66
        __label__ = 8; break;
      case 7: // $67
        ___assert_fail(((__str38734)&4294967295), ((__str30726)&4294967295), 793, ((___PRETTY_FUNCTION___checkrule)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 8; break;
      case 8: // $69
        var $70=HEAP[$start];
        var $71=HEAP[$lastopen];
        var $72=((($70))|0) <= ((($71))|0);
        if ($72) { __label__ = 9; break; } else { __label__ = 12; break; }
      case 9: // $73
        var $74=HEAP[$1];
        var $75=HEAP[$2];
        var $76=HEAP[$2];
        var $77=HEAP[$start];
        var $78=(($76+4*$77)&4294967295);
        var $79=HEAP[$2];
        var $80=HEAP[$i];
        var $81=(($79+4*$80)&4294967295);
        var $82=HEAP[$5];
        var $83=HEAP[$6];
        var $84=_verify($74, $75, $78, $81, $82, $83);
        var $85=((($84))|0)!=0;
        if ($85) { __label__ = 11; break; } else { __label__ = 10; break; }
      case 10: // $86
        var $87=HEAP[$1];
        var $88=HEAP[$1];
        var $89=HEAP[$6];
        var $90=_val2str($88, $89);
        var $91=_luaL_error($87, ((__str39735)&4294967295), allocate([$90,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 11; break;
      case 11: // $92
        __label__ = 12; break;
      case 12: // $93
        __label__ = 16; break;
      case 13: // $94
        var $95=HEAP[$i];
        var $96=HEAP[$2];
        var $97=(($96+4*$95)&4294967295);
        var $98=$97;
        var $99=(($98)&4294967295);
        var $100=HEAP[$99];
        var $101=unSign(($100), 8, 0);
        var $102=((($101))|0)==10;
        if ($102) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $103
        var $104=HEAP[$i];
        HEAP[$lastopen]=$104;
        __label__ = 15; break;
      case 15: // $105
        __label__ = 16; break;
      case 16: // $106
        __label__ = 17; break;
      case 17: // $107
        var $108=HEAP[$2];
        var $109=HEAP[$i];
        var $110=(($108+4*$109)&4294967295);
        var $111=_sizei($110);
        var $112=HEAP[$i];
        var $113=((($112) + ($111))&4294967295);
        HEAP[$i]=$113;
        __label__ = 1; break;
      case 18: // $114
        var $115=HEAP[$i];
        var $116=((($115) - 1)&4294967295);
        var $117=HEAP[$2];
        var $118=(($117+4*$116)&4294967295);
        var $119=$118;
        var $120=(($119)&4294967295);
        var $121=HEAP[$120];
        var $122=unSign(($121), 8, 0);
        var $123=((($122))|0)==5;
        if ($123) { __label__ = 19; break; } else { __label__ = 20; break; }
      case 19: // $124
        __label__ = 21; break;
      case 20: // $125
        ___assert_fail(((__str40736)&4294967295), ((__str30726)&4294967295), 802, ((___PRETTY_FUNCTION___checkrule)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 21; break;
      case 21: // $127
        var $128=HEAP[$1];
        var $129=HEAP[$2];
        var $130=HEAP[$2];
        var $131=HEAP[$3];
        var $132=(($130+4*$131)&4294967295);
        var $133=HEAP[$2];
        var $134=HEAP[$4];
        var $135=(($133+4*$134)&4294967295);
        var $136=(($135+-4)&4294967295);
        var $137=HEAP[$5];
        var $138=HEAP[$6];
        var $139=_verify($128, $129, $132, $136, $137, $138);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getposition($L, $t, $i) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $res=__stackBase__+16;
        HEAP[$2]=$L;
        HEAP[$3]=$t;
        HEAP[$4]=$i;
        var $5=HEAP[$2];
        _lua_getfenv($5, -1);
        var $6=HEAP[$2];
        var $7=HEAP[$4];
        _lua_rawgeti($6, -1, $7);
        var $8=HEAP[$2];
        var $9=HEAP[$3];
        _lua_gettable($8, $9);
        var $10=HEAP[$2];
        var $11=_lua_tointeger($10, -1);
        HEAP[$res]=$11;
        var $12=HEAP[$res];
        var $13=((($12))|0)==0;
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $14
        var $15=HEAP[$2];
        var $16=HEAP[$4];
        _lua_rawgeti($15, -2, $16);
        var $17=HEAP[$2];
        var $18=HEAP[$2];
        var $19=_val2str($18, -1);
        var $20=_luaL_error($17, ((__str37733)&4294967295), allocate([$19,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$20;
        __label__ = 3; break;
      case 2: // $21
        var $22=HEAP[$2];
        _lua_settop($22, -3);
        var $23=HEAP[$res];
        HEAP[$1]=$23;
        __label__ = 3; break;
      case 3: // $24
        var $25=HEAP[$1];
        STACKTOP = __stackBase__;
        return $25;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _target($p, $i) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$p;
        HEAP[$2]=$i;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$2];
        var $5=HEAP[$1];
        var $6=(($5+4*$4)&4294967295);
        var $7=$6;
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=((($10))|0)==8;
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$1];
        var $15=(($14+4*$13)&4294967295);
        var $16=$15;
        var $17=(($16+2)&4294967295);
        var $18=HEAP[$17];
        var $19=reSign(($18), 16, 0);
        var $20=HEAP[$2];
        var $21=((($20) + ($19))&4294967295);
        HEAP[$2]=$21;
        __label__ = 1; break;
      case 3: // $22
        var $23=HEAP[$2];
        STACKTOP = __stackBase__;
        return $23;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sizei($i) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$i;
        var $3=HEAP[$2];
        var $4=$3;
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        if ($7 == 2) {
          __label__ = 1; break;
        }
        else if ($7 == 3) {
          __label__ = 1; break;
        }
        else if ($7 == 17) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $8
        HEAP[$1]=9;
        __label__ = 4; break;
      case 2: // $9
        var $10=HEAP[$2];
        var $11=$10;
        var $12=(($11+1)&4294967295);
        var $13=HEAP[$12];
        var $14=unSign(($13), 8, 0);
        var $15=((($14) + 2)&4294967295);
        HEAP[$1]=$15;
        __label__ = 4; break;
      case 3: // $16
        HEAP[$1]=1;
        __label__ = 4; break;
      case 4: // $17
        var $18=HEAP[$1];
        STACKTOP = __stackBase__;
        return $18;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _optimizejumps($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        HEAP[$1]=$p;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$i];
        var $4=HEAP[$1];
        var $5=(($4+4*$3)&4294967295);
        var $6=$5;
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        var $9=unSign(($8), 8, 0);
        var $10=((($9))|0)!=6;
        if ($10) { __label__ = 2; break; } else { __label__ = 7; break; }
      case 2: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$i];
        var $14=(($12+4*$13)&4294967295);
        var $15=$14;
        var $16=(($15)&4294967295);
        var $17=HEAP[$16];
        var $18=unSign(($17), 8, 0);
        var $19=((_opproperties+$18*4)&4294967295);
        var $20=HEAP[$19];
        var $21=($20) & 1;
        var $22=((($21))|0)!=0;
        if ($22) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$i];
        var $26=(($24+4*$25)&4294967295);
        var $27=$26;
        var $28=(($27+2)&4294967295);
        var $29=HEAP[$28];
        var $30=reSign(($29), 16, 0);
        var $31=((($30))|0)!=0;
        if ($31) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $32
        var $33=HEAP[$1];
        var $34=HEAP[$i];
        var $35=HEAP[$1];
        var $36=HEAP[$i];
        var $37=(($35+4*$36)&4294967295);
        var $38=$37;
        var $39=(($38+2)&4294967295);
        var $40=HEAP[$39];
        var $41=reSign(($40), 16, 0);
        var $42=((($34) + ($41))&4294967295);
        var $43=_target($33, $42);
        var $44=HEAP[$i];
        var $45=((($43) - ($44))&4294967295);
        var $46=((($45)) & 65535);
        var $47=HEAP[$i];
        var $48=HEAP[$1];
        var $49=(($48+4*$47)&4294967295);
        var $50=$49;
        var $51=(($50+2)&4294967295);
        HEAP[$51]=$46;
        __label__ = 5; break;
      case 5: // $52
        __label__ = 6; break;
      case 6: // $53
        var $54=HEAP[$1];
        var $55=HEAP[$i];
        var $56=(($54+4*$55)&4294967295);
        var $57=_sizei($56);
        var $58=HEAP[$i];
        var $59=((($58) + ($57))&4294967295);
        HEAP[$i]=$59;
        __label__ = 1; break;
      case 7: // $60
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _verify($L, $op, $p, $e, $postable, $rule) {
    var __stackBase__  = STACKTOP; STACKTOP += 2448; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 2448);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $6=__stackBase__+20;
        var $7=__stackBase__+24;
        var $back=__stackBase__+28;
        var $backtop=__stackBase__+2428;
        var $i=__stackBase__+2432;
        var $next=__stackBase__+2436;
        var $r=__stackBase__+2440;
        var $f=__stackBase__+2444;
        HEAP[$2]=$L;
        HEAP[$3]=$op;
        HEAP[$4]=$p;
        HEAP[$5]=$e;
        HEAP[$6]=$postable;
        HEAP[$7]=$rule;
        HEAP[$backtop]=0;
        __label__ = 1; break;
      case 1: // $8
        var $9=HEAP[$4];
        var $10=HEAP[$5];
        var $11=((($9))|0)!=((($10))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 82; break; }
      case 2: // $12
        var $13=HEAP[$4];
        var $14=$13;
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        if ($17 == 5) {
          __label__ = 3; break;
        }
        else if ($17 == 7) {
          __label__ = 4; break;
        }
        else if ($17 == 9) {
          __label__ = 7; break;
        }
        else if ($17 == 10) {
          __label__ = 13; break;
        }
        else if ($17 == 13) {
          __label__ = 25; break;
        }
        else if ($17 == 11) {
          __label__ = 25; break;
        }
        else if ($17 == 12) {
          __label__ = 30; break;
        }
        else if ($17 == 4) {
          __label__ = 39; break;
        }
        else if ($17 == 0) {
          __label__ = 51; break;
        }
        else if ($17 == 1) {
          __label__ = 51; break;
        }
        else if ($17 == 2) {
          __label__ = 51; break;
        }
        else if ($17 == 8) {
          __label__ = 58; break;
        }
        else if ($17 == 14) {
          __label__ = 60; break;
        }
        else if ($17 == 15) {
          __label__ = 61; break;
        }
        else if ($17 == 3) {
          __label__ = 71; break;
        }
        else if ($17 == 21) {
          __label__ = 71; break;
        }
        else if ($17 == 22) {
          __label__ = 71; break;
        }
        else if ($17 == 19) {
          __label__ = 71; break;
        }
        else if ($17 == 20) {
          __label__ = 71; break;
        }
        else if ($17 == 18) {
          __label__ = 71; break;
        }
        else if ($17 == 23) {
          __label__ = 72; break;
        }
        else if ($17 == 17) {
          __label__ = 73; break;
        }
        else if ($17 == 6) {
          __label__ = 80; break;
        }
        else {
        __label__ = 81; break;
        }
        
      case 3: // $18
        var $19=HEAP[$backtop];
        var $20=((($19) + -1)&4294967295);
        HEAP[$backtop]=$20;
        var $21=(($back+$20*12)&4294967295);
        var $22=(($21+4)&4294967295);
        var $23=HEAP[$22];
        HEAP[$4]=$23;
        __label__ = 1; break;
      case 4: // $24
        var $25=HEAP[$backtop];
        var $26=((($25))|0) >= 200;
        if ($26) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $27
        var $28=HEAP[$2];
        var $29=_luaL_error($28, ((__str41737)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$29;
        __label__ = 86; break;
      case 6: // $30
        var $31=HEAP[$4];
        var $32=HEAP[$4];
        var $33=(($32)&4294967295);
        var $34=$33;
        var $35=(($34+2)&4294967295);
        var $36=HEAP[$35];
        var $37=reSign(($36), 16, 0);
        var $38=(($31+4*$37)&4294967295);
        var $39=HEAP[$backtop];
        var $40=(($back+$39*12)&4294967295);
        var $41=(($40+4)&4294967295);
        HEAP[$41]=$38;
        var $42=HEAP[$backtop];
        var $43=((($42) + 1)&4294967295);
        HEAP[$backtop]=$43;
        var $44=(($back+$42*12)&4294967295);
        var $45=(($44)&4294967295);
        HEAP[$45]=((_verify_dummy)&4294967295);
        var $46=HEAP[$4];
        var $47=(($46+4)&4294967295);
        HEAP[$4]=$47;
        __label__ = 1; break;
      case 7: // $48
        var $49=HEAP[$4];
        var $50=(($49+4)&4294967295);
        var $51=$50;
        var $52=(($51)&4294967295);
        var $53=HEAP[$52];
        var $54=unSign(($53), 8, 0);
        var $55=((($54))|0)!=5;
        if ($55) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $56
        __label__ = 10; break;
      case 9: // $57
        ___assert_fail(((__str42738)&4294967295), ((__str30726)&4294967295), 676, ((___PRETTY_FUNCTION___verify)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 10; break;
      case 10: // $59
        var $60=HEAP[$backtop];
        var $61=((($60))|0) >= 200;
        if ($61) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $62
        var $63=HEAP[$2];
        var $64=_luaL_error($63, ((__str41737)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$64;
        __label__ = 86; break;
      case 12: // $65
        var $66=HEAP[$backtop];
        var $67=(($back+$66*12)&4294967295);
        var $68=(($67)&4294967295);
        HEAP[$68]=0;
        var $69=HEAP[$4];
        var $70=(($69+4)&4294967295);
        var $71=HEAP[$backtop];
        var $72=((($71) + 1)&4294967295);
        HEAP[$backtop]=$72;
        var $73=(($back+$71*12)&4294967295);
        var $74=(($73+4)&4294967295);
        HEAP[$74]=$70;
        __label__ = 59; break;
      case 13: // $75
        var $76=HEAP[$6];
        var $77=((($76))|0)==0;
        if ($77) { __label__ = 14; break; } else { __label__ = 15; break; }
      case 14: // $78
        __label__ = 65; break;
      case 15: // $79
        HEAP[$i]=0;
        __label__ = 16; break;
      case 16: // $80
        var $81=HEAP[$i];
        var $82=HEAP[$backtop];
        var $83=((($81))|0) < ((($82))|0);
        if ($83) { __label__ = 17; break; } else { __label__ = 22; break; }
      case 17: // $84
        var $85=HEAP[$i];
        var $86=(($back+$85*12)&4294967295);
        var $87=(($86)&4294967295);
        var $88=HEAP[$87];
        var $89=((($88))|0)==0;
        if ($89) { __label__ = 18; break; } else { __label__ = 20; break; }
      case 18: // $90
        var $91=HEAP[$i];
        var $92=(($back+$91*12)&4294967295);
        var $93=(($92+4)&4294967295);
        var $94=HEAP[$93];
        var $95=HEAP[$4];
        var $96=(($95+4)&4294967295);
        var $97=((($94))|0)==((($96))|0);
        if ($97) { __label__ = 19; break; } else { __label__ = 20; break; }
      case 19: // $98
        var $99=HEAP[$2];
        var $100=HEAP[$2];
        var $101=HEAP[$7];
        var $102=_val2str($100, $101);
        var $103=_luaL_error($99, ((__str43739)&4294967295), allocate([$102,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$1]=$103;
        __label__ = 86; break;
      case 20: // $104
        __label__ = 21; break;
      case 21: // $105
        var $106=HEAP[$i];
        var $107=((($106) + 1)&4294967295);
        HEAP[$i]=$107;
        __label__ = 16; break;
      case 22: // $108
        var $109=HEAP[$backtop];
        var $110=((($109))|0) >= 200;
        if ($110) { __label__ = 23; break; } else { __label__ = 24; break; }
      case 23: // $111
        var $112=HEAP[$2];
        var $113=_luaL_error($112, ((__str41737)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$113;
        __label__ = 86; break;
      case 24: // $114
        var $115=HEAP[$backtop];
        var $116=(($back+$115*12)&4294967295);
        var $117=(($116)&4294967295);
        HEAP[$117]=0;
        var $118=HEAP[$4];
        var $119=(($118+4)&4294967295);
        var $120=HEAP[$backtop];
        var $121=((($120) + 1)&4294967295);
        HEAP[$backtop]=$121;
        var $122=(($back+$120*12)&4294967295);
        var $123=(($122+4)&4294967295);
        HEAP[$123]=$119;
        var $124=HEAP[$3];
        var $125=HEAP[$2];
        var $126=HEAP[$6];
        var $127=HEAP[$4];
        var $128=$127;
        var $129=(($128+2)&4294967295);
        var $130=HEAP[$129];
        var $131=reSign(($130), 16, 0);
        var $132=_getposition($125, $126, $131);
        var $133=(($124+4*$132)&4294967295);
        HEAP[$4]=$133;
        __label__ = 1; break;
      case 25: // $134
        var $135=HEAP[$backtop];
        var $136=((($135))|0) > 0;
        if ($136) { __label__ = 26; break; } else { __label__ = 28; break; }
      case 26: // $137
        var $138=HEAP[$4];
        var $139=$138;
        var $140=(($139+2)&4294967295);
        var $141=HEAP[$140];
        var $142=reSign(($141), 16, 0);
        var $143=((($142))|0) > 0;
        if ($143) { __label__ = 27; break; } else { __label__ = 28; break; }
      case 27: // $144
        __label__ = 29; break;
      case 28: // $145
        ___assert_fail(((__str44740)&4294967295), ((__str30726)&4294967295), 700, ((___PRETTY_FUNCTION___verify)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 29; break;
      case 29: // $147
        var $148=HEAP[$backtop];
        var $149=((($148) + -1)&4294967295);
        HEAP[$backtop]=$149;
        __label__ = 59; break;
      case 30: // $150
        var $151=HEAP[$backtop];
        var $152=((($151))|0) > 0;
        if ($152) { __label__ = 31; break; } else { __label__ = 32; break; }
      case 31: // $153
        __label__ = 33; break;
      case 32: // $154
        ___assert_fail(((__str45741)&4294967295), ((__str30726)&4294967295), 705, ((___PRETTY_FUNCTION___verify)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 33; break;
      case 33: // $156
        var $157=HEAP[$4];
        var $158=$157;
        var $159=(($158+2)&4294967295);
        var $160=HEAP[$159];
        var $161=reSign(($160), 16, 0);
        var $162=((($161))|0) > 0;
        if ($162) { __label__ = 34; break; } else { __label__ = 35; break; }
      case 34: // $163
        __label__ = 59; break;
      case 35: // $164
        var $165=HEAP[$6];
        var $166=((($165))|0)!=0;
        if ($166) { __label__ = 36; break; } else { __label__ = 37; break; }
      case 36: // $167
        __label__ = 38; break;
      case 37: // $168
        ___assert_fail(((__str46742)&4294967295), ((__str30726)&4294967295), 708, ((___PRETTY_FUNCTION___verify)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 38; break;
      case 38: // $170
        var $171=HEAP[$backtop];
        var $172=((($171) + -1)&4294967295);
        HEAP[$backtop]=$172;
        var $173=HEAP[$4];
        var $174=(($173+4)&4294967295);
        HEAP[$4]=$174;
        __label__ = 1; break;
      case 39: // $175
        var $176=HEAP[$4];
        var $177=$176;
        var $178=(($177+1)&4294967295);
        var $179=HEAP[$178];
        var $180=unSign(($179), 8, 0);
        var $181=((($180))|0)==1;
        if ($181) { __label__ = 40; break; } else { __label__ = 43; break; }
      case 40: // $182
        var $183=HEAP[$4];
        var $184=(($183+4)&4294967295);
        var $185=$184;
        var $186=(($185)&4294967295);
        var $187=HEAP[$186];
        var $188=unSign(($187), 8, 0);
        var $189=((_opproperties+$188*4)&4294967295);
        var $190=HEAP[$189];
        var $191=($190) & 4;
        var $192=((($191))|0)!=0;
        if ($192) { __label__ = 41; break; } else { __label__ = 43; break; }
      case 41: // $193
        var $194=HEAP[$4];
        var $195=(($194+4)&4294967295);
        var $196=$195;
        var $197=(($196+2)&4294967295);
        var $198=HEAP[$197];
        var $199=reSign(($198), 16, 0);
        var $200=((($199))|0)==0;
        if ($200) { __label__ = 42; break; } else { __label__ = 43; break; }
      case 42: // $201
        var $202=HEAP[$4];
        var $203=(($202+4)&4294967295);
        HEAP[$4]=$203;
        var $204=HEAP[$4];
        var $205=_sizei($204);
        var $206=HEAP[$4];
        var $207=(($206+4*$205)&4294967295);
        HEAP[$4]=$207;
        __label__ = 50; break;
      case 43: // $208
        var $209=HEAP[$4];
        var $210=(($209+-4)&4294967295);
        var $211=$210;
        var $212=(($211)&4294967295);
        var $213=HEAP[$212];
        var $214=unSign(($213), 8, 0);
        var $215=((($214))|0)==7;
        if ($215) { __label__ = 44; break; } else { __label__ = 45; break; }
      case 44: // $216
        __label__ = 46; break;
      case 45: // $217
        ___assert_fail(((__str47743)&4294967295), ((__str30726)&4294967295), 720, ((___PRETTY_FUNCTION___verify)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 46; break;
      case 46: // $219
        var $220=HEAP[$backtop];
        var $221=((($220) + -1)&4294967295);
        HEAP[$backtop]=$221;
        var $222=HEAP[$4];
        var $223=(($222+-4)&4294967295);
        var $224=$223;
        var $225=(($224+2)&4294967295);
        var $226=HEAP[$225];
        var $227=reSign(($226), 16, 0);
        var $228=HEAP[$4];
        var $229=(($228+4*$227)&4294967295);
        HEAP[$4]=$229;
        var $230=HEAP[$4];
        var $231=(($230+-4)&4294967295);
        var $232=$231;
        var $233=(($232)&4294967295);
        var $234=HEAP[$233];
        var $235=unSign(($234), 8, 0);
        var $236=((($235))|0)==15;
        if ($236) { __label__ = 47; break; } else { __label__ = 48; break; }
      case 47: // $237
        __label__ = 49; break;
      case 48: // $238
        ___assert_fail(((__str48744)&4294967295), ((__str30726)&4294967295), 723, ((___PRETTY_FUNCTION___verify)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 49; break;
      case 49: // $240
        __label__ = 50; break;
      case 50: // $241
        __label__ = 1; break;
      case 51: // $242
        var $243=HEAP[$4];
        var $244=HEAP[$4];
        var $245=_sizei($244);
        var $246=(($243+4*$245)&4294967295);
        HEAP[$next]=$246;
        var $247=HEAP[$next];
        var $248=$247;
        var $249=(($248)&4294967295);
        var $250=HEAP[$249];
        var $251=unSign(($250), 8, 0);
        var $252=((($251))|0)==4;
        if ($252) { __label__ = 52; break; } else { __label__ = 53; break; }
      case 52: // $253
        var $254=HEAP[$next];
        var $255=(($254+4)&4294967295);
        HEAP[$4]=$255;
        __label__ = 57; break;
      case 53: // $256
        var $257=HEAP[$4];
        var $258=$257;
        var $259=(($258+2)&4294967295);
        var $260=HEAP[$259];
        var $261=reSign(($260), 16, 0);
        var $262=((($261))|0)==0;
        if ($262) { __label__ = 54; break; } else { __label__ = 55; break; }
      case 54: // $263
        __label__ = 65; break;
      case 55: // $264
        var $265=HEAP[$4];
        var $266=$265;
        var $267=(($266+2)&4294967295);
        var $268=HEAP[$267];
        var $269=reSign(($268), 16, 0);
        var $270=HEAP[$4];
        var $271=(($270+4*$269)&4294967295);
        HEAP[$4]=$271;
        __label__ = 56; break;
      case 56: // $272
        __label__ = 57; break;
      case 57: // $273
        __label__ = 1; break;
      case 58: // $274
        __label__ = 59; break;
      case 59: // $275
        var $276=HEAP[$4];
        var $277=$276;
        var $278=(($277+2)&4294967295);
        var $279=HEAP[$278];
        var $280=reSign(($279), 16, 0);
        var $281=HEAP[$4];
        var $282=(($281+4*$280)&4294967295);
        HEAP[$4]=$282;
        __label__ = 1; break;
      case 60: // $283
        __label__ = 65; break;
      case 61: // $284
        var $285=HEAP[$4];
        var $286=HEAP[$3];
        var $287=((($285))>>>0) > ((($286))>>>0);
        if ($287) { __label__ = 62; break; } else { __label__ = 64; break; }
      case 62: // $288
        var $289=HEAP[$4];
        var $290=(($289+-4)&4294967295);
        var $291=$290;
        var $292=(($291)&4294967295);
        var $293=HEAP[$292];
        var $294=unSign(($293), 8, 0);
        var $295=((($294))|0)==13;
        if ($295) { __label__ = 63; break; } else { __label__ = 64; break; }
      case 63: // $296
        var $297=HEAP[$4];
        var $298=(($297+4)&4294967295);
        HEAP[$4]=$298;
        __label__ = 1; break;
      case 64: // $299
        __label__ = 65; break;
      case 65: // $300
        __label__ = 66; break;
      case 66: // $301
        var $302=HEAP[$backtop];
        var $303=((($302) + -1)&4294967295);
        HEAP[$backtop]=$303;
        var $304=((($302))|0)==0;
        if ($304) { __label__ = 67; break; } else { __label__ = 68; break; }
      case 67: // $305
        HEAP[$1]=1;
        __label__ = 86; break;
      case 68: // $306
        __label__ = 69; break;
      case 69: // $307
        var $308=HEAP[$backtop];
        var $309=(($back+$308*12)&4294967295);
        var $310=(($309)&4294967295);
        var $311=HEAP[$310];
        var $312=((($311))|0)==0;
        if ($312) { __label__ = 66; break; } else { __label__ = 70; break; }
      case 70: // $313
        var $314=HEAP[$backtop];
        var $315=(($back+$314*12)&4294967295);
        var $316=(($315+4)&4294967295);
        var $317=HEAP[$316];
        HEAP[$4]=$317;
        __label__ = 1; break;
      case 71: // $318
        var $319=HEAP[$4];
        var $320=_sizei($319);
        var $321=HEAP[$4];
        var $322=(($321+4*$320)&4294967295);
        HEAP[$4]=$322;
        __label__ = 1; break;
      case 72: // $323
        __label__ = 65; break;
      case 73: // $324
        var $325=HEAP[$4];
        var $326=(($325+4)&4294967295);
        var $327=$326;
        var $328=HEAP[$327];
        var $329=HEAP[$4];
        var $330=(($329+8)&4294967295);
        var $331=$330;
        var $332=(($331)&4294967295);
        var $333=FUNCTION_TABLE[$328](((_verify_dummy)&4294967295), ((_verify_dummy)&4294967295), ((_verify_dummy)&4294967295), $332);
        HEAP[$r]=$333;
        var $334=HEAP[$r];
        var $335=((($334))|0)!=0;
        if ($335) { __label__ = 74; break; } else { __label__ = 75; break; }
      case 74: // $336
        var $337=HEAP[$4];
        var $338=$337;
        var $339=(($338+1)&4294967295);
        var $340=HEAP[$339];
        var $341=unSign(($340), 8, 0);
        var $342=((($341) + 2)&4294967295);
        var $343=HEAP[$4];
        var $344=(($343+4*$342)&4294967295);
        HEAP[$4]=$344;
        __label__ = 79; break;
      case 75: // $345
        var $346=HEAP[$4];
        var $347=$346;
        var $348=(($347+2)&4294967295);
        var $349=HEAP[$348];
        var $350=reSign(($349), 16, 0);
        HEAP[$f]=$350;
        var $351=HEAP[$f];
        var $352=((($351))|0)!=0;
        if ($352) { __label__ = 76; break; } else { __label__ = 77; break; }
      case 76: // $353
        var $354=HEAP[$f];
        var $355=HEAP[$4];
        var $356=(($355+4*$354)&4294967295);
        HEAP[$4]=$356;
        __label__ = 78; break;
      case 77: // $357
        __label__ = 65; break;
      case 78: // $358
        __label__ = 79; break;
      case 79: // $359
        __label__ = 1; break;
      case 80: // $360
        __label__ = 81; break;
      case 81: // $361
        ___assert_fail(((__str49745)&4294967295), ((__str30726)&4294967295), 777, ((___PRETTY_FUNCTION___verify)&4294967295));
        throw "Reached an unreachable!"
      case 82: // $362
        var $363=HEAP[$backtop];
        var $364=((($363))|0)==0;
        if ($364) { __label__ = 83; break; } else { __label__ = 84; break; }
      case 83: // $365
        __label__ = 85; break;
      case 84: // $366
        ___assert_fail(((__str50746)&4294967295), ((__str30726)&4294967295), 780, ((___PRETTY_FUNCTION___verify)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 85; break;
      case 85: // $368
        HEAP[$1]=0;
        __label__ = 86; break;
      case 86: // $369
        var $370=HEAP[$1];
        STACKTOP = __stackBase__;
        return $370;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _jointable($L, $p1) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $n=__stackBase__+12;
        var $n1=__stackBase__+16;
        var $i=__stackBase__+20;
        HEAP[$2]=$L;
        HEAP[$3]=$p1;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        _lua_getfenv($4, $5);
        var $6=HEAP[$2];
        var $7=_ktablelen($6, -1);
        HEAP[$n1]=$7;
        var $8=HEAP[$2];
        _lua_getfenv($8, -2);
        var $9=HEAP[$n1];
        var $10=((($9))|0)==0;
        if ($10) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $11
        var $12=HEAP[$2];
        var $13=_lua_equal($12, -2, -1);
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $15
        var $16=HEAP[$2];
        _lua_settop($16, -3);
        HEAP[$1]=0;
        __label__ = 14; break;
      case 3: // $17
        var $18=HEAP[$2];
        var $19=_ktablelen($18, -1);
        HEAP[$n]=$19;
        var $20=HEAP[$n];
        var $21=((($20))|0)==0;
        if ($21) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $22
        var $23=HEAP[$2];
        _lua_settop($23, -2);
        var $24=HEAP[$2];
        var $25=_lua_setfenv($24, -2);
        HEAP[$1]=0;
        __label__ = 14; break;
      case 5: // $26
        var $27=HEAP[$2];
        var $28=HEAP[$n];
        var $29=HEAP[$n1];
        var $30=((($28) + ($29))&4294967295);
        _lua_createtable($27, $30, 0);
        HEAP[$i]=1;
        __label__ = 6; break;
      case 6: // $31
        var $32=HEAP[$i];
        var $33=HEAP[$n];
        var $34=((($32))|0) <= ((($33))|0);
        if ($34) { __label__ = 7; break; } else { __label__ = 9; break; }
      case 7: // $35
        var $36=HEAP[$2];
        var $37=HEAP[$i];
        _lua_rawgeti($36, -2, $37);
        var $38=HEAP[$2];
        var $39=HEAP[$i];
        _lua_rawseti($38, -2, $39);
        __label__ = 8; break;
      case 8: // $40
        var $41=HEAP[$i];
        var $42=((($41) + 1)&4294967295);
        HEAP[$i]=$42;
        __label__ = 6; break;
      case 9: // $43
        HEAP[$i]=1;
        __label__ = 10; break;
      case 10: // $44
        var $45=HEAP[$i];
        var $46=HEAP[$n1];
        var $47=((($45))|0) <= ((($46))|0);
        if ($47) { __label__ = 11; break; } else { __label__ = 13; break; }
      case 11: // $48
        var $49=HEAP[$2];
        var $50=HEAP[$i];
        _lua_rawgeti($49, -3, $50);
        var $51=HEAP[$2];
        var $52=HEAP[$n];
        var $53=HEAP[$i];
        var $54=((($52) + ($53))&4294967295);
        _lua_rawseti($51, -2, $54);
        __label__ = 12; break;
      case 12: // $55
        var $56=HEAP[$i];
        var $57=((($56) + 1)&4294967295);
        HEAP[$i]=$57;
        __label__ = 10; break;
      case 13: // $58
        var $59=HEAP[$2];
        var $60=_lua_setfenv($59, -4);
        var $61=HEAP[$2];
        _lua_settop($61, -3);
        var $62=HEAP[$n];
        HEAP[$1]=$62;
        __label__ = 14; break;
      case 14: // $63
        var $64=HEAP[$1];
        STACKTOP = __stackBase__;
        return $64;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ktablelen($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$L;
        HEAP[$3]=$idx;
        var $4=HEAP[$2];
        var $5=HEAP[$3];
        var $6=_lua_type($4, $5);
        var $7=((($6))|0)==5;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $9
        var $10=HEAP[$2];
        var $11=HEAP[$3];
        var $12=_lua_objlen($10, $11);
        HEAP[$1]=$12;
        __label__ = 3; break;
      case 3: // $13
        var $14=HEAP[$1];
        STACKTOP = __stackBase__;
        return $14;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _capture_aux($L, $kind, $labelidx) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $l1=__stackBase__+12;
        var $n=__stackBase__+16;
        var $p1=__stackBase__+20;
        var $lc=__stackBase__+24;
        var $p=__stackBase__+28;
        var $label=__stackBase__+32;
        var $op=__stackBase__+36;
        var $p2=__stackBase__+40;
        HEAP[$1]=$L;
        HEAP[$2]=$kind;
        HEAP[$3]=$labelidx;
        var $4=HEAP[$1];
        var $5=_getpatt($4, 1, $l1);
        HEAP[$p1]=$5;
        var $6=HEAP[$p1];
        var $7=_skipchecks($6, 0, $n);
        HEAP[$lc]=$7;
        var $8=HEAP[$lc];
        var $9=HEAP[$l1];
        var $10=((($8))|0)==((($9))|0);
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$l1];
        var $14=((($13) + 1)&4294967295);
        var $15=_newpatt($12, $14);
        HEAP[$p]=$15;
        var $16=HEAP[$1];
        var $17=HEAP[$3];
        var $18=_getlabel($16, $17);
        HEAP[$label]=$18;
        var $19=HEAP[$1];
        var $20=HEAP[$p];
        var $21=_addpatt($19, $20, 1);
        var $22=HEAP[$p];
        var $23=(($22+4*$21)&4294967295);
        HEAP[$p]=$23;
        var $24=HEAP[$p];
        var $25=HEAP[$label];
        var $26=HEAP[$2];
        var $27=HEAP[$n];
        var $28=($27) << 4;
        var $29=($26) | ($28);
        _setinstaux($24, 18, $25, $29);
        __label__ = 3; break;
      case 2: // $30
        var $31=HEAP[$1];
        var $32=HEAP[$l1];
        var $33=((1 + ($32))&4294967295);
        var $34=((($33) + 1)&4294967295);
        var $35=_newpatt($31, $34);
        HEAP[$op]=$35;
        var $36=HEAP[$op];
        HEAP[$p2]=$36;
        var $37=HEAP[$p2];
        var $38=(($37+4)&4294967295);
        HEAP[$p2]=$38;
        var $39=HEAP[$1];
        var $40=HEAP[$3];
        var $41=_getlabel($39, $40);
        var $42=HEAP[$2];
        _setinstaux($37, 21, $41, $42);
        var $43=HEAP[$1];
        var $44=HEAP[$p2];
        var $45=_addpatt($43, $44, 1);
        var $46=HEAP[$p2];
        var $47=(($46+4*$45)&4294967295);
        HEAP[$p2]=$47;
        var $48=HEAP[$p2];
        _setinstaux($48, 22, 0, 0);
        var $49=HEAP[$op];
        _optimizecaptures($49);
        __label__ = 3; break;
      case 3: // $50
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _skipchecks($p, $up, $pn) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $n=__stackBase__+16;
        var $st=__stackBase__+20;
        HEAP[$1]=$p;
        HEAP[$2]=$up;
        HEAP[$3]=$pn;
        HEAP[$n]=0;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$1];
        var $6=HEAP[$i];
        var $7=(($5+4*$6)&4294967295);
        var $8=$7;
        var $9=(($8)&4294967295);
        var $10=HEAP[$9];
        var $11=unSign(($10), 8, 0);
        var $12=((_opproperties+$11*4)&4294967295);
        var $13=HEAP[$12];
        var $14=($13) & 4;
        var $15=((($14))|0)!=0;
        if ($15) { __lastLabel__ = 1; __label__ = 2; break; } else { __lastLabel__ = 1; __label__ = 3; break; }
      case 2: // $16
        var $17=HEAP[$1];
        var $18=HEAP[$i];
        var $19=(($17+4*$18)&4294967295);
        var $20=$19;
        var $21=(($20+2)&4294967295);
        var $22=HEAP[$21];
        var $23=reSign(($22), 16, 0);
        var $24=((($23))|0)==0;
        __lastLabel__ = 2; __label__ = 3; break;
      case 3: // $25
        var $26=__lastLabel__ == 1 ? 0 : ($24);
        if ($26) { __label__ = 4; break; } else { __label__ = 11; break; }
      case 4: // $27
        var $28=HEAP[$1];
        var $29=HEAP[$i];
        var $30=(($28+4*$29)&4294967295);
        var $31=$30;
        var $32=(($31)&4294967295);
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=((($34))|0)==0;
        if ($35) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $36
        var $37=HEAP[$1];
        var $38=HEAP[$i];
        var $39=(($37+4*$38)&4294967295);
        var $40=$39;
        var $41=(($40+1)&4294967295);
        var $42=HEAP[$41];
        var $43=unSign(($42), 8, 0);
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $44
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $45
        var $46=__lastLabel__ == 5 ? $43 : (1);
        HEAP[$st]=$46;
        var $47=HEAP[$n];
        var $48=HEAP[$st];
        var $49=((($47) + ($48))&4294967295);
        var $50=HEAP[$2];
        var $51=((15 - ($50))&4294967295);
        var $52=((($49))|0) > ((($51))|0);
        if ($52) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $53
        __label__ = 11; break;
      case 9: // $54
        var $55=HEAP[$st];
        var $56=HEAP[$n];
        var $57=((($56) + ($55))&4294967295);
        HEAP[$n]=$57;
        __label__ = 10; break;
      case 10: // $58
        var $59=HEAP[$1];
        var $60=HEAP[$i];
        var $61=(($59+4*$60)&4294967295);
        var $62=_sizei($61);
        var $63=HEAP[$i];
        var $64=((($63) + ($62))&4294967295);
        HEAP[$i]=$64;
        __label__ = 1; break;
      case 11: // $65
        var $66=HEAP[$n];
        var $67=HEAP[$3];
        HEAP[$67]=$66;
        var $68=HEAP[$i];
        STACKTOP = __stackBase__;
        return $68;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getlabel($L, $labelidx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$L;
        HEAP[$3]=$labelidx;
        var $4=HEAP[$3];
        var $5=((($4))|0)==0;
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $6
        HEAP[$1]=0;
        __label__ = 3; break;
      case 2: // $7
        var $8=HEAP[$2];
        var $9=HEAP[$3];
        var $10=_value2fenv($8, $9);
        HEAP[$1]=$10;
        __label__ = 3; break;
      case 3: // $11
        var $12=HEAP[$1];
        STACKTOP = __stackBase__;
        return $12;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _optimizecaptures($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        var $limit=__stackBase__+8;
        var $end=__stackBase__+12;
        var $n=__stackBase__+16;
        var $j=__stackBase__+20;
        var $maxoff=__stackBase__+24;
        var $start=__stackBase__+28;
        HEAP[$1]=$p;
        HEAP[$limit]=0;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$i];
        var $4=HEAP[$1];
        var $5=(($4+4*$3)&4294967295);
        var $6=$5;
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        var $9=unSign(($8), 8, 0);
        var $10=((($9))|0)!=6;
        if ($10) { __label__ = 2; break; } else { __label__ = 40; break; }
      case 2: // $11
        var $12=HEAP[$1];
        var $13=HEAP[$i];
        var $14=(($12+4*$13)&4294967295);
        var $15=$14;
        var $16=(($15)&4294967295);
        var $17=HEAP[$16];
        var $18=unSign(($17), 8, 0);
        var $19=((_opproperties+$18*4)&4294967295);
        var $20=HEAP[$19];
        var $21=($20) & 1;
        var $22=((($21))|0)!=0;
        if ($22) { __label__ = 3; break; } else { __label__ = 6; break; }
      case 3: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$i];
        var $26=(($24+4*$25)&4294967295);
        var $27=$26;
        var $28=(($27+2)&4294967295);
        var $29=HEAP[$28];
        var $30=reSign(($29), 16, 0);
        var $31=((($30))|0)!=0;
        if ($31) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $32
        var $33=HEAP[$i];
        var $34=HEAP[$1];
        var $35=HEAP[$i];
        var $36=(($34+4*$35)&4294967295);
        var $37=$36;
        var $38=(($37+2)&4294967295);
        var $39=HEAP[$38];
        var $40=reSign(($39), 16, 0);
        var $41=((($33) + ($40))&4294967295);
        var $42=HEAP[$limit];
        var $43=((($41))|0) >= ((($42))|0);
        if ($43) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $44
        var $45=HEAP[$i];
        var $46=HEAP[$1];
        var $47=HEAP[$i];
        var $48=(($46+4*$47)&4294967295);
        var $49=$48;
        var $50=(($49+2)&4294967295);
        var $51=HEAP[$50];
        var $52=reSign(($51), 16, 0);
        var $53=((($45) + ($52))&4294967295);
        var $54=((($53) + 1)&4294967295);
        HEAP[$limit]=$54;
        __label__ = 38; break;
      case 6: // $55
        var $56=HEAP[$i];
        var $57=HEAP[$limit];
        var $58=((($56))|0) >= ((($57))|0);
        if ($58) { __label__ = 7; break; } else { __label__ = 37; break; }
      case 7: // $59
        var $60=HEAP[$1];
        var $61=HEAP[$i];
        var $62=(($60+4*$61)&4294967295);
        var $63=$62;
        var $64=(($63)&4294967295);
        var $65=HEAP[$64];
        var $66=unSign(($65), 8, 0);
        var $67=((_opproperties+$66*4)&4294967295);
        var $68=HEAP[$67];
        var $69=($68) & 32;
        var $70=((($69))|0)!=0;
        if ($70) { __label__ = 8; break; } else { __label__ = 37; break; }
      case 8: // $71
        var $72=HEAP[$1];
        var $73=HEAP[$i];
        var $74=(($72+4*$73)&4294967295);
        var $75=$74;
        var $76=(($75+1)&4294967295);
        var $77=HEAP[$76];
        var $78=unSign(($77), 8, 0);
        var $79=((($78))|0) >> 4;
        var $80=($79) & 15;
        var $81=((($80))|0) < 15;
        if ($81) { __label__ = 9; break; } else { __label__ = 37; break; }
      case 9: // $82
        var $83=HEAP[$1];
        var $84=HEAP[$i];
        var $85=(($83+4*$84)&4294967295);
        var $86=(($85+4)&4294967295);
        var $87=$86;
        var $88=(($87)&4294967295);
        var $89=HEAP[$88];
        var $90=unSign(($89), 8, 0);
        var $91=((_opproperties+$90*4)&4294967295);
        var $92=HEAP[$91];
        var $93=($92) & 4;
        var $94=((($93))|0)!=0;
        if ($94) { __label__ = 10; break; } else { __label__ = 37; break; }
      case 10: // $95
        var $96=HEAP[$1];
        var $97=HEAP[$i];
        var $98=(($96+4*$97)&4294967295);
        var $99=(($98+4)&4294967295);
        var $100=$99;
        var $101=(($100+2)&4294967295);
        var $102=HEAP[$101];
        var $103=reSign(($102), 16, 0);
        var $104=((($103))|0)==0;
        if ($104) { __label__ = 11; break; } else { __label__ = 37; break; }
      case 11: // $105
        var $106=HEAP[$1];
        var $107=HEAP[$i];
        var $108=(($106+4*$107)&4294967295);
        var $109=$108;
        var $110=(($109+1)&4294967295);
        var $111=HEAP[$110];
        var $112=unSign(($111), 8, 0);
        var $113=((($112))|0) >> 4;
        var $114=($113) & 15;
        HEAP[$maxoff]=$114;
        var $115=HEAP[$i];
        HEAP[$start]=$115;
        __label__ = 12; break;
      case 12: // $116
        var $117=HEAP[$start];
        var $118=HEAP[$limit];
        var $119=((($117))|0) > ((($118))|0);
        if ($119) { __lastLabel__ = 12; __label__ = 13; break; } else { __lastLabel__ = 12; __label__ = 16; break; }
      case 13: // $120
        var $121=HEAP[$1];
        var $122=HEAP[$start];
        var $123=(($121+4*$122)&4294967295);
        var $124=(($123+-4)&4294967295);
        var $125=$124;
        var $126=(($125)&4294967295);
        var $127=HEAP[$126];
        var $128=unSign(($127), 8, 0);
        var $129=((_opproperties+$128*4)&4294967295);
        var $130=HEAP[$129];
        var $131=($130) & 32;
        var $132=((($131))|0)!=0;
        if ($132) { __lastLabel__ = 13; __label__ = 14; break; } else { __lastLabel__ = 13; __label__ = 15; break; }
      case 14: // $133
        var $134=HEAP[$1];
        var $135=HEAP[$start];
        var $136=(($134+4*$135)&4294967295);
        var $137=(($136+-4)&4294967295);
        var $138=$137;
        var $139=(($138+1)&4294967295);
        var $140=HEAP[$139];
        var $141=unSign(($140), 8, 0);
        var $142=((($141))|0) >> 4;
        var $143=($142) & 15;
        var $144=((($143))|0) < 15;
        __lastLabel__ = 14; __label__ = 15; break;
      case 15: // $145
        var $146=__lastLabel__ == 13 ? 0 : ($144);
        __lastLabel__ = 15; __label__ = 16; break;
      case 16: // $147
        var $148=__lastLabel__ == 12 ? 0 : ($146);
        if ($148) { __label__ = 17; break; } else { __label__ = 20; break; }
      case 17: // $149
        var $150=HEAP[$start];
        var $151=((($150) + -1)&4294967295);
        HEAP[$start]=$151;
        var $152=HEAP[$1];
        var $153=HEAP[$start];
        var $154=(($152+4*$153)&4294967295);
        var $155=$154;
        var $156=(($155+1)&4294967295);
        var $157=HEAP[$156];
        var $158=unSign(($157), 8, 0);
        var $159=((($158))|0) >> 4;
        var $160=($159) & 15;
        var $161=HEAP[$maxoff];
        var $162=((($160))|0) > ((($161))|0);
        if ($162) { __label__ = 18; break; } else { __label__ = 19; break; }
      case 18: // $163
        var $164=HEAP[$1];
        var $165=HEAP[$start];
        var $166=(($164+4*$165)&4294967295);
        var $167=$166;
        var $168=(($167+1)&4294967295);
        var $169=HEAP[$168];
        var $170=unSign(($169), 8, 0);
        var $171=((($170))|0) >> 4;
        var $172=($171) & 15;
        HEAP[$maxoff]=$172;
        __label__ = 19; break;
      case 19: // $173
        __label__ = 12; break;
      case 20: // $174
        var $175=HEAP[$1];
        var $176=HEAP[$i];
        var $177=(($175+4*$176)&4294967295);
        var $178=(($177+4)&4294967295);
        var $179=HEAP[$maxoff];
        var $180=_skipchecks($178, $179, $n);
        var $181=HEAP[$i];
        var $182=((($180) + ($181))&4294967295);
        HEAP[$end]=$182;
        var $183=HEAP[$n];
        var $184=((($183))|0)==0;
        if ($184) { __label__ = 21; break; } else { __label__ = 22; break; }
      case 21: // $185
        __label__ = 39; break;
      case 22: // $186
        var $187=HEAP[$n];
        var $188=((($187))|0) <= 15;
        if ($188) { __label__ = 23; break; } else { __label__ = 26; break; }
      case 23: // $189
        var $190=HEAP[$start];
        var $191=HEAP[$i];
        var $192=((($190))|0) <= ((($191))|0);
        if ($192) { __label__ = 24; break; } else { __label__ = 26; break; }
      case 24: // $193
        var $194=HEAP[$i];
        var $195=HEAP[$end];
        var $196=((($194))|0) < ((($195))|0);
        if ($196) { __label__ = 25; break; } else { __label__ = 26; break; }
      case 25: // $197
        __label__ = 27; break;
      case 26: // $198
        ___assert_fail(((__str54750)&4294967295), ((__str30726)&4294967295), 893, ((___PRETTY_FUNCTION___optimizecaptures)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 27; break;
      case 27: // $200
        var $201=HEAP[$start];
        HEAP[$j]=$201;
        __label__ = 28; break;
      case 28: // $202
        var $203=HEAP[$j];
        var $204=HEAP[$i];
        var $205=((($203))|0) <= ((($204))|0);
        if ($205) { __label__ = 29; break; } else { __label__ = 31; break; }
      case 29: // $206
        var $207=HEAP[$n];
        var $208=($207) << 4;
        var $209=HEAP[$j];
        var $210=HEAP[$1];
        var $211=(($210+4*$209)&4294967295);
        var $212=$211;
        var $213=(($212+1)&4294967295);
        var $214=HEAP[$213];
        var $215=unSign(($214), 8, 0);
        var $216=((($215) + ($208))&4294967295);
        var $217=((($216)) & 255);
        HEAP[$213]=$217;
        __label__ = 30; break;
      case 30: // $218
        var $219=HEAP[$j];
        var $220=((($219) + 1)&4294967295);
        HEAP[$j]=$220;
        __label__ = 28; break;
      case 31: // $221
        var $222=HEAP[$1];
        var $223=HEAP[$start];
        var $224=(($222+4*$223)&4294967295);
        var $225=HEAP[$end];
        var $226=HEAP[$start];
        var $227=((($225) - ($226))&4294967295);
        var $228=HEAP[$i];
        var $229=HEAP[$start];
        var $230=((($228) - ($229))&4294967295);
        var $231=((($230) + 1)&4294967295);
        _rotate($224, $227, $231);
        var $232=HEAP[$end];
        HEAP[$i]=$232;
        var $233=HEAP[$1];
        var $234=HEAP[$start];
        var $235=(($233+4*$234)&4294967295);
        var $236=$235;
        var $237=(($236)&4294967295);
        var $238=HEAP[$237];
        var $239=unSign(($238), 8, 0);
        var $240=((_opproperties+$239*4)&4294967295);
        var $241=HEAP[$240];
        var $242=($241) & 4;
        var $243=((($242))|0)!=0;
        if ($243) { __label__ = 32; break; } else { __label__ = 35; break; }
      case 32: // $244
        var $245=HEAP[$1];
        var $246=HEAP[$start];
        var $247=(($245+4*$246)&4294967295);
        var $248=$247;
        var $249=(($248+2)&4294967295);
        var $250=HEAP[$249];
        var $251=reSign(($250), 16, 0);
        var $252=((($251))|0)==0;
        if ($252) { __label__ = 33; break; } else { __label__ = 35; break; }
      case 33: // $253
        var $254=HEAP[$1];
        var $255=HEAP[$i];
        var $256=(($254+4*$255)&4294967295);
        var $257=$256;
        var $258=(($257)&4294967295);
        var $259=HEAP[$258];
        var $260=unSign(($259), 8, 0);
        var $261=((_opproperties+$260*4)&4294967295);
        var $262=HEAP[$261];
        var $263=($262) & 16;
        var $264=((($263))|0)!=0;
        if ($264) { __label__ = 34; break; } else { __label__ = 35; break; }
      case 34: // $265
        __label__ = 36; break;
      case 35: // $266
        ___assert_fail(((__str55751)&4294967295), ((__str30726)&4294967295), 898, ((___PRETTY_FUNCTION___optimizecaptures)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 36; break;
      case 36: // $268
        __label__ = 37; break;
      case 37: // $269
        __label__ = 38; break;
      case 38: // $270
        __label__ = 39; break;
      case 39: // $271
        var $272=HEAP[$1];
        var $273=HEAP[$i];
        var $274=(($272+4*$273)&4294967295);
        var $275=_sizei($274);
        var $276=HEAP[$i];
        var $277=((($276) + ($275))&4294967295);
        HEAP[$i]=$277;
        __label__ = 1; break;
      case 40: // $278
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _rotate($p, $e, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    HEAP[$1]=$p;
    HEAP[$2]=$e;
    HEAP[$3]=$n;
    var $4=HEAP[$1];
    var $5=HEAP[$3];
    var $6=((($5) - 1)&4294967295);
    _invert($4, $6);
    var $7=HEAP[$1];
    var $8=HEAP[$3];
    var $9=(($7+4*$8)&4294967295);
    var $10=HEAP[$2];
    var $11=HEAP[$3];
    var $12=((($10) - ($11))&4294967295);
    _invert($9, $12);
    var $13=HEAP[$1];
    var $14=HEAP[$2];
    _invert($13, $14);
    STACKTOP = __stackBase__;
    return;
  }
  

  function _invert($p, $e) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $temp=__stackBase__+12;
        HEAP[$1]=$p;
        HEAP[$2]=$e;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$i];
        var $5=HEAP[$2];
        var $6=((($4))|0) < ((($5))|0);
        if ($6) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $7
        var $8=HEAP[$i];
        var $9=HEAP[$1];
        var $10=(($9+4*$8)&4294967295);
        var $11=$temp;
        var $12=$10;
        _llvm_memcpy_p0i8_p0i8_i32($11, $12, 4, 4, 0);
        var $13=HEAP[$i];
        var $14=HEAP[$1];
        var $15=(($14+4*$13)&4294967295);
        var $16=HEAP[$2];
        var $17=HEAP[$1];
        var $18=(($17+4*$16)&4294967295);
        var $19=$15;
        var $20=$18;
        _llvm_memcpy_p0i8_p0i8_i32($19, $20, 4, 4, 0);
        var $21=HEAP[$2];
        var $22=HEAP[$1];
        var $23=(($22+4*$21)&4294967295);
        var $24=$23;
        var $25=$temp;
        _llvm_memcpy_p0i8_p0i8_i32($24, $25, 4, 4, 0);
        __label__ = 3; break;
      case 3: // $26
        var $27=HEAP[$i];
        var $28=((($27) + 1)&4294967295);
        HEAP[$i]=$28;
        var $29=HEAP[$2];
        var $30=((($29) + -1)&4294967295);
        HEAP[$2]=$30;
        __label__ = 1; break;
      case 4: // $31
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getpattl($L, $idx) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $size=__stackBase__+8;
    HEAP[$1]=$L;
    HEAP[$2]=$idx;
    var $3=HEAP[$1];
    var $4=HEAP[$2];
    var $5=_getpatt($3, $4, $size);
    var $6=HEAP[$size];
    STACKTOP = __stackBase__;
    return $6;
  }
  

  function _nocalls($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$p;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$2];
        var $5=$4;
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=unSign(($7), 8, 0);
        var $9=((($8))|0)!=6;
        if ($9) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $10
        var $11=HEAP[$2];
        var $12=$11;
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=unSign(($14), 8, 0);
        var $16=((($15))|0)==10;
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        HEAP[$1]=0;
        __label__ = 7; break;
      case 4: // $18
        __label__ = 5; break;
      case 5: // $19
        var $20=HEAP[$2];
        var $21=_sizei($20);
        var $22=HEAP[$2];
        var $23=(($22+4*$21)&4294967295);
        HEAP[$2]=$23;
        __label__ = 1; break;
      case 6: // $24
        HEAP[$1]=1;
        __label__ = 7; break;
      case 7: // $25
        var $26=HEAP[$1];
        STACKTOP = __stackBase__;
        return $26;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tocharset($p, $c) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$p;
        HEAP[$2]=$c;
        var $3=HEAP[$1];
        var $4=$3;
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        var $8=((_opproperties+$7*4)&4294967295);
        var $9=HEAP[$8];
        var $10=($9) & 4;
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 1; break; } else { __label__ = 10; break; }
      case 1: // $12
        var $13=HEAP[$1];
        var $14=$13;
        var $15=(($14+2)&4294967295);
        var $16=HEAP[$15];
        var $17=reSign(($16), 16, 0);
        var $18=((($17))|0)==0;
        if ($18) { __label__ = 2; break; } else { __label__ = 10; break; }
      case 2: // $19
        var $20=HEAP[$1];
        var $21=HEAP[$2];
        var $22=(($21+4)&4294967295);
        var $23=(($22)&4294967295);
        _fillcharset($20, $23);
        var $24=HEAP[$1];
        var $25=HEAP[$1];
        var $26=_sizei($25);
        var $27=(($24+4*$26)&4294967295);
        var $28=$27;
        var $29=(($28)&4294967295);
        var $30=HEAP[$29];
        var $31=unSign(($30), 8, 0);
        var $32=((($31))|0)==6;
        if ($32) { __label__ = 3; break; } else { __label__ = 8; break; }
      case 3: // $33
        var $34=HEAP[$1];
        var $35=$34;
        var $36=(($35)&4294967295);
        var $37=HEAP[$36];
        var $38=unSign(($37), 8, 0);
        var $39=((($38))|0)==0;
        if ($39) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $40
        var $41=HEAP[$1];
        var $42=$41;
        var $43=(($42+1)&4294967295);
        var $44=HEAP[$43];
        var $45=unSign(($44), 8, 0);
        __lastLabel__ = 4; __label__ = 6; break;
      case 5: // $46
        __lastLabel__ = 5; __label__ = 6; break;
      case 6: // $47
        var $48=__lastLabel__ == 4 ? $45 : (1);
        var $49=((($48))|0)==1;
        if ($49) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $50
        var $51=HEAP[$2];
        var $52=(($51)&4294967295);
        HEAP[$52]=1;
        __label__ = 9; break;
      case 8: // $53
        var $54=HEAP[$2];
        var $55=(($54)&4294967295);
        HEAP[$55]=2;
        __label__ = 9; break;
      case 9: // $56
        __label__ = 11; break;
      case 10: // $57
        var $58=HEAP[$2];
        var $59=(($58)&4294967295);
        HEAP[$59]=0;
        __label__ = 11; break;
      case 11: // $60
        var $61=HEAP[$2];
        var $62=(($61)&4294967295);
        var $63=HEAP[$62];
        STACKTOP = __stackBase__;
        return $63;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fillcharset($p, $cs) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $i=__stackBase__+8;
        var $i1=__stackBase__+12;
        var $i2=__stackBase__+16;
        HEAP[$1]=$p;
        HEAP[$2]=$cs;
        var $3=HEAP[$1];
        var $4=(($3)&4294967295);
        var $5=$4;
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=unSign(($7), 8, 0);
        if ($8 == 2) {
          __label__ = 1; break;
        }
        else if ($8 == 1) {
          __label__ = 6; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 1: // $9
        HEAP[$i]=0;
        __label__ = 2; break;
      case 2: // $10
        var $11=HEAP[$i];
        var $12=((($11))|0) < 32;
        if ($12) { __label__ = 3; break; } else { __label__ = 5; break; }
      case 3: // $13
        var $14=HEAP[$i];
        var $15=HEAP[$1];
        var $16=(($15+4)&4294967295);
        var $17=$16;
        var $18=(($17+$14)&4294967295);
        var $19=HEAP[$18];
        var $20=HEAP[$i];
        var $21=HEAP[$2];
        var $22=(($21+$20)&4294967295);
        HEAP[$22]=$19;
        __label__ = 4; break;
      case 4: // $23
        var $24=HEAP[$i];
        var $25=((($24) + 1)&4294967295);
        HEAP[$i]=$25;
        __label__ = 2; break;
      case 5: // $26
        __label__ = 16; break;
      case 6: // $27
        HEAP[$i1]=0;
        __label__ = 7; break;
      case 7: // $28
        var $29=HEAP[$i1];
        var $30=((($29))|0) < 32;
        if ($30) { __label__ = 8; break; } else { __label__ = 10; break; }
      case 8: // $31
        var $32=HEAP[$i1];
        var $33=HEAP[$2];
        var $34=(($33+$32)&4294967295);
        HEAP[$34]=0;
        __label__ = 9; break;
      case 9: // $35
        var $36=HEAP[$i1];
        var $37=((($36) + 1)&4294967295);
        HEAP[$i1]=$37;
        __label__ = 7; break;
      case 10: // $38
        var $39=HEAP[$1];
        var $40=(($39)&4294967295);
        var $41=$40;
        var $42=(($41+1)&4294967295);
        var $43=HEAP[$42];
        var $44=unSign(($43), 8, 0);
        var $45=($44) & 7;
        var $46=1 << ($45);
        var $47=HEAP[$1];
        var $48=(($47)&4294967295);
        var $49=$48;
        var $50=(($49+1)&4294967295);
        var $51=HEAP[$50];
        var $52=unSign(($51), 8, 0);
        var $53=((($52))|0) >> 3;
        var $54=HEAP[$2];
        var $55=(($54+$53)&4294967295);
        var $56=HEAP[$55];
        var $57=unSign(($56), 8, 0);
        var $58=($57) | ($46);
        var $59=((($58)) & 255);
        HEAP[$55]=$59;
        __label__ = 16; break;
      case 11: // $60
        HEAP[$i2]=0;
        __label__ = 12; break;
      case 12: // $61
        var $62=HEAP[$i2];
        var $63=((($62))|0) < 32;
        if ($63) { __label__ = 13; break; } else { __label__ = 15; break; }
      case 13: // $64
        var $65=HEAP[$i2];
        var $66=HEAP[$2];
        var $67=(($66+$65)&4294967295);
        HEAP[$67]=-1;
        __label__ = 14; break;
      case 14: // $68
        var $69=HEAP[$i2];
        var $70=((($69) + 1)&4294967295);
        HEAP[$i2]=$70;
        __label__ = 12; break;
      case 15: // $71
        __label__ = 16; break;
      case 16: // $72
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _createcat($L, $catname, $catf) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $p=__stackBase__+12;
        var $i=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$catname;
        HEAP[$3]=$catf;
        var $4=HEAP[$1];
        var $5=_newcharset($4);
        HEAP[$p]=$5;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$i];
        var $8=((($7))|0) < 127;
        if ($8) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $9
        var $10=HEAP[$3];
        var $11=HEAP[$i];
        var $12=FUNCTION_TABLE[$10]($11);
        var $13=((($12))|0)!=0;
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $14
        var $15=HEAP[$i];
        var $16=($15) & 7;
        var $17=1 << ($16);
        var $18=HEAP[$i];
        var $19=((($18))|0) >> 3;
        var $20=HEAP[$p];
        var $21=(($20+4)&4294967295);
        var $22=$21;
        var $23=(($22+$19)&4294967295);
        var $24=HEAP[$23];
        var $25=unSign(($24), 8, 0);
        var $26=($25) | ($17);
        var $27=((($26)) & 255);
        HEAP[$23]=$27;
        __label__ = 4; break;
      case 4: // $28
        __label__ = 5; break;
      case 5: // $29
        var $30=HEAP[$i];
        var $31=((($30) + 1)&4294967295);
        HEAP[$i]=$31;
        __label__ = 1; break;
      case 6: // $32
        var $33=HEAP[$1];
        var $34=HEAP[$2];
        _lua_setfield($33, -2, $34);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _printpatt($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $op=__stackBase__+4;
        HEAP[$1]=$p;
        var $2=HEAP[$1];
        HEAP[$op]=$2;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$op];
        var $5=HEAP[$1];
        _printinst($4, $5);
        var $6=HEAP[$1];
        var $7=$6;
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=((($10))|0)==6;
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $12
        __label__ = 4; break;
      case 3: // $13
        var $14=HEAP[$1];
        var $15=_sizei($14);
        var $16=HEAP[$1];
        var $17=(($16+4*$15)&4294967295);
        HEAP[$1]=$17;
        __label__ = 1; break;
      case 4: // $18
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _printinst($op, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$op;
        HEAP[$2]=$p;
        var $3=HEAP[$2];
        var $4=HEAP[$1];
        var $5=($3);
        var $6=($4);
        var $7=((($5) - ($6))&4294967295);
        var $8=((((($7))|0)/4)|0);
        var $9=HEAP[$2];
        var $10=$9;
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=((_printinst_names+$13*4)&4294967295);
        var $15=HEAP[$14];
        var $16=_printf(((__str97)&4294967295), allocate([$8,0,0,0,$15,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        var $17=HEAP[$2];
        var $18=$17;
        var $19=(($18)&4294967295);
        var $20=HEAP[$19];
        var $21=unSign(($20), 8, 0);
        if ($21 == 1) {
          __label__ = 1; break;
        }
        else if ($21 == 0) {
          __label__ = 2; break;
        }
        else if ($21 == 18) {
          __label__ = 3; break;
        }
        else if ($21 == 21) {
          __label__ = 3; break;
        }
        else if ($21 == 19) {
          __label__ = 3; break;
        }
        else if ($21 == 20) {
          __label__ = 3; break;
        }
        else if ($21 == 22) {
          __label__ = 3; break;
        }
        else if ($21 == 23) {
          __label__ = 3; break;
        }
        else if ($21 == 2) {
          __label__ = 4; break;
        }
        else if ($21 == 3) {
          __label__ = 5; break;
        }
        else if ($21 == 10) {
          __label__ = 6; break;
        }
        else if ($21 == 7) {
          __label__ = 7; break;
        }
        else if ($21 == 8) {
          __label__ = 8; break;
        }
        else if ($21 == 9) {
          __label__ = 8; break;
        }
        else if ($21 == 11) {
          __label__ = 8; break;
        }
        else if ($21 == 12) {
          __label__ = 8; break;
        }
        else if ($21 == 13) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 1: // $22
        var $23=HEAP[$2];
        var $24=$23;
        var $25=(($24+1)&4294967295);
        var $26=HEAP[$25];
        var $27=unSign(($26), 8, 0);
        var $28=_printf(((__str98)&4294967295), allocate([$27,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        var $29=HEAP[$1];
        var $30=HEAP[$2];
        _printjmp($29, $30);
        __label__ = 10; break;
      case 2: // $31
        var $32=HEAP[$2];
        var $33=$32;
        var $34=(($33+1)&4294967295);
        var $35=HEAP[$34];
        var $36=unSign(($35), 8, 0);
        var $37=_printf(((__str99)&4294967295), allocate([$36,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        var $38=HEAP[$1];
        var $39=HEAP[$2];
        _printjmp($38, $39);
        __label__ = 10; break;
      case 3: // $40
        var $41=HEAP[$2];
        var $42=$41;
        var $43=(($42+1)&4294967295);
        var $44=HEAP[$43];
        var $45=unSign(($44), 8, 0);
        var $46=($45) & 15;
        _printcapkind($46);
        var $47=HEAP[$2];
        var $48=$47;
        var $49=(($48+1)&4294967295);
        var $50=HEAP[$49];
        var $51=unSign(($50), 8, 0);
        var $52=((($51))|0) >> 4;
        var $53=($52) & 15;
        var $54=HEAP[$2];
        var $55=$54;
        var $56=(($55+2)&4294967295);
        var $57=HEAP[$56];
        var $58=reSign(($57), 16, 0);
        var $59=_printf(((__str100)&4294967295), allocate([$53,0,0,0,$58,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK));
        __label__ = 10; break;
      case 4: // $60
        var $61=HEAP[$2];
        var $62=(($61+4)&4294967295);
        var $63=$62;
        var $64=(($63)&4294967295);
        _printcharset($64);
        var $65=HEAP[$1];
        var $66=HEAP[$2];
        _printjmp($65, $66);
        __label__ = 10; break;
      case 5: // $67
        var $68=HEAP[$2];
        var $69=(($68+4)&4294967295);
        var $70=$69;
        var $71=(($70)&4294967295);
        _printcharset($71);
        __label__ = 10; break;
      case 6: // $72
        var $73=HEAP[$2];
        var $74=$73;
        var $75=(($74+2)&4294967295);
        var $76=HEAP[$75];
        var $77=reSign(($76), 16, 0);
        var $78=_printf(((__str101)&4294967295), allocate([$77,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 10; break;
      case 7: // $79
        var $80=HEAP[$1];
        var $81=HEAP[$2];
        _printjmp($80, $81);
        var $82=HEAP[$2];
        var $83=$82;
        var $84=(($83+1)&4294967295);
        var $85=HEAP[$84];
        var $86=unSign(($85), 8, 0);
        var $87=_printf(((__str102)&4294967295), allocate([$86,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 10; break;
      case 8: // $88
        var $89=HEAP[$1];
        var $90=HEAP[$2];
        _printjmp($89, $90);
        __label__ = 10; break;
      case 9: // $91
        __label__ = 10; break;
      case 10: // $92
        var $93=_printf(((__str103)&4294967295), allocate(1, "i32", ALLOC_STACK));
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _printjmp($op, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$op;
        HEAP[$2]=$p;
        var $3=_printf(((__str122)&4294967295), allocate(1, "i32", ALLOC_STACK));
        var $4=HEAP[$2];
        var $5=$4;
        var $6=(($5+2)&4294967295);
        var $7=HEAP[$6];
        var $8=reSign(($7), 16, 0);
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $10
        var $11=_printf(((__str123)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 3; break;
      case 2: // $12
        var $13=HEAP[$2];
        var $14=HEAP[$2];
        var $15=(($14)&4294967295);
        var $16=$15;
        var $17=(($16+2)&4294967295);
        var $18=HEAP[$17];
        var $19=reSign(($18), 16, 0);
        var $20=(($13+4*$19)&4294967295);
        var $21=HEAP[$1];
        var $22=($20);
        var $23=($21);
        var $24=((($22) - ($23))&4294967295);
        var $25=((((($24))|0)/4)|0);
        var $26=_printf(((__str124)&4294967295), allocate([$25,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 3; break;
      case 3: // $27
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _printcapkind($kind) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $1=__stackBase__;
    HEAP[$1]=$kind;
    var $2=HEAP[$1];
    var $3=((_printcapkind_modes+$2*4)&4294967295);
    var $4=HEAP[$3];
    var $5=_printf(((__str121)&4294967295), allocate([$4,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
    STACKTOP = __stackBase__;
    return;
  }
  

  function _printcharset($st) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $i=__stackBase__+4;
        var $first=__stackBase__+8;
        HEAP[$1]=$st;
        var $2=_printf(((__str69765)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $3
        var $4=HEAP[$i];
        var $5=((($4))|0) <= 255;
        if ($5) { __label__ = 2; break; } else { __label__ = 14; break; }
      case 2: // $6
        var $7=HEAP[$i];
        HEAP[$first]=$7;
        __label__ = 3; break;
      case 3: // $8
        var $9=HEAP[$i];
        var $10=((($9))|0) >> 3;
        var $11=HEAP[$1];
        var $12=(($11+$10)&4294967295);
        var $13=HEAP[$12];
        var $14=unSign(($13), 8, 0);
        var $15=HEAP[$i];
        var $16=($15) & 7;
        var $17=1 << ($16);
        var $18=($14) & ($17);
        var $19=((($18))|0)!=0;
        if ($19) { __lastLabel__ = 3; __label__ = 4; break; } else { __lastLabel__ = 3; __label__ = 5; break; }
      case 4: // $20
        var $21=HEAP[$i];
        var $22=((($21))|0) <= 255;
        __lastLabel__ = 4; __label__ = 5; break;
      case 5: // $23
        var $24=__lastLabel__ == 3 ? 0 : ($22);
        if ($24) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $25
        var $26=HEAP[$i];
        var $27=((($26) + 1)&4294967295);
        HEAP[$i]=$27;
        __label__ = 3; break;
      case 7: // $28
        var $29=HEAP[$i];
        var $30=((($29) - 1)&4294967295);
        var $31=HEAP[$first];
        var $32=((($30))|0)==((($31))|0);
        if ($32) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $33
        var $34=HEAP[$first];
        var $35=_printf(((__str104)&4294967295), allocate([$34,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 12; break;
      case 9: // $36
        var $37=HEAP[$i];
        var $38=((($37) - 1)&4294967295);
        var $39=HEAP[$first];
        var $40=((($38))|0) > ((($39))|0);
        if ($40) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $41
        var $42=HEAP[$first];
        var $43=HEAP[$i];
        var $44=((($43) - 1)&4294967295);
        var $45=_printf(((__str105)&4294967295), allocate([$42,0,0,0,$44,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK));
        __label__ = 11; break;
      case 11: // $46
        __label__ = 12; break;
      case 12: // $47
        __label__ = 13; break;
      case 13: // $48
        var $49=HEAP[$i];
        var $50=((($49) + 1)&4294967295);
        HEAP[$i]=$50;
        __label__ = 1; break;
      case 14: // $51
        var $52=_printf(((__str106)&4294967295), allocate(1, "i32", ALLOC_STACK));
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _match781($L, $o, $s, $e, $op, $capture, $ptop) {
    var __stackBase__  = STACKTOP; STACKTOP += 1308; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 1308);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $6=__stackBase__+20;
        var $7=__stackBase__+24;
        var $8=__stackBase__+28;
        var $stackbase=__stackBase__+32;
        var $stacklimit=__stackBase__+1232;
        var $stack=__stackBase__+1236;
        var $capsize=__stackBase__+1240;
        var $captop=__stackBase__+1244;
        var $p=__stackBase__+1248;
        var $n=__stackBase__+1252;
        var $f=__stackBase__+1256;
        var $f1=__stackBase__+1260;
        var $c=__stackBase__+1264;
        var $f2=__stackBase__+1268;
        var $n3=__stackBase__+1272;
        var $c4=__stackBase__+1276;
        var $r=__stackBase__+1280;
        var $f5=__stackBase__+1284;
        var $fr=__stackBase__+1288;
        var $ncap=__stackBase__+1292;
        var $res=__stackBase__+1296;
        var $n6=__stackBase__+1300;
        var $s1=__stackBase__+1304;
        HEAP[$2]=$L;
        HEAP[$3]=$o;
        HEAP[$4]=$s;
        HEAP[$5]=$e;
        HEAP[$6]=$op;
        HEAP[$7]=$capture;
        HEAP[$8]=$ptop;
        var $9=(($stackbase)&4294967295);
        var $10=(($9+1200)&4294967295);
        HEAP[$stacklimit]=$10;
        var $11=(($stackbase)&4294967295);
        HEAP[$stack]=$11;
        HEAP[$capsize]=32;
        HEAP[$captop]=0;
        var $12=HEAP[$6];
        HEAP[$p]=$12;
        var $13=HEAP[$stack];
        var $14=(($13+4)&4294967295);
        HEAP[$14]=_giveup;
        var $15=HEAP[$4];
        var $16=HEAP[$stack];
        var $17=(($16)&4294967295);
        HEAP[$17]=$15;
        var $18=HEAP[$stack];
        var $19=(($18+8)&4294967295);
        HEAP[$19]=0;
        var $20=HEAP[$stack];
        var $21=(($20+12)&4294967295);
        HEAP[$stack]=$21;
        var $22=HEAP[$2];
        var $23=(($stackbase)&4294967295);
        var $24=$23;
        _lua_pushlightuserdata($22, $24);
        __label__ = 1; break;
      case 1: // $25
        var $26=HEAP[$p];
        var $27=$26;
        var $28=(($27)&4294967295);
        var $29=HEAP[$28];
        var $30=unSign(($29), 8, 0);
        if ($30 == 6) {
          __label__ = 2; break;
        }
        else if ($30 == 16) {
          __label__ = 6; break;
        }
        else if ($30 == 5) {
          __label__ = 10; break;
        }
        else if ($30 == 0) {
          __label__ = 15; break;
        }
        else if ($30 == 1) {
          __label__ = 22; break;
        }
        else if ($30 == 2) {
          __label__ = 30; break;
        }
        else if ($30 == 4) {
          __label__ = 38; break;
        }
        else if ($30 == 3) {
          __label__ = 41; break;
        }
        else if ($30 == 17) {
          __label__ = 48; break;
        }
        else if ($30 == 8) {
          __label__ = 55; break;
        }
        else if ($30 == 7) {
          __label__ = 56; break;
        }
        else if ($30 == 9) {
          __label__ = 59; break;
        }
        else if ($30 == 11) {
          __label__ = 62; break;
        }
        else if ($30 == 12) {
          __label__ = 67; break;
        }
        else if ($30 == 13) {
          __label__ = 72; break;
        }
        else if ($30 == 14) {
          __label__ = 77; break;
        }
        else if ($30 == 15) {
          __label__ = 81; break;
        }
        else if ($30 == 23) {
          __label__ = 89; break;
        }
        else if ($30 == 22) {
          __label__ = 104; break;
        }
        else if ($30 == 19) {
          __label__ = 111; break;
        }
        else if ($30 == 20) {
          __label__ = 111; break;
        }
        else if ($30 == 21) {
          __label__ = 112; break;
        }
        else if ($30 == 18) {
          __label__ = 113; break;
        }
        else if ($30 == 10) {
          __label__ = 117; break;
        }
        else {
        __label__ = 118; break;
        }
        
      case 2: // $31
        var $32=HEAP[$stack];
        var $33=HEAP[$2];
        var $34=HEAP[$8];
        var $35=((($34) + 4)&4294967295);
        var $36=_lua_touserdata($33, $35);
        var $37=$36;
        var $38=(($37+12)&4294967295);
        var $39=((($32))|0)==((($38))|0);
        if ($39) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $40
        __label__ = 5; break;
      case 4: // $41
        ___assert_fail(((__str135)&4294967295), ((__str30726)&4294967295), 459, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 5; break;
      case 5: // $43
        var $44=HEAP[$captop];
        var $45=HEAP[$7];
        var $46=(($45+8*$44)&4294967295);
        var $47=(($46+6)&4294967295);
        HEAP[$47]=0;
        var $48=HEAP[$captop];
        var $49=HEAP[$7];
        var $50=(($49+8*$48)&4294967295);
        var $51=(($50)&4294967295);
        HEAP[$51]=0;
        var $52=HEAP[$4];
        HEAP[$1]=$52;
        __label__ = 119; break;
      case 6: // $53
        var $54=HEAP[$stack];
        var $55=HEAP[$2];
        var $56=HEAP[$8];
        var $57=((($56) + 4)&4294967295);
        var $58=_lua_touserdata($55, $57);
        var $59=$58;
        var $60=((($54))|0)==((($59))|0);
        if ($60) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $61
        __label__ = 9; break;
      case 8: // $62
        ___assert_fail(((__str136778)&4294967295), ((__str30726)&4294967295), 465, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 9; break;
      case 9: // $64
        HEAP[$1]=0;
        __label__ = 119; break;
      case 10: // $65
        var $66=HEAP[$stack];
        var $67=HEAP[$2];
        var $68=HEAP[$8];
        var $69=((($68) + 4)&4294967295);
        var $70=_lua_touserdata($67, $69);
        var $71=$70;
        var $72=((($66))>>>0) > ((($71))>>>0);
        if ($72) { __label__ = 11; break; } else { __label__ = 13; break; }
      case 11: // $73
        var $74=HEAP[$stack];
        var $75=(($74+-12)&4294967295);
        var $76=(($75)&4294967295);
        var $77=HEAP[$76];
        var $78=((($77))|0)==0;
        if ($78) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $79
        __label__ = 14; break;
      case 13: // $80
        ___assert_fail(((__str137)&4294967295), ((__str30726)&4294967295), 469, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 14; break;
      case 14: // $82
        var $83=HEAP[$stack];
        var $84=(($83+-12)&4294967295);
        HEAP[$stack]=$84;
        var $85=(($84+4)&4294967295);
        var $86=HEAP[$85];
        HEAP[$p]=$86;
        __label__ = 1; break;
      case 15: // $87
        var $88=HEAP[$p];
        var $89=$88;
        var $90=(($89+1)&4294967295);
        var $91=HEAP[$90];
        var $92=unSign(($91), 8, 0);
        HEAP[$n]=$92;
        var $93=HEAP[$n];
        var $94=HEAP[$5];
        var $95=HEAP[$4];
        var $96=($94);
        var $97=($95);
        var $98=((($96) - ($97))&4294967295);
        var $99=((($93))|0) <= ((($98))|0);
        if ($99) { __label__ = 16; break; } else { __label__ = 17; break; }
      case 16: // $100
        var $101=HEAP[$p];
        var $102=(($101+4)&4294967295);
        HEAP[$p]=$102;
        var $103=HEAP[$n];
        var $104=HEAP[$4];
        var $105=(($104+$103)&4294967295);
        HEAP[$4]=$105;
        __label__ = 21; break;
      case 17: // $106
        var $107=HEAP[$p];
        var $108=$107;
        var $109=(($108+2)&4294967295);
        var $110=HEAP[$109];
        var $111=reSign(($110), 16, 0);
        HEAP[$f]=$111;
        var $112=HEAP[$f];
        var $113=((($112))|0)!=0;
        if ($113) { __label__ = 18; break; } else { __label__ = 19; break; }
      case 18: // $114
        var $115=HEAP[$f];
        var $116=HEAP[$p];
        var $117=(($116+4*$115)&4294967295);
        HEAP[$p]=$117;
        __label__ = 20; break;
      case 19: // $118
        __label__ = 82; break;
      case 20: // $119
        __label__ = 21; break;
      case 21: // $120
        __label__ = 1; break;
      case 22: // $121
        var $122=HEAP[$4];
        var $123=HEAP[$122];
        var $124=unSign(($123), 8, 0);
        var $125=HEAP[$p];
        var $126=$125;
        var $127=(($126+1)&4294967295);
        var $128=HEAP[$127];
        var $129=unSign(($128), 8, 0);
        var $130=((($124))|0)==((($129))|0);
        if ($130) { __label__ = 23; break; } else { __label__ = 25; break; }
      case 23: // $131
        var $132=HEAP[$4];
        var $133=HEAP[$5];
        var $134=((($132))>>>0) < ((($133))>>>0);
        if ($134) { __label__ = 24; break; } else { __label__ = 25; break; }
      case 24: // $135
        var $136=HEAP[$p];
        var $137=(($136+4)&4294967295);
        HEAP[$p]=$137;
        var $138=HEAP[$4];
        var $139=(($138+1)&4294967295);
        HEAP[$4]=$139;
        __label__ = 29; break;
      case 25: // $140
        var $141=HEAP[$p];
        var $142=$141;
        var $143=(($142+2)&4294967295);
        var $144=HEAP[$143];
        var $145=reSign(($144), 16, 0);
        HEAP[$f1]=$145;
        var $146=HEAP[$f1];
        var $147=((($146))|0)!=0;
        if ($147) { __label__ = 26; break; } else { __label__ = 27; break; }
      case 26: // $148
        var $149=HEAP[$f1];
        var $150=HEAP[$p];
        var $151=(($150+4*$149)&4294967295);
        HEAP[$p]=$151;
        __label__ = 28; break;
      case 27: // $152
        __label__ = 82; break;
      case 28: // $153
        __label__ = 29; break;
      case 29: // $154
        __label__ = 1; break;
      case 30: // $155
        var $156=HEAP[$4];
        var $157=HEAP[$156];
        var $158=unSign(($157), 8, 0);
        HEAP[$c]=$158;
        var $159=HEAP[$c];
        var $160=((($159))|0) >> 3;
        var $161=HEAP[$p];
        var $162=(($161+4)&4294967295);
        var $163=$162;
        var $164=(($163+$160)&4294967295);
        var $165=HEAP[$164];
        var $166=unSign(($165), 8, 0);
        var $167=HEAP[$c];
        var $168=($167) & 7;
        var $169=1 << ($168);
        var $170=($166) & ($169);
        var $171=((($170))|0)!=0;
        if ($171) { __label__ = 31; break; } else { __label__ = 33; break; }
      case 31: // $172
        var $173=HEAP[$4];
        var $174=HEAP[$5];
        var $175=((($173))>>>0) < ((($174))>>>0);
        if ($175) { __label__ = 32; break; } else { __label__ = 33; break; }
      case 32: // $176
        var $177=HEAP[$p];
        var $178=(($177+36)&4294967295);
        HEAP[$p]=$178;
        var $179=HEAP[$4];
        var $180=(($179+1)&4294967295);
        HEAP[$4]=$180;
        __label__ = 37; break;
      case 33: // $181
        var $182=HEAP[$p];
        var $183=$182;
        var $184=(($183+2)&4294967295);
        var $185=HEAP[$184];
        var $186=reSign(($185), 16, 0);
        HEAP[$f2]=$186;
        var $187=HEAP[$f2];
        var $188=((($187))|0)!=0;
        if ($188) { __label__ = 34; break; } else { __label__ = 35; break; }
      case 34: // $189
        var $190=HEAP[$f2];
        var $191=HEAP[$p];
        var $192=(($191+4*$190)&4294967295);
        HEAP[$p]=$192;
        __label__ = 36; break;
      case 35: // $193
        __label__ = 82; break;
      case 36: // $194
        __label__ = 37; break;
      case 37: // $195
        __label__ = 1; break;
      case 38: // $196
        var $197=HEAP[$p];
        var $198=$197;
        var $199=(($198+1)&4294967295);
        var $200=HEAP[$199];
        var $201=unSign(($200), 8, 0);
        HEAP[$n3]=$201;
        var $202=HEAP[$n3];
        var $203=HEAP[$4];
        var $204=HEAP[$3];
        var $205=($203);
        var $206=($204);
        var $207=((($205) - ($206))&4294967295);
        var $208=((($202))|0) > ((($207))|0);
        if ($208) { __label__ = 39; break; } else { __label__ = 40; break; }
      case 39: // $209
        __label__ = 82; break;
      case 40: // $210
        var $211=HEAP[$n3];
        var $212=HEAP[$4];
        var $213=((0 - ($211))&4294967295);
        var $214=(($212+$213)&4294967295);
        HEAP[$4]=$214;
        var $215=HEAP[$p];
        var $216=(($215+4)&4294967295);
        HEAP[$p]=$216;
        __label__ = 1; break;
      case 41: // $217
        __label__ = 42; break;
      case 42: // $218
        var $219=HEAP[$4];
        var $220=HEAP[$5];
        var $221=((($219))>>>0) < ((($220))>>>0);
        if ($221) { __label__ = 43; break; } else { __label__ = 47; break; }
      case 43: // $222
        var $223=HEAP[$4];
        var $224=HEAP[$223];
        var $225=unSign(($224), 8, 0);
        HEAP[$c4]=$225;
        var $226=HEAP[$c4];
        var $227=((($226))|0) >> 3;
        var $228=HEAP[$p];
        var $229=(($228+4)&4294967295);
        var $230=$229;
        var $231=(($230+$227)&4294967295);
        var $232=HEAP[$231];
        var $233=unSign(($232), 8, 0);
        var $234=HEAP[$c4];
        var $235=($234) & 7;
        var $236=1 << ($235);
        var $237=($233) & ($236);
        var $238=((($237))|0)!=0;
        if ($238) { __label__ = 45; break; } else { __label__ = 44; break; }
      case 44: // $239
        __label__ = 47; break;
      case 45: // $240
        __label__ = 46; break;
      case 46: // $241
        var $242=HEAP[$4];
        var $243=(($242+1)&4294967295);
        HEAP[$4]=$243;
        __label__ = 42; break;
      case 47: // $244
        var $245=HEAP[$p];
        var $246=(($245+36)&4294967295);
        HEAP[$p]=$246;
        __label__ = 1; break;
      case 48: // $247
        var $248=HEAP[$p];
        var $249=(($248+4)&4294967295);
        var $250=$249;
        var $251=HEAP[$250];
        var $252=HEAP[$4];
        var $253=HEAP[$5];
        var $254=HEAP[$3];
        var $255=HEAP[$p];
        var $256=(($255+8)&4294967295);
        var $257=$256;
        var $258=(($257)&4294967295);
        var $259=FUNCTION_TABLE[$251]($252, $253, $254, $258);
        HEAP[$r]=$259;
        var $260=HEAP[$r];
        var $261=((($260))|0)!=0;
        if ($261) { __label__ = 49; break; } else { __label__ = 50; break; }
      case 49: // $262
        var $263=HEAP[$r];
        HEAP[$4]=$263;
        var $264=HEAP[$p];
        var $265=$264;
        var $266=(($265+1)&4294967295);
        var $267=HEAP[$266];
        var $268=unSign(($267), 8, 0);
        var $269=((($268) + 2)&4294967295);
        var $270=HEAP[$p];
        var $271=(($270+4*$269)&4294967295);
        HEAP[$p]=$271;
        __label__ = 54; break;
      case 50: // $272
        var $273=HEAP[$p];
        var $274=$273;
        var $275=(($274+2)&4294967295);
        var $276=HEAP[$275];
        var $277=reSign(($276), 16, 0);
        HEAP[$f5]=$277;
        var $278=HEAP[$f5];
        var $279=((($278))|0)!=0;
        if ($279) { __label__ = 51; break; } else { __label__ = 52; break; }
      case 51: // $280
        var $281=HEAP[$f5];
        var $282=HEAP[$p];
        var $283=(($282+4*$281)&4294967295);
        HEAP[$p]=$283;
        __label__ = 53; break;
      case 52: // $284
        __label__ = 82; break;
      case 53: // $285
        __label__ = 54; break;
      case 54: // $286
        __label__ = 1; break;
      case 55: // $287
        var $288=HEAP[$p];
        var $289=$288;
        var $290=(($289+2)&4294967295);
        var $291=HEAP[$290];
        var $292=reSign(($291), 16, 0);
        var $293=HEAP[$p];
        var $294=(($293+4*$292)&4294967295);
        HEAP[$p]=$294;
        __label__ = 1; break;
      case 56: // $295
        var $296=HEAP[$stack];
        var $297=HEAP[$stacklimit];
        var $298=((($296))|0)==((($297))|0);
        if ($298) { __label__ = 57; break; } else { __label__ = 58; break; }
      case 57: // $299
        var $300=HEAP[$2];
        var $301=HEAP[$8];
        var $302=_doublestack($300, $stacklimit, $301);
        HEAP[$stack]=$302;
        __label__ = 58; break;
      case 58: // $303
        var $304=HEAP[$p];
        var $305=HEAP[$p];
        var $306=(($305)&4294967295);
        var $307=$306;
        var $308=(($307+2)&4294967295);
        var $309=HEAP[$308];
        var $310=reSign(($309), 16, 0);
        var $311=(($304+4*$310)&4294967295);
        var $312=HEAP[$stack];
        var $313=(($312+4)&4294967295);
        HEAP[$313]=$311;
        var $314=HEAP[$4];
        var $315=HEAP[$p];
        var $316=$315;
        var $317=(($316+1)&4294967295);
        var $318=HEAP[$317];
        var $319=unSign(($318), 8, 0);
        var $320=((0 - ($319))&4294967295);
        var $321=(($314+$320)&4294967295);
        var $322=HEAP[$stack];
        var $323=(($322)&4294967295);
        HEAP[$323]=$321;
        var $324=HEAP[$captop];
        var $325=HEAP[$stack];
        var $326=(($325+8)&4294967295);
        HEAP[$326]=$324;
        var $327=HEAP[$stack];
        var $328=(($327+12)&4294967295);
        HEAP[$stack]=$328;
        var $329=HEAP[$p];
        var $330=(($329+4)&4294967295);
        HEAP[$p]=$330;
        __label__ = 1; break;
      case 59: // $331
        var $332=HEAP[$stack];
        var $333=HEAP[$stacklimit];
        var $334=((($332))|0)==((($333))|0);
        if ($334) { __label__ = 60; break; } else { __label__ = 61; break; }
      case 60: // $335
        var $336=HEAP[$2];
        var $337=HEAP[$8];
        var $338=_doublestack($336, $stacklimit, $337);
        HEAP[$stack]=$338;
        __label__ = 61; break;
      case 61: // $339
        var $340=HEAP[$stack];
        var $341=(($340)&4294967295);
        HEAP[$341]=0;
        var $342=HEAP[$p];
        var $343=(($342+4)&4294967295);
        var $344=HEAP[$stack];
        var $345=(($344+4)&4294967295);
        HEAP[$345]=$343;
        var $346=HEAP[$stack];
        var $347=(($346+12)&4294967295);
        HEAP[$stack]=$347;
        var $348=HEAP[$p];
        var $349=$348;
        var $350=(($349+2)&4294967295);
        var $351=HEAP[$350];
        var $352=reSign(($351), 16, 0);
        var $353=HEAP[$p];
        var $354=(($353+4*$352)&4294967295);
        HEAP[$p]=$354;
        __label__ = 1; break;
      case 62: // $355
        var $356=HEAP[$stack];
        var $357=HEAP[$2];
        var $358=HEAP[$8];
        var $359=((($358) + 4)&4294967295);
        var $360=_lua_touserdata($357, $359);
        var $361=$360;
        var $362=((($356))>>>0) > ((($361))>>>0);
        if ($362) { __label__ = 63; break; } else { __label__ = 65; break; }
      case 63: // $363
        var $364=HEAP[$stack];
        var $365=(($364+-12)&4294967295);
        var $366=(($365)&4294967295);
        var $367=HEAP[$366];
        var $368=((($367))|0)!=0;
        if ($368) { __label__ = 64; break; } else { __label__ = 65; break; }
      case 64: // $369
        __label__ = 66; break;
      case 65: // $370
        ___assert_fail(((__str138)&4294967295), ((__str30726)&4294967295), 535, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 66; break;
      case 66: // $372
        var $373=HEAP[$stack];
        var $374=(($373+-12)&4294967295);
        HEAP[$stack]=$374;
        var $375=HEAP[$p];
        var $376=$375;
        var $377=(($376+2)&4294967295);
        var $378=HEAP[$377];
        var $379=reSign(($378), 16, 0);
        var $380=HEAP[$p];
        var $381=(($380+4*$379)&4294967295);
        HEAP[$p]=$381;
        __label__ = 1; break;
      case 67: // $382
        var $383=HEAP[$stack];
        var $384=HEAP[$2];
        var $385=HEAP[$8];
        var $386=((($385) + 4)&4294967295);
        var $387=_lua_touserdata($384, $386);
        var $388=$387;
        var $389=((($383))>>>0) > ((($388))>>>0);
        if ($389) { __label__ = 68; break; } else { __label__ = 70; break; }
      case 68: // $390
        var $391=HEAP[$stack];
        var $392=(($391+-12)&4294967295);
        var $393=(($392)&4294967295);
        var $394=HEAP[$393];
        var $395=((($394))|0)!=0;
        if ($395) { __label__ = 69; break; } else { __label__ = 70; break; }
      case 69: // $396
        __label__ = 71; break;
      case 70: // $397
        ___assert_fail(((__str138)&4294967295), ((__str30726)&4294967295), 541, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 71; break;
      case 71: // $399
        var $400=HEAP[$4];
        var $401=HEAP[$stack];
        var $402=(($401+-12)&4294967295);
        var $403=(($402)&4294967295);
        HEAP[$403]=$400;
        var $404=HEAP[$captop];
        var $405=HEAP[$stack];
        var $406=(($405+-12)&4294967295);
        var $407=(($406+8)&4294967295);
        HEAP[$407]=$404;
        var $408=HEAP[$p];
        var $409=$408;
        var $410=(($409+2)&4294967295);
        var $411=HEAP[$410];
        var $412=reSign(($411), 16, 0);
        var $413=HEAP[$p];
        var $414=(($413+4*$412)&4294967295);
        HEAP[$p]=$414;
        __label__ = 1; break;
      case 72: // $415
        var $416=HEAP[$stack];
        var $417=HEAP[$2];
        var $418=HEAP[$8];
        var $419=((($418) + 4)&4294967295);
        var $420=_lua_touserdata($417, $419);
        var $421=$420;
        var $422=((($416))>>>0) > ((($421))>>>0);
        if ($422) { __label__ = 73; break; } else { __label__ = 75; break; }
      case 73: // $423
        var $424=HEAP[$stack];
        var $425=(($424+-12)&4294967295);
        var $426=(($425)&4294967295);
        var $427=HEAP[$426];
        var $428=((($427))|0)!=0;
        if ($428) { __label__ = 74; break; } else { __label__ = 75; break; }
      case 74: // $429
        __label__ = 76; break;
      case 75: // $430
        ___assert_fail(((__str138)&4294967295), ((__str30726)&4294967295), 548, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 76; break;
      case 76: // $432
        var $433=HEAP[$stack];
        var $434=(($433+-12)&4294967295);
        HEAP[$stack]=$434;
        var $435=(($434)&4294967295);
        var $436=HEAP[$435];
        HEAP[$4]=$436;
        var $437=HEAP[$stack];
        var $438=(($437+8)&4294967295);
        var $439=HEAP[$438];
        HEAP[$captop]=$439;
        var $440=HEAP[$p];
        var $441=$440;
        var $442=(($441+2)&4294967295);
        var $443=HEAP[$442];
        var $444=reSign(($443), 16, 0);
        var $445=HEAP[$p];
        var $446=(($445+4*$444)&4294967295);
        HEAP[$p]=$446;
        __label__ = 1; break;
      case 77: // $447
        var $448=HEAP[$stack];
        var $449=HEAP[$2];
        var $450=HEAP[$8];
        var $451=((($450) + 4)&4294967295);
        var $452=_lua_touserdata($449, $451);
        var $453=$452;
        var $454=((($448))>>>0) > ((($453))>>>0);
        if ($454) { __label__ = 78; break; } else { __label__ = 79; break; }
      case 78: // $455
        __label__ = 80; break;
      case 79: // $456
        ___assert_fail(((__str139)&4294967295), ((__str30726)&4294967295), 555, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 80; break;
      case 80: // $458
        var $459=HEAP[$stack];
        var $460=(($459+-12)&4294967295);
        HEAP[$stack]=$460;
        __label__ = 81; break;
      case 81: // $461
        __label__ = 82; break;
      case 82: // $462
        __label__ = 83; break;
      case 83: // $463
        var $464=HEAP[$stack];
        var $465=HEAP[$2];
        var $466=HEAP[$8];
        var $467=((($466) + 4)&4294967295);
        var $468=_lua_touserdata($465, $467);
        var $469=$468;
        var $470=((($464))>>>0) > ((($469))>>>0);
        if ($470) { __label__ = 84; break; } else { __label__ = 85; break; }
      case 84: // $471
        __label__ = 86; break;
      case 85: // $472
        ___assert_fail(((__str139)&4294967295), ((__str30726)&4294967295), 561, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 86; break;
      case 86: // $474
        var $475=HEAP[$stack];
        var $476=(($475+-12)&4294967295);
        HEAP[$stack]=$476;
        var $477=(($476)&4294967295);
        var $478=HEAP[$477];
        HEAP[$4]=$478;
        __label__ = 87; break;
      case 87: // $479
        var $480=HEAP[$4];
        var $481=((($480))|0)==0;
        if ($481) { __label__ = 83; break; } else { __label__ = 88; break; }
      case 88: // $482
        var $483=HEAP[$stack];
        var $484=(($483+8)&4294967295);
        var $485=HEAP[$484];
        HEAP[$captop]=$485;
        var $486=HEAP[$stack];
        var $487=(($486+4)&4294967295);
        var $488=HEAP[$487];
        HEAP[$p]=$488;
        __label__ = 1; break;
      case 89: // $489
        var $490=HEAP[$2];
        var $491=_lua_gettop($490);
        var $492=((($491) + 1)&4294967295);
        HEAP[$fr]=$492;
        var $493=HEAP[$2];
        var $494=HEAP[$7];
        var $495=HEAP[$captop];
        var $496=(($494+8*$495)&4294967295);
        var $497=HEAP[$7];
        var $498=HEAP[$3];
        var $499=HEAP[$4];
        var $500=HEAP[$8];
        var $501=_runtimecap($493, $496, $497, $498, $499, $500);
        HEAP[$ncap]=$501;
        var $502=HEAP[$2];
        var $503=HEAP[$fr];
        var $504=_lua_tointeger($502, $503);
        var $505=((($504) - 1)&4294967295);
        HEAP[$res]=$505;
        var $506=HEAP[$2];
        var $507=_lua_gettop($506);
        var $508=HEAP[$fr];
        var $509=((($507) - ($508))&4294967295);
        HEAP[$n6]=$509;
        var $510=HEAP[$res];
        var $511=((($510))|0)==-1;
        if ($511) { __label__ = 90; break; } else { __label__ = 96; break; }
      case 90: // $512
        var $513=HEAP[$2];
        var $514=HEAP[$fr];
        var $515=_lua_toboolean($513, $514);
        var $516=((($515))|0)!=0;
        if ($516) { __label__ = 92; break; } else { __label__ = 91; break; }
      case 91: // $517
        var $518=HEAP[$2];
        var $519=HEAP[$fr];
        var $520=((($519) - 1)&4294967295);
        _lua_settop($518, $520);
        __label__ = 82; break;
      case 92: // $521
        var $522=HEAP[$2];
        var $523=HEAP[$fr];
        var $524=_lua_type($522, $523);
        var $525=((($524))|0)==1;
        if ($525) { __label__ = 93; break; } else { __label__ = 94; break; }
      case 93: // $526
        var $527=HEAP[$4];
        var $528=HEAP[$3];
        var $529=($527);
        var $530=($528);
        var $531=((($529) - ($530))&4294967295);
        HEAP[$res]=$531;
        __label__ = 94; break;
      case 94: // $532
        __label__ = 95; break;
      case 95: // $533
        __label__ = 96; break;
      case 96: // $534
        var $535=HEAP[$res];
        var $536=HEAP[$4];
        var $537=HEAP[$3];
        var $538=($536);
        var $539=($537);
        var $540=((($538) - ($539))&4294967295);
        var $541=((($535))|0) < ((($540))|0);
        if ($541) { __label__ = 98; break; } else { __label__ = 97; break; }
      case 97: // $542
        var $543=HEAP[$res];
        var $544=HEAP[$5];
        var $545=HEAP[$3];
        var $546=($544);
        var $547=($545);
        var $548=((($546) - ($547))&4294967295);
        var $549=((($543))|0) > ((($548))|0);
        if ($549) { __label__ = 98; break; } else { __label__ = 99; break; }
      case 98: // $550
        var $551=HEAP[$2];
        var $552=_luaL_error($551, ((__str140)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 99; break;
      case 99: // $553
        var $554=HEAP[$3];
        var $555=HEAP[$res];
        var $556=(($554+$555)&4294967295);
        HEAP[$4]=$556;
        var $557=HEAP[$ncap];
        var $558=HEAP[$captop];
        var $559=((($558) - ($557))&4294967295);
        HEAP[$captop]=$559;
        var $560=HEAP[$2];
        var $561=HEAP[$fr];
        _lua_remove($560, $561);
        var $562=HEAP[$n6];
        var $563=((($562))|0) > 0;
        if ($563) { __label__ = 100; break; } else { __label__ = 103; break; }
      case 100: // $564
        var $565=HEAP[$n6];
        var $566=((($565) + 1)&4294967295);
        var $567=HEAP[$captop];
        var $568=((($567) + ($566))&4294967295);
        HEAP[$captop]=$568;
        var $569=HEAP[$capsize];
        var $570=((($568))|0) >= ((($569))|0);
        if ($570) { __label__ = 101; break; } else { __label__ = 102; break; }
      case 101: // $571
        var $572=HEAP[$2];
        var $573=HEAP[$7];
        var $574=HEAP[$captop];
        var $575=HEAP[$8];
        var $576=_doublecap($572, $573, $574, $575);
        HEAP[$7]=$576;
        var $577=HEAP[$captop];
        var $578=((2 * ($577))&4294967295);
        HEAP[$capsize]=$578;
        __label__ = 102; break;
      case 102: // $579
        var $580=HEAP[$4];
        var $581=HEAP[$7];
        var $582=HEAP[$captop];
        var $583=(($581+8*$582)&4294967295);
        var $584=HEAP[$n6];
        var $585=((0 - ($584))&4294967295);
        var $586=(($583+8*$585)&4294967295);
        var $587=(($586+-8)&4294967295);
        var $588=HEAP[$n6];
        var $589=HEAP[$fr];
        _adddyncaptures($580, $587, $588, $589);
        __label__ = 103; break;
      case 103: // $590
        var $591=HEAP[$p];
        var $592=(($591+4)&4294967295);
        HEAP[$p]=$592;
        __label__ = 1; break;
      case 104: // $593
        var $594=HEAP[$4];
        var $595=HEAP[$p];
        var $596=$595;
        var $597=(($596+1)&4294967295);
        var $598=HEAP[$597];
        var $599=unSign(($598), 8, 0);
        var $600=((($599))|0) >> 4;
        var $601=($600) & 15;
        var $602=((0 - ($601))&4294967295);
        var $603=(($594+$602)&4294967295);
        HEAP[$s1]=$603;
        var $604=HEAP[$captop];
        var $605=((($604))|0) > 0;
        if ($605) { __label__ = 105; break; } else { __label__ = 106; break; }
      case 105: // $606
        __label__ = 107; break;
      case 106: // $607
        ___assert_fail(((__str141)&4294967295), ((__str30726)&4294967295), 598, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 107; break;
      case 107: // $609
        var $610=HEAP[$captop];
        var $611=((($610) - 1)&4294967295);
        var $612=HEAP[$7];
        var $613=(($612+8*$611)&4294967295);
        var $614=(($613+7)&4294967295);
        var $615=HEAP[$614];
        var $616=unSign(($615), 8, 0);
        var $617=((($616))|0)==0;
        if ($617) { __label__ = 108; break; } else { __label__ = 110; break; }
      case 108: // $618
        var $619=HEAP[$s1];
        var $620=HEAP[$captop];
        var $621=((($620) - 1)&4294967295);
        var $622=HEAP[$7];
        var $623=(($622+8*$621)&4294967295);
        var $624=(($623)&4294967295);
        var $625=HEAP[$624];
        var $626=($619);
        var $627=($625);
        var $628=((($626) - ($627))&4294967295);
        var $629=((($628))|0) < 255;
        if ($629) { __label__ = 109; break; } else { __label__ = 110; break; }
      case 109: // $630
        var $631=HEAP[$s1];
        var $632=HEAP[$captop];
        var $633=((($632) - 1)&4294967295);
        var $634=HEAP[$7];
        var $635=(($634+8*$633)&4294967295);
        var $636=(($635)&4294967295);
        var $637=HEAP[$636];
        var $638=($631);
        var $639=($637);
        var $640=((($638) - ($639))&4294967295);
        var $641=((($640) + 1)&4294967295);
        var $642=((($641)) & 255);
        var $643=HEAP[$captop];
        var $644=((($643) - 1)&4294967295);
        var $645=HEAP[$7];
        var $646=(($645+8*$644)&4294967295);
        var $647=(($646+7)&4294967295);
        HEAP[$647]=$642;
        var $648=HEAP[$p];
        var $649=(($648+4)&4294967295);
        HEAP[$p]=$649;
        __label__ = 1; break;
      case 110: // $650
        var $651=HEAP[$captop];
        var $652=HEAP[$7];
        var $653=(($652+8*$651)&4294967295);
        var $654=(($653+7)&4294967295);
        HEAP[$654]=1;
        __label__ = 114; break;
      case 111: // $655
        var $656=HEAP[$captop];
        var $657=HEAP[$7];
        var $658=(($657+8*$656)&4294967295);
        var $659=(($658+7)&4294967295);
        HEAP[$659]=1;
        __label__ = 114; break;
      case 112: // $660
        var $661=HEAP[$captop];
        var $662=HEAP[$7];
        var $663=(($662+8*$661)&4294967295);
        var $664=(($663+7)&4294967295);
        HEAP[$664]=0;
        __label__ = 114; break;
      case 113: // $665
        var $666=HEAP[$p];
        var $667=$666;
        var $668=(($667+1)&4294967295);
        var $669=HEAP[$668];
        var $670=unSign(($669), 8, 0);
        var $671=((($670))|0) >> 4;
        var $672=($671) & 15;
        var $673=((($672) + 1)&4294967295);
        var $674=((($673)) & 255);
        var $675=HEAP[$captop];
        var $676=HEAP[$7];
        var $677=(($676+8*$675)&4294967295);
        var $678=(($677+7)&4294967295);
        HEAP[$678]=$674;
        __label__ = 114; break;
      case 114: // $679
        var $680=HEAP[$4];
        var $681=HEAP[$p];
        var $682=$681;
        var $683=(($682+1)&4294967295);
        var $684=HEAP[$683];
        var $685=unSign(($684), 8, 0);
        var $686=((($685))|0) >> 4;
        var $687=($686) & 15;
        var $688=((0 - ($687))&4294967295);
        var $689=(($680+$688)&4294967295);
        var $690=HEAP[$captop];
        var $691=HEAP[$7];
        var $692=(($691+8*$690)&4294967295);
        var $693=(($692)&4294967295);
        HEAP[$693]=$689;
        var $694=HEAP[$p];
        var $695=$694;
        var $696=(($695+2)&4294967295);
        var $697=HEAP[$696];
        var $698=HEAP[$captop];
        var $699=HEAP[$7];
        var $700=(($699+8*$698)&4294967295);
        var $701=(($700+4)&4294967295);
        HEAP[$701]=$697;
        var $702=HEAP[$p];
        var $703=$702;
        var $704=(($703+1)&4294967295);
        var $705=HEAP[$704];
        var $706=unSign(($705), 8, 0);
        var $707=($706) & 15;
        var $708=((($707)) & 255);
        var $709=HEAP[$captop];
        var $710=HEAP[$7];
        var $711=(($710+8*$709)&4294967295);
        var $712=(($711+6)&4294967295);
        HEAP[$712]=$708;
        var $713=HEAP[$captop];
        var $714=((($713) + 1)&4294967295);
        HEAP[$captop]=$714;
        var $715=HEAP[$capsize];
        var $716=((($714))|0) >= ((($715))|0);
        if ($716) { __label__ = 115; break; } else { __label__ = 116; break; }
      case 115: // $717
        var $718=HEAP[$2];
        var $719=HEAP[$7];
        var $720=HEAP[$captop];
        var $721=HEAP[$8];
        var $722=_doublecap($718, $719, $720, $721);
        HEAP[$7]=$722;
        var $723=HEAP[$captop];
        var $724=((2 * ($723))&4294967295);
        HEAP[$capsize]=$724;
        __label__ = 116; break;
      case 116: // $725
        var $726=HEAP[$p];
        var $727=(($726+4)&4294967295);
        HEAP[$p]=$727;
        __label__ = 1; break;
      case 117: // $728
        var $729=HEAP[$2];
        var $730=HEAP[$8];
        var $731=((($730) + 3)&4294967295);
        var $732=HEAP[$p];
        var $733=$732;
        var $734=(($733+2)&4294967295);
        var $735=HEAP[$734];
        var $736=reSign(($735), 16, 0);
        _lua_rawgeti($729, $731, $736);
        var $737=HEAP[$2];
        var $738=HEAP[$2];
        var $739=_val2str($738, -1);
        var $740=_luaL_error($737, ((__str142)&4294967295), allocate([$739,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 118; break;
      case 118: // $741
        ___assert_fail(((__str49745)&4294967295), ((__str30726)&4294967295), 633, ((___PRETTY_FUNCTION___match)&4294967295));
        throw "Reached an unreachable!"
      case 119: // $742
        var $743=HEAP[$1];
        STACKTOP = __stackBase__;
        return $743;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getcaptures($L, $s, $r, $ptop) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $capture=__stackBase__+16;
        var $n=__stackBase__+20;
        var $cs=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$s;
        HEAP[$3]=$r;
        HEAP[$4]=$ptop;
        var $5=HEAP[$1];
        var $6=HEAP[$4];
        var $7=((($6) + 2)&4294967295);
        var $8=_lua_touserdata($5, $7);
        var $9=$8;
        HEAP[$capture]=$9;
        HEAP[$n]=0;
        var $10=HEAP[$capture];
        var $11=(($10+6)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=((($13))|0)==0;
        if ($14) { __label__ = 5; break; } else { __label__ = 1; break; }
      case 1: // $15
        var $16=HEAP[$capture];
        var $17=(($cs)&4294967295);
        HEAP[$17]=$16;
        var $18=(($cs+4)&4294967295);
        HEAP[$18]=$16;
        var $19=HEAP[$1];
        var $20=(($cs+8)&4294967295);
        HEAP[$20]=$19;
        var $21=HEAP[$2];
        var $22=(($cs+16)&4294967295);
        HEAP[$22]=$21;
        var $23=(($cs+20)&4294967295);
        HEAP[$23]=0;
        var $24=HEAP[$4];
        var $25=(($cs+12)&4294967295);
        HEAP[$25]=$24;
        __label__ = 2; break;
      case 2: // $26
        var $27=_pushcapture($cs);
        var $28=HEAP[$n];
        var $29=((($28) + ($27))&4294967295);
        HEAP[$n]=$29;
        __label__ = 3; break;
      case 3: // $30
        var $31=(($cs)&4294967295);
        var $32=HEAP[$31];
        var $33=(($32+6)&4294967295);
        var $34=HEAP[$33];
        var $35=unSign(($34), 8, 0);
        var $36=((($35))|0)==0;
        var $37=($36) ^ 1;
        if ($37) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 4: // $38
        __label__ = 5; break;
      case 5: // $39
        var $40=HEAP[$n];
        var $41=((($40))|0)==0;
        if ($41) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $42
        var $43=HEAP[$1];
        var $44=HEAP[$3];
        var $45=HEAP[$2];
        var $46=($44);
        var $47=($45);
        var $48=((($46) - ($47))&4294967295);
        var $49=((($48) + 1)&4294967295);
        _lua_pushinteger($43, $49);
        HEAP[$n]=1;
        __label__ = 7; break;
      case 7: // $50
        var $51=HEAP[$n];
        STACKTOP = __stackBase__;
        return $51;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pushcapture($cs) {
    var __stackBase__  = STACKTOP; STACKTOP += 16428; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16428);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $arg=__stackBase__+8;
        var $k=__stackBase__+12;
        var $n=__stackBase__+16;
        var $b=__stackBase__+20;
        var $b1=__stackBase__+8224;
        HEAP[$2]=$cs;
        var $3=HEAP[$2];
        var $4=(($3+8)&4294967295);
        var $5=HEAP[$4];
        _luaL_checkstack($5, 4, ((__str125)&4294967295));
        var $6=HEAP[$2];
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        var $9=(($8+6)&4294967295);
        var $10=HEAP[$9];
        var $11=unSign(($10), 8, 0);
        if ($11 == 1) {
          __label__ = 1; break;
        }
        else if ($11 == 2) {
          __label__ = 2; break;
        }
        else if ($11 == 4) {
          __label__ = 3; break;
        }
        else if ($11 == 5) {
          __label__ = 6; break;
        }
        else if ($11 == 12) {
          __label__ = 9; break;
        }
        else if ($11 == 9) {
          __label__ = 13; break;
        }
        else if ($11 == 10) {
          __label__ = 14; break;
        }
        else if ($11 == 13) {
          __label__ = 15; break;
        }
        else if ($11 == 3) {
          __label__ = 18; break;
        }
        else if ($11 == 6) {
          __label__ = 19; break;
        }
        else if ($11 == 7) {
          __label__ = 20; break;
        }
        else if ($11 == 8) {
          __label__ = 21; break;
        }
        else if ($11 == 11) {
          __label__ = 22; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 1: // $12
        var $13=HEAP[$2];
        var $14=(($13+8)&4294967295);
        var $15=HEAP[$14];
        var $16=HEAP[$2];
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=(($18)&4294967295);
        var $20=HEAP[$19];
        var $21=HEAP[$2];
        var $22=(($21+16)&4294967295);
        var $23=HEAP[$22];
        var $24=($20);
        var $25=($23);
        var $26=((($24) - ($25))&4294967295);
        var $27=((($26) + 1)&4294967295);
        _lua_pushinteger($15, $27);
        var $28=HEAP[$2];
        var $29=(($28)&4294967295);
        var $30=HEAP[$29];
        var $31=(($30+8)&4294967295);
        HEAP[$29]=$31;
        HEAP[$1]=1;
        __label__ = 24; break;
      case 2: // $32
        var $33=HEAP[$2];
        var $34=(($33+8)&4294967295);
        var $35=HEAP[$34];
        var $36=HEAP[$2];
        var $37=(($36+12)&4294967295);
        var $38=HEAP[$37];
        var $39=((($38) + 3)&4294967295);
        var $40=HEAP[$2];
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42+4)&4294967295);
        var $44=HEAP[$43];
        var $45=reSign(($44), 16, 0);
        _lua_rawgeti($35, $39, $45);
        var $46=HEAP[$2];
        var $47=(($46)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48+8)&4294967295);
        HEAP[$47]=$49;
        HEAP[$1]=1;
        __label__ = 24; break;
      case 3: // $50
        var $51=HEAP[$2];
        var $52=(($51)&4294967295);
        var $53=HEAP[$52];
        var $54=(($53+8)&4294967295);
        HEAP[$52]=$54;
        var $55=(($53+4)&4294967295);
        var $56=HEAP[$55];
        var $57=reSign(($56), 16, 0);
        HEAP[$arg]=$57;
        var $58=HEAP[$arg];
        var $59=((($58) + 3)&4294967295);
        var $60=HEAP[$2];
        var $61=(($60+12)&4294967295);
        var $62=HEAP[$61];
        var $63=((($59))|0) > ((($62))|0);
        if ($63) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $64
        var $65=HEAP[$2];
        var $66=(($65+8)&4294967295);
        var $67=HEAP[$66];
        var $68=HEAP[$arg];
        var $69=_luaL_error($67, ((__str126)&4294967295), allocate([$68,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        HEAP[$1]=$69;
        __label__ = 24; break;
      case 5: // $70
        var $71=HEAP[$2];
        var $72=(($71+8)&4294967295);
        var $73=HEAP[$72];
        var $74=HEAP[$arg];
        var $75=((($74) + 3)&4294967295);
        _lua_pushvalue($73, $75);
        HEAP[$1]=1;
        __label__ = 24; break;
      case 6: // $76
        var $77=HEAP[$2];
        var $78=_pushallvalues($77, 1);
        HEAP[$k]=$78;
        var $79=HEAP[$k];
        var $80=((($79))|0) > 1;
        if ($80) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $81
        var $82=HEAP[$2];
        var $83=(($82+8)&4294967295);
        var $84=HEAP[$83];
        var $85=HEAP[$k];
        var $86=((0 - ($85))&4294967295);
        _lua_insert($84, $86);
        __label__ = 8; break;
      case 8: // $87
        var $88=HEAP[$k];
        HEAP[$1]=$88;
        __label__ = 24; break;
      case 9: // $89
        HEAP[$n]=0;
        __label__ = 10; break;
      case 10: // $90
        var $91=HEAP[$2];
        var $92=(($91)&4294967295);
        var $93=HEAP[$92];
        var $94=(($93+8)&4294967295);
        HEAP[$92]=$94;
        var $95=(($93+6)&4294967295);
        var $96=HEAP[$95];
        var $97=unSign(($96), 8, 0);
        var $98=((($97))|0)==0;
        var $99=($98) ^ 1;
        if ($99) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $100
        var $101=HEAP[$2];
        var $102=(($101+8)&4294967295);
        var $103=HEAP[$102];
        _luaL_checkstack($103, 4, ((__str125)&4294967295));
        var $104=HEAP[$2];
        var $105=(($104+8)&4294967295);
        var $106=HEAP[$105];
        var $107=HEAP[$2];
        var $108=(($107)&4294967295);
        var $109=HEAP[$108];
        var $110=(($109+-8)&4294967295);
        var $111=(($110+4)&4294967295);
        var $112=HEAP[$111];
        var $113=reSign(($112), 16, 0);
        _lua_pushvalue($106, $113);
        var $114=HEAP[$n];
        var $115=((($114) + 1)&4294967295);
        HEAP[$n]=$115;
        __label__ = 10; break;
      case 12: // $116
        var $117=HEAP[$n];
        HEAP[$1]=$117;
        __label__ = 24; break;
      case 13: // $118
        var $119=HEAP[$2];
        var $120=(($119+8)&4294967295);
        var $121=HEAP[$120];
        _luaL_buffinit($121, $b);
        var $122=HEAP[$2];
        _stringcap($b, $122);
        _luaL_pushresult($b);
        HEAP[$1]=1;
        __label__ = 24; break;
      case 14: // $123
        var $124=HEAP[$2];
        var $125=(($124+8)&4294967295);
        var $126=HEAP[$125];
        _luaL_buffinit($126, $b1);
        var $127=HEAP[$2];
        _substcap($b1, $127);
        _luaL_pushresult($b1);
        HEAP[$1]=1;
        __label__ = 24; break;
      case 15: // $128
        var $129=HEAP[$2];
        var $130=(($129)&4294967295);
        var $131=HEAP[$130];
        var $132=(($131+4)&4294967295);
        var $133=HEAP[$132];
        var $134=reSign(($133), 16, 0);
        var $135=((($134))|0)==0;
        if ($135) { __label__ = 16; break; } else { __label__ = 17; break; }
      case 16: // $136
        var $137=HEAP[$2];
        var $138=_pushallvalues($137, 0);
        HEAP[$1]=$138;
        __label__ = 24; break;
      case 17: // $139
        var $140=HEAP[$2];
        var $141=(($140)&4294967295);
        var $142=HEAP[$141];
        var $143=_nextcap($142);
        var $144=HEAP[$2];
        var $145=(($144)&4294967295);
        HEAP[$145]=$143;
        HEAP[$1]=0;
        __label__ = 24; break;
      case 18: // $146
        var $147=HEAP[$2];
        var $148=_backrefcap($147);
        HEAP[$1]=$148;
        __label__ = 24; break;
      case 19: // $149
        var $150=HEAP[$2];
        var $151=_tablecap($150);
        HEAP[$1]=$151;
        __label__ = 24; break;
      case 20: // $152
        var $153=HEAP[$2];
        var $154=_functioncap($153);
        HEAP[$1]=$154;
        __label__ = 24; break;
      case 21: // $155
        var $156=HEAP[$2];
        var $157=_querycap($156);
        HEAP[$1]=$157;
        __label__ = 24; break;
      case 22: // $158
        var $159=HEAP[$2];
        var $160=_foldcap($159);
        HEAP[$1]=$160;
        __label__ = 24; break;
      case 23: // $161
        ___assert_fail(((__str49745)&4294967295), ((__str30726)&4294967295), 2227, ((___PRETTY_FUNCTION___pushcapture)&4294967295));
        throw "Reached an unreachable!"
      case 24: // $162
        var $163=HEAP[$1];
        STACKTOP = __stackBase__;
        return $163;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pushallvalues($cs, $addextra) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $co=__stackBase__+12;
        var $n=__stackBase__+16;
        HEAP[$2]=$cs;
        HEAP[$3]=$addextra;
        var $4=HEAP[$2];
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        HEAP[$co]=$6;
        HEAP[$n]=0;
        var $7=HEAP[$2];
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9+8)&4294967295);
        HEAP[$8]=$10;
        var $11=(($9+7)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$2];
        var $17=(($16+8)&4294967295);
        var $18=HEAP[$17];
        var $19=HEAP[$co];
        var $20=(($19)&4294967295);
        var $21=HEAP[$20];
        var $22=HEAP[$co];
        var $23=(($22+7)&4294967295);
        var $24=HEAP[$23];
        var $25=unSign(($24), 8, 0);
        var $26=((($25) - 1)&4294967295);
        _lua_pushlstring($18, $21, $26);
        HEAP[$1]=1;
        __label__ = 9; break;
      case 2: // $27
        __label__ = 3; break;
      case 3: // $28
        var $29=HEAP[$2];
        var $30=(($29)&4294967295);
        var $31=HEAP[$30];
        var $32=(($31+6)&4294967295);
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=((($34))|0)==0;
        var $36=($35) ^ 1;
        if ($36) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $37
        var $38=HEAP[$2];
        var $39=_pushcapture($38);
        var $40=HEAP[$n];
        var $41=((($40) + ($39))&4294967295);
        HEAP[$n]=$41;
        __label__ = 3; break;
      case 5: // $42
        var $43=HEAP[$3];
        var $44=((($43))|0)!=0;
        if ($44) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $45
        var $46=HEAP[$n];
        var $47=((($46))|0)==0;
        if ($47) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $48
        var $49=HEAP[$2];
        var $50=(($49+8)&4294967295);
        var $51=HEAP[$50];
        var $52=HEAP[$co];
        var $53=(($52)&4294967295);
        var $54=HEAP[$53];
        var $55=HEAP[$2];
        var $56=(($55)&4294967295);
        var $57=HEAP[$56];
        var $58=(($57)&4294967295);
        var $59=HEAP[$58];
        var $60=HEAP[$co];
        var $61=(($60)&4294967295);
        var $62=HEAP[$61];
        var $63=($59);
        var $64=($62);
        var $65=((($63) - ($64))&4294967295);
        _lua_pushlstring($51, $54, $65);
        var $66=HEAP[$n];
        var $67=((($66) + 1)&4294967295);
        HEAP[$n]=$67;
        __label__ = 8; break;
      case 8: // $68
        var $69=HEAP[$2];
        var $70=(($69)&4294967295);
        var $71=HEAP[$70];
        var $72=(($71+8)&4294967295);
        HEAP[$70]=$72;
        var $73=HEAP[$n];
        HEAP[$1]=$73;
        __label__ = 9; break;
      case 9: // $74
        var $75=HEAP[$1];
        STACKTOP = __stackBase__;
        return $75;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringcap($b, $cs) {
    var __stackBase__  = STACKTOP; STACKTOP += 152; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 152);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $cps=__stackBase__+8;
        var $n=__stackBase__+128;
        var $len=__stackBase__+132;
        var $i=__stackBase__+136;
        var $c=__stackBase__+140;
        var $l=__stackBase__+144;
        var $curr=__stackBase__+148;
        HEAP[$1]=$b;
        HEAP[$2]=$cs;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=(($5+4)&4294967295);
        var $7=HEAP[$6];
        var $8=reSign(($7), 16, 0);
        var $9=HEAP[$2];
        var $10=(($9+20)&4294967295);
        var $11=HEAP[$10];
        var $12=((($8))|0)!=((($11))|0);
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        var $14=HEAP[$2];
        var $15=HEAP[$2];
        var $16=(($15)&4294967295);
        var $17=HEAP[$16];
        var $18=(($17+4)&4294967295);
        var $19=HEAP[$18];
        var $20=reSign(($19), 16, 0);
        _updatecache_($14, $20);
        __label__ = 2; break;
      case 2: // $21
        var $22=HEAP[$2];
        var $23=(($22+8)&4294967295);
        var $24=HEAP[$23];
        var $25=HEAP[$2];
        var $26=(($25+12)&4294967295);
        var $27=HEAP[$26];
        var $28=((($27) + 1)&4294967295);
        var $29=_lua_tolstring($24, $28, $len);
        HEAP[$c]=$29;
        var $30=HEAP[$2];
        var $31=(($cps)&4294967295);
        var $32=_getstrcaps($30, $31, 0);
        var $33=((($32) - 1)&4294967295);
        HEAP[$n]=$33;
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $34
        var $35=HEAP[$i];
        var $36=HEAP[$len];
        var $37=((($35))>>>0) < ((($36))>>>0);
        if ($37) { __label__ = 4; break; } else { __label__ = 21; break; }
      case 4: // $38
        var $39=HEAP[$i];
        var $40=HEAP[$c];
        var $41=(($40+$39)&4294967295);
        var $42=HEAP[$41];
        var $43=reSign(($42), 8, 0);
        var $44=((($43))|0)!=37;
        if ($44) { __label__ = 7; break; } else { __label__ = 5; break; }
      case 5: // $45
        var $46=HEAP[$i];
        var $47=((($46) + 1)&4294967295);
        HEAP[$i]=$47;
        var $48=HEAP[$c];
        var $49=(($48+$47)&4294967295);
        var $50=HEAP[$49];
        var $51=reSign(($50), 8, 0);
        var $52=((($51))|0) < 48;
        if ($52) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $53
        var $54=HEAP[$i];
        var $55=HEAP[$c];
        var $56=(($55+$54)&4294967295);
        var $57=HEAP[$56];
        var $58=reSign(($57), 8, 0);
        var $59=((($58))|0) > 57;
        if ($59) { __label__ = 7; break; } else { __label__ = 10; break; }
      case 7: // $60
        var $61=HEAP[$1];
        var $62=(($61)&4294967295);
        var $63=HEAP[$62];
        var $64=HEAP[$1];
        var $65=(($64+12)&4294967295);
        var $66=(($65)&4294967295);
        var $67=(($66+8192)&4294967295);
        var $68=((($63))>>>0) < ((($67))>>>0);
        if ($68) { __lastLabel__ = 7; __label__ = 9; break; } else { __lastLabel__ = 7; __label__ = 8; break; }
      case 8: // $69
        var $70=HEAP[$1];
        var $71=_luaL_prepbuffer($70);
        var $72=((($71))|0)!=0;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $73
        var $74=__lastLabel__ == 7 ? 1 : ($72);
        var $75=unSign(($74), 1, 0);
        var $76=HEAP[$i];
        var $77=HEAP[$c];
        var $78=(($77+$76)&4294967295);
        var $79=HEAP[$78];
        var $80=HEAP[$1];
        var $81=(($80)&4294967295);
        var $82=HEAP[$81];
        var $83=(($82+1)&4294967295);
        HEAP[$81]=$83;
        HEAP[$82]=$79;
        __label__ = 19; break;
      case 10: // $84
        var $85=HEAP[$i];
        var $86=HEAP[$c];
        var $87=(($86+$85)&4294967295);
        var $88=HEAP[$87];
        var $89=reSign(($88), 8, 0);
        var $90=((($89) - 48)&4294967295);
        HEAP[$l]=$90;
        var $91=HEAP[$l];
        var $92=HEAP[$n];
        var $93=((($91))|0) > ((($92))|0);
        if ($93) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $94
        var $95=HEAP[$2];
        var $96=(($95+8)&4294967295);
        var $97=HEAP[$96];
        var $98=HEAP[$l];
        var $99=_luaL_error($97, ((__str132)&4294967295), allocate([$98,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 18; break;
      case 12: // $100
        var $101=HEAP[$l];
        var $102=(($cps+$101*12)&4294967295);
        var $103=(($102)&4294967295);
        var $104=HEAP[$103];
        var $105=((($104))|0)!=0;
        if ($105) { __label__ = 13; break; } else { __label__ = 14; break; }
      case 13: // $106
        var $107=HEAP[$1];
        var $108=HEAP[$l];
        var $109=(($cps+$108*12)&4294967295);
        var $110=(($109+4)&4294967295);
        var $111=$110;
        var $112=(($111)&4294967295);
        var $113=HEAP[$112];
        var $114=HEAP[$l];
        var $115=(($cps+$114*12)&4294967295);
        var $116=(($115+4)&4294967295);
        var $117=$116;
        var $118=(($117+4)&4294967295);
        var $119=HEAP[$118];
        var $120=HEAP[$l];
        var $121=(($cps+$120*12)&4294967295);
        var $122=(($121+4)&4294967295);
        var $123=$122;
        var $124=(($123)&4294967295);
        var $125=HEAP[$124];
        var $126=($119);
        var $127=($125);
        var $128=((($126) - ($127))&4294967295);
        _luaL_addlstring($107, $113, $128);
        __label__ = 17; break;
      case 14: // $129
        var $130=HEAP[$2];
        var $131=(($130)&4294967295);
        var $132=HEAP[$131];
        HEAP[$curr]=$132;
        var $133=HEAP[$l];
        var $134=(($cps+$133*12)&4294967295);
        var $135=(($134+4)&4294967295);
        var $136=$135;
        var $137=HEAP[$136];
        var $138=HEAP[$2];
        var $139=(($138)&4294967295);
        HEAP[$139]=$137;
        var $140=HEAP[$1];
        var $141=HEAP[$2];
        var $142=_addonestring($140, $141, ((__str133)&4294967295));
        var $143=((($142))|0)==0;
        if ($143) { __label__ = 15; break; } else { __label__ = 16; break; }
      case 15: // $144
        var $145=HEAP[$2];
        var $146=(($145+8)&4294967295);
        var $147=HEAP[$146];
        var $148=HEAP[$l];
        var $149=_luaL_error($147, ((__str134)&4294967295), allocate([$148,0,0,0], ["i32",0,0,0], ALLOC_STACK));
        __label__ = 16; break;
      case 16: // $150
        var $151=HEAP[$curr];
        var $152=HEAP[$2];
        var $153=(($152)&4294967295);
        HEAP[$153]=$151;
        __label__ = 17; break;
      case 17: // $154
        __label__ = 18; break;
      case 18: // $155
        __label__ = 19; break;
      case 19: // $156
        __label__ = 20; break;
      case 20: // $157
        var $158=HEAP[$i];
        var $159=((($158) + 1)&4294967295);
        HEAP[$i]=$159;
        __label__ = 3; break;
      case 21: // $160
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _substcap($b, $cs) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $curr=__stackBase__+8;
        var $next=__stackBase__+12;
        HEAP[$1]=$b;
        HEAP[$2]=$cs;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        HEAP[$curr]=$7;
        var $8=HEAP[$2];
        var $9=(($8)&4294967295);
        var $10=HEAP[$9];
        var $11=(($10+7)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        var $16=HEAP[$1];
        var $17=HEAP[$curr];
        var $18=HEAP[$2];
        var $19=(($18)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+7)&4294967295);
        var $22=HEAP[$21];
        var $23=unSign(($22), 8, 0);
        var $24=((($23) - 1)&4294967295);
        _luaL_addlstring($16, $17, $24);
        __label__ = 9; break;
      case 2: // $25
        var $26=HEAP[$2];
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        var $29=(($28+8)&4294967295);
        HEAP[$27]=$29;
        __label__ = 3; break;
      case 3: // $30
        var $31=HEAP[$2];
        var $32=(($31)&4294967295);
        var $33=HEAP[$32];
        var $34=(($33+6)&4294967295);
        var $35=HEAP[$34];
        var $36=unSign(($35), 8, 0);
        var $37=((($36))|0)==0;
        var $38=($37) ^ 1;
        if ($38) { __label__ = 4; break; } else { __label__ = 8; break; }
      case 4: // $39
        var $40=HEAP[$2];
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        var $43=(($42)&4294967295);
        var $44=HEAP[$43];
        HEAP[$next]=$44;
        var $45=HEAP[$1];
        var $46=HEAP[$curr];
        var $47=HEAP[$next];
        var $48=HEAP[$curr];
        var $49=($47);
        var $50=($48);
        var $51=((($49) - ($50))&4294967295);
        _luaL_addlstring($45, $46, $51);
        var $52=HEAP[$1];
        var $53=HEAP[$2];
        var $54=_addonestring($52, $53, ((__str130)&4294967295));
        var $55=((($54))|0)==0;
        if ($55) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $56
        var $57=HEAP[$next];
        HEAP[$curr]=$57;
        __label__ = 7; break;
      case 6: // $58
        var $59=HEAP[$2];
        var $60=(($59)&4294967295);
        var $61=HEAP[$60];
        var $62=(($61+-8)&4294967295);
        var $63=(($62)&4294967295);
        var $64=HEAP[$63];
        var $65=HEAP[$2];
        var $66=(($65)&4294967295);
        var $67=HEAP[$66];
        var $68=(($67+-8)&4294967295);
        var $69=(($68+7)&4294967295);
        var $70=HEAP[$69];
        var $71=unSign(($70), 8, 0);
        var $72=(($64+$71)&4294967295);
        var $73=(($72+-1)&4294967295);
        HEAP[$curr]=$73;
        __label__ = 7; break;
      case 7: // $74
        __label__ = 3; break;
      case 8: // $75
        var $76=HEAP[$1];
        var $77=HEAP[$curr];
        var $78=HEAP[$2];
        var $79=(($78)&4294967295);
        var $80=HEAP[$79];
        var $81=(($80)&4294967295);
        var $82=HEAP[$81];
        var $83=HEAP[$curr];
        var $84=($82);
        var $85=($83);
        var $86=((($84) - ($85))&4294967295);
        _luaL_addlstring($76, $77, $86);
        __label__ = 9; break;
      case 9: // $87
        var $88=HEAP[$2];
        var $89=(($88)&4294967295);
        var $90=HEAP[$89];
        var $91=(($90+8)&4294967295);
        HEAP[$89]=$91;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _nextcap($cap) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $n=__stackBase__+8;
        HEAP[$2]=$cap;
        var $3=HEAP[$2];
        var $4=(($3+7)&4294967295);
        var $5=HEAP[$4];
        var $6=unSign(($5), 8, 0);
        var $7=((($6))|0)!=0;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        var $9=HEAP[$2];
        var $10=(($9+8)&4294967295);
        HEAP[$1]=$10;
        __label__ = 11; break;
      case 2: // $11
        HEAP[$n]=0;
        __label__ = 3; break;
      case 3: // $12
        var $13=HEAP[$2];
        var $14=(($13+8)&4294967295);
        HEAP[$2]=$14;
        var $15=HEAP[$2];
        var $16=(($15+6)&4294967295);
        var $17=HEAP[$16];
        var $18=unSign(($17), 8, 0);
        var $19=((($18))|0)==0;
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; }
      case 4: // $20
        var $21=HEAP[$n];
        var $22=((($21) + -1)&4294967295);
        HEAP[$n]=$22;
        var $23=((($21))|0)==0;
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $24
        var $25=HEAP[$2];
        var $26=(($25+8)&4294967295);
        HEAP[$1]=$26;
        __label__ = 11; break;
      case 6: // $27
        __label__ = 10; break;
      case 7: // $28
        var $29=HEAP[$2];
        var $30=(($29+7)&4294967295);
        var $31=HEAP[$30];
        var $32=unSign(($31), 8, 0);
        var $33=((($32))|0)!=0;
        if ($33) { __label__ = 9; break; } else { __label__ = 8; break; }
      case 8: // $34
        var $35=HEAP[$n];
        var $36=((($35) + 1)&4294967295);
        HEAP[$n]=$36;
        __label__ = 9; break;
      case 9: // $37
        __label__ = 10; break;
      case 10: // $38
        __label__ = 3; break;
      case 11: // $39
        var $40=HEAP[$1];
        STACKTOP = __stackBase__;
        return $40;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _backrefcap($cs) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $n=__stackBase__+4;
    var $curr=__stackBase__+8;
    HEAP[$1]=$cs;
    var $2=HEAP[$1];
    var $3=(($2)&4294967295);
    var $4=HEAP[$3];
    HEAP[$curr]=$4;
    var $5=HEAP[$1];
    var $6=(($5+8)&4294967295);
    var $7=HEAP[$6];
    var $8=HEAP[$1];
    var $9=(($8+12)&4294967295);
    var $10=HEAP[$9];
    var $11=((($10) + 3)&4294967295);
    var $12=HEAP[$1];
    var $13=(($12)&4294967295);
    var $14=HEAP[$13];
    var $15=(($14+4)&4294967295);
    var $16=HEAP[$15];
    var $17=reSign(($16), 16, 0);
    _lua_rawgeti($7, $11, $17);
    var $18=HEAP[$1];
    var $19=HEAP[$curr];
    var $20=_findback($18, $19);
    var $21=HEAP[$1];
    var $22=(($21)&4294967295);
    HEAP[$22]=$20;
    var $23=HEAP[$1];
    var $24=_pushallvalues($23, 0);
    HEAP[$n]=$24;
    var $25=HEAP[$curr];
    var $26=(($25+8)&4294967295);
    var $27=HEAP[$1];
    var $28=(($27)&4294967295);
    HEAP[$28]=$26;
    var $29=HEAP[$n];
    STACKTOP = __stackBase__;
    return $29;
  }
  

  function _tablecap($cs) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $L=__stackBase__+8;
        var $n=__stackBase__+12;
        var $k=__stackBase__+16;
        var $i=__stackBase__+20;
        var $k1=__stackBase__+24;
        HEAP[$2]=$cs;
        var $3=HEAP[$2];
        var $4=(($3+8)&4294967295);
        var $5=HEAP[$4];
        HEAP[$L]=$5;
        HEAP[$n]=0;
        var $6=HEAP[$L];
        _lua_createtable($6, 0, 0);
        var $7=HEAP[$2];
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=(($9+8)&4294967295);
        HEAP[$8]=$10;
        var $11=(($9+7)&4294967295);
        var $12=HEAP[$11];
        var $13=unSign(($12), 8, 0);
        var $14=((($13))|0)!=0;
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $15
        HEAP[$1]=1;
        __label__ = 19; break;
      case 2: // $16
        __label__ = 3; break;
      case 3: // $17
        var $18=HEAP[$2];
        var $19=(($18)&4294967295);
        var $20=HEAP[$19];
        var $21=(($20+6)&4294967295);
        var $22=HEAP[$21];
        var $23=unSign(($22), 8, 0);
        var $24=((($23))|0)==0;
        var $25=($24) ^ 1;
        if ($25) { __label__ = 4; break; } else { __label__ = 18; break; }
      case 4: // $26
        var $27=HEAP[$2];
        var $28=(($27)&4294967295);
        var $29=HEAP[$28];
        var $30=(($29+6)&4294967295);
        var $31=HEAP[$30];
        var $32=unSign(($31), 8, 0);
        var $33=((($32))|0)==13;
        if ($33) { __label__ = 5; break; } else { __label__ = 12; break; }
      case 5: // $34
        var $35=HEAP[$2];
        var $36=(($35)&4294967295);
        var $37=HEAP[$36];
        var $38=(($37+4)&4294967295);
        var $39=HEAP[$38];
        var $40=reSign(($39), 16, 0);
        var $41=((($40))|0)!=0;
        if ($41) { __label__ = 6; break; } else { __label__ = 12; break; }
      case 6: // $42
        var $43=HEAP[$2];
        var $44=(($43+8)&4294967295);
        var $45=HEAP[$44];
        var $46=HEAP[$2];
        var $47=(($46+12)&4294967295);
        var $48=HEAP[$47];
        var $49=((($48) + 3)&4294967295);
        var $50=HEAP[$2];
        var $51=(($50)&4294967295);
        var $52=HEAP[$51];
        var $53=(($52+4)&4294967295);
        var $54=HEAP[$53];
        var $55=reSign(($54), 16, 0);
        _lua_rawgeti($45, $49, $55);
        var $56=HEAP[$2];
        var $57=_pushallvalues($56, 0);
        HEAP[$k]=$57;
        var $58=HEAP[$k];
        var $59=((($58))|0)==0;
        if ($59) { __label__ = 7; break; } else { __label__ = 8; break; }
      case 7: // $60
        var $61=HEAP[$L];
        _lua_settop($61, -2);
        __label__ = 3; break;
      case 8: // $62
        var $63=HEAP[$k];
        var $64=((($63))|0) > 1;
        if ($64) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $65
        var $66=HEAP[$L];
        var $67=HEAP[$k];
        var $68=((($67) - 1)&4294967295);
        var $69=((0 - ($68))&4294967295);
        var $70=((($69) - 1)&4294967295);
        _lua_settop($66, $70);
        __label__ = 10; break;
      case 10: // $71
        __label__ = 11; break;
      case 11: // $72
        var $73=HEAP[$L];
        _lua_settable($73, -3);
        __label__ = 17; break;
      case 12: // $74
        var $75=HEAP[$2];
        var $76=_pushcapture($75);
        HEAP[$k1]=$76;
        var $77=HEAP[$k1];
        HEAP[$i]=$77;
        __label__ = 13; break;
      case 13: // $78
        var $79=HEAP[$i];
        var $80=((($79))|0) > 0;
        if ($80) { __label__ = 14; break; } else { __label__ = 16; break; }
      case 14: // $81
        var $82=HEAP[$L];
        var $83=HEAP[$i];
        var $84=((($83) + 1)&4294967295);
        var $85=((0 - ($84))&4294967295);
        var $86=HEAP[$n];
        var $87=HEAP[$i];
        var $88=((($86) + ($87))&4294967295);
        _lua_rawseti($82, $85, $88);
        __label__ = 15; break;
      case 15: // $89
        var $90=HEAP[$i];
        var $91=((($90) + -1)&4294967295);
        HEAP[$i]=$91;
        __label__ = 13; break;
      case 16: // $92
        var $93=HEAP[$k1];
        var $94=HEAP[$n];
        var $95=((($94) + ($93))&4294967295);
        HEAP[$n]=$95;
        __label__ = 17; break;
      case 17: // $96
        __label__ = 3; break;
      case 18: // $97
        var $98=HEAP[$2];
        var $99=(($98)&4294967295);
        var $100=HEAP[$99];
        var $101=(($100+8)&4294967295);
        HEAP[$99]=$101;
        HEAP[$1]=1;
        __label__ = 19; break;
      case 19: // $102
        var $103=HEAP[$1];
        STACKTOP = __stackBase__;
        return $103;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _functioncap($cs) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $1=__stackBase__;
    var $n=__stackBase__+4;
    var $top=__stackBase__+8;
    HEAP[$1]=$cs;
    var $2=HEAP[$1];
    var $3=(($2+8)&4294967295);
    var $4=HEAP[$3];
    var $5=_lua_gettop($4);
    HEAP[$top]=$5;
    var $6=HEAP[$1];
    var $7=(($6+8)&4294967295);
    var $8=HEAP[$7];
    var $9=HEAP[$1];
    var $10=(($9+12)&4294967295);
    var $11=HEAP[$10];
    var $12=((($11) + 3)&4294967295);
    var $13=HEAP[$1];
    var $14=(($13)&4294967295);
    var $15=HEAP[$14];
    var $16=(($15+4)&4294967295);
    var $17=HEAP[$16];
    var $18=reSign(($17), 16, 0);
    _lua_rawgeti($8, $12, $18);
    var $19=HEAP[$1];
    var $20=_pushallvalues($19, 0);
    HEAP[$n]=$20;
    var $21=HEAP[$1];
    var $22=(($21+8)&4294967295);
    var $23=HEAP[$22];
    var $24=HEAP[$n];
    _lua_call($23, $24, -1);
    var $25=HEAP[$1];
    var $26=(($25+8)&4294967295);
    var $27=HEAP[$26];
    var $28=_lua_gettop($27);
    var $29=HEAP[$top];
    var $30=((($28) - ($29))&4294967295);
    STACKTOP = __stackBase__;
    return $30;
  }
  

  function _querycap($cs) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $idx=__stackBase__+8;
        var $n=__stackBase__+12;
        HEAP[$2]=$cs;
        var $3=HEAP[$2];
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=(($5+4)&4294967295);
        var $7=HEAP[$6];
        var $8=reSign(($7), 16, 0);
        HEAP[$idx]=$8;
        var $9=HEAP[$2];
        var $10=_pushallvalues($9, 0);
        HEAP[$n]=$10;
        var $11=HEAP[$n];
        var $12=((($11))|0) > 1;
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        var $14=HEAP[$2];
        var $15=(($14+8)&4294967295);
        var $16=HEAP[$15];
        var $17=HEAP[$n];
        var $18=((($17) - 1)&4294967295);
        var $19=((0 - ($18))&4294967295);
        var $20=((($19) - 1)&4294967295);
        _lua_settop($16, $20);
        __label__ = 2; break;
      case 2: // $21
        var $22=HEAP[$idx];
        var $23=HEAP[$2];
        var $24=(($23+20)&4294967295);
        var $25=HEAP[$24];
        var $26=((($22))|0)!=((($25))|0);
        if ($26) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $27
        var $28=HEAP[$2];
        var $29=HEAP[$idx];
        _updatecache_($28, $29);
        __label__ = 4; break;
      case 4: // $30
        var $31=HEAP[$2];
        var $32=(($31+8)&4294967295);
        var $33=HEAP[$32];
        var $34=HEAP[$2];
        var $35=(($34+12)&4294967295);
        var $36=HEAP[$35];
        var $37=((($36) + 1)&4294967295);
        _lua_gettable($33, $37);
        var $38=HEAP[$2];
        var $39=(($38+8)&4294967295);
        var $40=HEAP[$39];
        var $41=_lua_type($40, -1);
        var $42=((($41))|0)==0;
        if ($42) { __label__ = 6; break; } else { __label__ = 5; break; }
      case 5: // $43
        HEAP[$1]=1;
        __label__ = 7; break;
      case 6: // $44
        var $45=HEAP[$2];
        var $46=(($45+8)&4294967295);
        var $47=HEAP[$46];
        _lua_settop($47, -2);
        HEAP[$1]=0;
        __label__ = 7; break;
      case 7: // $48
        var $49=HEAP[$1];
        STACKTOP = __stackBase__;
        return $49;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _foldcap($cs) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $n=__stackBase__+8;
        var $L=__stackBase__+12;
        var $idx=__stackBase__+16;
        HEAP[$2]=$cs;
        var $3=HEAP[$2];
        var $4=(($3+8)&4294967295);
        var $5=HEAP[$4];
        HEAP[$L]=$5;
        var $6=HEAP[$2];
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        var $9=(($8+4)&4294967295);
        var $10=HEAP[$9];
        var $11=reSign(($10), 16, 0);
        HEAP[$idx]=$11;
        var $12=HEAP[$2];
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=(($14+8)&4294967295);
        HEAP[$13]=$15;
        var $16=(($14+7)&4294967295);
        var $17=HEAP[$16];
        var $18=unSign(($17), 8, 0);
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 3; break; } else { __label__ = 1; break; }
      case 1: // $20
        var $21=HEAP[$2];
        var $22=(($21)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23+6)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=((($26))|0)==0;
        if ($27) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $28
        var $29=HEAP[$2];
        var $30=_pushcapture($29);
        HEAP[$n]=$30;
        var $31=((($30))|0)==0;
        if ($31) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $32
        var $33=HEAP[$L];
        var $34=_luaL_error($33, ((__str127)&4294967295), allocate(1, "i32", ALLOC_STACK));
        HEAP[$1]=$34;
        __label__ = 12; break;
      case 4: // $35
        var $36=HEAP[$n];
        var $37=((($36))|0) > 1;
        if ($37) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $38
        var $39=HEAP[$L];
        var $40=HEAP[$n];
        var $41=((($40) - 1)&4294967295);
        var $42=((0 - ($41))&4294967295);
        var $43=((($42) - 1)&4294967295);
        _lua_settop($39, $43);
        __label__ = 6; break;
      case 6: // $44
        __label__ = 7; break;
      case 7: // $45
        var $46=HEAP[$2];
        var $47=(($46)&4294967295);
        var $48=HEAP[$47];
        var $49=(($48+6)&4294967295);
        var $50=HEAP[$49];
        var $51=unSign(($50), 8, 0);
        var $52=((($51))|0)==0;
        var $53=($52) ^ 1;
        if ($53) { __label__ = 8; break; } else { __label__ = 11; break; }
      case 8: // $54
        var $55=HEAP[$idx];
        var $56=HEAP[$2];
        var $57=(($56+20)&4294967295);
        var $58=HEAP[$57];
        var $59=((($55))|0)!=((($58))|0);
        if ($59) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $60
        var $61=HEAP[$2];
        var $62=HEAP[$idx];
        _updatecache_($61, $62);
        __label__ = 10; break;
      case 10: // $63
        var $64=HEAP[$L];
        var $65=HEAP[$2];
        var $66=(($65+12)&4294967295);
        var $67=HEAP[$66];
        var $68=((($67) + 1)&4294967295);
        _lua_pushvalue($64, $68);
        var $69=HEAP[$L];
        _lua_insert($69, -2);
        var $70=HEAP[$2];
        var $71=_pushcapture($70);
        HEAP[$n]=$71;
        var $72=HEAP[$L];
        var $73=HEAP[$n];
        var $74=((($73) + 1)&4294967295);
        _lua_call($72, $74, 1);
        __label__ = 7; break;
      case 11: // $75
        var $76=HEAP[$2];
        var $77=(($76)&4294967295);
        var $78=HEAP[$77];
        var $79=(($78+8)&4294967295);
        HEAP[$77]=$79;
        HEAP[$1]=1;
        __label__ = 12; break;
      case 12: // $80
        var $81=HEAP[$1];
        STACKTOP = __stackBase__;
        return $81;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _updatecache_($cs, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    HEAP[$1]=$cs;
    HEAP[$2]=$v;
    var $3=HEAP[$1];
    var $4=(($3+8)&4294967295);
    var $5=HEAP[$4];
    var $6=HEAP[$1];
    var $7=(($6+12)&4294967295);
    var $8=HEAP[$7];
    var $9=((($8) + 3)&4294967295);
    var $10=HEAP[$2];
    _lua_rawgeti($5, $9, $10);
    var $11=HEAP[$1];
    var $12=(($11+8)&4294967295);
    var $13=HEAP[$12];
    var $14=HEAP[$1];
    var $15=(($14+12)&4294967295);
    var $16=HEAP[$15];
    var $17=((($16) + 1)&4294967295);
    _lua_replace($13, $17);
    var $18=HEAP[$2];
    var $19=HEAP[$1];
    var $20=(($19+20)&4294967295);
    HEAP[$20]=$18;
    STACKTOP = __stackBase__;
    return;
  }
  

  function _findback($cs, $cap) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $L=__stackBase__+8;
        var $s=__stackBase__+12;
        HEAP[$1]=$cs;
        HEAP[$2]=$cap;
        var $3=HEAP[$1];
        var $4=(($3+8)&4294967295);
        var $5=HEAP[$4];
        HEAP[$L]=$5;
        __label__ = 1; break;
      case 1: // $6
        var $7=HEAP[$2];
        var $8=HEAP[$1];
        var $9=(($8+4)&4294967295);
        var $10=HEAP[$9];
        var $11=((($7))|0)==((($10))|0);
        if ($11) { __label__ = 2; break; } else { __label__ = 5; break; }
      case 2: // $12
        var $13=HEAP[$L];
        var $14=_lua_tolstring($13, -1, 0);
        HEAP[$s]=$14;
        var $15=HEAP[$s];
        var $16=((($15))|0)==0;
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $17
        var $18=HEAP[$L];
        var $19=HEAP[$L];
        var $20=HEAP[$L];
        var $21=_lua_type($20, -1);
        var $22=_lua_typename($19, $21);
        var $23=_lua_pushfstring($18, ((__str128777)&4294967295), allocate([$22,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        HEAP[$s]=$23;
        __label__ = 4; break;
      case 4: // $24
        var $25=HEAP[$L];
        var $26=HEAP[$s];
        var $27=_luaL_error($25, ((__str129)&4294967295), allocate([$26,0,0,0], ["i8*",0,0,0], ALLOC_STACK));
        __label__ = 5; break;
      case 5: // $28
        var $29=HEAP[$2];
        var $30=(($29+-8)&4294967295);
        HEAP[$2]=$30;
        var $31=HEAP[$2];
        var $32=(($31+6)&4294967295);
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=((($34))|0)==0;
        if ($35) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $36
        var $37=HEAP[$2];
        var $38=_findopen($37);
        HEAP[$2]=$38;
        __label__ = 10; break;
      case 7: // $39
        var $40=HEAP[$2];
        var $41=(($40+7)&4294967295);
        var $42=HEAP[$41];
        var $43=unSign(($42), 8, 0);
        var $44=((($43))|0)!=0;
        if ($44) { __label__ = 9; break; } else { __label__ = 8; break; }
      case 8: // $45
        __label__ = 1; break;
      case 9: // $46
        __label__ = 10; break;
      case 10: // $47
        var $48=HEAP[$2];
        var $49=(($48+6)&4294967295);
        var $50=HEAP[$49];
        var $51=unSign(($50), 8, 0);
        var $52=((($51))|0)==13;
        if ($52) { __label__ = 11; break; } else { __label__ = 15; break; }
      case 11: // $53
        var $54=HEAP[$1];
        var $55=(($54+8)&4294967295);
        var $56=HEAP[$55];
        var $57=HEAP[$1];
        var $58=(($57+12)&4294967295);
        var $59=HEAP[$58];
        var $60=((($59) + 3)&4294967295);
        var $61=HEAP[$2];
        var $62=(($61+4)&4294967295);
        var $63=HEAP[$62];
        var $64=reSign(($63), 16, 0);
        _lua_rawgeti($56, $60, $64);
        var $65=HEAP[$L];
        var $66=_lua_equal($65, -2, -1);
        var $67=((($66))|0)!=0;
        if ($67) { __label__ = 12; break; } else { __label__ = 13; break; }
      case 12: // $68
        var $69=HEAP[$L];
        _lua_settop($69, -3);
        var $70=HEAP[$2];
        STACKTOP = __stackBase__;
        return $70;
      case 13: // $71
        var $72=HEAP[$L];
        _lua_settop($72, -2);
        __label__ = 14; break;
      case 14: // $73
        __label__ = 15; break;
      case 15: // $74
        __label__ = 1; break;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _findopen($cap) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $n=__stackBase__+4;
        HEAP[$1]=$cap;
        HEAP[$n]=0;
        __label__ = 1; break;
      case 1: // $2
        var $3=HEAP[$1];
        var $4=(($3+-8)&4294967295);
        HEAP[$1]=$4;
        var $5=HEAP[$1];
        var $6=(($5+6)&4294967295);
        var $7=HEAP[$6];
        var $8=unSign(($7), 8, 0);
        var $9=((($8))|0)==0;
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $10
        var $11=HEAP[$n];
        var $12=((($11) + 1)&4294967295);
        HEAP[$n]=$12;
        __label__ = 8; break;
      case 3: // $13
        var $14=HEAP[$1];
        var $15=(($14+7)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        var $18=((($17))|0)!=0;
        if ($18) { __label__ = 7; break; } else { __label__ = 4; break; }
      case 4: // $19
        var $20=HEAP[$n];
        var $21=((($20) + -1)&4294967295);
        HEAP[$n]=$21;
        var $22=((($20))|0)==0;
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $23
        var $24=HEAP[$1];
        STACKTOP = __stackBase__;
        return $24;
      case 6: // $25
        __label__ = 7; break;
      case 7: // $26
        __label__ = 8; break;
      case 8: // $27
        __label__ = 1; break;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _addonestring($b, $cs, $what) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $L=__stackBase__+16;
        var $n=__stackBase__+20;
        HEAP[$2]=$b;
        HEAP[$3]=$cs;
        HEAP[$4]=$what;
        var $5=HEAP[$3];
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=(($7+6)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        if ($10 == 9) {
          __label__ = 1; break;
        }
        else if ($10 == 10) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $11
        var $12=HEAP[$2];
        var $13=HEAP[$3];
        _stringcap($12, $13);
        HEAP[$1]=1;
        __label__ = 10; break;
      case 2: // $14
        var $15=HEAP[$2];
        var $16=HEAP[$3];
        _substcap($15, $16);
        HEAP[$1]=1;
        __label__ = 10; break;
      case 3: // $17
        var $18=HEAP[$3];
        var $19=(($18+8)&4294967295);
        var $20=HEAP[$19];
        HEAP[$L]=$20;
        var $21=HEAP[$3];
        var $22=_pushcapture($21);
        HEAP[$n]=$22;
        var $23=HEAP[$n];
        var $24=((($23))|0) > 0;
        if ($24) { __label__ = 4; break; } else { __label__ = 9; break; }
      case 4: // $25
        var $26=HEAP[$n];
        var $27=((($26))|0) > 1;
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $28
        var $29=HEAP[$L];
        var $30=HEAP[$n];
        var $31=((($30) - 1)&4294967295);
        var $32=((0 - ($31))&4294967295);
        var $33=((($32) - 1)&4294967295);
        _lua_settop($29, $33);
        __label__ = 6; break;
      case 6: // $34
        var $35=HEAP[$L];
        var $36=_lua_isstring($35, -1);
        var $37=((($36))|0)!=0;
        if ($37) { __label__ = 8; break; } else { __label__ = 7; break; }
      case 7: // $38
        var $39=HEAP[$L];
        var $40=HEAP[$4];
        var $41=HEAP[$L];
        var $42=HEAP[$L];
        var $43=_lua_type($42, -1);
        var $44=_lua_typename($41, $43);
        var $45=_luaL_error($39, ((__str131)&4294967295), allocate([$40,0,0,0,$44,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK));
        __label__ = 8; break;
      case 8: // $46
        var $47=HEAP[$2];
        _luaL_addvalue($47);
        __label__ = 9; break;
      case 9: // $48
        var $49=HEAP[$n];
        HEAP[$1]=$49;
        __label__ = 10; break;
      case 10: // $50
        var $51=HEAP[$1];
        STACKTOP = __stackBase__;
        return $51;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getstrcaps($cs, $cps, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $k=__stackBase__+12;
        HEAP[$1]=$cs;
        HEAP[$2]=$cps;
        HEAP[$3]=$n;
        var $4=HEAP[$3];
        var $5=((($4) + 1)&4294967295);
        HEAP[$3]=$5;
        HEAP[$k]=$4;
        var $6=HEAP[$k];
        var $7=HEAP[$2];
        var $8=(($7+12*$6)&4294967295);
        var $9=(($8)&4294967295);
        HEAP[$9]=1;
        var $10=HEAP[$1];
        var $11=(($10)&4294967295);
        var $12=HEAP[$11];
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=HEAP[$k];
        var $16=HEAP[$2];
        var $17=(($16+12*$15)&4294967295);
        var $18=(($17+4)&4294967295);
        var $19=$18;
        var $20=(($19)&4294967295);
        HEAP[$20]=$14;
        var $21=HEAP[$1];
        var $22=(($21)&4294967295);
        var $23=HEAP[$22];
        var $24=(($23+8)&4294967295);
        HEAP[$22]=$24;
        var $25=(($23+7)&4294967295);
        var $26=HEAP[$25];
        var $27=unSign(($26), 8, 0);
        var $28=((($27))|0)!=0;
        if ($28) { __label__ = 11; break; } else { __label__ = 1; break; }
      case 1: // $29
        __label__ = 2; break;
      case 2: // $30
        var $31=HEAP[$1];
        var $32=(($31)&4294967295);
        var $33=HEAP[$32];
        var $34=(($33+6)&4294967295);
        var $35=HEAP[$34];
        var $36=unSign(($35), 8, 0);
        var $37=((($36))|0)==0;
        var $38=($37) ^ 1;
        if ($38) { __label__ = 3; break; } else { __label__ = 10; break; }
      case 3: // $39
        var $40=HEAP[$3];
        var $41=((($40))|0) >= 10;
        if ($41) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $42
        var $43=HEAP[$1];
        var $44=(($43)&4294967295);
        var $45=HEAP[$44];
        var $46=_nextcap($45);
        var $47=HEAP[$1];
        var $48=(($47)&4294967295);
        HEAP[$48]=$46;
        __label__ = 9; break;
      case 5: // $49
        var $50=HEAP[$1];
        var $51=(($50)&4294967295);
        var $52=HEAP[$51];
        var $53=(($52+6)&4294967295);
        var $54=HEAP[$53];
        var $55=unSign(($54), 8, 0);
        var $56=((($55))|0)==5;
        if ($56) { __label__ = 6; break; } else { __label__ = 7; break; }
      case 6: // $57
        var $58=HEAP[$1];
        var $59=HEAP[$2];
        var $60=HEAP[$3];
        var $61=_getstrcaps($58, $59, $60);
        HEAP[$3]=$61;
        __label__ = 8; break;
      case 7: // $62
        var $63=HEAP[$3];
        var $64=HEAP[$2];
        var $65=(($64+12*$63)&4294967295);
        var $66=(($65)&4294967295);
        HEAP[$66]=0;
        var $67=HEAP[$1];
        var $68=(($67)&4294967295);
        var $69=HEAP[$68];
        var $70=HEAP[$3];
        var $71=HEAP[$2];
        var $72=(($71+12*$70)&4294967295);
        var $73=(($72+4)&4294967295);
        var $74=$73;
        HEAP[$74]=$69;
        var $75=HEAP[$1];
        var $76=(($75)&4294967295);
        var $77=HEAP[$76];
        var $78=_nextcap($77);
        var $79=HEAP[$1];
        var $80=(($79)&4294967295);
        HEAP[$80]=$78;
        var $81=HEAP[$3];
        var $82=((($81) + 1)&4294967295);
        HEAP[$3]=$82;
        __label__ = 8; break;
      case 8: // $83
        __label__ = 9; break;
      case 9: // $84
        __label__ = 2; break;
      case 10: // $85
        var $86=HEAP[$1];
        var $87=(($86)&4294967295);
        var $88=HEAP[$87];
        var $89=(($88+8)&4294967295);
        HEAP[$87]=$89;
        __label__ = 11; break;
      case 11: // $90
        var $91=HEAP[$1];
        var $92=(($91)&4294967295);
        var $93=HEAP[$92];
        var $94=(($93+-8)&4294967295);
        var $95=(($94)&4294967295);
        var $96=HEAP[$95];
        var $97=HEAP[$1];
        var $98=(($97)&4294967295);
        var $99=HEAP[$98];
        var $100=(($99+-8)&4294967295);
        var $101=(($100+7)&4294967295);
        var $102=HEAP[$101];
        var $103=unSign(($102), 8, 0);
        var $104=(($96+$103)&4294967295);
        var $105=(($104+-1)&4294967295);
        var $106=HEAP[$k];
        var $107=HEAP[$2];
        var $108=(($107+12*$106)&4294967295);
        var $109=(($108+4)&4294967295);
        var $110=$109;
        var $111=(($110+4)&4294967295);
        HEAP[$111]=$105;
        var $112=HEAP[$3];
        STACKTOP = __stackBase__;
        return $112;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doublestack($L, $stacklimit, $ptop) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $stack=__stackBase__+12;
        var $newstack=__stackBase__+16;
        var $n=__stackBase__+20;
        var $max=__stackBase__+24;
        var $newn=__stackBase__+28;
        HEAP[$1]=$L;
        HEAP[$2]=$stacklimit;
        HEAP[$3]=$ptop;
        var $4=HEAP[$1];
        var $5=HEAP[$3];
        var $6=((($5) + 4)&4294967295);
        var $7=_lua_touserdata($4, $6);
        var $8=$7;
        HEAP[$stack]=$8;
        var $9=HEAP[$2];
        var $10=HEAP[$9];
        var $11=HEAP[$stack];
        var $12=($10);
        var $13=($11);
        var $14=((($12) - ($13))&4294967295);
        var $15=((((($14))|0)/12)|0);
        HEAP[$n]=$15;
        var $16=HEAP[$1];
        _lua_getfield($16, -10000, ((__str2698)&4294967295));
        var $17=HEAP[$1];
        var $18=_lua_tointeger($17, -1);
        HEAP[$max]=$18;
        var $19=HEAP[$1];
        _lua_settop($19, -2);
        var $20=HEAP[$n];
        var $21=HEAP[$max];
        var $22=((($20))|0) >= ((($21))|0);
        if ($22) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $23
        var $24=HEAP[$1];
        var $25=_luaL_error($24, ((__str41737)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $26
        var $27=HEAP[$n];
        var $28=((2 * ($27))&4294967295);
        HEAP[$newn]=$28;
        var $29=HEAP[$newn];
        var $30=HEAP[$max];
        var $31=((($29))|0) > ((($30))|0);
        if ($31) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $32
        var $33=HEAP[$max];
        HEAP[$newn]=$33;
        __label__ = 4; break;
      case 4: // $34
        var $35=HEAP[$1];
        var $36=HEAP[$newn];
        var $37=((($36) * 12)&4294967295);
        var $38=_lua_newuserdata($35, $37);
        var $39=$38;
        HEAP[$newstack]=$39;
        var $40=HEAP[$newstack];
        var $41=$40;
        var $42=HEAP[$stack];
        var $43=$42;
        var $44=HEAP[$n];
        var $45=((($44) * 12)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($41, $43, $45, 1, 0);
        var $46=HEAP[$1];
        var $47=HEAP[$3];
        var $48=((($47) + 4)&4294967295);
        _lua_replace($46, $48);
        var $49=HEAP[$newstack];
        var $50=HEAP[$newn];
        var $51=(($49+12*$50)&4294967295);
        var $52=HEAP[$2];
        HEAP[$52]=$51;
        var $53=HEAP[$newstack];
        var $54=HEAP[$n];
        var $55=(($53+12*$54)&4294967295);
        STACKTOP = __stackBase__;
        return $55;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _runtimecap($L, $close, $ocap, $o, $s, $ptop) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $6=__stackBase__+20;
        var $cs=__stackBase__+24;
        var $n=__stackBase__+48;
        var $open=__stackBase__+52;
        HEAP[$1]=$L;
        HEAP[$2]=$close;
        HEAP[$3]=$ocap;
        HEAP[$4]=$o;
        HEAP[$5]=$s;
        HEAP[$6]=$ptop;
        var $7=HEAP[$2];
        var $8=_findopen($7);
        HEAP[$open]=$8;
        var $9=HEAP[$open];
        var $10=(($9+6)&4294967295);
        var $11=HEAP[$10];
        var $12=unSign(($11), 8, 0);
        var $13=((($12))|0)==12;
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $14
        __label__ = 3; break;
      case 2: // $15
        ___assert_fail(((__str144)&4294967295), ((__str30726)&4294967295), 2034, ((___PRETTY_FUNCTION___runtimecap)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 3; break;
      case 3: // $17
        var $18=HEAP[$2];
        var $19=(($18+6)&4294967295);
        HEAP[$19]=0;
        var $20=HEAP[$5];
        var $21=HEAP[$2];
        var $22=(($21)&4294967295);
        HEAP[$22]=$20;
        var $23=HEAP[$3];
        var $24=(($cs+4)&4294967295);
        HEAP[$24]=$23;
        var $25=HEAP[$open];
        var $26=(($cs)&4294967295);
        HEAP[$26]=$25;
        var $27=HEAP[$1];
        var $28=(($cs+8)&4294967295);
        HEAP[$28]=$27;
        var $29=HEAP[$4];
        var $30=(($cs+16)&4294967295);
        HEAP[$30]=$29;
        var $31=(($cs+20)&4294967295);
        HEAP[$31]=0;
        var $32=HEAP[$6];
        var $33=(($cs+12)&4294967295);
        HEAP[$33]=$32;
        var $34=HEAP[$1];
        _luaL_checkstack($34, 4, ((__str145)&4294967295));
        var $35=(($cs+8)&4294967295);
        var $36=HEAP[$35];
        var $37=(($cs+12)&4294967295);
        var $38=HEAP[$37];
        var $39=((($38) + 3)&4294967295);
        var $40=(($cs)&4294967295);
        var $41=HEAP[$40];
        var $42=(($41+4)&4294967295);
        var $43=HEAP[$42];
        var $44=reSign(($43), 16, 0);
        _lua_rawgeti($36, $39, $44);
        var $45=HEAP[$1];
        _lua_pushvalue($45, 2);
        var $46=HEAP[$1];
        var $47=HEAP[$5];
        var $48=HEAP[$4];
        var $49=($47);
        var $50=($48);
        var $51=((($49) - ($50))&4294967295);
        var $52=((($51) + 1)&4294967295);
        _lua_pushinteger($46, $52);
        var $53=_pushallvalues($cs, 0);
        HEAP[$n]=$53;
        var $54=HEAP[$1];
        var $55=HEAP[$n];
        var $56=((($55) + 2)&4294967295);
        _lua_call($54, $56, -1);
        var $57=HEAP[$2];
        var $58=HEAP[$open];
        var $59=($57);
        var $60=($58);
        var $61=((($59) - ($60))&4294967295);
        var $62=((((($61))|0)/8)|0);
        STACKTOP = __stackBase__;
        return $62;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doublecap($L, $cap, $captop, $ptop) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $newc=__stackBase__+16;
        HEAP[$1]=$L;
        HEAP[$2]=$cap;
        HEAP[$3]=$captop;
        HEAP[$4]=$ptop;
        var $5=HEAP[$3];
        var $6=((($5))|0) >= 134217727;
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $7
        var $8=HEAP[$1];
        var $9=_luaL_error($8, ((__str125)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $10
        var $11=HEAP[$1];
        var $12=HEAP[$3];
        var $13=((($12) * 2)&4294967295);
        var $14=((($13) * 8)&4294967295);
        var $15=_lua_newuserdata($11, $14);
        var $16=$15;
        HEAP[$newc]=$16;
        var $17=HEAP[$newc];
        var $18=$17;
        var $19=HEAP[$2];
        var $20=$19;
        var $21=HEAP[$3];
        var $22=((($21) * 8)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($18, $20, $22, 1, 0);
        var $23=HEAP[$1];
        var $24=HEAP[$4];
        var $25=((($24) + 2)&4294967295);
        _lua_replace($23, $25);
        var $26=HEAP[$newc];
        STACKTOP = __stackBase__;
        return $26;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _adddyncaptures($s, $base, $n, $fd) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        HEAP[$1]=$s;
        HEAP[$2]=$base;
        HEAP[$3]=$n;
        HEAP[$4]=$fd;
        var $5=HEAP[$2];
        var $6=(($5)&4294967295);
        var $7=(($6+6)&4294967295);
        var $8=HEAP[$7];
        var $9=unSign(($8), 8, 0);
        var $10=((($9))|0)==12;
        if ($10) { __label__ = 1; break; } else { __label__ = 3; break; }
      case 1: // $11
        var $12=HEAP[$2];
        var $13=(($12)&4294967295);
        var $14=(($13+7)&4294967295);
        var $15=HEAP[$14];
        var $16=unSign(($15), 8, 0);
        var $17=((($16))|0)==0;
        if ($17) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $18
        __label__ = 4; break;
      case 3: // $19
        ___assert_fail(((__str143)&4294967295), ((__str30726)&4294967295), 424, ((___PRETTY_FUNCTION___adddyncaptures)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 4; break;
      case 4: // $21
        var $22=HEAP[$4];
        var $23=((($22)) & 65535);
        var $24=HEAP[$2];
        var $25=(($24)&4294967295);
        var $26=(($25+4)&4294967295);
        HEAP[$26]=$23;
        HEAP[$i]=1;
        __label__ = 5; break;
      case 5: // $27
        var $28=HEAP[$i];
        var $29=HEAP[$3];
        var $30=((($28))|0) < ((($29))|0);
        if ($30) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $31
        var $32=HEAP[$i];
        var $33=HEAP[$2];
        var $34=(($33+8*$32)&4294967295);
        var $35=(($34+7)&4294967295);
        HEAP[$35]=1;
        var $36=HEAP[$1];
        var $37=HEAP[$i];
        var $38=HEAP[$2];
        var $39=(($38+8*$37)&4294967295);
        var $40=(($39)&4294967295);
        HEAP[$40]=$36;
        var $41=HEAP[$i];
        var $42=HEAP[$2];
        var $43=(($42+8*$41)&4294967295);
        var $44=(($43+6)&4294967295);
        HEAP[$44]=12;
        var $45=HEAP[$4];
        var $46=HEAP[$i];
        var $47=((($45) + ($46))&4294967295);
        var $48=((($47)) & 65535);
        var $49=HEAP[$i];
        var $50=HEAP[$2];
        var $51=(($50+8*$49)&4294967295);
        var $52=(($51+4)&4294967295);
        HEAP[$52]=$48;
        __label__ = 7; break;
      case 7: // $53
        var $54=HEAP[$i];
        var $55=((($54) + 1)&4294967295);
        HEAP[$i]=$55;
        __label__ = 5; break;
      case 8: // $56
        var $57=HEAP[$3];
        var $58=HEAP[$2];
        var $59=(($58+8*$57)&4294967295);
        var $60=(($59+6)&4294967295);
        HEAP[$60]=0;
        var $61=HEAP[$3];
        var $62=HEAP[$2];
        var $63=(($62+8*$61)&4294967295);
        var $64=(($63+7)&4294967295);
        HEAP[$64]=1;
        var $65=HEAP[$1];
        var $66=HEAP[$3];
        var $67=HEAP[$2];
        var $68=(($67+8*$66)&4294967295);
        var $69=(($68)&4294967295);
        HEAP[$69]=$65;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _union_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l1=__stackBase__+4;
        var $l2=__stackBase__+8;
        var $size=__stackBase__+12;
        var $p1=__stackBase__+16;
        var $p2=__stackBase__+20;
        var $st2=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$size]=0;
        var $2=HEAP[$1];
        var $3=_getpatt($2, 1, $l1);
        HEAP[$p1]=$3;
        var $4=HEAP[$1];
        var $5=_getpatt($4, 2, $l2);
        HEAP[$p2]=$5;
        var $6=HEAP[$p1];
        var $7=$6;
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=((($10))|0)==15;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$1];
        _lua_pushvalue($13, 2);
        __label__ = 7; break;
      case 2: // $14
        var $15=HEAP[$p2];
        var $16=$15;
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=((($19))|0)==15;
        if ($20) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $21
        var $22=HEAP[$p1];
        var $23=$22;
        var $24=(($23)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=((($26))|0)==6;
        if ($27) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $28
        var $29=HEAP[$1];
        _lua_pushvalue($29, 1);
        __label__ = 6; break;
      case 5: // $30
        var $31=HEAP[$p2];
        var $32=_tocharset($31, $st2);
        var $33=HEAP[$1];
        var $34=HEAP[$p1];
        var $35=HEAP[$l1];
        var $36=HEAP[$l2];
        var $37=_separateparts($33, $34, $35, $36, $size, $st2);
        __label__ = 6; break;
      case 6: // $38
        __label__ = 7; break;
      case 7: // $39
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _star_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $l1=__stackBase__+8;
        var $n=__stackBase__+12;
        var $p1=__stackBase__+16;
        var $st=__stackBase__+20;
        var $op=__stackBase__+56;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_luaL_checkinteger($3, 2);
        HEAP[$n]=$4;
        var $5=HEAP[$2];
        var $6=_getpatt($5, 1, $l1);
        HEAP[$p1]=$6;
        var $7=HEAP[$n];
        var $8=((($7))|0) >= 0;
        if ($8) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 1: // $9
        var $10=HEAP[$p1];
        var $11=_tocharset($10, $st);
        var $12=((($11))|0)==1;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        var $14=HEAP[$2];
        var $15=(($st+4)&4294967295);
        var $16=(($15)&4294967295);
        var $17=HEAP[$l1];
        var $18=HEAP[$n];
        var $19=_repeatcharset($14, $16, $17, $18);
        HEAP[$1]=$19;
        __label__ = 12; break;
      case 3: // $20
        var $21=HEAP[$p1];
        var $22=_isheadfail($21);
        var $23=((($22))|0)!=0;
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $24
        var $25=HEAP[$2];
        var $26=HEAP[$l1];
        var $27=HEAP[$n];
        var $28=_repeatheadfail($25, $26, $27);
        HEAP[$op]=$28;
        __label__ = 6; break;
      case 5: // $29
        var $30=HEAP[$2];
        var $31=HEAP[$p1];
        var $32=HEAP[$l1];
        var $33=HEAP[$n];
        var $34=_repeats($30, $31, $32, $33);
        HEAP[$op]=$34;
        __label__ = 6; break;
      case 6: // $35
        var $36=HEAP[$op];
        _optimizecaptures($36);
        var $37=HEAP[$op];
        _optimizejumps($37);
        __label__ = 11; break;
      case 7: // $38
        var $39=HEAP[$p1];
        var $40=_isheadfail($39);
        var $41=((($40))|0)!=0;
        if ($41) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $42
        var $43=HEAP[$2];
        var $44=HEAP[$l1];
        var $45=HEAP[$n];
        var $46=((0 - ($45))&4294967295);
        _optionalheadfail($43, $44, $46);
        __label__ = 10; break;
      case 9: // $47
        var $48=HEAP[$2];
        var $49=HEAP[$l1];
        var $50=HEAP[$n];
        var $51=((0 - ($50))&4294967295);
        _optionals($48, $49, $51);
        __label__ = 10; break;
      case 10: // $52
        __label__ = 11; break;
      case 11: // $53
        HEAP[$1]=1;
        __label__ = 12; break;
      case 12: // $54
        var $55=HEAP[$1];
        STACKTOP = __stackBase__;
        return $55;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _diff_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 112);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l1=__stackBase__+4;
        var $l2=__stackBase__+8;
        var $p1=__stackBase__+12;
        var $p2=__stackBase__+16;
        var $st1=__stackBase__+20;
        var $st2=__stackBase__+56;
        var $p=__stackBase__+92;
        var $i=__stackBase__+96;
        var $p3=__stackBase__+100;
        var $p4=__stackBase__+104;
        var $pi=__stackBase__+108;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_getpatt($2, 1, $l1);
        HEAP[$p1]=$3;
        var $4=HEAP[$1];
        var $5=_getpatt($4, 2, $l2);
        HEAP[$p2]=$5;
        var $6=HEAP[$p1];
        var $7=_tocharset($6, $st1);
        var $8=((($7))|0)==1;
        if ($8) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 1: // $9
        var $10=HEAP[$p2];
        var $11=_tocharset($10, $st2);
        var $12=((($11))|0)==1;
        if ($12) { __label__ = 2; break; } else { __label__ = 7; break; }
      case 2: // $13
        var $14=HEAP[$1];
        var $15=_newcharset($14);
        HEAP[$p]=$15;
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $16
        var $17=HEAP[$i];
        var $18=((($17))|0) < 32;
        if ($18) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $19
        var $20=HEAP[$i];
        var $21=(($st1+4)&4294967295);
        var $22=(($21+$20)&4294967295);
        var $23=HEAP[$22];
        var $24=unSign(($23), 8, 0);
        var $25=HEAP[$i];
        var $26=(($st2+4)&4294967295);
        var $27=(($26+$25)&4294967295);
        var $28=HEAP[$27];
        var $29=unSign(($28), 8, 0);
        var $30=($29) ^ -1;
        var $31=($24) & ($30);
        var $32=((($31)) & 255);
        var $33=HEAP[$i];
        var $34=HEAP[$p];
        var $35=(($34+4)&4294967295);
        var $36=$35;
        var $37=(($36+$33)&4294967295);
        HEAP[$37]=$32;
        __label__ = 5; break;
      case 5: // $38
        var $39=HEAP[$i];
        var $40=((($39) + 1)&4294967295);
        HEAP[$i]=$40;
        __label__ = 3; break;
      case 6: // $41
        __label__ = 11; break;
      case 7: // $42
        var $43=HEAP[$p2];
        var $44=_isheadfail($43);
        var $45=((($44))|0)!=0;
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $46
        var $47=HEAP[$1];
        var $48=HEAP[$l2];
        var $49=((($48) + 1)&4294967295);
        var $50=HEAP[$l1];
        var $51=((($49) + ($50))&4294967295);
        var $52=_newpatt($47, $51);
        HEAP[$p3]=$52;
        var $53=HEAP[$1];
        var $54=HEAP[$p3];
        var $55=_addpatt($53, $54, 2);
        var $56=HEAP[$p3];
        var $57=(($56+4*$55)&4294967295);
        HEAP[$p3]=$57;
        var $58=HEAP[$p3];
        var $59=HEAP[$l2];
        var $60=((0 - ($59))&4294967295);
        var $61=(($58+4*$60)&4294967295);
        var $62=HEAP[$l2];
        var $63=((($62) + 1)&4294967295);
        _check2test($61, $63);
        var $64=HEAP[$p3];
        var $65=(($64+4)&4294967295);
        HEAP[$p3]=$65;
        _setinstaux($64, 15, 0, 0);
        var $66=HEAP[$1];
        var $67=HEAP[$p3];
        var $68=_addpatt($66, $67, 1);
        __label__ = 10; break;
      case 9: // $69
        var $70=HEAP[$1];
        var $71=HEAP[$l2];
        var $72=((1 + ($71))&4294967295);
        var $73=((($72) + 1)&4294967295);
        var $74=HEAP[$l1];
        var $75=((($73) + ($74))&4294967295);
        var $76=_newpatt($70, $75);
        HEAP[$p4]=$76;
        var $77=HEAP[$p4];
        HEAP[$pi]=$77;
        var $78=HEAP[$p4];
        var $79=(($78+4)&4294967295);
        HEAP[$p4]=$79;
        var $80=HEAP[$l2];
        var $81=((1 + ($80))&4294967295);
        var $82=((($81) + 1)&4294967295);
        _setinstaux($78, 7, $82, 0);
        var $83=HEAP[$1];
        var $84=HEAP[$p4];
        var $85=_addpatt($83, $84, 2);
        var $86=HEAP[$p4];
        var $87=(($86+4*$85)&4294967295);
        HEAP[$p4]=$87;
        var $88=HEAP[$p4];
        var $89=(($88+4)&4294967295);
        HEAP[$p4]=$89;
        _setinstaux($88, 14, 0, 0);
        var $90=HEAP[$1];
        var $91=HEAP[$p4];
        var $92=_addpatt($90, $91, 1);
        var $93=HEAP[$pi];
        _optimizechoice($93);
        __label__ = 10; break;
      case 10: // $94
        __label__ = 11; break;
      case 11: // $95
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _concat_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l1=__stackBase__+4;
        var $l2=__stackBase__+8;
        var $p1=__stackBase__+12;
        var $p2=__stackBase__+16;
        var $op=__stackBase__+20;
        var $p=__stackBase__+24;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_getpatt($2, 1, $l1);
        HEAP[$p1]=$3;
        var $4=HEAP[$1];
        var $5=_getpatt($4, 2, $l2);
        HEAP[$p2]=$5;
        var $6=HEAP[$p1];
        var $7=$6;
        var $8=(($7)&4294967295);
        var $9=HEAP[$8];
        var $10=unSign(($9), 8, 0);
        var $11=((($10))|0)==15;
        if ($11) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $12
        var $13=HEAP[$p2];
        var $14=$13;
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        var $18=((($17))|0)==6;
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $19
        var $20=HEAP[$1];
        _lua_pushvalue($20, 1);
        __label__ = 14; break;
      case 3: // $21
        var $22=HEAP[$p2];
        var $23=$22;
        var $24=(($23)&4294967295);
        var $25=HEAP[$24];
        var $26=unSign(($25), 8, 0);
        var $27=((($26))|0)==15;
        if ($27) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $28
        var $29=HEAP[$p1];
        var $30=$29;
        var $31=(($30)&4294967295);
        var $32=HEAP[$31];
        var $33=unSign(($32), 8, 0);
        var $34=((($33))|0)==6;
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $35
        var $36=HEAP[$1];
        _lua_pushvalue($36, 2);
        __label__ = 13; break;
      case 6: // $37
        var $38=HEAP[$p1];
        var $39=$38;
        var $40=(($39)&4294967295);
        var $41=HEAP[$40];
        var $42=unSign(($41), 8, 0);
        var $43=((($42))|0)==0;
        if ($43) { __label__ = 7; break; } else { __label__ = 11; break; }
      case 7: // $44
        var $45=HEAP[$p1];
        var $46=(($45+4)&4294967295);
        var $47=$46;
        var $48=(($47)&4294967295);
        var $49=HEAP[$48];
        var $50=unSign(($49), 8, 0);
        var $51=((($50))|0)==6;
        if ($51) { __label__ = 8; break; } else { __label__ = 11; break; }
      case 8: // $52
        var $53=HEAP[$p2];
        var $54=$53;
        var $55=(($54)&4294967295);
        var $56=HEAP[$55];
        var $57=unSign(($56), 8, 0);
        var $58=((($57))|0)==0;
        if ($58) { __label__ = 9; break; } else { __label__ = 11; break; }
      case 9: // $59
        var $60=HEAP[$p2];
        var $61=(($60+4)&4294967295);
        var $62=$61;
        var $63=(($62)&4294967295);
        var $64=HEAP[$63];
        var $65=unSign(($64), 8, 0);
        var $66=((($65))|0)==6;
        if ($66) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $67
        var $68=HEAP[$1];
        var $69=HEAP[$p1];
        var $70=$69;
        var $71=(($70+1)&4294967295);
        var $72=HEAP[$71];
        var $73=unSign(($72), 8, 0);
        var $74=HEAP[$p2];
        var $75=$74;
        var $76=(($75+1)&4294967295);
        var $77=HEAP[$76];
        var $78=unSign(($77), 8, 0);
        var $79=((($73) + ($78))&4294967295);
        var $80=_any($68, $79, 0, 0);
        __label__ = 12; break;
      case 11: // $81
        var $82=HEAP[$1];
        var $83=HEAP[$l1];
        var $84=HEAP[$l2];
        var $85=((($83) + ($84))&4294967295);
        var $86=_newpatt($82, $85);
        HEAP[$op]=$86;
        var $87=HEAP[$op];
        var $88=HEAP[$1];
        var $89=HEAP[$op];
        var $90=_addpatt($88, $89, 1);
        var $91=(($87+4*$90)&4294967295);
        HEAP[$p]=$91;
        var $92=HEAP[$1];
        var $93=HEAP[$p];
        var $94=_addpatt($92, $93, 2);
        var $95=HEAP[$op];
        _optimizecaptures($95);
        __label__ = 12; break;
      case 12: // $96
        __label__ = 13; break;
      case 13: // $97
        __label__ = 14; break;
      case 14: // $98
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _rcapture_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_lua_type($3, 2);
        if ($4 == 6) {
          __label__ = 1; break;
        }
        else if ($4 == 5) {
          __label__ = 2; break;
        }
        else if ($4 == 4) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $5
        var $6=HEAP[$2];
        var $7=_capture_aux($6, 7, 2);
        HEAP[$1]=$7;
        __label__ = 5; break;
      case 2: // $8
        var $9=HEAP[$2];
        var $10=_capture_aux($9, 8, 2);
        HEAP[$1]=$10;
        __label__ = 5; break;
      case 3: // $11
        var $12=HEAP[$2];
        var $13=_capture_aux($12, 9, 2);
        HEAP[$1]=$13;
        __label__ = 5; break;
      case 4: // $14
        var $15=HEAP[$2];
        var $16=_luaL_argerror($15, 2, ((__str154)&4294967295));
        HEAP[$1]=$16;
        __label__ = 5; break;
      case 5: // $17
        var $18=HEAP[$1];
        STACKTOP = __stackBase__;
        return $18;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unm_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $p=__stackBase__+8;
        var $p1=__stackBase__+12;
        HEAP[$2]=$L;
        var $3=HEAP[$2];
        var $4=_getpatt($3, 1, 0);
        HEAP[$p]=$4;
        var $5=HEAP[$p];
        var $6=$5;
        var $7=(($6)&4294967295);
        var $8=HEAP[$7];
        var $9=unSign(($8), 8, 0);
        var $10=((($9))|0)==15;
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $11
        var $12=HEAP[$2];
        var $13=_newpatt($12, 0);
        HEAP[$1]=1;
        __label__ = 5; break;
      case 2: // $14
        var $15=HEAP[$p];
        var $16=$15;
        var $17=(($16)&4294967295);
        var $18=HEAP[$17];
        var $19=unSign(($18), 8, 0);
        var $20=((($19))|0)==6;
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $21
        var $22=HEAP[$2];
        var $23=_newpatt($22, 1);
        HEAP[$p1]=$23;
        var $24=HEAP[$p1];
        _setinstaux($24, 15, 0, 0);
        HEAP[$1]=1;
        __label__ = 5; break;
      case 4: // $25
        var $26=HEAP[$2];
        _lua_pushlstring($26, ((__str153)&4294967295), 0);
        var $27=HEAP[$2];
        _lua_insert($27, 1);
        var $28=HEAP[$2];
        var $29=_diff_l($28);
        HEAP[$1]=$29;
        __label__ = 5; break;
      case 5: // $30
        var $31=HEAP[$1];
        STACKTOP = __stackBase__;
        return $31;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pattand_l($L) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $l1=__stackBase__+4;
        var $st1=__stackBase__+8;
        var $p1=__stackBase__+44;
        var $p=__stackBase__+48;
        var $p2=__stackBase__+52;
        HEAP[$1]=$L;
        var $2=HEAP[$1];
        var $3=_getpatt($2, 1, $l1);
        HEAP[$p1]=$3;
        var $4=HEAP[$p1];
        var $5=$4;
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=unSign(($7), 8, 0);
        var $9=((($8))|0)==15;
        if ($9) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $10
        var $11=HEAP[$p1];
        var $12=$11;
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=unSign(($14), 8, 0);
        var $16=((($15))|0)==6;
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $17
        var $18=HEAP[$1];
        _lua_pushvalue($18, 1);
        __label__ = 7; break;
      case 3: // $19
        var $20=HEAP[$p1];
        var $21=_tocharset($20, $st1);
        var $22=((($21))|0)==1;
        if ($22) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$l1];
        var $26=((($25) + 1)&4294967295);
        var $27=_newpatt($24, $26);
        HEAP[$p]=$27;
        var $28=HEAP[$p];
        var $29=$28;
        var $30=HEAP[$p1];
        var $31=$30;
        var $32=HEAP[$l1];
        var $33=((($32) * 4)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($29, $31, $33, 1, 0);
        var $34=HEAP[$l1];
        var $35=HEAP[$p];
        var $36=(($35+4*$34)&4294967295);
        HEAP[$p]=$36;
        var $37=HEAP[$p];
        _setinstaux($37, 4, 0, 1);
        __label__ = 6; break;
      case 5: // $38
        var $39=HEAP[$1];
        var $40=HEAP[$l1];
        var $41=((1 + ($40))&4294967295);
        var $42=((($41) + 2)&4294967295);
        var $43=_newpatt($39, $42);
        HEAP[$p2]=$43;
        var $44=HEAP[$p2];
        var $45=(($44+4)&4294967295);
        HEAP[$p2]=$45;
        var $46=HEAP[$l1];
        var $47=((1 + ($46))&4294967295);
        var $48=((($47) + 1)&4294967295);
        _setinstaux($44, 7, $48, 0);
        var $49=HEAP[$1];
        var $50=HEAP[$p2];
        var $51=_addpatt($49, $50, 1);
        var $52=HEAP[$p2];
        var $53=(($52+4*$51)&4294967295);
        HEAP[$p2]=$53;
        var $54=HEAP[$p2];
        var $55=(($54+4)&4294967295);
        HEAP[$p2]=$55;
        _setinstaux($54, 13, 2, 0);
        var $56=HEAP[$p2];
        _setinstaux($56, 15, 0, 0);
        __label__ = 6; break;
      case 6: // $57
        __label__ = 7; break;
      case 7: // $58
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _isheadfail($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$2]=$p;
        var $3=HEAP[$2];
        var $4=$3;
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        var $8=((_opproperties+$7*4)&4294967295);
        var $9=HEAP[$8];
        var $10=($9) & 2;
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $12
        var $13=HEAP[$2];
        var $14=$13;
        var $15=(($14+2)&4294967295);
        var $16=HEAP[$15];
        var $17=reSign(($16), 16, 0);
        var $18=((($17))|0)==0;
        if ($18) { __label__ = 3; break; } else { __label__ = 2; break; }
      case 2: // $19
        HEAP[$1]=0;
        __label__ = 10; break;
      case 3: // $20
        var $21=HEAP[$2];
        var $22=_sizei($21);
        var $23=HEAP[$2];
        var $24=(($23+4*$22)&4294967295);
        HEAP[$2]=$24;
        __label__ = 4; break;
      case 4: // $25
        var $26=HEAP[$2];
        var $27=$26;
        var $28=(($27)&4294967295);
        var $29=HEAP[$28];
        var $30=unSign(($29), 8, 0);
        var $31=((($30))|0)!=6;
        if ($31) { __label__ = 5; break; } else { __label__ = 9; break; }
      case 5: // $32
        var $33=HEAP[$2];
        var $34=$33;
        var $35=(($34)&4294967295);
        var $36=HEAP[$35];
        var $37=unSign(($36), 8, 0);
        var $38=((_opproperties+$37*4)&4294967295);
        var $39=HEAP[$38];
        var $40=($39) & 8;
        var $41=((($40))|0)!=0;
        if ($41) { __label__ = 7; break; } else { __label__ = 6; break; }
      case 6: // $42
        HEAP[$1]=0;
        __label__ = 10; break;
      case 7: // $43
        __label__ = 8; break;
      case 8: // $44
        var $45=HEAP[$2];
        var $46=_sizei($45);
        var $47=HEAP[$2];
        var $48=(($47+4*$46)&4294967295);
        HEAP[$2]=$48;
        __label__ = 4; break;
      case 9: // $49
        HEAP[$1]=1;
        __label__ = 10; break;
      case 10: // $50
        var $51=HEAP[$1];
        STACKTOP = __stackBase__;
        return $51;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check2test($p, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        HEAP[$1]=$p;
        HEAP[$2]=$n;
        var $3=HEAP[$1];
        var $4=$3;
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        var $7=unSign(($6), 8, 0);
        var $8=((_opproperties+$7*4)&4294967295);
        var $9=HEAP[$8];
        var $10=($9) & 2;
        var $11=((($10))|0)!=0;
        if ($11) { __label__ = 1; break; } else { __label__ = 4; break; }
      case 1: // $12
        var $13=HEAP[$1];
        var $14=$13;
        var $15=(($14+2)&4294967295);
        var $16=HEAP[$15];
        var $17=reSign(($16), 16, 0);
        var $18=((($17))|0)==0;
        if ($18) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $19
        var $20=HEAP[$2];
        var $21=((($20))|0)!=0;
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $22
        __label__ = 5; break;
      case 4: // $23
        ___assert_fail(((__str157)&4294967295), ((__str30726)&4294967295), 830, ((___PRETTY_FUNCTION___check2test)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 5; break;
      case 5: // $25
        var $26=HEAP[$2];
        var $27=((($26)) & 65535);
        var $28=HEAP[$1];
        var $29=$28;
        var $30=(($29+2)&4294967295);
        HEAP[$30]=$27;
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _optimizechoice($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $lc=__stackBase__+4;
        HEAP[$1]=$p;
        var $2=HEAP[$1];
        var $3=$2;
        var $4=(($3)&4294967295);
        var $5=HEAP[$4];
        var $6=unSign(($5), 8, 0);
        var $7=((($6))|0)==7;
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $8
        __label__ = 3; break;
      case 2: // $9
        ___assert_fail(((__str155)&4294967295), ((__str30726)&4294967295), 920, ((___PRETTY_FUNCTION___optimizechoice)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 3; break;
      case 3: // $11
        var $12=HEAP[$1];
        var $13=(($12+4)&4294967295);
        var $14=$13;
        var $15=(($14)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        var $18=((_opproperties+$17*4)&4294967295);
        var $19=HEAP[$18];
        var $20=($19) & 4;
        var $21=((($20))|0)!=0;
        if ($21) { __label__ = 4; break; } else { __label__ = 14; break; }
      case 4: // $22
        var $23=HEAP[$1];
        var $24=(($23+4)&4294967295);
        var $25=$24;
        var $26=(($25+2)&4294967295);
        var $27=HEAP[$26];
        var $28=reSign(($27), 16, 0);
        var $29=((($28))|0)==0;
        if ($29) { __label__ = 5; break; } else { __label__ = 14; break; }
      case 5: // $30
        var $31=HEAP[$1];
        var $32=(($31+4)&4294967295);
        var $33=_sizei($32);
        HEAP[$lc]=$33;
        var $34=HEAP[$1];
        var $35=HEAP[$lc];
        _rotate($34, $35, 1);
        var $36=HEAP[$1];
        var $37=$36;
        var $38=(($37)&4294967295);
        var $39=HEAP[$38];
        var $40=unSign(($39), 8, 0);
        var $41=((_opproperties+$40*4)&4294967295);
        var $42=HEAP[$41];
        var $43=($42) & 4;
        var $44=((($43))|0)!=0;
        if ($44) { __label__ = 6; break; } else { __label__ = 9; break; }
      case 6: // $45
        var $46=HEAP[$1];
        var $47=$46;
        var $48=(($47+2)&4294967295);
        var $49=HEAP[$48];
        var $50=reSign(($49), 16, 0);
        var $51=((($50))|0)==0;
        if ($51) { __label__ = 7; break; } else { __label__ = 9; break; }
      case 7: // $52
        var $53=HEAP[$1];
        var $54=HEAP[$lc];
        var $55=(($53+4*$54)&4294967295);
        var $56=$55;
        var $57=(($56)&4294967295);
        var $58=HEAP[$57];
        var $59=unSign(($58), 8, 0);
        var $60=((($59))|0)==7;
        if ($60) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $61
        __label__ = 10; break;
      case 9: // $62
        ___assert_fail(((__str156)&4294967295), ((__str30726)&4294967295), 924, ((___PRETTY_FUNCTION___optimizechoice)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 10; break;
      case 10: // $64
        var $65=HEAP[$1];
        var $66=$65;
        var $67=(($66)&4294967295);
        var $68=HEAP[$67];
        var $69=unSign(($68), 8, 0);
        var $70=((($69))|0)==0;
        if ($70) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $71
        var $72=HEAP[$1];
        var $73=$72;
        var $74=(($73+1)&4294967295);
        var $75=HEAP[$74];
        var $76=unSign(($75), 8, 0);
        __lastLabel__ = 11; __label__ = 13; break;
      case 12: // $77
        __lastLabel__ = 12; __label__ = 13; break;
      case 13: // $78
        var $79=__lastLabel__ == 11 ? $76 : (1);
        var $80=((($79)) & 255);
        var $81=HEAP[$1];
        var $82=HEAP[$lc];
        var $83=(($81+4*$82)&4294967295);
        var $84=$83;
        var $85=(($84+1)&4294967295);
        HEAP[$85]=$80;
        var $86=HEAP[$1];
        var $87=HEAP[$1];
        var $88=HEAP[$lc];
        var $89=(($87+4*$88)&4294967295);
        var $90=$89;
        var $91=(($90+2)&4294967295);
        var $92=HEAP[$91];
        var $93=reSign(($92), 16, 0);
        _check2test($86, $93);
        var $94=HEAP[$lc];
        var $95=HEAP[$1];
        var $96=HEAP[$lc];
        var $97=(($95+4*$96)&4294967295);
        var $98=$97;
        var $99=(($98+2)&4294967295);
        var $100=HEAP[$99];
        var $101=reSign(($100), 16, 0);
        var $102=((($101) - ($94))&4294967295);
        var $103=((($102)) & 65535);
        HEAP[$99]=$103;
        __label__ = 14; break;
      case 14: // $104
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _repeatcharset($L, $cs, $l1, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        var $p=__stackBase__+20;
        var $k=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$cs;
        HEAP[$3]=$l1;
        HEAP[$4]=$n;
        var $5=HEAP[$1];
        var $6=HEAP[$4];
        var $7=HEAP[$3];
        var $8=((($6) * ($7))&4294967295);
        var $9=((($8) + 9)&4294967295);
        var $10=_newpatt($5, $9);
        HEAP[$p]=$10;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $11
        var $12=HEAP[$i];
        var $13=HEAP[$4];
        var $14=((($12))|0) < ((($13))|0);
        if ($14) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $15
        var $16=HEAP[$1];
        var $17=HEAP[$p];
        var $18=_addpatt($16, $17, 1);
        var $19=HEAP[$p];
        var $20=(($19+4*$18)&4294967295);
        HEAP[$p]=$20;
        __label__ = 3; break;
      case 3: // $21
        var $22=HEAP[$i];
        var $23=((($22) + 1)&4294967295);
        HEAP[$i]=$23;
        __label__ = 1; break;
      case 4: // $24
        var $25=HEAP[$p];
        _setinstaux($25, 3, 0, 0);
        HEAP[$k]=0;
        __label__ = 5; break;
      case 5: // $26
        var $27=HEAP[$k];
        var $28=((($27))|0) < 32;
        if ($28) { __label__ = 6; break; } else { __label__ = 8; break; }
      case 6: // $29
        var $30=HEAP[$k];
        var $31=HEAP[$2];
        var $32=(($31+$30)&4294967295);
        var $33=HEAP[$32];
        var $34=HEAP[$k];
        var $35=HEAP[$p];
        var $36=(($35+4)&4294967295);
        var $37=$36;
        var $38=(($37+$34)&4294967295);
        HEAP[$38]=$33;
        __label__ = 7; break;
      case 7: // $39
        var $40=HEAP[$k];
        var $41=((($40) + 1)&4294967295);
        HEAP[$k]=$41;
        __label__ = 5; break;
      case 8: // $42
        STACKTOP = __stackBase__;
        return 1;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _repeatheadfail($L, $l1, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $p=__stackBase__+16;
        var $op=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$l1;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=HEAP[$3];
        var $6=((($5) + 1)&4294967295);
        var $7=HEAP[$2];
        var $8=((($6) * ($7))&4294967295);
        var $9=((($8) + 1)&4294967295);
        var $10=_newpatt($4, $9);
        HEAP[$p]=$10;
        var $11=HEAP[$p];
        HEAP[$op]=$11;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $12
        var $13=HEAP[$i];
        var $14=HEAP[$3];
        var $15=((($13))|0) < ((($14))|0);
        if ($15) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $16
        var $17=HEAP[$1];
        var $18=HEAP[$p];
        var $19=_addpatt($17, $18, 1);
        var $20=HEAP[$p];
        var $21=(($20+4*$19)&4294967295);
        HEAP[$p]=$21;
        __label__ = 3; break;
      case 3: // $22
        var $23=HEAP[$i];
        var $24=((($23) + 1)&4294967295);
        HEAP[$i]=$24;
        __label__ = 1; break;
      case 4: // $25
        var $26=HEAP[$1];
        var $27=HEAP[$p];
        var $28=_addpatt($26, $27, 1);
        var $29=HEAP[$p];
        var $30=(($29+4*$28)&4294967295);
        HEAP[$p]=$30;
        var $31=HEAP[$p];
        var $32=HEAP[$2];
        var $33=((0 - ($32))&4294967295);
        var $34=(($31+4*$33)&4294967295);
        var $35=HEAP[$2];
        var $36=((($35) + 1)&4294967295);
        _check2test($34, $36);
        var $37=HEAP[$p];
        var $38=HEAP[$2];
        var $39=((0 - ($38))&4294967295);
        _setinstaux($37, 8, $39, 0);
        var $40=HEAP[$op];
        STACKTOP = __stackBase__;
        return $40;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _repeats($L, $p1, $l1, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $i=__stackBase__+16;
        var $op=__stackBase__+20;
        var $p=__stackBase__+24;
        HEAP[$1]=$L;
        HEAP[$2]=$p1;
        HEAP[$3]=$l1;
        HEAP[$4]=$n;
        var $5=HEAP[$1];
        var $6=HEAP[$4];
        var $7=((($6) + 1)&4294967295);
        var $8=HEAP[$3];
        var $9=((($7) * ($8))&4294967295);
        var $10=((($9) + 2)&4294967295);
        var $11=_newpatt($5, $10);
        HEAP[$op]=$11;
        var $12=HEAP[$op];
        HEAP[$p]=$12;
        var $13=HEAP[$1];
        var $14=HEAP[$2];
        var $15=HEAP[$2];
        var $16=HEAP[$2];
        var $17=HEAP[$3];
        var $18=(($16+4*$17)&4294967295);
        var $19=_verify($13, $14, $15, $18, 0, 0);
        var $20=((($19))|0)!=0;
        if ($20) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $21
        var $22=HEAP[$1];
        var $23=_luaL_error($22, ((__str158)&4294967295), allocate(1, "i32", ALLOC_STACK));
        __label__ = 2; break;
      case 2: // $24
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $25
        var $26=HEAP[$i];
        var $27=HEAP[$4];
        var $28=((($26))|0) < ((($27))|0);
        if ($28) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $29
        var $30=HEAP[$1];
        var $31=HEAP[$p];
        var $32=_addpatt($30, $31, 1);
        var $33=HEAP[$p];
        var $34=(($33+4*$32)&4294967295);
        HEAP[$p]=$34;
        __label__ = 5; break;
      case 5: // $35
        var $36=HEAP[$i];
        var $37=((($36) + 1)&4294967295);
        HEAP[$i]=$37;
        __label__ = 3; break;
      case 6: // $38
        var $39=HEAP[$p];
        var $40=(($39+4)&4294967295);
        HEAP[$p]=$40;
        var $41=HEAP[$3];
        var $42=((1 + ($41))&4294967295);
        var $43=((($42) + 1)&4294967295);
        _setinstaux($39, 7, $43, 0);
        var $44=HEAP[$1];
        var $45=HEAP[$p];
        var $46=_addpatt($44, $45, 1);
        var $47=HEAP[$p];
        var $48=(($47+4*$46)&4294967295);
        HEAP[$p]=$48;
        var $49=HEAP[$p];
        var $50=HEAP[$3];
        var $51=((0 - ($50))&4294967295);
        _setinstaux($49, 12, $51, 0);
        var $52=HEAP[$op];
        STACKTOP = __stackBase__;
        return $52;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _optionalheadfail($L, $l1, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $op=__stackBase__+12;
        var $p=__stackBase__+16;
        var $i=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$l1;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=HEAP[$3];
        var $6=HEAP[$2];
        var $7=((($5) * ($6))&4294967295);
        var $8=_newpatt($4, $7);
        HEAP[$op]=$8;
        var $9=HEAP[$op];
        HEAP[$p]=$9;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $10
        var $11=HEAP[$i];
        var $12=HEAP[$3];
        var $13=((($11))|0) < ((($12))|0);
        if ($13) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $14
        var $15=HEAP[$1];
        var $16=HEAP[$p];
        var $17=_addpatt($15, $16, 1);
        var $18=HEAP[$p];
        var $19=(($18+4*$17)&4294967295);
        HEAP[$p]=$19;
        var $20=HEAP[$p];
        var $21=HEAP[$2];
        var $22=((0 - ($21))&4294967295);
        var $23=(($20+4*$22)&4294967295);
        var $24=HEAP[$3];
        var $25=HEAP[$i];
        var $26=((($24) - ($25))&4294967295);
        var $27=HEAP[$2];
        var $28=((($26) * ($27))&4294967295);
        _check2test($23, $28);
        __label__ = 3; break;
      case 3: // $29
        var $30=HEAP[$i];
        var $31=((($30) + 1)&4294967295);
        HEAP[$i]=$31;
        __label__ = 1; break;
      case 4: // $32
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _optionals($L, $l1, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        var $op=__stackBase__+16;
        var $p=__stackBase__+20;
        HEAP[$1]=$L;
        HEAP[$2]=$l1;
        HEAP[$3]=$n;
        var $4=HEAP[$1];
        var $5=HEAP[$3];
        var $6=HEAP[$2];
        var $7=((($6) + 1)&4294967295);
        var $8=((($5) * ($7))&4294967295);
        var $9=((($8) + 1)&4294967295);
        var $10=_newpatt($4, $9);
        HEAP[$op]=$10;
        var $11=HEAP[$op];
        HEAP[$p]=$11;
        var $12=HEAP[$p];
        var $13=(($12+4)&4294967295);
        HEAP[$p]=$13;
        var $14=HEAP[$3];
        var $15=HEAP[$2];
        var $16=((($15) + 1)&4294967295);
        var $17=((($14) * ($16))&4294967295);
        var $18=((1 + ($17))&4294967295);
        _setinstaux($12, 7, $18, 0);
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $19
        var $20=HEAP[$i];
        var $21=HEAP[$3];
        var $22=((($20))|0) < ((($21))|0);
        if ($22) { __label__ = 2; break; } else { __label__ = 4; break; }
      case 2: // $23
        var $24=HEAP[$1];
        var $25=HEAP[$p];
        var $26=_addpatt($24, $25, 1);
        var $27=HEAP[$p];
        var $28=(($27+4*$26)&4294967295);
        HEAP[$p]=$28;
        var $29=HEAP[$p];
        var $30=(($29+4)&4294967295);
        HEAP[$p]=$30;
        _setinstaux($29, 12, 1, 0);
        __label__ = 3; break;
      case 3: // $31
        var $32=HEAP[$i];
        var $33=((($32) + 1)&4294967295);
        HEAP[$i]=$33;
        __label__ = 1; break;
      case 4: // $34
        var $35=HEAP[$p];
        var $36=(($35+-4)&4294967295);
        _setinstaux($36, 11, 1, 0);
        var $37=HEAP[$op];
        _optimizechoice($37);
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _separateparts($L, $p1, $l1, $l2, $size, $st2) {
    var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $6=__stackBase__+20;
        var $7=__stackBase__+24;
        var $sp=__stackBase__+28;
        var $p=__stackBase__+32;
        var $init=__stackBase__+36;
        var $end=__stackBase__+40;
        var $p2=__stackBase__+44;
        var $init3=__stackBase__+48;
        var $end4=__stackBase__+52;
        var $sizefirst=__stackBase__+56;
        HEAP[$2]=$L;
        HEAP[$3]=$p1;
        HEAP[$4]=$l1;
        HEAP[$5]=$l2;
        HEAP[$6]=$size;
        HEAP[$7]=$st2;
        var $8=HEAP[$3];
        var $9=HEAP[$4];
        var $10=_firstpart($8, $9);
        HEAP[$sp]=$10;
        var $11=HEAP[$sp];
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $13
        var $14=HEAP[$2];
        var $15=HEAP[$3];
        var $16=HEAP[$4];
        var $17=HEAP[$5];
        var $18=HEAP[$6];
        var $19=HEAP[$7];
        var $20=_basicUnion($14, $15, $16, $17, $18, $19);
        HEAP[$1]=$20;
        __label__ = 6; break;
      case 2: // $21
        var $22=HEAP[$3];
        var $23=HEAP[$sp];
        var $24=(($22+4*$23)&4294967295);
        var $25=(($24+-4)&4294967295);
        var $26=$25;
        var $27=(($26)&4294967295);
        var $28=HEAP[$27];
        var $29=unSign(($28), 8, 0);
        var $30=((($29))|0)==11;
        if ($30) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $31
        var $32=HEAP[$3];
        var $33=HEAP[$sp];
        var $34=HEAP[$7];
        var $35=_interfere($32, $33, $34);
        var $36=((($35))|0)!=0;
        if ($36) { __label__ = 5; break; } else { __label__ = 4; break; }
      case 4: // $37
        var $38=HEAP[$6];
        var $39=HEAP[$38];
        HEAP[$init]=$39;
        var $40=HEAP[$init];
        var $41=HEAP[$sp];
        var $42=((($40) + ($41))&4294967295);
        HEAP[$end]=$42;
        var $43=HEAP[$end];
        var $44=HEAP[$6];
        HEAP[$44]=$43;
        var $45=HEAP[$2];
        var $46=HEAP[$3];
        var $47=HEAP[$sp];
        var $48=(($46+4*$47)&4294967295);
        var $49=HEAP[$4];
        var $50=HEAP[$sp];
        var $51=((($49) - ($50))&4294967295);
        var $52=HEAP[$5];
        var $53=HEAP[$6];
        var $54=HEAP[$7];
        var $55=_separateparts($45, $48, $51, $52, $53, $54);
        HEAP[$p]=$55;
        var $56=HEAP[$p];
        var $57=HEAP[$init];
        var $58=(($56+4*$57)&4294967295);
        var $59=$58;
        var $60=HEAP[$3];
        var $61=$60;
        var $62=HEAP[$sp];
        var $63=((($62) * 4)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($59, $61, $63, 1, 0);
        var $64=HEAP[$6];
        var $65=HEAP[$64];
        var $66=HEAP[$end];
        var $67=((($66) - 1)&4294967295);
        var $68=((($65) - ($67))&4294967295);
        var $69=((($68)) & 65535);
        var $70=HEAP[$p];
        var $71=HEAP[$end];
        var $72=(($70+4*$71)&4294967295);
        var $73=(($72+-4)&4294967295);
        var $74=$73;
        var $75=(($74+2)&4294967295);
        HEAP[$75]=$69;
        var $76=HEAP[$p];
        HEAP[$1]=$76;
        __label__ = 6; break;
      case 5: // $77
        var $78=HEAP[$6];
        var $79=HEAP[$78];
        HEAP[$init3]=$79;
        var $80=HEAP[$init3];
        var $81=HEAP[$sp];
        var $82=((($80) + ($81))&4294967295);
        var $83=((($82) + 1)&4294967295);
        HEAP[$end4]=$83;
        var $84=HEAP[$3];
        var $85=_sizei($84);
        HEAP[$sizefirst]=$85;
        var $86=HEAP[$end4];
        var $87=HEAP[$6];
        HEAP[$87]=$86;
        var $88=HEAP[$2];
        var $89=HEAP[$3];
        var $90=HEAP[$sp];
        var $91=(($89+4*$90)&4294967295);
        var $92=HEAP[$4];
        var $93=HEAP[$sp];
        var $94=((($92) - ($93))&4294967295);
        var $95=HEAP[$5];
        var $96=HEAP[$6];
        var $97=HEAP[$7];
        var $98=_separateparts($88, $91, $94, $95, $96, $97);
        HEAP[$p2]=$98;
        var $99=HEAP[$p2];
        var $100=HEAP[$init3];
        var $101=(($99+4*$100)&4294967295);
        var $102=$101;
        var $103=HEAP[$3];
        var $104=$103;
        var $105=HEAP[$sizefirst];
        var $106=((($105) * 4)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($102, $104, $106, 1, 0);
        var $107=HEAP[$p2];
        var $108=HEAP[$init3];
        var $109=(($107+4*$108)&4294967295);
        var $110=$109;
        var $111=(($110+2)&4294967295);
        var $112=HEAP[$111];
        var $113=((($112) + 1)&65535);
        HEAP[$111]=$113;
        var $114=HEAP[$sizefirst];
        var $115=HEAP[$init3];
        var $116=((($115) + ($114))&4294967295);
        HEAP[$init3]=$116;
        var $117=HEAP[$p2];
        var $118=HEAP[$init3];
        var $119=(($117+4*$118)&4294967295);
        var $120=HEAP[$sp];
        var $121=HEAP[$sizefirst];
        var $122=((($120) - ($121))&4294967295);
        var $123=((($122) + 1)&4294967295);
        _setinstaux($119, 7, $123, 1);
        var $124=HEAP[$init3];
        var $125=((($124) + 1)&4294967295);
        HEAP[$init3]=$125;
        var $126=HEAP[$p2];
        var $127=HEAP[$init3];
        var $128=(($126+4*$127)&4294967295);
        var $129=$128;
        var $130=HEAP[$3];
        var $131=HEAP[$sizefirst];
        var $132=(($130+4*$131)&4294967295);
        var $133=$132;
        var $134=HEAP[$sp];
        var $135=HEAP[$sizefirst];
        var $136=((($134) - ($135))&4294967295);
        var $137=((($136) - 1)&4294967295);
        var $138=((($137) * 4)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($129, $133, $138, 1, 0);
        var $139=HEAP[$sp];
        var $140=HEAP[$sizefirst];
        var $141=((($139) - ($140))&4294967295);
        var $142=((($141) - 1)&4294967295);
        var $143=HEAP[$init3];
        var $144=((($143) + ($142))&4294967295);
        HEAP[$init3]=$144;
        var $145=HEAP[$p2];
        var $146=HEAP[$init3];
        var $147=(($145+4*$146)&4294967295);
        var $148=HEAP[$6];
        var $149=HEAP[$148];
        var $150=HEAP[$end4];
        var $151=((($150) - 1)&4294967295);
        var $152=((($149) - ($151))&4294967295);
        _setinstaux($147, 11, $152, 0);
        var $153=HEAP[$p2];
        HEAP[$1]=$153;
        __label__ = 6; break;
      case 6: // $154
        var $155=HEAP[$1];
        STACKTOP = __stackBase__;
        return $155;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _firstpart($p, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $e=__stackBase__+12;
        var $e1=__stackBase__+16;
        HEAP[$2]=$p;
        HEAP[$3]=$l;
        var $4=HEAP[$2];
        var $5=$4;
        var $6=(($5)&4294967295);
        var $7=HEAP[$6];
        var $8=unSign(($7), 8, 0);
        var $9=((_opproperties+$8*4)&4294967295);
        var $10=HEAP[$9];
        var $11=($10) & 2;
        var $12=((($11))|0)!=0;
        if ($12) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 1: // $13
        var $14=HEAP[$2];
        var $15=$14;
        var $16=(($15+2)&4294967295);
        var $17=HEAP[$16];
        var $18=reSign(($17), 16, 0);
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 2; break; } else { __label__ = 7; break; }
      case 2: // $20
        var $21=HEAP[$2];
        var $22=(($21)&4294967295);
        var $23=$22;
        var $24=(($23+2)&4294967295);
        var $25=HEAP[$24];
        var $26=reSign(($25), 16, 0);
        var $27=((($26) - 1)&4294967295);
        HEAP[$e]=$27;
        var $28=HEAP[$e];
        var $29=HEAP[$2];
        var $30=(($29+4*$28)&4294967295);
        var $31=$30;
        var $32=(($31)&4294967295);
        var $33=HEAP[$32];
        var $34=unSign(($33), 8, 0);
        var $35=((($34))|0)==8;
        if ($35) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $36
        var $37=HEAP[$e];
        var $38=HEAP[$2];
        var $39=(($38+4*$37)&4294967295);
        var $40=$39;
        var $41=(($40)&4294967295);
        var $42=HEAP[$41];
        var $43=unSign(($42), 8, 0);
        var $44=((($43))|0)==11;
        if ($44) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $45
        var $46=HEAP[$e];
        var $47=HEAP[$e];
        var $48=HEAP[$2];
        var $49=(($48+4*$47)&4294967295);
        var $50=$49;
        var $51=(($50+2)&4294967295);
        var $52=HEAP[$51];
        var $53=reSign(($52), 16, 0);
        var $54=((($46) + ($53))&4294967295);
        var $55=HEAP[$3];
        var $56=((($54))|0)==((($55))|0);
        if ($56) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $57
        var $58=HEAP[$e];
        var $59=((($58) + 1)&4294967295);
        HEAP[$1]=$59;
        __label__ = 14; break;
      case 6: // $60
        __label__ = 13; break;
      case 7: // $61
        var $62=HEAP[$2];
        var $63=(($62)&4294967295);
        var $64=$63;
        var $65=(($64)&4294967295);
        var $66=HEAP[$65];
        var $67=unSign(($66), 8, 0);
        var $68=((($67))|0)==7;
        if ($68) { __label__ = 8; break; } else { __label__ = 12; break; }
      case 8: // $69
        var $70=HEAP[$2];
        var $71=(($70)&4294967295);
        var $72=$71;
        var $73=(($72+2)&4294967295);
        var $74=HEAP[$73];
        var $75=reSign(($74), 16, 0);
        var $76=((($75) - 1)&4294967295);
        HEAP[$e1]=$76;
        var $77=HEAP[$e1];
        var $78=HEAP[$2];
        var $79=(($78+4*$77)&4294967295);
        var $80=$79;
        var $81=(($80)&4294967295);
        var $82=HEAP[$81];
        var $83=unSign(($82), 8, 0);
        var $84=((($83))|0)==11;
        if ($84) { __label__ = 9; break; } else { __label__ = 11; break; }
      case 9: // $85
        var $86=HEAP[$e1];
        var $87=HEAP[$e1];
        var $88=HEAP[$2];
        var $89=(($88+4*$87)&4294967295);
        var $90=$89;
        var $91=(($90+2)&4294967295);
        var $92=HEAP[$91];
        var $93=reSign(($92), 16, 0);
        var $94=((($86) + ($93))&4294967295);
        var $95=HEAP[$3];
        var $96=((($94))|0)==((($95))|0);
        if ($96) { __label__ = 10; break; } else { __label__ = 11; break; }
      case 10: // $97
        var $98=HEAP[$e1];
        var $99=((($98) + 1)&4294967295);
        HEAP[$1]=$99;
        __label__ = 14; break;
      case 11: // $100
        __label__ = 12; break;
      case 12: // $101
        __label__ = 13; break;
      case 13: // $102
        HEAP[$1]=0;
        __label__ = 14; break;
      case 14: // $103
        var $104=HEAP[$1];
        STACKTOP = __stackBase__;
        return $104;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _basicUnion($L, $p1, $l1, $l2, $size, $st2) {
    var __stackBase__  = STACKTOP; STACKTOP += 80; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 80);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        var $5=__stackBase__+16;
        var $6=__stackBase__+20;
        var $op=__stackBase__+24;
        var $st1=__stackBase__+28;
        var $p=__stackBase__+64;
        var $i=__stackBase__+68;
        var $p2=__stackBase__+72;
        var $p3=__stackBase__+76;
        HEAP[$1]=$L;
        HEAP[$2]=$p1;
        HEAP[$3]=$l1;
        HEAP[$4]=$l2;
        HEAP[$5]=$size;
        HEAP[$6]=$st2;
        var $7=HEAP[$2];
        var $8=_tocharset($7, $st1);
        var $9=(($st1)&4294967295);
        var $10=HEAP[$9];
        var $11=((($10))|0)==1;
        if ($11) { __label__ = 1; break; } else { __label__ = 7; break; }
      case 1: // $12
        var $13=HEAP[$6];
        var $14=(($13)&4294967295);
        var $15=HEAP[$14];
        var $16=((($15))|0)==1;
        if ($16) { __label__ = 2; break; } else { __label__ = 7; break; }
      case 2: // $17
        var $18=HEAP[$1];
        var $19=HEAP[$5];
        var $20=_auxnew($18, $op, $19, 9);
        HEAP[$p]=$20;
        var $21=HEAP[$p];
        _setinstaux($21, 2, 0, 0);
        HEAP[$i]=0;
        __label__ = 3; break;
      case 3: // $22
        var $23=HEAP[$i];
        var $24=((($23))|0) < 32;
        if ($24) { __label__ = 4; break; } else { __label__ = 6; break; }
      case 4: // $25
        var $26=HEAP[$i];
        var $27=(($st1+4)&4294967295);
        var $28=(($27+$26)&4294967295);
        var $29=HEAP[$28];
        var $30=unSign(($29), 8, 0);
        var $31=HEAP[$i];
        var $32=HEAP[$6];
        var $33=(($32+4)&4294967295);
        var $34=(($33+$31)&4294967295);
        var $35=HEAP[$34];
        var $36=unSign(($35), 8, 0);
        var $37=($30) | ($36);
        var $38=((($37)) & 255);
        var $39=HEAP[$i];
        var $40=HEAP[$p];
        var $41=(($40+4)&4294967295);
        var $42=$41;
        var $43=(($42+$39)&4294967295);
        HEAP[$43]=$38;
        __label__ = 5; break;
      case 5: // $44
        var $45=HEAP[$i];
        var $46=((($45) + 1)&4294967295);
        HEAP[$i]=$46;
        __label__ = 3; break;
      case 6: // $47
        __label__ = 12; break;
      case 7: // $48
        var $49=HEAP[$6];
        var $50=_exclusive($st1, $49);
        var $51=((($50))|0)!=0;
        if ($51) { __label__ = 9; break; } else { __label__ = 8; break; }
      case 8: // $52
        var $53=HEAP[$2];
        var $54=_isheadfail($53);
        var $55=((($54))|0)!=0;
        if ($55) { __label__ = 9; break; } else { __label__ = 10; break; }
      case 9: // $56
        var $57=HEAP[$1];
        var $58=HEAP[$5];
        var $59=HEAP[$3];
        var $60=((($59) + 1)&4294967295);
        var $61=HEAP[$4];
        var $62=((($60) + ($61))&4294967295);
        var $63=_auxnew($57, $op, $58, $62);
        HEAP[$p2]=$63;
        var $64=HEAP[$p2];
        var $65=$64;
        var $66=HEAP[$2];
        var $67=$66;
        var $68=HEAP[$3];
        var $69=((($68) * 4)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($65, $67, $69, 1, 0);
        var $70=HEAP[$p2];
        var $71=HEAP[$3];
        var $72=((($71) + 1)&4294967295);
        _check2test($70, $72);
        var $73=HEAP[$3];
        var $74=HEAP[$p2];
        var $75=(($74+4*$73)&4294967295);
        HEAP[$p2]=$75;
        var $76=HEAP[$p2];
        var $77=(($76+4)&4294967295);
        HEAP[$p2]=$77;
        var $78=HEAP[$4];
        var $79=((($78) + 1)&4294967295);
        _setinstaux($76, 8, $79, 0);
        var $80=HEAP[$1];
        var $81=HEAP[$p2];
        var $82=_addpatt($80, $81, 2);
        __label__ = 11; break;
      case 10: // $83
        var $84=HEAP[$1];
        var $85=HEAP[$5];
        var $86=HEAP[$3];
        var $87=((1 + ($86))&4294967295);
        var $88=((($87) + 1)&4294967295);
        var $89=HEAP[$4];
        var $90=((($88) + ($89))&4294967295);
        var $91=_auxnew($84, $op, $85, $90);
        HEAP[$p3]=$91;
        var $92=HEAP[$p3];
        var $93=(($92+4)&4294967295);
        HEAP[$p3]=$93;
        var $94=HEAP[$3];
        var $95=((1 + ($94))&4294967295);
        var $96=((($95) + 1)&4294967295);
        _setinstaux($92, 7, $96, 0);
        var $97=HEAP[$p3];
        var $98=$97;
        var $99=HEAP[$2];
        var $100=$99;
        var $101=HEAP[$3];
        var $102=((($101) * 4)&4294967295);
        _llvm_memcpy_p0i8_p0i8_i32($98, $100, $102, 1, 0);
        var $103=HEAP[$3];
        var $104=HEAP[$p3];
        var $105=(($104+4*$103)&4294967295);
        HEAP[$p3]=$105;
        var $106=HEAP[$p3];
        var $107=(($106+4)&4294967295);
        HEAP[$p3]=$107;
        var $108=HEAP[$4];
        var $109=((1 + ($108))&4294967295);
        _setinstaux($106, 11, $109, 0);
        var $110=HEAP[$1];
        var $111=HEAP[$p3];
        var $112=_addpatt($110, $111, 2);
        var $113=HEAP[$p3];
        var $114=HEAP[$3];
        var $115=((1 + ($114))&4294967295);
        var $116=((($115) + 1)&4294967295);
        var $117=((0 - ($116))&4294967295);
        var $118=(($113+4*$117)&4294967295);
        _optimizechoice($118);
        __label__ = 11; break;
      case 11: // $119
        __label__ = 12; break;
      case 12: // $120
        var $121=HEAP[$op];
        STACKTOP = __stackBase__;
        return $121;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _interfere($p1, $l1, $st2) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $4=__stackBase__+12;
        HEAP[$2]=$p1;
        HEAP[$3]=$l1;
        HEAP[$4]=$st2;
        var $5=HEAP[$2];
        var $6=HEAP[$3];
        var $7=_nofail($5, $6);
        var $8=((($7))|0)!=0;
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; }
      case 1: // $9
        HEAP[$1]=0;
        __label__ = 14; break;
      case 2: // $10
        var $11=HEAP[$4];
        var $12=(($11)&4294967295);
        var $13=HEAP[$12];
        var $14=((($13))|0)==0;
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $15
        HEAP[$1]=1;
        __label__ = 14; break;
      case 4: // $16
        var $17=HEAP[$2];
        var $18=$17;
        var $19=(($18+2)&4294967295);
        var $20=HEAP[$19];
        var $21=reSign(($20), 16, 0);
        var $22=((($21))|0)!=0;
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $23
        __label__ = 7; break;
      case 6: // $24
        ___assert_fail(((__str159779)&4294967295), ((__str30726)&4294967295), 1498, ((___PRETTY_FUNCTION___interfere)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 7; break;
      case 7: // $26
        var $27=HEAP[$2];
        var $28=$27;
        var $29=(($28)&4294967295);
        var $30=HEAP[$29];
        var $31=unSign(($30), 8, 0);
        if ($31 == 1) {
          __label__ = 8; break;
        }
        else if ($31 == 2) {
          __label__ = 9; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 8: // $32
        var $33=HEAP[$2];
        var $34=$33;
        var $35=(($34+1)&4294967295);
        var $36=HEAP[$35];
        var $37=unSign(($36), 8, 0);
        var $38=((($37))|0) >> 3;
        var $39=HEAP[$4];
        var $40=(($39+4)&4294967295);
        var $41=(($40+$38)&4294967295);
        var $42=HEAP[$41];
        var $43=unSign(($42), 8, 0);
        var $44=HEAP[$2];
        var $45=$44;
        var $46=(($45+1)&4294967295);
        var $47=HEAP[$46];
        var $48=unSign(($47), 8, 0);
        var $49=($48) & 7;
        var $50=1 << ($49);
        var $51=($43) & ($50);
        HEAP[$1]=$51;
        __label__ = 14; break;
      case 9: // $52
        var $53=HEAP[$4];
        var $54=(($53+4)&4294967295);
        var $55=(($54)&4294967295);
        var $56=HEAP[$2];
        var $57=(($56+4)&4294967295);
        var $58=$57;
        var $59=(($58)&4294967295);
        var $60=_exclusiveset($55, $59);
        var $61=((($60))|0)!=0;
        var $62=($61) ^ 1;
        var $63=unSign(($62), 1, 0);
        HEAP[$1]=$63;
        __label__ = 14; break;
      case 10: // $64
        var $65=HEAP[$2];
        var $66=$65;
        var $67=(($66)&4294967295);
        var $68=HEAP[$67];
        var $69=unSign(($68), 8, 0);
        var $70=((($69))|0)==0;
        if ($70) { __label__ = 11; break; } else { __label__ = 12; break; }
      case 11: // $71
        __label__ = 13; break;
      case 12: // $72
        ___assert_fail(((__str160)&4294967295), ((__str30726)&4294967295), 1502, ((___PRETTY_FUNCTION___interfere)&4294967295));
        throw "Reached an unreachable!"
        __label__ = 13; break;
      case 13: // $74
        HEAP[$1]=1;
        __label__ = 14; break;
      case 14: // $75
        var $76=HEAP[$1];
        STACKTOP = __stackBase__;
        return $76;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _nofail($p, $l) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        HEAP[$2]=$p;
        HEAP[$3]=$l;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$i];
        var $6=HEAP[$3];
        var $7=((($5))|0) < ((($6))|0);
        if ($7) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $8
        var $9=HEAP[$2];
        var $10=HEAP[$i];
        var $11=(($9+4*$10)&4294967295);
        var $12=$11;
        var $13=(($12)&4294967295);
        var $14=HEAP[$13];
        var $15=unSign(($14), 8, 0);
        var $16=((_opproperties+$15*4)&4294967295);
        var $17=HEAP[$16];
        var $18=($17) & 8;
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 4; break; } else { __label__ = 3; break; }
      case 3: // $20
        HEAP[$1]=0;
        __label__ = 7; break;
      case 4: // $21
        __label__ = 5; break;
      case 5: // $22
        var $23=HEAP[$2];
        var $24=HEAP[$i];
        var $25=(($23+4*$24)&4294967295);
        var $26=_sizei($25);
        var $27=HEAP[$i];
        var $28=((($27) + ($26))&4294967295);
        HEAP[$i]=$28;
        __label__ = 1; break;
      case 6: // $29
        HEAP[$1]=1;
        __label__ = 7; break;
      case 7: // $30
        var $31=HEAP[$1];
        STACKTOP = __stackBase__;
        return $31;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _exclusiveset($c1, $c2) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        var $i=__stackBase__+12;
        HEAP[$2]=$c1;
        HEAP[$3]=$c2;
        HEAP[$i]=0;
        __label__ = 1; break;
      case 1: // $4
        var $5=HEAP[$i];
        var $6=((($5))|0) < 32;
        if ($6) { __label__ = 2; break; } else { __label__ = 6; break; }
      case 2: // $7
        var $8=HEAP[$i];
        var $9=HEAP[$2];
        var $10=(($9+$8)&4294967295);
        var $11=HEAP[$10];
        var $12=unSign(($11), 8, 0);
        var $13=HEAP[$i];
        var $14=HEAP[$3];
        var $15=(($14+$13)&4294967295);
        var $16=HEAP[$15];
        var $17=unSign(($16), 8, 0);
        var $18=($12) & ($17);
        var $19=((($18))|0)!=0;
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; }
      case 3: // $20
        HEAP[$1]=0;
        __label__ = 7; break;
      case 4: // $21
        __label__ = 5; break;
      case 5: // $22
        var $23=HEAP[$i];
        var $24=((($23) + 1)&4294967295);
        HEAP[$i]=$24;
        __label__ = 1; break;
      case 6: // $25
        HEAP[$1]=1;
        __label__ = 7; break;
      case 7: // $26
        var $27=HEAP[$1];
        STACKTOP = __stackBase__;
        return $27;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _auxnew($L, $op, $size, $extra) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
  
    var $1=__stackBase__;
    var $2=__stackBase__+4;
    var $3=__stackBase__+8;
    var $4=__stackBase__+12;
    HEAP[$1]=$L;
    HEAP[$2]=$op;
    HEAP[$3]=$size;
    HEAP[$4]=$extra;
    var $5=HEAP[$1];
    var $6=HEAP[$3];
    var $7=HEAP[$6];
    var $8=HEAP[$4];
    var $9=((($7) + ($8))&4294967295);
    var $10=_newpatt($5, $9);
    var $11=HEAP[$2];
    HEAP[$11]=$10;
    var $12=HEAP[$1];
    var $13=_jointable($12, 1);
    var $14=HEAP[$4];
    var $15=HEAP[$3];
    var $16=HEAP[$15];
    var $17=((($16) + ($14))&4294967295);
    HEAP[$15]=$17;
    var $18=HEAP[$2];
    var $19=HEAP[$18];
    var $20=HEAP[$3];
    var $21=HEAP[$20];
    var $22=(($19+4*$21)&4294967295);
    var $23=HEAP[$4];
    var $24=((0 - ($23))&4294967295);
    var $25=(($22+4*$24)&4294967295);
    STACKTOP = __stackBase__;
    return $25;
  }
  

  function _exclusive($c1, $c2) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = 0; 
    while(1) switch(__label__) {
      case 0: // _entry
        var $1=__stackBase__;
        var $2=__stackBase__+4;
        var $3=__stackBase__+8;
        HEAP[$2]=$c1;
        HEAP[$3]=$c2;
        var $4=HEAP[$2];
        var $5=(($4)&4294967295);
        var $6=HEAP[$5];
        var $7=((($6))|0)==0;
        if ($7) { __label__ = 2; break; } else { __label__ = 1; break; }
      case 1: // $8
        var $9=HEAP[$3];
        var $10=(($9)&4294967295);
        var $11=HEAP[$10];
        var $12=((($11))|0)==0;
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $13
        HEAP[$1]=0;
        __label__ = 4; break;
      case 3: // $14
        var $15=HEAP[$2];
        var $16=(($15+4)&4294967295);
        var $17=(($16)&4294967295);
        var $18=HEAP[$3];
        var $19=(($18+4)&4294967295);
        var $20=(($19)&4294967295);
        var $21=_exclusiveset($17, $20);
        HEAP[$1]=$21;
        __label__ = 4; break;
      case 4: // $22
        var $23=HEAP[$1];
        STACKTOP = __stackBase__;
        return $23;
      default: assert(0, "bad label: " + __label__);
    }
  }
  
var FUNCTION_TABLE = [0,0,_f_call,0,_f_Ccall,0,_getF,0,_getS,0,_l_alloc,0,_panic,0,_luaB_ipairs,0,_ipairsaux,0,_luaB_pairs,0,_luaB_next,0,_luaB_newproxy,0,_luaB_auxwrap,0,_generic_reader,0,_hookf,0,_resume,0,_f_parser,0,_luaU_undump,0,_luaY_parser,0,_io_fclose,0,_io_noclose,0,_io_pclose,0,_io_readline,0,_gctm,0,_f_luaopen,0,_callallgcTM,0,_writer,0,_gmatch_aux,0,_l_newpf,0,_isalnum,0,_isalpha,0,_iscntrl,0,_isdigit,0,_isgraph,0,_islower,0,_isprint,0,_ispunct,0,_isspace,0,_isupper,0,_isxdigit,0,_luaB_cocreate,0,_luaB_coresume,0,_luaB_corunning,0,_luaB_costatus,0,_luaB_cowrap,0,_luaB_yield,0,_luaB_assert,0,_luaB_collectgarbage,0,_luaB_dofile,0,_luaB_error,0,_luaB_gcinfo,0,_luaB_getfenv,0,_luaB_getmetatable,0,_luaB_loadfile,0,_luaB_load,0,_luaB_loadstring,0,_luaB_pcall,0,_luaB_print,0,_luaB_rawequal,0,_luaB_rawget,0,_luaB_rawset,0,_luaB_select,0,_luaB_setfenv,0,_luaB_setmetatable,0,_luaB_tonumber,0,_luaB_tostring,0,_luaB_type,0,_luaB_unpack,0,_luaB_xpcall,0,_db_debug,0,_db_getfenv,0,_db_gethook,0,_db_getinfo,0,_db_getlocal,0,_db_getregistry,0,_db_getmetatable,0,_db_getupvalue,0,_db_setfenv,0,_db_sethook,0,_db_setlocal,0,_db_setmetatable,0,_db_setupvalue,0,_db_errorfb,0,_luaopen_base,0,_luaopen_package,0,_luaopen_table,0,_luaopen_io,0,_luaopen_os,0,_luaopen_string,0,_luaopen_math,0,_luaopen_debug,0,_io_close,0,_io_flush,0,_io_input,0,_io_lines,0,_io_open,0,_io_output,0,_io_popen,0,_io_read,0,_io_tmpfile,0,_io_type,0,_io_write,0,_f_flush,0,_f_lines,0,_f_read,0,_f_seek,0,_f_setvbuf,0,_f_write,0,_io_gc,0,_io_tostring,0,_math_abs,0,_math_acos,0,_math_asin,0,_math_atan2,0,_math_atan,0,_math_ceil,0,_math_cosh,0,_math_cos,0,_math_deg,0,_math_exp,0,_math_floor,0,_math_fmod,0,_math_frexp,0,_math_ldexp,0,_math_log10,0,_math_log,0,_math_max,0,_math_min,0,_math_modf,0,_math_pow,0,_math_rad,0,_math_random,0,_math_randomseed,0,_math_sinh,0,_math_sin,0,_math_sqrt,0,_math_tanh,0,_math_tan,0,_ll_loadlib,0,_ll_seeall,0,_loader_preload,0,_loader_Lua,0,_loader_C,0,_loader_Croot,0,_ll_module,0,_ll_require,0,_os_clock,0,_os_date,0,_os_difftime,0,_os_execute,0,_os_exit,0,_os_getenv,0,_os_remove,0,_os_rename,0,_os_setlocale,0,_os_time,0,_os_tmpname,0,_str_byte,0,_str_char,0,_str_dump,0,_str_find,0,_str_format,0,_gfind_nodef,0,_gmatch,0,_str_gsub,0,_str_len,0,_str_lower,0,_str_match,0,_str_rep,0,_str_reverse,0,_str_sub,0,_str_upper,0,_tconcat,0,_foreach,0,_foreachi,0,_getn,0,_maxn,0,_tinsert,0,_tremove,0,_setn,0,_sort,0,_union_l,0,_star_l,0,_diff_l,0,_concat_l,0,_rcapture_l,0,_unm_l,0,_pattand_l,0,_matchl,0,_printpat_l,0,_locale_l,0,_setmax,0,_pattbehind,0,_capture_l,0,_fold_l,0,_capconst_l,0,_group_l,0,_position_l,0,_backref_l,0,_argcap_l,0,_matchtime_l,0,_capsubst_l,0,_tcapture_l,0,_pattern_l,0,_range_l,0,_set_l,0,_nter_l,0,_type_l,0,_version_l,0];

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return _main(argc, argv, 0);
}

function run(args) {
  args = args || Module['arguments'];


_lua_ident=allocate([36,76,117,97,58,32,76,117,97,32,53,46,49,46,52,32,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,52,45,50,48,48,56,32,76,117,97,46,111,114,103,44,32,80,85,67,45,82,105,111,32,36,10,36,65,117,116,104,111,114,115,58,32,82,46,32,73,101,114,117,115,97,108,105,109,115,99,104,121,44,32,76,46,32,72,46,32,100,101,32,70,105,103,117,101,105,114,101,100,111,32,38,32,87,46,32,67,101,108,101,115,32,36,10,36,85,82,76,58,32,119,119,119,46,108,117,97,46,111,114,103,32,36,10,0] /* $Lua: Lua 5.1.4 Copy */, "i8", ALLOC_STATIC);
__str=allocate([110,111,32,99,97,108,108,105,110,103,32,101,110,118,105,114,111,110,109,101,110,116,0] /* no calling environme */, "i8", ALLOC_STATIC);
__str1=allocate([110,111,32,118,97,108,117,101,0] /* no value\00 */, "i8", ALLOC_STATIC);
__str2=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
__str3=allocate(1, "i8", ALLOC_STATIC);
__str4=allocate([98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0] /* bad argument #%d (%s */, "i8", ALLOC_STATIC);
__str15=allocate([110,0] /* n\00 */, "i8", ALLOC_STATIC);
__str26=allocate([109,101,116,104,111,100,0] /* method\00 */, "i8", ALLOC_STATIC);
__str37=allocate([99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,32,40,37,115,41,0] /* calling '%s' on bad  */, "i8", ALLOC_STATIC);
__str48=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
__str5=allocate([98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0] /* bad argument #%d to  */, "i8", ALLOC_STATIC);
__str6=allocate([37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0] /* %s expected, got %s\ */, "i8", ALLOC_STATIC);
__str7=allocate([83,108,0] /* Sl\00 */, "i8", ALLOC_STATIC);
__str8=allocate([37,115,58,37,100,58,32,0] /* %s:%d: \00 */, "i8", ALLOC_STATIC);
__str9=allocate(1, "i8", ALLOC_STATIC);
__str10=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0] /* invalid option '%s'\ */, "i8", ALLOC_STATIC);
__str11=allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0] /* stack overflow (%s)\ */, "i8", ALLOC_STATIC);
__str12=allocate([118,97,108,117,101,32,101,120,112,101,99,116,101,100,0] /* value expected\00 */, "i8", ALLOC_STATIC);
__str13=allocate([95,76,79,65,68,69,68,0] /* _LOADED\00 */, "i8", ALLOC_STATIC);
__str14=allocate([110,97,109,101,32,99,111,110,102,108,105,99,116,32,102,111,114,32,109,111,100,117,108,101,32,39,37,115,39,0] /* name conflict for mo */, "i8", ALLOC_STATIC);
__str159=allocate([61,115,116,100,105,110,0] /* =stdin\00 */, "i8", ALLOC_STATIC);
__str16=allocate([64,37,115,0] /* @%s\00 */, "i8", ALLOC_STATIC);
__str17=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
__str18=allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_STATIC);
__str19=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
__str20=allocate([114,98,0] /* rb\00 */, "i8", ALLOC_STATIC);
__str21=allocate([114,101,111,112,101,110,0] /* reopen\00 */, "i8", ALLOC_STATIC);
__str22=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_STATIC);
__str23=allocate([80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0] /* PANIC: unprotected e */, "i8", ALLOC_STATIC);
__str24=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
__str25=allocate([99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0] /* cannot %s %s: %s\00 */, "i8", ALLOC_STATIC);
__str27=allocate([99,111,114,111,117,116,105,110,101,0] /* coroutine\00 */, "i8", ALLOC_STATIC);
_co_funcs=allocate([0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str128=allocate([99,114,101,97,116,101,0] /* create\00 */, "i8", ALLOC_STATIC);
__str229=allocate([114,101,115,117,109,101,0] /* resume\00 */, "i8", ALLOC_STATIC);
__str330=allocate([114,117,110,110,105,110,103,0] /* running\00 */, "i8", ALLOC_STATIC);
__str431=allocate([115,116,97,116,117,115,0] /* status\00 */, "i8", ALLOC_STATIC);
__str532=allocate([119,114,97,112,0] /* wrap\00 */, "i8", ALLOC_STATIC);
__str633=allocate([121,105,101,108,100,0] /* yield\00 */, "i8", ALLOC_STATIC);
__str734=allocate([116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0] /* too many arguments t */, "i8", ALLOC_STATIC);
__str835=allocate([99,97,110,110,111,116,32,114,101,115,117,109,101,32,37,115,32,99,111,114,111,117,116,105,110,101,0] /* cannot resume %s cor */, "i8", ALLOC_STATIC);
_statnames=allocate(16, "i8*", ALLOC_STATIC);
__str936=allocate([116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0] /* too many results to  */, "i8", ALLOC_STATIC);
__str1037=allocate([115,117,115,112,101,110,100,101,100,0] /* suspended\00 */, "i8", ALLOC_STATIC);
__str1138=allocate([110,111,114,109,97,108,0] /* normal\00 */, "i8", ALLOC_STATIC);
__str1239=allocate([100,101,97,100,0] /* dead\00 */, "i8", ALLOC_STATIC);
__str1340=allocate([99,111,114,111,117,116,105,110,101,32,101,120,112,101,99,116,101,100,0] /* coroutine expected\0 */, "i8", ALLOC_STATIC);
__str1441=allocate([76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0] /* Lua function expecte */, "i8", ALLOC_STATIC);
__str1542=allocate([95,71,0] /* _G\00 */, "i8", ALLOC_STATIC);
_base_funcs=allocate([0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str1643=allocate([76,117,97,32,53,46,49,0] /* Lua 5.1\00 */, "i8", ALLOC_STATIC);
__str1744=allocate([95,86,69,82,83,73,79,78,0] /* _VERSION\00 */, "i8", ALLOC_STATIC);
__str1845=allocate([105,112,97,105,114,115,0] /* ipairs\00 */, "i8", ALLOC_STATIC);
__str1946=allocate([112,97,105,114,115,0] /* pairs\00 */, "i8", ALLOC_STATIC);
__str2047=allocate([107,118,0] /* kv\00 */, "i8", ALLOC_STATIC);
__str2148=allocate([95,95,109,111,100,101,0] /* __mode\00 */, "i8", ALLOC_STATIC);
__str2249=allocate([110,101,119,112,114,111,120,121,0] /* newproxy\00 */, "i8", ALLOC_STATIC);
__str2350=allocate([98,111,111,108,101,97,110,32,111,114,32,112,114,111,120,121,32,101,120,112,101,99,116,101,100,0] /* boolean or proxy exp */, "i8", ALLOC_STATIC);
__str2451=allocate([97,115,115,101,114,116,0] /* assert\00 */, "i8", ALLOC_STATIC);
__str2552=allocate([99,111,108,108,101,99,116,103,97,114,98,97,103,101,0] /* collectgarbage\00 */, "i8", ALLOC_STATIC);
__str2653=allocate([100,111,102,105,108,101,0] /* dofile\00 */, "i8", ALLOC_STATIC);
__str2754=allocate([101,114,114,111,114,0] /* error\00 */, "i8", ALLOC_STATIC);
__str28=allocate([103,99,105,110,102,111,0] /* gcinfo\00 */, "i8", ALLOC_STATIC);
__str29=allocate([103,101,116,102,101,110,118,0] /* getfenv\00 */, "i8", ALLOC_STATIC);
__str30=allocate([103,101,116,109,101,116,97,116,97,98,108,101,0] /* getmetatable\00 */, "i8", ALLOC_STATIC);
__str31=allocate([108,111,97,100,102,105,108,101,0] /* loadfile\00 */, "i8", ALLOC_STATIC);
__str32=allocate([108,111,97,100,0] /* load\00 */, "i8", ALLOC_STATIC);
__str33=allocate([108,111,97,100,115,116,114,105,110,103,0] /* loadstring\00 */, "i8", ALLOC_STATIC);
__str34=allocate([110,101,120,116,0] /* next\00 */, "i8", ALLOC_STATIC);
__str35=allocate([112,99,97,108,108,0] /* pcall\00 */, "i8", ALLOC_STATIC);
__str36=allocate([112,114,105,110,116,0] /* print\00 */, "i8", ALLOC_STATIC);
__str3755=allocate([114,97,119,101,113,117,97,108,0] /* rawequal\00 */, "i8", ALLOC_STATIC);
__str38=allocate([114,97,119,103,101,116,0] /* rawget\00 */, "i8", ALLOC_STATIC);
__str39=allocate([114,97,119,115,101,116,0] /* rawset\00 */, "i8", ALLOC_STATIC);
__str40=allocate([115,101,108,101,99,116,0] /* select\00 */, "i8", ALLOC_STATIC);
__str41=allocate([115,101,116,102,101,110,118,0] /* setfenv\00 */, "i8", ALLOC_STATIC);
__str42=allocate([115,101,116,109,101,116,97,116,97,98,108,101,0] /* setmetatable\00 */, "i8", ALLOC_STATIC);
__str43=allocate([116,111,110,117,109,98,101,114,0] /* tonumber\00 */, "i8", ALLOC_STATIC);
__str44=allocate([116,111,115,116,114,105,110,103,0] /* tostring\00 */, "i8", ALLOC_STATIC);
__str45=allocate([116,121,112,101,0] /* type\00 */, "i8", ALLOC_STATIC);
__str46=allocate([117,110,112,97,99,107,0] /* unpack\00 */, "i8", ALLOC_STATIC);
__str47=allocate([120,112,99,97,108,108,0] /* xpcall\00 */, "i8", ALLOC_STATIC);
__str4856=allocate([116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0] /* too many results to  */, "i8", ALLOC_STATIC);
__str49=allocate([95,95,116,111,115,116,114,105,110,103,0] /* __tostring\00 */, "i8", ALLOC_STATIC);
__str50=allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_STATIC);
__str51=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
__str52=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
__str53=allocate([37,115,58,32,37,112,0] /* %s: %p\00 */, "i8", ALLOC_STATIC);
__str54=allocate([98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* base out of range\00 */, "i8", ALLOC_STATIC);
__str55=allocate([110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* nil or table expecte */, "i8", ALLOC_STATIC);
__str56=allocate([95,95,109,101,116,97,116,97,98,108,101,0] /* __metatable\00 */, "i8", ALLOC_STATIC);
__str57=allocate([99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0] /* cannot change a prot */, "i8", ALLOC_STATIC);
__str58=allocate([39,115,101,116,102,101,110,118,39,32,99,97,110,110,111,116,32,99,104,97,110,103,101,32,101,110,118,105,114,111,110,109,101,110,116,32,111,102,32,103,105,118,101,110,32,111,98,106,101,99,116,0] /* 'setfenv' cannot cha */, "i8", ALLOC_STATIC);
__str59=allocate([108,101,118,101,108,32,109,117,115,116,32,98,101,32,110,111,110,45,110,101,103,97,116,105,118,101,0] /* level must be non-ne */, "i8", ALLOC_STATIC);
__str60=allocate([105,110,118,97,108,105,100,32,108,101,118,101,108,0] /* invalid level\00 */, "i8", ALLOC_STATIC);
__str61=allocate([102,0] /* f\00 */, "i8", ALLOC_STATIC);
__str62=allocate([110,111,32,102,117,110,99,116,105,111,110,32,101,110,118,105,114,111,110,109,101,110,116,32,102,111,114,32,116,97,105,108,32,99,97,108,108,32,97,116,32,108,101,118,101,108,32,37,100,0] /* no function environm */, "i8", ALLOC_STATIC);
__str63=allocate([105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* index out of range\0 */, "i8", ALLOC_STATIC);
__str64=allocate([39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0] /* 'tostring' must retu */, "i8", ALLOC_STATIC);
__str65=allocate([9,0] /* \09\00 */, "i8", ALLOC_STATIC);
__str66=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
__str67=allocate([61,40,108,111,97,100,41,0] /* =(load)\00 */, "i8", ALLOC_STATIC);
__str68=allocate([116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0] /* too many nested func */, "i8", ALLOC_STATIC);
__str69=allocate([114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0] /* reader function must */, "i8", ALLOC_STATIC);
_luaB_collectgarbage_opts=allocate(32, "i8*", ALLOC_STATIC);
__str70=allocate([115,116,111,112,0] /* stop\00 */, "i8", ALLOC_STATIC);
__str71=allocate([114,101,115,116,97,114,116,0] /* restart\00 */, "i8", ALLOC_STATIC);
__str72=allocate([99,111,108,108,101,99,116,0] /* collect\00 */, "i8", ALLOC_STATIC);
__str73=allocate([99,111,117,110,116,0] /* count\00 */, "i8", ALLOC_STATIC);
__str74=allocate([115,116,101,112,0] /* step\00 */, "i8", ALLOC_STATIC);
__str75=allocate([115,101,116,112,97,117,115,101,0] /* setpause\00 */, "i8", ALLOC_STATIC);
__str76=allocate([115,101,116,115,116,101,112,109,117,108,0] /* setstepmul\00 */, "i8", ALLOC_STATIC);
_luaB_collectgarbage_optsnum=allocate([0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
__str77=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
__str78=allocate([97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0] /* assertion failed!\00 */, "i8", ALLOC_STATIC);
__str79=allocate([102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0] /* function or expressi */, "i8", ALLOC_STATIC);
__str180=allocate([99,111,100,101,32,115,105,122,101,32,111,118,101,114,102,108,111,119,0] /* code size overflow\0 */, "i8", ALLOC_STATIC);
__str281=allocate([99,111,110,115,116,97,110,116,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* constant table overf */, "i8", ALLOC_STATIC);
__str382=allocate([99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0] /* control structure to */, "i8", ALLOC_STATIC);
__str83=allocate([100,101,98,117,103,0] /* debug\00 */, "i8", ALLOC_STATIC);
_dblib=allocate([0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str184=allocate([103,101,116,102,101,110,118,0] /* getfenv\00 */, "i8", ALLOC_STATIC);
__str285=allocate([103,101,116,104,111,111,107,0] /* gethook\00 */, "i8", ALLOC_STATIC);
__str386=allocate([103,101,116,105,110,102,111,0] /* getinfo\00 */, "i8", ALLOC_STATIC);
__str487=allocate([103,101,116,108,111,99,97,108,0] /* getlocal\00 */, "i8", ALLOC_STATIC);
__str588=allocate([103,101,116,114,101,103,105,115,116,114,121,0] /* getregistry\00 */, "i8", ALLOC_STATIC);
__str689=allocate([103,101,116,109,101,116,97,116,97,98,108,101,0] /* getmetatable\00 */, "i8", ALLOC_STATIC);
__str790=allocate([103,101,116,117,112,118,97,108,117,101,0] /* getupvalue\00 */, "i8", ALLOC_STATIC);
__str891=allocate([115,101,116,102,101,110,118,0] /* setfenv\00 */, "i8", ALLOC_STATIC);
__str992=allocate([115,101,116,104,111,111,107,0] /* sethook\00 */, "i8", ALLOC_STATIC);
__str1093=allocate([115,101,116,108,111,99,97,108,0] /* setlocal\00 */, "i8", ALLOC_STATIC);
__str1194=allocate([115,101,116,109,101,116,97,116,97,98,108,101,0] /* setmetatable\00 */, "i8", ALLOC_STATIC);
__str1295=allocate([115,101,116,117,112,118,97,108,117,101,0] /* setupvalue\00 */, "i8", ALLOC_STATIC);
__str1396=allocate([116,114,97,99,101,98,97,99,107,0] /* traceback\00 */, "i8", ALLOC_STATIC);
__str1497=allocate(1, "i8", ALLOC_STATIC);
__str1598=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
__str1699=allocate([115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,0] /* stack traceback:\00 */, "i8", ALLOC_STATIC);
__str17100=allocate([10,9,46,46,46,0] /* \0A\09...\00 */, "i8", ALLOC_STATIC);
__str18101=allocate([10,9,0] /* \0A\09\00 */, "i8", ALLOC_STATIC);
__str19102=allocate([83,110,108,0] /* Snl\00 */, "i8", ALLOC_STATIC);
__str20103=allocate([37,115,58,0] /* %s:\00 */, "i8", ALLOC_STATIC);
__str21104=allocate([37,100,58,0] /* %d:\00 */, "i8", ALLOC_STATIC);
__str22105=allocate([32,105,110,32,102,117,110,99,116,105,111,110,32,39,37,115,39,0] /*  in function '%s'\00 */, "i8", ALLOC_STATIC);
__str23106=allocate([32,105,110,32,109,97,105,110,32,99,104,117,110,107,0] /*  in main chunk\00 */, "i8", ALLOC_STATIC);
__str24107=allocate([32,63,0] /*  ?\00 */, "i8", ALLOC_STATIC);
__str25108=allocate([32,105,110,32,102,117,110,99,116,105,111,110,32,60,37,115,58,37,100,62,0] /*  in function <%s:%d> */, "i8", ALLOC_STATIC);
__str26109=allocate([110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* nil or table expecte */, "i8", ALLOC_STATIC);
__str27110=allocate([108,101,118,101,108,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* level out of range\0 */, "i8", ALLOC_STATIC);
_KEY_HOOK=allocate([104], ["i8",0,0,0,0], ALLOC_STATIC);
_hookf_hooknames=allocate(20, "i8*", ALLOC_STATIC);
__str28111=allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_STATIC);
__str29112=allocate([114,101,116,117,114,110,0] /* return\00 */, "i8", ALLOC_STATIC);
__str30113=allocate([108,105,110,101,0] /* line\00 */, "i8", ALLOC_STATIC);
__str31114=allocate([99,111,117,110,116,0] /* count\00 */, "i8", ALLOC_STATIC);
__str32115=allocate([116,97,105,108,32,114,101,116,117,114,110,0] /* tail return\00 */, "i8", ALLOC_STATIC);
__str33116=allocate([39,115,101,116,102,101,110,118,39,32,99,97,110,110,111,116,32,99,104,97,110,103,101,32,101,110,118,105,114,111,110,109,101,110,116,32,111,102,32,103,105,118,101,110,32,111,98,106,101,99,116,0] /* 'setfenv' cannot cha */, "i8", ALLOC_STATIC);
__str34117=allocate([102,108,110,83,117,0] /* flnSu\00 */, "i8", ALLOC_STATIC);
__str35118=allocate([62,37,115,0] /* >%s\00 */, "i8", ALLOC_STATIC);
__str36119=allocate([102,117,110,99,116,105,111,110,32,111,114,32,108,101,118,101,108,32,101,120,112,101,99,116,101,100,0] /* function or level ex */, "i8", ALLOC_STATIC);
__str37120=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,0] /* invalid option\00 */, "i8", ALLOC_STATIC);
__str38121=allocate([115,111,117,114,99,101,0] /* source\00 */, "i8", ALLOC_STATIC);
__str39122=allocate([115,104,111,114,116,95,115,114,99,0] /* short_src\00 */, "i8", ALLOC_STATIC);
__str40123=allocate([108,105,110,101,100,101,102,105,110,101,100,0] /* linedefined\00 */, "i8", ALLOC_STATIC);
__str41124=allocate([108,97,115,116,108,105,110,101,100,101,102,105,110,101,100,0] /* lastlinedefined\00 */, "i8", ALLOC_STATIC);
__str42125=allocate([119,104,97,116,0] /* what\00 */, "i8", ALLOC_STATIC);
__str43126=allocate([99,117,114,114,101,110,116,108,105,110,101,0] /* currentline\00 */, "i8", ALLOC_STATIC);
__str44127=allocate([110,117,112,115,0] /* nups\00 */, "i8", ALLOC_STATIC);
__str45128=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_STATIC);
__str46129=allocate([110,97,109,101,119,104,97,116,0] /* namewhat\00 */, "i8", ALLOC_STATIC);
__str47130=allocate([97,99,116,105,118,101,108,105,110,101,115,0] /* activelines\00 */, "i8", ALLOC_STATIC);
__str48131=allocate([102,117,110,99,0] /* func\00 */, "i8", ALLOC_STATIC);
__str49132=allocate([101,120,116,101,114,110,97,108,32,104,111,111,107,0] /* external hook\00 */, "i8", ALLOC_STATIC);
__str50133=allocate([108,117,97,95,100,101,98,117,103,62,32,0] /* lua_debug> \00 */, "i8", ALLOC_STATIC);
__str51134=allocate([99,111,110,116,10,0] /* cont\0A\00 */, "i8", ALLOC_STATIC);
__str52135=allocate([61,40,100,101,98,117,103,32,99,111,109,109,97,110,100,41,0] /* =(debug command)\00 */, "i8", ALLOC_STATIC);
__str136=allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0] /* attempt to %s %s '%s */, "i8", ALLOC_STATIC);
__str1137=allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0] /* attempt to %s a %s v */, "i8", ALLOC_STATIC);
__str2138=allocate([99,111,110,99,97,116,101,110,97,116,101,0] /* concatenate\00 */, "i8", ALLOC_STATIC);
__str3139=allocate([112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0] /* perform arithmetic o */, "i8", ALLOC_STATIC);
__str4140=allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0] /* attempt to compare t */, "i8", ALLOC_STATIC);
__str5141=allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0] /* attempt to compare % */, "i8", ALLOC_STATIC);
__str6142=allocate([37,115,58,37,100,58,32,37,115,0] /* %s:%d: %s\00 */, "i8", ALLOC_STATIC);
__str7143=allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_STATIC);
__str8144=allocate([103,108,111,98,97,108,0] /* global\00 */, "i8", ALLOC_STATIC);
__str9145=allocate([102,105,101,108,100,0] /* field\00 */, "i8", ALLOC_STATIC);
__str10146=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
__str11147=allocate([117,112,118,97,108,117,101,0] /* upvalue\00 */, "i8", ALLOC_STATIC);
__str12148=allocate([109,101,116,104,111,100,0] /* method\00 */, "i8", ALLOC_STATIC);
__str13149=allocate(1, "i8", ALLOC_STATIC);
__str14150=allocate([61,91,67,93,0] /* =[C]\00 */, "i8", ALLOC_STATIC);
__str15151=allocate([67,0] /* C\00 */, "i8", ALLOC_STATIC);
__str16152=allocate([109,97,105,110,0] /* main\00 */, "i8", ALLOC_STATIC);
__str17153=allocate([76,117,97,0] /* Lua\00 */, "i8", ALLOC_STATIC);
__str18154=allocate([116,97,105,108,0] /* tail\00 */, "i8", ALLOC_STATIC);
__str19155=allocate([61,40,116,97,105,108,32,99,97,108,108,41,0] /* =(tail call)\00 */, "i8", ALLOC_STATIC);
__str20156=allocate([40,42,116,101,109,112,111,114,97,114,121,41,0] /* (_temporary)\00 */, "i8", ALLOC_STATIC);
__str167=allocate([110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0] /* not enough memory\00 */, "i8", ALLOC_STATIC);
__str1168=allocate([101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0] /* error in error handl */, "i8", ALLOC_STATIC);
__str2169=allocate([67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* C stack overflow\00 */, "i8", ALLOC_STATIC);
__str3170=allocate([99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0] /* cannot resume non-su */, "i8", ALLOC_STATIC);
__str4171=allocate([97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,109,101,116,97,109,101,116,104,111,100,47,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0] /* attempt to yield acr */, "i8", ALLOC_STATIC);
__str5172=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
__str6173=allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* stack overflow\00 */, "i8", ALLOC_STATIC);
__str7174=allocate([110,0] /* n\00 */, "i8", ALLOC_STATIC);
__str8175=allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_STATIC);
_lualibs=allocate([0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str195=allocate(1, "i8", ALLOC_STATIC);
__str1196=allocate([112,97,99,107,97,103,101,0] /* package\00 */, "i8", ALLOC_STATIC);
__str2197=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
__str3198=allocate([105,111,0] /* io\00 */, "i8", ALLOC_STATIC);
__str4199=allocate([111,115,0] /* os\00 */, "i8", ALLOC_STATIC);
__str5200=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
__str6201=allocate([109,97,116,104,0] /* math\00 */, "i8", ALLOC_STATIC);
__str7202=allocate([100,101,98,117,103,0] /* debug\00 */, "i8", ALLOC_STATIC);
__str203=allocate([105,111,0] /* io\00 */, "i8", ALLOC_STATIC);
_iolib=allocate([0, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str1204=allocate([115,116,100,105,110,0] /* stdin\00 */, "i8", ALLOC_STATIC);
__str2205=allocate([115,116,100,111,117,116,0] /* stdout\00 */, "i8", ALLOC_STATIC);
__str3206=allocate([115,116,100,101,114,114,0] /* stderr\00 */, "i8", ALLOC_STATIC);
__str4207=allocate([112,111,112,101,110,0] /* popen\00 */, "i8", ALLOC_STATIC);
__str5208=allocate([70,73,76,69,42,0] /* FILE_\00 */, "i8", ALLOC_STATIC);
__str6209=allocate([37,115,58,32,37,115,0] /* %s: %s\00 */, "i8", ALLOC_STATIC);
__str7210=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
__str8211=allocate([99,97,110,110,111,116,32,99,108,111,115,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,0] /* cannot close standar */, "i8", ALLOC_STATIC);
__str9212=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_STATIC);
__str10213=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_STATIC);
__str11214=allocate([105,110,112,117,116,0] /* input\00 */, "i8", ALLOC_STATIC);
__str12215=allocate([108,105,110,101,115,0] /* lines\00 */, "i8", ALLOC_STATIC);
__str13216=allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_STATIC);
__str14217=allocate([111,117,116,112,117,116,0] /* output\00 */, "i8", ALLOC_STATIC);
__str15218=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_STATIC);
__str16219=allocate([116,109,112,102,105,108,101,0] /* tmpfile\00 */, "i8", ALLOC_STATIC);
__str17220=allocate([116,121,112,101,0] /* type\00 */, "i8", ALLOC_STATIC);
__str18221=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_STATIC);
__str19222=allocate([115,116,97,110,100,97,114,100,32,37,115,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0] /* standard %s file is  */, "i8", ALLOC_STATIC);
_fnames=allocate(8, "i8*", ALLOC_STATIC);
__str20223=allocate([37,46,49,52,103,0] /* %.14g\00 */, "i8", ALLOC_STATIC);
__str21224=allocate([99,108,111,115,101,100,32,102,105,108,101,0] /* closed file\00 */, "i8", ALLOC_STATIC);
__str22225=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_STATIC);
__str23226=allocate([116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0] /* too many arguments\0 */, "i8", ALLOC_STATIC);
__str24227=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,0] /* invalid option\00 */, "i8", ALLOC_STATIC);
__str25228=allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,0] /* invalid format\00 */, "i8", ALLOC_STATIC);
__str26229=allocate([37,108,102,0] /* %lf\00 */, "i8", ALLOC_STATIC);
__str27230=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
__str28231=allocate([39,112,111,112,101,110,39,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* 'popen' not supporte */, "i8", ALLOC_STATIC);
__str29232=allocate([119,0] /* w\00 */, "i8", ALLOC_STATIC);
__str30233=allocate([97,116,116,101,109,112,116,32,116,111,32,117,115,101,32,97,32,99,108,111,115,101,100,32,102,105,108,101,0] /* attempt to use a clo */, "i8", ALLOC_STATIC);
__str31234=allocate([102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,0] /* file is already clos */, "i8", ALLOC_STATIC);
__str32235=allocate([95,95,99,108,111,115,101,0] /* __close\00 */, "i8", ALLOC_STATIC);
__str33236=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
_flib=allocate([0, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 0, 206, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str34237=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_STATIC);
__str35238=allocate([115,101,116,118,98,117,102,0] /* setvbuf\00 */, "i8", ALLOC_STATIC);
__str36239=allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_STATIC);
__str37240=allocate([95,95,116,111,115,116,114,105,110,103,0] /* __tostring\00 */, "i8", ALLOC_STATIC);
__str38241=allocate([102,105,108,101,32,40,99,108,111,115,101,100,41,0] /* file (closed)\00 */, "i8", ALLOC_STATIC);
__str39242=allocate([102,105,108,101,32,40,37,112,41,0] /* file (%p)\00 */, "i8", ALLOC_STATIC);
_f_setvbuf_mode=allocate([2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_f_setvbuf_modenames=allocate(16, "i8*", ALLOC_STATIC);
__str40243=allocate([110,111,0] /* no\00 */, "i8", ALLOC_STATIC);
__str41244=allocate([102,117,108,108,0] /* full\00 */, "i8", ALLOC_STATIC);
__str42245=allocate([108,105,110,101,0] /* line\00 */, "i8", ALLOC_STATIC);
_f_seek_mode=allocate([0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_f_seek_modenames=allocate(16, "i8*", ALLOC_STATIC);
__str43246=allocate([115,101,116,0] /* set\00 */, "i8", ALLOC_STATIC);
__str44247=allocate([99,117,114,0] /* cur\00 */, "i8", ALLOC_STATIC);
__str45248=allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_STATIC);
__str250=allocate([97,110,100,0] /* and\00 */, "i8", ALLOC_STATIC);
__str1251=allocate([98,114,101,97,107,0] /* break\00 */, "i8", ALLOC_STATIC);
__str2252=allocate([100,111,0] /* do\00 */, "i8", ALLOC_STATIC);
__str3253=allocate([101,108,115,101,0] /* else\00 */, "i8", ALLOC_STATIC);
__str4254=allocate([101,108,115,101,105,102,0] /* elseif\00 */, "i8", ALLOC_STATIC);
__str5255=allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_STATIC);
__str6256=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
__str7257=allocate([102,111,114,0] /* for\00 */, "i8", ALLOC_STATIC);
__str8258=allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_STATIC);
__str9259=allocate([105,102,0] /* if\00 */, "i8", ALLOC_STATIC);
__str10260=allocate([105,110,0] /* in\00 */, "i8", ALLOC_STATIC);
__str11261=allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_STATIC);
__str12262=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
__str13263=allocate([110,111,116,0] /* not\00 */, "i8", ALLOC_STATIC);
__str14264=allocate([111,114,0] /* or\00 */, "i8", ALLOC_STATIC);
__str15265=allocate([114,101,112,101,97,116,0] /* repeat\00 */, "i8", ALLOC_STATIC);
__str16266=allocate([114,101,116,117,114,110,0] /* return\00 */, "i8", ALLOC_STATIC);
__str17267=allocate([116,104,101,110,0] /* then\00 */, "i8", ALLOC_STATIC);
__str18268=allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_STATIC);
__str19269=allocate([117,110,116,105,108,0] /* until\00 */, "i8", ALLOC_STATIC);
__str20270=allocate([119,104,105,108,101,0] /* while\00 */, "i8", ALLOC_STATIC);
__str21271=allocate([46,46,0] /* ..\00 */, "i8", ALLOC_STATIC);
__str22272=allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_STATIC);
__str23273=allocate([61,61,0] /* ==\00 */, "i8", ALLOC_STATIC);
__str24274=allocate([62,61,0] /* >=\00 */, "i8", ALLOC_STATIC);
__str25275=allocate([60,61,0] /* <=\00 */, "i8", ALLOC_STATIC);
__str26276=allocate([126,61,0] /* ~=\00 */, "i8", ALLOC_STATIC);
__str27277=allocate([60,110,117,109,98,101,114,62,0] /* <number>\00 */, "i8", ALLOC_STATIC);
__str28278=allocate([60,110,97,109,101,62,0] /* <name>\00 */, "i8", ALLOC_STATIC);
__str29279=allocate([60,115,116,114,105,110,103,62,0] /* <string>\00 */, "i8", ALLOC_STATIC);
__str30280=allocate([60,101,111,102,62,0] /* <eof>\00 */, "i8", ALLOC_STATIC);
_luaX_tokens=allocate(128, "i8*", ALLOC_STATIC);
__str31281=allocate([99,104,97,114,40,37,100,41,0] /* char(%d)\00 */, "i8", ALLOC_STATIC);
__str32282=allocate([37,99,0] /* %c\00 */, "i8", ALLOC_STATIC);
__str33283=allocate([37,115,58,37,100,58,32,37,115,0] /* %s:%d: %s\00 */, "i8", ALLOC_STATIC);
__str34284=allocate([37,115,32,110,101,97,114,32,39,37,115,39,0] /* %s near '%s'\00 */, "i8", ALLOC_STATIC);
__str35285=allocate([105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0] /* invalid long string  */, "i8", ALLOC_STATIC);
__str36286=allocate([46,0] /* .\00 */, "i8", ALLOC_STATIC);
__str37287=allocate([69,101,0] /* Ee\00 */, "i8", ALLOC_STATIC);
__str38288=allocate([43,45,0] /* +-\00 */, "i8", ALLOC_STATIC);
__str39289=allocate([109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0] /* malformed number\00 */, "i8", ALLOC_STATIC);
__str40290=allocate([108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0] /* lexical element too  */, "i8", ALLOC_STATIC);
__str41291=allocate([117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0] /* unfinished string\00 */, "i8", ALLOC_STATIC);
__str42292=allocate([101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,32,116,111,111,32,108,97,114,103,101,0] /* escape sequence too  */, "i8", ALLOC_STATIC);
__str43293=allocate([117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0] /* unfinished long stri */, "i8", ALLOC_STATIC);
__str44294=allocate([117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0] /* unfinished long comm */, "i8", ALLOC_STATIC);
__str45295=allocate([110,101,115,116,105,110,103,32,111,102,32,91,91,46,46,46,93,93,32,105,115,32,100,101,112,114,101,99,97,116,101,100,0] /* nesting of [[...]] i */, "i8", ALLOC_STATIC);
__str46296=allocate([99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0] /* chunk has too many l */, "i8", ALLOC_STATIC);
__str298=allocate([109,97,116,104,0] /* math\00 */, "i8", ALLOC_STATIC);
_mathlib=allocate([0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 226, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 0, 0, 0, 0, 244, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 0, 260, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str1299=allocate([112,105,0] /* pi\00 */, "i8", ALLOC_STATIC);
__str2300=allocate([104,117,103,101,0] /* huge\00 */, "i8", ALLOC_STATIC);
__str3301=allocate([102,109,111,100,0] /* fmod\00 */, "i8", ALLOC_STATIC);
__str4302=allocate([109,111,100,0] /* mod\00 */, "i8", ALLOC_STATIC);
__str5303=allocate([97,98,115,0] /* abs\00 */, "i8", ALLOC_STATIC);
__str6304=allocate([97,99,111,115,0] /* acos\00 */, "i8", ALLOC_STATIC);
__str7305=allocate([97,115,105,110,0] /* asin\00 */, "i8", ALLOC_STATIC);
__str8306=allocate([97,116,97,110,50,0] /* atan2\00 */, "i8", ALLOC_STATIC);
__str9307=allocate([97,116,97,110,0] /* atan\00 */, "i8", ALLOC_STATIC);
__str10308=allocate([99,101,105,108,0] /* ceil\00 */, "i8", ALLOC_STATIC);
__str11309=allocate([99,111,115,104,0] /* cosh\00 */, "i8", ALLOC_STATIC);
__str12310=allocate([99,111,115,0] /* cos\00 */, "i8", ALLOC_STATIC);
__str13311=allocate([100,101,103,0] /* deg\00 */, "i8", ALLOC_STATIC);
__str14312=allocate([101,120,112,0] /* exp\00 */, "i8", ALLOC_STATIC);
__str15313=allocate([102,108,111,111,114,0] /* floor\00 */, "i8", ALLOC_STATIC);
__str16314=allocate([102,114,101,120,112,0] /* frexp\00 */, "i8", ALLOC_STATIC);
__str17315=allocate([108,100,101,120,112,0] /* ldexp\00 */, "i8", ALLOC_STATIC);
__str18316=allocate([108,111,103,49,48,0] /* log10\00 */, "i8", ALLOC_STATIC);
__str19317=allocate([108,111,103,0] /* log\00 */, "i8", ALLOC_STATIC);
__str20318=allocate([109,97,120,0] /* max\00 */, "i8", ALLOC_STATIC);
__str21319=allocate([109,105,110,0] /* min\00 */, "i8", ALLOC_STATIC);
__str22320=allocate([109,111,100,102,0] /* modf\00 */, "i8", ALLOC_STATIC);
__str23321=allocate([112,111,119,0] /* pow\00 */, "i8", ALLOC_STATIC);
__str24322=allocate([114,97,100,0] /* rad\00 */, "i8", ALLOC_STATIC);
__str25323=allocate([114,97,110,100,111,109,0] /* random\00 */, "i8", ALLOC_STATIC);
__str26324=allocate([114,97,110,100,111,109,115,101,101,100,0] /* randomseed\00 */, "i8", ALLOC_STATIC);
__str27325=allocate([115,105,110,104,0] /* sinh\00 */, "i8", ALLOC_STATIC);
__str28326=allocate([115,105,110,0] /* sin\00 */, "i8", ALLOC_STATIC);
__str29327=allocate([115,113,114,116,0] /* sqrt\00 */, "i8", ALLOC_STATIC);
__str30328=allocate([116,97,110,104,0] /* tanh\00 */, "i8", ALLOC_STATIC);
__str31329=allocate([116,97,110,0] /* tan\00 */, "i8", ALLOC_STATIC);
__str32330=allocate([105,110,116,101,114,118,97,108,32,105,115,32,101,109,112,116,121,0] /* interval is empty\00 */, "i8", ALLOC_STATIC);
__str33331=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0] /* wrong number of argu */, "i8", ALLOC_STATIC);
__str333=allocate([109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0] /* memory allocation er */, "i8", ALLOC_STATIC);
__str337=allocate([95,76,79,65,68,76,73,66,0] /* _LOADLIB\00 */, "i8", ALLOC_STATIC);
__str1338=allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_STATIC);
__str2339=allocate([112,97,99,107,97,103,101,0] /* package\00 */, "i8", ALLOC_STATIC);
_pk_funcs=allocate([0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
_loaders=allocate([280, 0, 0, 0, 282, 0, 0, 0, 284, 0, 0, 0, 286, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.lua_State*)*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str3340=allocate([108,111,97,100,101,114,115,0] /* loaders\00 */, "i8", ALLOC_STATIC);
__str4341=allocate([112,97,116,104,0] /* path\00 */, "i8", ALLOC_STATIC);
__str5342=allocate([76,85,65,95,80,65,84,72,0] /* LUA_PATH\00 */, "i8", ALLOC_STATIC);
__str6343=allocate([46,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,49,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,49,47,63,47,105,110,105,116,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,49,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,49,47,63,47,105,110,105,116,46,108,117,97,0] /* ./?.lua;/usr/local/s */, "i8", ALLOC_STATIC);
__str7344=allocate([99,112,97,116,104,0] /* cpath\00 */, "i8", ALLOC_STATIC);
__str8345=allocate([76,85,65,95,67,80,65,84,72,0] /* LUA_CPATH\00 */, "i8", ALLOC_STATIC);
__str9346=allocate([46,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,49,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,49,47,108,111,97,100,97,108,108,46,115,111,0] /* ./?.so;/usr/local/li */, "i8", ALLOC_STATIC);
__str10347=allocate([47,10,59,10,63,10,33,10,45,0] /* /\0A;\0A?\0A!\0A-\00 */, "i8", ALLOC_STATIC);
__str11348=allocate([99,111,110,102,105,103,0] /* config\00 */, "i8", ALLOC_STATIC);
__str12349=allocate([95,76,79,65,68,69,68,0] /* _LOADED\00 */, "i8", ALLOC_STATIC);
__str13350=allocate([108,111,97,100,101,100,0] /* loaded\00 */, "i8", ALLOC_STATIC);
__str14351=allocate([112,114,101,108,111,97,100,0] /* preload\00 */, "i8", ALLOC_STATIC);
_ll_funcs=allocate([0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str15352=allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_STATIC);
__str16353=allocate([114,101,113,117,105,114,101,0] /* require\00 */, "i8", ALLOC_STATIC);
_sentinel_=allocate(1, "i32", ALLOC_STATIC);
__str17354=allocate([108,111,111,112,32,111,114,32,112,114,101,118,105,111,117,115,32,101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,0] /* loop or previous err */, "i8", ALLOC_STATIC);
__str18355=allocate([39,112,97,99,107,97,103,101,46,108,111,97,100,101,114,115,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0] /* 'package.loaders' mu */, "i8", ALLOC_STATIC);
__str19356=allocate(1, "i8", ALLOC_STATIC);
__str20357=allocate([109,111,100,117,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,58,37,115,0] /* module '%s' not foun */, "i8", ALLOC_STATIC);
__str21358=allocate([110,97,109,101,32,99,111,110,102,108,105,99,116,32,102,111,114,32,109,111,100,117,108,101,32,39,37,115,39,0] /* name conflict for mo */, "i8", ALLOC_STATIC);
__str22359=allocate([95,78,65,77,69,0] /* _NAME\00 */, "i8", ALLOC_STATIC);
__str23360=allocate([102,0] /* f\00 */, "i8", ALLOC_STATIC);
__str24361=allocate([39,109,111,100,117,108,101,39,32,110,111,116,32,99,97,108,108,101,100,32,102,114,111,109,32,97,32,76,117,97,32,102,117,110,99,116,105,111,110,0] /* 'module' not called  */, "i8", ALLOC_STATIC);
__str25362=allocate([95,77,0] /* _M\00 */, "i8", ALLOC_STATIC);
__str26363=allocate([95,80,65,67,75,65,71,69,0] /* _PACKAGE\00 */, "i8", ALLOC_STATIC);
__str27364=allocate([59,59,0] /* ;;\00 */, "i8", ALLOC_STATIC);
__str28365=allocate([59,1,59,0] /* ;\01;\00 */, "i8", ALLOC_STATIC);
__str29366=allocate([1,0] /* \01\00 */, "i8", ALLOC_STATIC);
__str30367=allocate([10,9,110,111,32,109,111,100,117,108,101,32,39,37,115,39,32,105,110,32,102,105,108,101,32,39,37,115,39,0] /* \0A\09no module '%s' */, "i8", ALLOC_STATIC);
__str31368=allocate([101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,58,10,9,37,115,0] /* error loading module */, "i8", ALLOC_STATIC);
__str32369=allocate([100,121,110,97,109,105,99,32,108,105,98,114,97,114,105,101,115,32,110,111,116,32,101,110,97,98,108,101,100,59,32,99,104,101,99,107,32,121,111,117,114,32,76,117,97,32,105,110,115,116,97,108,108,97,116,105,111,110,0] /* dynamic libraries no */, "i8", ALLOC_STATIC);
__str33370=allocate([37,115,37,115,0] /* %s%s\00 */, "i8", ALLOC_STATIC);
__str34371=allocate([76,79,65,68,76,73,66,58,32,0] /* LOADLIB: \00 */, "i8", ALLOC_STATIC);
__str35372=allocate([45,0] /* -\00 */, "i8", ALLOC_STATIC);
__str36373=allocate([46,0] /* .\00 */, "i8", ALLOC_STATIC);
__str37374=allocate([95,0] /* _\00 */, "i8", ALLOC_STATIC);
__str38375=allocate([108,117,97,111,112,101,110,95,37,115,0] /* luaopen_%s\00 */, "i8", ALLOC_STATIC);
__str39376=allocate([47,0] /* /\00 */, "i8", ALLOC_STATIC);
__str40377=allocate([39,112,97,99,107,97,103,101,46,37,115,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,0] /* 'package.%s' must be */, "i8", ALLOC_STATIC);
__str41378=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
__str42379=allocate([10,9,110,111,32,102,105,108,101,32,39,37,115,39,0] /* \0A\09no file '%s'\0 */, "i8", ALLOC_STATIC);
__str43380=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
__str44381=allocate([59,0] /* ;\00 */, "i8", ALLOC_STATIC);
__str45382=allocate([39,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0] /* 'package.preload' mu */, "i8", ALLOC_STATIC);
__str46383=allocate([10,9,110,111,32,102,105,101,108,100,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,37,115,39,93,0] /* \0A\09no field packa */, "i8", ALLOC_STATIC);
__str47384=allocate([108,111,97,100,108,105,98,0] /* loadlib\00 */, "i8", ALLOC_STATIC);
__str48385=allocate([115,101,101,97,108,108,0] /* seeall\00 */, "i8", ALLOC_STATIC);
__str49386=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
__str50387=allocate([97,98,115,101,110,116,0] /* absent\00 */, "i8", ALLOC_STATIC);
__str51388=allocate([105,110,105,116,0] /* init\00 */, "i8", ALLOC_STATIC);
_luaO_nilobject_=allocate([0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 0], ["%union.GCObject*",0,0,0,"i8","i8","i8","i8","i32",0,0,0], ALLOC_STATIC);
_luaO_log2_log_2=allocate([0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8] /* \00\01\02\02\03\03\0 */, "i8", ALLOC_STATIC);
__str391=allocate(1, "i8", ALLOC_STATIC);
__str1392=allocate([40,110,117,108,108,41,0] /* (null)\00 */, "i8", ALLOC_STATIC);
__str2393=allocate([37,112,0] /* %p\00 */, "i8", ALLOC_STATIC);
__str3394=allocate([37,0] /* %\00 */, "i8", ALLOC_STATIC);
__str4395=allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_STATIC);
__str5396=allocate([10,13,0] /* \0A\0D\00 */, "i8", ALLOC_STATIC);
__str6397=allocate([91,115,116,114,105,110,103,32,34,0] /* [string \22\00 */, "i8", ALLOC_STATIC);
__str7398=allocate([34,93,0] /* \22]\00 */, "i8", ALLOC_STATIC);
__str404=allocate([77,79,86,69,0] /* MOVE\00 */, "i8", ALLOC_STATIC);
__str1405=allocate([76,79,65,68,75,0] /* LOADK\00 */, "i8", ALLOC_STATIC);
__str2406=allocate([76,79,65,68,66,79,79,76,0] /* LOADBOOL\00 */, "i8", ALLOC_STATIC);
__str3407=allocate([76,79,65,68,78,73,76,0] /* LOADNIL\00 */, "i8", ALLOC_STATIC);
__str4408=allocate([71,69,84,85,80,86,65,76,0] /* GETUPVAL\00 */, "i8", ALLOC_STATIC);
__str5409=allocate([71,69,84,71,76,79,66,65,76,0] /* GETGLOBAL\00 */, "i8", ALLOC_STATIC);
__str6410=allocate([71,69,84,84,65,66,76,69,0] /* GETTABLE\00 */, "i8", ALLOC_STATIC);
__str7411=allocate([83,69,84,71,76,79,66,65,76,0] /* SETGLOBAL\00 */, "i8", ALLOC_STATIC);
__str8412=allocate([83,69,84,85,80,86,65,76,0] /* SETUPVAL\00 */, "i8", ALLOC_STATIC);
__str9413=allocate([83,69,84,84,65,66,76,69,0] /* SETTABLE\00 */, "i8", ALLOC_STATIC);
__str10414=allocate([78,69,87,84,65,66,76,69,0] /* NEWTABLE\00 */, "i8", ALLOC_STATIC);
__str11415=allocate([83,69,76,70,0] /* SELF\00 */, "i8", ALLOC_STATIC);
__str12416=allocate([65,68,68,0] /* ADD\00 */, "i8", ALLOC_STATIC);
__str13417=allocate([83,85,66,0] /* SUB\00 */, "i8", ALLOC_STATIC);
__str14418=allocate([77,85,76,0] /* MUL\00 */, "i8", ALLOC_STATIC);
__str15419=allocate([68,73,86,0] /* DIV\00 */, "i8", ALLOC_STATIC);
__str16420=allocate([77,79,68,0] /* MOD\00 */, "i8", ALLOC_STATIC);
__str17421=allocate([80,79,87,0] /* POW\00 */, "i8", ALLOC_STATIC);
__str18422=allocate([85,78,77,0] /* UNM\00 */, "i8", ALLOC_STATIC);
__str19423=allocate([78,79,84,0] /* NOT\00 */, "i8", ALLOC_STATIC);
__str20424=allocate([76,69,78,0] /* LEN\00 */, "i8", ALLOC_STATIC);
__str21425=allocate([67,79,78,67,65,84,0] /* CONCAT\00 */, "i8", ALLOC_STATIC);
__str22426=allocate([74,77,80,0] /* JMP\00 */, "i8", ALLOC_STATIC);
__str23427=allocate([69,81,0] /* EQ\00 */, "i8", ALLOC_STATIC);
__str24428=allocate([76,84,0] /* LT\00 */, "i8", ALLOC_STATIC);
__str25429=allocate([76,69,0] /* LE\00 */, "i8", ALLOC_STATIC);
__str26430=allocate([84,69,83,84,0] /* TEST\00 */, "i8", ALLOC_STATIC);
__str27431=allocate([84,69,83,84,83,69,84,0] /* TESTSET\00 */, "i8", ALLOC_STATIC);
__str28432=allocate([67,65,76,76,0] /* CALL\00 */, "i8", ALLOC_STATIC);
__str29433=allocate([84,65,73,76,67,65,76,76,0] /* TAILCALL\00 */, "i8", ALLOC_STATIC);
__str30434=allocate([82,69,84,85,82,78,0] /* RETURN\00 */, "i8", ALLOC_STATIC);
__str31435=allocate([70,79,82,76,79,79,80,0] /* FORLOOP\00 */, "i8", ALLOC_STATIC);
__str32436=allocate([70,79,82,80,82,69,80,0] /* FORPREP\00 */, "i8", ALLOC_STATIC);
__str33437=allocate([84,70,79,82,76,79,79,80,0] /* TFORLOOP\00 */, "i8", ALLOC_STATIC);
__str34438=allocate([83,69,84,76,73,83,84,0] /* SETLIST\00 */, "i8", ALLOC_STATIC);
__str35439=allocate([67,76,79,83,69,0] /* CLOSE\00 */, "i8", ALLOC_STATIC);
__str36440=allocate([67,76,79,83,85,82,69,0] /* CLOSURE\00 */, "i8", ALLOC_STATIC);
__str37441=allocate([86,65,82,65,82,71,0] /* VARARG\00 */, "i8", ALLOC_STATIC);
_luaP_opnames=allocate(156, "i8*", ALLOC_STATIC);
_luaP_opmodes=allocate([96,113,84,96,80,113,108,49,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,228,228,84,84,16,98,98,132,20,0,81,80] /* `qT`Pql1\10<Tl|||||| */, "i8", ALLOC_STATIC);
__str443=allocate([111,115,0] /* os\00 */, "i8", ALLOC_STATIC);
_syslib=allocate([0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str1444=allocate([99,108,111,99,107,0] /* clock\00 */, "i8", ALLOC_STATIC);
__str2445=allocate([100,97,116,101,0] /* date\00 */, "i8", ALLOC_STATIC);
__str3446=allocate([100,105,102,102,116,105,109,101,0] /* difftime\00 */, "i8", ALLOC_STATIC);
__str4447=allocate([101,120,101,99,117,116,101,0] /* execute\00 */, "i8", ALLOC_STATIC);
__str5448=allocate([101,120,105,116,0] /* exit\00 */, "i8", ALLOC_STATIC);
__str6449=allocate([103,101,116,101,110,118,0] /* getenv\00 */, "i8", ALLOC_STATIC);
__str7450=allocate([114,101,109,111,118,101,0] /* remove\00 */, "i8", ALLOC_STATIC);
__str8451=allocate([114,101,110,97,109,101,0] /* rename\00 */, "i8", ALLOC_STATIC);
__str9452=allocate([115,101,116,108,111,99,97,108,101,0] /* setlocale\00 */, "i8", ALLOC_STATIC);
__str10453=allocate([116,105,109,101,0] /* time\00 */, "i8", ALLOC_STATIC);
__str11454=allocate([116,109,112,110,97,109,101,0] /* tmpname\00 */, "i8", ALLOC_STATIC);
__str12455=allocate([117,110,97,98,108,101,32,116,111,32,103,101,110,101,114,97,116,101,32,97,32,117,110,105,113,117,101,32,102,105,108,101,110,97,109,101,0] /* unable to generate a */, "i8", ALLOC_STATIC);
__str13456=allocate([115,101,99,0] /* sec\00 */, "i8", ALLOC_STATIC);
__str14457=allocate([109,105,110,0] /* min\00 */, "i8", ALLOC_STATIC);
__str15458=allocate([104,111,117,114,0] /* hour\00 */, "i8", ALLOC_STATIC);
__str16459=allocate([100,97,121,0] /* day\00 */, "i8", ALLOC_STATIC);
__str17460=allocate([109,111,110,116,104,0] /* month\00 */, "i8", ALLOC_STATIC);
__str18461=allocate([121,101,97,114,0] /* year\00 */, "i8", ALLOC_STATIC);
__str19462=allocate([105,115,100,115,116,0] /* isdst\00 */, "i8", ALLOC_STATIC);
__str20463=allocate([102,105,101,108,100,32,39,37,115,39,32,109,105,115,115,105,110,103,32,105,110,32,100,97,116,101,32,116,97,98,108,101,0] /* field '%s' missing i */, "i8", ALLOC_STATIC);
_os_setlocale_cat=allocate([6, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_os_setlocale_catnames=allocate(28, "i8*", ALLOC_STATIC);
__str21464=allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_STATIC);
__str22465=allocate([99,111,108,108,97,116,101,0] /* collate\00 */, "i8", ALLOC_STATIC);
__str23466=allocate([99,116,121,112,101,0] /* ctype\00 */, "i8", ALLOC_STATIC);
__str24467=allocate([109,111,110,101,116,97,114,121,0] /* monetary\00 */, "i8", ALLOC_STATIC);
__str25468=allocate([110,117,109,101,114,105,99,0] /* numeric\00 */, "i8", ALLOC_STATIC);
__str26469=allocate([37,115,58,32,37,115,0] /* %s: %s\00 */, "i8", ALLOC_STATIC);
__str27470=allocate([37,99,0] /* %c\00 */, "i8", ALLOC_STATIC);
__str28471=allocate([42,116,0] /* _t\00 */, "i8", ALLOC_STATIC);
__str29472=allocate([119,100,97,121,0] /* wday\00 */, "i8", ALLOC_STATIC);
__str30473=allocate([121,100,97,121,0] /* yday\00 */, "i8", ALLOC_STATIC);
__str475=allocate([115,121,110,116,97,120,32,101,114,114,111,114,0] /* syntax error\00 */, "i8", ALLOC_STATIC);
__str1476=allocate([118,97,114,105,97,98,108,101,115,32,105,110,32,97,115,115,105,103,110,109,101,110,116,0] /* variables in assignm */, "i8", ALLOC_STATIC);
_priority=allocate([6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 10, 9, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 1], "i8", ALLOC_STATIC);
__str2477=allocate([99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0] /* cannot use '...' out */, "i8", ALLOC_STATIC);
__str3478=allocate([115,101,108,102,0] /* self\00 */, "i8", ALLOC_STATIC);
__str4479=allocate([99,111,110,115,116,97,110,116,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* constant table overf */, "i8", ALLOC_STATIC);
__str5480=allocate([97,114,103,0] /* arg\00 */, "i8", ALLOC_STATIC);
__str6481=allocate([60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0] /* <name> or '...' expe */, "i8", ALLOC_STATIC);
__str7482=allocate([108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0] /* local variables\00 */, "i8", ALLOC_STATIC);
__str8483=allocate([116,111,111,32,109,97,110,121,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0] /* too many local varia */, "i8", ALLOC_STATIC);
__str9484=allocate([105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0] /* items in a construct */, "i8", ALLOC_STATIC);
__str10485=allocate([109,97,105,110,32,102,117,110,99,116,105,111,110,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,37,100,32,37,115,0] /* main function has mo */, "i8", ALLOC_STATIC);
__str11486=allocate([102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,37,100,32,37,115,0] /* function at line %d  */, "i8", ALLOC_STATIC);
__str12487=allocate([97,109,98,105,103,117,111,117,115,32,115,121,110,116,97,120,32,40,102,117,110,99,116,105,111,110,32,99,97,108,108,32,120,32,110,101,119,32,115,116,97,116,101,109,101,110,116,41,0] /* ambiguous syntax (fu */, "i8", ALLOC_STATIC);
__str13488=allocate([102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0] /* function arguments e */, "i8", ALLOC_STATIC);
__str14489=allocate([117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0] /* unexpected symbol\00 */, "i8", ALLOC_STATIC);
__str15490=allocate([117,112,118,97,108,117,101,115,0] /* upvalues\00 */, "i8", ALLOC_STATIC);
__str16491=allocate(1, "i8", ALLOC_STATIC);
__str17492=allocate([110,111,32,108,111,111,112,32,116,111,32,98,114,101,97,107,0] /* no loop to break\00 */, "i8", ALLOC_STATIC);
__str18493=allocate([39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0] /* '=' or 'in' expected */, "i8", ALLOC_STATIC);
__str19494=allocate([40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0] /* (for generator)\00 */, "i8", ALLOC_STATIC);
__str20495=allocate([40,102,111,114,32,115,116,97,116,101,41,0] /* (for state)\00 */, "i8", ALLOC_STATIC);
__str21496=allocate([40,102,111,114,32,99,111,110,116,114,111,108,41,0] /* (for control)\00 */, "i8", ALLOC_STATIC);
__str22497=allocate([40,102,111,114,32,105,110,100,101,120,41,0] /* (for index)\00 */, "i8", ALLOC_STATIC);
__str23498=allocate([40,102,111,114,32,108,105,109,105,116,41,0] /* (for limit)\00 */, "i8", ALLOC_STATIC);
__str24499=allocate([40,102,111,114,32,115,116,101,112,41,0] /* (for step)\00 */, "i8", ALLOC_STATIC);
__str25500=allocate([39,37,115,39,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,39,37,115,39,32,97,116,32,108,105,110,101,32,37,100,41,0] /* '%s' expected (to cl */, "i8", ALLOC_STATIC);
__str26501=allocate([39,37,115,39,32,101,120,112,101,99,116,101,100,0] /* '%s' expected\00 */, "i8", ALLOC_STATIC);
__str27502=allocate([99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,115,121,110,116,97,120,32,108,101,118,101,108,115,0] /* chunk has too many s */, "i8", ALLOC_STATIC);
__str504=allocate([110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0] /* not enough memory\00 */, "i8", ALLOC_STATIC);
__str511=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
_strlib=allocate([0, 0, 0, 0, 314, 0, 0, 0, 0, 0, 0, 0, 316, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 322, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 0, 0, 326, 0, 0, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 338, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str1512=allocate([103,109,97,116,99,104,0] /* gmatch\00 */, "i8", ALLOC_STATIC);
__str2513=allocate([103,102,105,110,100,0] /* gfind\00 */, "i8", ALLOC_STATIC);
__str3514=allocate(1, "i8", ALLOC_STATIC);
__str4515=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
__str5516=allocate([98,121,116,101,0] /* byte\00 */, "i8", ALLOC_STATIC);
__str6517=allocate([99,104,97,114,0] /* char\00 */, "i8", ALLOC_STATIC);
__str7518=allocate([100,117,109,112,0] /* dump\00 */, "i8", ALLOC_STATIC);
__str8519=allocate([102,105,110,100,0] /* find\00 */, "i8", ALLOC_STATIC);
__str9520=allocate([102,111,114,109,97,116,0] /* format\00 */, "i8", ALLOC_STATIC);
__str10521=allocate([103,115,117,98,0] /* gsub\00 */, "i8", ALLOC_STATIC);
__str11522=allocate([108,101,110,0] /* len\00 */, "i8", ALLOC_STATIC);
__str12523=allocate([108,111,119,101,114,0] /* lower\00 */, "i8", ALLOC_STATIC);
__str13524=allocate([109,97,116,99,104,0] /* match\00 */, "i8", ALLOC_STATIC);
__str14525=allocate([114,101,112,0] /* rep\00 */, "i8", ALLOC_STATIC);
__str15526=allocate([114,101,118,101,114,115,101,0] /* reverse\00 */, "i8", ALLOC_STATIC);
__str16527=allocate([115,117,98,0] /* sub\00 */, "i8", ALLOC_STATIC);
__str17528=allocate([117,112,112,101,114,0] /* upper\00 */, "i8", ALLOC_STATIC);
__str18529=allocate([94,36,42,43,63,46,40,91,37,45,0] /* ^$_+?.([%-\00 */, "i8", ALLOC_STATIC);
__str19530=allocate([116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0] /* too many captures\00 */, "i8", ALLOC_STATIC);
__str20531=allocate([105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,0] /* invalid capture inde */, "i8", ALLOC_STATIC);
__str21532=allocate([117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0] /* unfinished capture\0 */, "i8", ALLOC_STATIC);
__str22533=allocate([109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0] /* missing '[' after '% */, "i8", ALLOC_STATIC);
__str23534=allocate([109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0] /* malformed pattern (e */, "i8", ALLOC_STATIC);
__str24535=allocate([109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0] /* malformed pattern (m */, "i8", ALLOC_STATIC);
__str25536=allocate([117,110,98,97,108,97,110,99,101,100,32,112,97,116,116,101,114,110,0] /* unbalanced pattern\0 */, "i8", ALLOC_STATIC);
__str26537=allocate([105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0] /* invalid pattern capt */, "i8", ALLOC_STATIC);
__str27538=allocate([115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* string/function/tabl */, "i8", ALLOC_STATIC);
__str28539=allocate([105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0] /* invalid replacement  */, "i8", ALLOC_STATIC);
__str29540=allocate([39,115,116,114,105,110,103,46,103,102,105,110,100,39,32,119,97,115,32,114,101,110,97,109,101,100,32,116,111,32,39,115,116,114,105,110,103,46,103,109,97,116,99,104,39,0] /* 'string.gfind' was r */, "i8", ALLOC_STATIC);
__str30541=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0] /* invalid option '%%%c */, "i8", ALLOC_STATIC);
__str31542=allocate([92,114,0] /* \5Cr\00 */, "i8", ALLOC_STATIC);
__str32543=allocate([92,48,48,48,0] /* \5C000\00 */, "i8", ALLOC_STATIC);
__str33544=allocate([108,0] /* l\00 */, "i8", ALLOC_STATIC);
__str34545=allocate([45,43,32,35,48,0] /* -+ #0\00 */, "i8", ALLOC_STATIC);
__str35546=allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0] /* invalid format (repe */, "i8", ALLOC_STATIC);
__str36547=allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0] /* invalid format (widt */, "i8", ALLOC_STATIC);
__str37548=allocate([117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0] /* unable to dump given */, "i8", ALLOC_STATIC);
__str38549=allocate([105,110,118,97,108,105,100,32,118,97,108,117,101,0] /* invalid value\00 */, "i8", ALLOC_STATIC);
__str39550=allocate([115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0] /* string slice too lon */, "i8", ALLOC_STATIC);
__str552=allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0] /* table index is nil\0 */, "i8", ALLOC_STATIC);
__str1553=allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0] /* table index is NaN\0 */, "i8", ALLOC_STATIC);
__str2554=allocate([116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* table overflow\00 */, "i8", ALLOC_STATIC);
_dummynode_=allocate([0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["%union.GCObject*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"%union.GCObject*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"%struct.Node*",0,0,0], ALLOC_STATIC);
__str3555=allocate([105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0] /* invalid key to 'next */, "i8", ALLOC_STATIC);
__str565=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
_tab_funcs=allocate([0, 0, 0, 0, 344, 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 348, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0, 0, 0, 352, 0, 0, 0, 0, 0, 0, 0, 354, 0, 0, 0, 0, 0, 0, 0, 356, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str1566=allocate([99,111,110,99,97,116,0] /* concat\00 */, "i8", ALLOC_STATIC);
__str2567=allocate([102,111,114,101,97,99,104,0] /* foreach\00 */, "i8", ALLOC_STATIC);
__str3568=allocate([102,111,114,101,97,99,104,105,0] /* foreachi\00 */, "i8", ALLOC_STATIC);
__str4569=allocate([103,101,116,110,0] /* getn\00 */, "i8", ALLOC_STATIC);
__str5570=allocate([109,97,120,110,0] /* maxn\00 */, "i8", ALLOC_STATIC);
__str6571=allocate([105,110,115,101,114,116,0] /* insert\00 */, "i8", ALLOC_STATIC);
__str7572=allocate([114,101,109,111,118,101,0] /* remove\00 */, "i8", ALLOC_STATIC);
__str8573=allocate([115,101,116,110,0] /* setn\00 */, "i8", ALLOC_STATIC);
__str9574=allocate([115,111,114,116,0] /* sort\00 */, "i8", ALLOC_STATIC);
__str10575=allocate(1, "i8", ALLOC_STATIC);
__str11576=allocate([105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0] /* invalid order functi */, "i8", ALLOC_STATIC);
__str12577=allocate([39,115,101,116,110,39,32,105,115,32,111,98,115,111,108,101,116,101,0] /* 'setn' is obsolete\0 */, "i8", ALLOC_STATIC);
__str13578=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0] /* wrong number of argu */, "i8", ALLOC_STATIC);
__str14579=allocate([105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110,100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0] /* invalid value (%s) a */, "i8", ALLOC_STATIC);
__str581=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
__str1582=allocate([98,111,111,108,101,97,110,0] /* boolean\00 */, "i8", ALLOC_STATIC);
__str2583=allocate([117,115,101,114,100,97,116,97,0] /* userdata\00 */, "i8", ALLOC_STATIC);
__str3584=allocate([110,117,109,98,101,114,0] /* number\00 */, "i8", ALLOC_STATIC);
__str4585=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
__str5586=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
__str6587=allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_STATIC);
__str7588=allocate([116,104,114,101,97,100,0] /* thread\00 */, "i8", ALLOC_STATIC);
__str8589=allocate([112,114,111,116,111,0] /* proto\00 */, "i8", ALLOC_STATIC);
__str9590=allocate([117,112,118,97,108,0] /* upval\00 */, "i8", ALLOC_STATIC);
_luaT_typenames=allocate(44, "i8*", ALLOC_STATIC);
_luaT_init_luaT_eventname=allocate(68, "i8*", ALLOC_STATIC);
__str10592=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
__str11593=allocate([95,95,110,101,119,105,110,100,101,120,0] /* __newindex\00 */, "i8", ALLOC_STATIC);
__str12594=allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_STATIC);
__str13595=allocate([95,95,109,111,100,101,0] /* __mode\00 */, "i8", ALLOC_STATIC);
__str14596=allocate([95,95,101,113,0] /* __eq\00 */, "i8", ALLOC_STATIC);
__str15597=allocate([95,95,97,100,100,0] /* __add\00 */, "i8", ALLOC_STATIC);
__str16598=allocate([95,95,115,117,98,0] /* __sub\00 */, "i8", ALLOC_STATIC);
__str17599=allocate([95,95,109,117,108,0] /* __mul\00 */, "i8", ALLOC_STATIC);
__str18600=allocate([95,95,100,105,118,0] /* __div\00 */, "i8", ALLOC_STATIC);
__str19601=allocate([95,95,109,111,100,0] /* __mod\00 */, "i8", ALLOC_STATIC);
__str20602=allocate([95,95,112,111,119,0] /* __pow\00 */, "i8", ALLOC_STATIC);
__str21603=allocate([95,95,117,110,109,0] /* __unm\00 */, "i8", ALLOC_STATIC);
__str22604=allocate([95,95,108,101,110,0] /* __len\00 */, "i8", ALLOC_STATIC);
__str23605=allocate([95,95,108,116,0] /* __lt\00 */, "i8", ALLOC_STATIC);
__str24606=allocate([95,95,108,101,0] /* __le\00 */, "i8", ALLOC_STATIC);
__str25607=allocate([95,95,99,111,110,99,97,116,0] /* __concat\00 */, "i8", ALLOC_STATIC);
__str26608=allocate([95,95,99,97,108,108,0] /* __call\00 */, "i8", ALLOC_STATIC);
__str612=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
__str1613=allocate([98,105,110,97,114,121,32,115,116,114,105,110,103,0] /* binary string\00 */, "i8", ALLOC_STATIC);
__str2614=allocate([61,63,0] /* =?\00 */, "i8", ALLOC_STATIC);
__str3615=allocate([99,111,100,101,32,116,111,111,32,100,101,101,112,0] /* code too deep\00 */, "i8", ALLOC_STATIC);
__str4616=allocate([98,97,100,32,99,111,100,101,0] /* bad code\00 */, "i8", ALLOC_STATIC);
__str5617=allocate([117,110,101,120,112,101,99,116,101,100,32,101,110,100,0] /* unexpected end\00 */, "i8", ALLOC_STATIC);
__str6618=allocate([98,97,100,32,99,111,110,115,116,97,110,116,0] /* bad constant\00 */, "i8", ALLOC_STATIC);
__str7619=allocate([98,97,100,32,105,110,116,101,103,101,114,0] /* bad integer\00 */, "i8", ALLOC_STATIC);
__str8620=allocate([37,115,58,32,37,115,32,105,110,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0] /* %s: %s in precompile */, "i8", ALLOC_STATIC);
__str9621=allocate([98,97,100,32,104,101,97,100,101,114,0] /* bad header\00 */, "i8", ALLOC_STATIC);
__str624=allocate([37,46,49,52,103,0] /* %.14g\00 */, "i8", ALLOC_STATIC);
__str1625=allocate([105,110,100,101,120,0] /* index\00 */, "i8", ALLOC_STATIC);
__str2626=allocate([108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0] /* loop in gettable\00 */, "i8", ALLOC_STATIC);
__str3627=allocate([108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0] /* loop in settable\00 */, "i8", ALLOC_STATIC);
__str4628=allocate([115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0] /* string length overfl */, "i8", ALLOC_STATIC);
__str5629=allocate([103,101,116,32,108,101,110,103,116,104,32,111,102,0] /* get length of\00 */, "i8", ALLOC_STATIC);
__str6630=allocate([39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' initial value  */, "i8", ALLOC_STATIC);
__str7631=allocate([39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' limit must be  */, "i8", ALLOC_STATIC);
__str8632=allocate([39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' step must be a */, "i8", ALLOC_STATIC);
_moonscript_lua=allocate([112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,112,97,114,115,101,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,112,97,114,115,101,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,10,32,32,108,111,99,97,108,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,10,32,32,10,32,32,114,101,113,117,105,114,101,34,108,112,101,103,34,10,32,32,10,32,32,108,111,99,97,108,32,100,97,116,97,32,61,32,114,101,113,117,105,114,101,34,109,111,111,110,115,99,114,105,112,116,46,100,97,116,97,34,10,32,32,108,111,99,97,108,32,116,121,112,101,115,32,61,32,114,101,113,117,105,114,101,34,109,111,111,110,115,99,114,105,112,116,46,116,121,112,101,115,34,10,32,32,10,32,32,108,111,99,97,108,32,110,116,121,112,101,32,61,32,116,121,112,101,115,46,110,116,121,112,101,10,32,32,10,32,32,108,111,99,97,108,32,100,117,109,112,32,61,32,117,116,105,108,46,100,117,109,112,10,32,32,108,111,99,97,108,32,116,114,105,109,32,61,32,117,116,105,108,46,116,114,105,109,10,32,32,10,32,32,108,111,99,97,108,32,83,116,97,99,107,32,61,32,100,97,116,97,46,83,116,97,99,107,10,32,32,10,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,99,111,117,110,116,95,105,110,100,101,110,116,40,115,116,114,41,10,32,32,9,108,111,99,97,108,32,115,117,109,32,61,32,48,10,32,32,9,102,111,114,32,118,32,105,110,32,115,116,114,58,103,109,97,116,99,104,40,34,91,92,116,32,93,34,41,32,100,111,10,32,32,9,9,105,102,32,118,32,61,61,32,39,32,39,32,116,104,101,110,32,115,117,109,32,61,32,115,117,109,32,43,32,49,32,101,110,100,10,32,32,9,9,105,102,32,118,32,61,61,32,39,92,116,39,32,116,104,101,110,32,115,117,109,32,61,32,115,117,109,32,43,32,52,32,101,110,100,10,32,32,9,101,110,100,10,32,32,9,114,101,116,117,114,110,32,115,117,109,10,32,32,101,110,100,10,32,32,10,32,32,108,111,99,97,108,32,82,44,32,83,44,32,86,44,32,80,32,61,32,108,112,101,103,46,82,44,32,108,112,101,103,46,83,44,32,108,112,101,103,46,86,44,32,108,112,101,103,46,80,10,32,32,108,111,99,97,108,32,67,44,32,67,116,44,32,67,109,116,44,32,67,103,44,32,67,98,44,32,67,99,32,61,32,108,112,101,103,46,67,44,32,108,112,101,103,46,67,116,44,32,108,112,101,103,46,67,109,116,44,32,108,112,101,103,46,67,103,44,32,108,112,101,103,46,67,98,44,32,108,112,101,103,46,67,99,10,32,32,10,32,32,108,112,101,103,46,115,101,116,109,97,120,115,116,97,99,107,40,49,48,48,48,48,41,10,32,32,10,32,32,108,111,99,97,108,32,87,104,105,116,101,32,61,32,83,34,32,92,116,92,114,92,110,34,94,48,10,32,32,108,111,99,97,108,32,95,83,112,97,99,101,32,61,32,83,34,32,92,116,34,94,48,10,32,32,108,111,99,97,108,32,66,114,101,97,107,32,61,32,80,34,92,114,34,94,45,49,32,42,32,80,34,92,110,34,10,32,32,108,111,99,97,108,32,83,116,111,112,32,61,32,66,114,101,97,107,32,43,32,45,49,10,32,32,108,111,99,97,108,32,73,110,100,101,110,116,32,61,32,67,40,83,34,92,116,32,34,94,48,41,32,47,32,99,111,117,110,116,95,105,110,100,101,110,116,10,32,32,10,32,32,108,111,99,97,108,32,67,111,109,109,101,110,116,32,61,32,80,34,45,45,34,32,42,32,40,49,32,45,32,83,34,92,114,92,110,34,41,94,48,32,42,32,35,83,116,111,112,10,32,32,108,111,99,97,108,32,83,112,97,99,101,32,61,32,95,83,112,97,99,101,32,42,32,67,111,109,109,101,110,116,94,45,49,10,32,32,108,111,99,97,108,32,83,111,109,101,83,112,97,99,101,32,61,32,83,34,32,92,116,34,94,49,32,42,32,67,111,109,109,101,110,116,94,45,49,10,32,32,10,32,32,108,111,99,97,108,32,83,112,97,99,101,66,114,101,97,107,32,61,32,83,112,97,99,101,32,42,32,66,114,101,97,107,10,32,32,108,111,99,97,108,32,69,109,112,116,121,76,105,110,101,32,61,32,83,112,97,99,101,66,114,101,97,107,10,32,32,10,32,32,108,111,99,97,108,32,65,108,112,104,97,78,117,109,32,61,32,82,40,34,97,122,34,44,32,34,65,90,34,44,32,34,48,57,34,44,32,34,95,95,34,41,10,32,32,10,32,32,108,111,99,97,108,32,95,78,97,109,101,32,61,32,67,40,82,40,34,97,122,34,44,32,34,65,90,34,44,32,34,95,95,34,41,32,42,32,65,108,112,104,97,78,117,109,94,48,41,10,32,32,108,111,99,97,108,32,78,97,109,101,32,61,32,83,112,97,99,101,32,42,32,95,78,97,109,101,10,32,32,10,32,32,108,111,99,97,108,32,78,117,109,32,61,32,80,34,48,120,34,32,42,32,82,40,34,48,57,34,44,32,34,97,102,34,44,32,34,65,70,34,41,94,49,32,43,10,32,32,9,82,34,48,57,34,94,49,32,42,32,40,80,34,46,34,32,42,32,82,34,48,57,34,94,49,41,94,45,49,32,42,32,40,83,34,101,69,34,32,42,32,80,34,45,34,94,45,49,32,42,32,82,34,48,57,34,94,49,41,94,45,49,10,32,32,10,32,32,78,117,109,32,61,32,83,112,97,99,101,32,42,32,40,78,117,109,32,47,32,102,117,110,99,116,105,111,110,40,118,97,108,117,101,41,32,114,101,116,117,114,110,32,123,34,110,117,109,98,101,114,34,44,32,118,97,108,117,101,125,32,101,110,100,41,10,32,32,10,32,32,108,111,99,97,108,32,70,97,99,116,111,114,79,112,32,61,32,83,112,97,99,101,32,42,32,67,40,83,34,43,45,34,41,10,32,32,108,111,99,97,108,32,84,101,114,109,79,112,32,61,32,83,112,97,99,101,32,42,32,67,40,83,34,42,47,37,94,34,41,10,32,32,10,32,32,108,111,99,97,108,32,83,104,101,98,97,110,103,32,61,32,80,34,35,33,34,32,42,32,80,40,49,32,45,32,83,116,111,112,41,94,48,10,32,32,10,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,119,114,97,112,40,102,110,41,10,32,32,9,108,111,99,97,108,32,101,110,118,32,61,32,103,101,116,102,101,110,118,40,102,110,41,10,32,32,10,32,32,9,114,101,116,117,114,110,32,115,101,116,102,101,110,118,40,102,110,44,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,125,44,32,123,10,32,32,9,9,95,95,105,110,100,101,120,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,97,109,101,41,10,32,32,9,9,9,108,111,99,97,108,32,118,97,108,117,101,32,61,32,101,110,118,91,110,97,109,101,93,32,10,32,32,9,9,9,105,102,32,118,97,108,117,101,32,126,61,32,110,105,108,32,116,104,101,110,32,114,101,116,117,114,110,32,118,97,108,117,101,32,101,110,100,10,32,32,10,32,32,9,9,9,105,102,32,110,97,109,101,58,109,97,116,99,104,34,94,91,65,45,90,93,91,65,45,90,97,45,122,48,45,57,93,42,36,34,32,116,104,101,110,10,32,32,9,9,9,9,108,111,99,97,108,32,118,32,61,32,86,40,110,97,109,101,41,10,32,32,9,9,9,9,114,97,119,115,101,116,40,115,101,108,102,44,32,110,97,109,101,44,32,118,41,10,32,32,9,9,9,9,114,101,116,117,114,110,32,118,10,32,32,9,9,9,101,110,100,10,32,32,9,9,9,101,114,114,111,114,40,34,117,110,107,110,111,119,110,32,118,97,114,105,97,98,108,101,32,114,101,102,101,114,101,110,99,101,100,58,32,34,46,46,110,97,109,101,41,10,32,32,9,9,101,110,100,10,32,32,9,125,41,41,10,32,32,101,110,100,10,32,32,10,32,32,102,117,110,99,116,105,111,110,32,101,120,116,114,97,99,116,95,108,105,110,101,40,115,116,114,44,32,115,116,97,114,116,95,112,111,115,41,10,32,32,9,115,116,114,32,61,32,115,116,114,58,115,117,98,40,115,116,97,114,116,95,112,111,115,41,10,32,32,9,109,32,61,32,115,116,114,58,109,97,116,99,104,34,94,40,46,45,41,92,110,34,10,32,32,9,105,102,32,109,32,116,104,101,110,32,114,101,116,117,114,110,32,109,32,101,110,100,10,32,32,9,114,101,116,117,114,110,32,115,116,114,58,109,97,116,99,104,34,94,46,45,36,34,10,32,32,101,110,100,10,32,32,10,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,109,97,114,107,40,110,97,109,101,41,10,32,32,9,114,101,116,117,114,110,32,102,117,110,99,116,105,111,110,40,46,46,46,41,10,32,32,9,9,114,101,116,117,114,110,32,123,110,97,109,101,44,32,46,46,46,125,10,32,32,9,101,110,100,10,32,32,101,110,100,10,32,32,10,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,105,110,115,101,114,116,95,112,111,115,40,112,111,115,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,105,102,32,116,121,112,101,40,118,97,108,117,101,41,32,61,61,32,34,116,97,98,108,101,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,91,45,49,93,32,61,32,112,111,115,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,118,97,108,117,101,10,32,32,101,110,100,10,32,32,10,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,112,111,115,40,112,97,116,116,41,10,32,32,9,114,101,116,117,114,110,32,40,108,112,101,103,46,67,112,40,41,32,42,32,112,97,116,116,41,32,47,32,105,110,115,101,114,116,95,112,111,115,10,32,32,101,110,100,10,32,32,10,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,103,111,116,40,119,104,97,116,41,10,32,32,9,114,101,116,117,114,110,32,67,109,116,40,34,34,44,32,102,117,110,99,116,105,111,110,40,115,116,114,44,32,112,111,115,44,32,46,46,46,41,10,32,32,9,9,108,111,99,97,108,32,99,97,112,32,61,32,123,46,46,46,125,10,32,32,9,9,112,114,105,110,116,40,34,43,43,32,103,111,116,32,34,46,46,119,104,97,116,44,32,34,91,34,46,46,101,120,116,114,97,99,116,95,108,105,110,101,40,115,116,114,44,32,112,111,115,41,46,46,34,93,34,41,10,32,32,9,9,114,101,116,117,114,110,32,116,114,117,101,10,32,32,9,101,110,100,41,10,32,32,101,110,100,10,32,32,10,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,102,108,97,116,116,101,110,40,116,98,108,41,10,32,32,9,105,102,32,35,116,98,108,32,61,61,32,49,32,116,104,101,110,10,32,32,9,9,114,101,116,117,114,110,32,116,98,108,91,49,93,10,32,32,9,101,110,100,10,32,32,9,114,101,116,117,114,110,32,116,98,108,10,32,32,101,110,100,10,32,32,10,32,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,102,108,97,116,116,101,110,95,111,114,95,109,97,114,107,40,110,97,109,101,41,10,32,32,9,114,101,116,117,114,110,32,102,117,110,99,116,105,111,110,40,116,98,108,41,10,32,32,9,9,105,102,32,35,116,98,108,32,61,61,32,49,32,116,104,101,110,32,114,101,116,117,114,110,32,116,98,108,91,49,93,32,101,110,100,10,32,32,9,9,116,97,98,108,101,46,105,110,115,101,114,116,40,116,98,108,44,32,49,44,32,110,97,109,101,41,10,32,32,9,9,114,101,116,117,114,110,32,116,98,108,10,32,32,9,101,110,100,10,32,32,101,110,100,10,32,32,10,32,32,108,111,99,97,108,32,98,117,105,108,100,95,103,114,97,109,109,97,114,32,61,32,119,114,97,112,40,102,117,110,99,116,105,111,110,40,41,10,32,32,9,108,111,99,97,108,32,101,114,114,95,109,115,103,32,61,32,34,70,97,105,108,101,100,32,116,111,32,112,97,114,115,101,58,92,110,32,91,37,100,93,32,62,62,32,32,32,32,37,115,32,40,37,100,41,34,10,32,32,10,32,32,9,108,111,99,97,108,32,95,105,110,100,101,110,116,32,61,32,83,116,97,99,107,40,48,41,32,45,45,32,99,117,114,114,101,110,116,32,105,110,100,101,110,116,10,32,32,10,32,32,9,108,111,99,97,108,32,108,97,115,116,95,112,111,115,32,61,32,48,32,45,45,32,117,115,101,100,32,116,111,32,107,110,111,119,32,119,104,101,114,101,32,116,111,32,114,101,112,111,114,116,32,101,114,114,111,114,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,99,104,101,99,107,95,105,110,100,101,110,116,40,115,116,114,44,32,112,111,115,44,32,105,110,100,101,110,116,41,10,32,32,9,9,108,97,115,116,95,112,111,115,32,61,32,112,111,115,10,32,32,9,9,114,101,116,117,114,110,32,95,105,110,100,101,110,116,58,116,111,112,40,41,32,61,61,32,105,110,100,101,110,116,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,97,100,118,97,110,99,101,95,105,110,100,101,110,116,40,115,116,114,44,32,112,111,115,44,32,105,110,100,101,110,116,41,10,32,32,9,9,105,102,32,105,110,100,101,110,116,32,62,32,95,105,110,100,101,110,116,58,116,111,112,40,41,32,116,104,101,110,10,32,32,9,9,9,95,105,110,100,101,110,116,58,112,117,115,104,40,105,110,100,101,110,116,41,10,32,32,9,9,9,114,101,116,117,114,110,32,116,114,117,101,10,32,32,9,9,101,110,100,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,112,117,115,104,95,105,110,100,101,110,116,40,115,116,114,44,32,112,111,115,44,32,105,110,100,101,110,116,41,10,32,32,9,9,95,105,110,100,101,110,116,58,112,117,115,104,40,105,110,100,101,110,116,41,10,32,32,9,9,114,101,116,117,114,110,32,116,114,117,101,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,112,111,112,95,105,110,100,101,110,116,40,115,116,114,44,32,112,111,115,41,10,32,32,9,9,105,102,32,110,111,116,32,95,105,110,100,101,110,116,58,112,111,112,40,41,32,116,104,101,110,32,101,114,114,111,114,40,34,117,110,101,120,112,101,99,116,101,100,32,111,117,116,100,101,110,116,34,41,32,101,110,100,10,32,32,9,9,114,101,116,117,114,110,32,116,114,117,101,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,107,101,121,119,111,114,100,115,32,61,32,123,125,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,107,101,121,40,99,104,97,114,115,41,10,32,32,9,9,107,101,121,119,111,114,100,115,91,99,104,97,114,115,93,32,61,32,116,114,117,101,10,32,32,9,9,114,101,116,117,114,110,32,83,112,97,99,101,32,42,32,99,104,97,114,115,32,42,32,45,65,108,112,104,97,78,117,109,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,111,112,40,119,111,114,100,41,10,32,32,9,9,108,111,99,97,108,32,112,97,116,116,32,61,32,83,112,97,99,101,32,42,32,67,40,119,111,114,100,41,10,32,32,9,9,105,102,32,119,111,114,100,58,109,97,116,99,104,40,34,94,37,119,42,36,34,41,32,116,104,101,110,10,32,32,9,9,9,107,101,121,119,111,114,100,115,91,119,111,114,100,93,32,61,32,116,114,117,101,10,32,32,9,9,9,112,97,116,116,32,61,32,112,97,116,116,32,42,32,45,65,108,112,104,97,78,117,109,10,32,32,9,9,101,110,100,10,32,32,9,9,114,101,116,117,114,110,32,112,97,116,116,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,115,121,109,40,99,104,97,114,115,41,10,32,32,9,9,114,101,116,117,114,110,32,83,112,97,99,101,32,42,32,99,104,97,114,115,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,115,121,109,120,40,99,104,97,114,115,41,10,32,32,9,9,114,101,116,117,114,110,32,99,104,97,114,115,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,102,108,97,116,116,101,110,95,102,117,110,99,40,99,97,108,108,101,101,44,32,97,114,103,115,41,10,32,32,9,9,105,102,32,35,97,114,103,115,32,61,61,32,48,32,116,104,101,110,32,114,101,116,117,114,110,32,99,97,108,108,101,101,32,101,110,100,10,32,32,10,32,32,9,9,97,114,103,115,32,61,32,123,34,99,97,108,108,34,44,32,97,114,103,115,125,10,32,32,9,9,105,102,32,110,116,121,112,101,40,99,97,108,108,101,101,41,32,61,61,32,34,99,104,97,105,110,34,32,116,104,101,110,10,32,32,9,9,9,45,45,32,99,104,101,99,107,32,102,111,114,32,99,111,108,111,110,32,115,116,117,98,32,116,104,97,116,32,110,101,101,100,115,32,97,114,103,117,109,101,110,116,115,10,32,32,9,9,9,105,102,32,110,116,121,112,101,40,99,97,108,108,101,101,91,35,99,97,108,108,101,101,93,41,32,61,61,32,34,99,111,108,111,110,95,115,116,117,98,34,32,116,104,101,110,10,32,32,9,9,9,9,108,111,99,97,108,32,115,116,117,98,32,61,32,99,97,108,108,101,101,91,35,99,97,108,108,101,101,93,10,32,32,9,9,9,9,115,116,117,98,91,49,93,32,61,32,34,99,111,108,111,110,34,10,32,32,9,9,9,9,116,97,98,108,101,46,105,110,115,101,114,116,40,115,116,117,98,44,32,97,114,103,115,41,10,32,32,9,9,9,101,108,115,101,10,32,32,9,9,9,9,116,97,98,108,101,46,105,110,115,101,114,116,40,99,97,108,108,101,101,44,32,97,114,103,115,41,10,32,32,9,9,9,101,110,100,10,32,32,10,32,32,9,9,9,114,101,116,117,114,110,32,99,97,108,108,101,101,10,32,32,9,9,101,110,100,10,32,32,10,32,32,9,9,114,101,116,117,114,110,32,123,34,99,104,97,105,110,34,44,32,99,97,108,108,101,101,44,32,97,114,103,115,125,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,119,114,97,112,95,102,117,110,99,95,97,114,103,40,118,97,108,117,101,41,10,32,32,9,9,114,101,116,117,114,110,32,123,34,99,97,108,108,34,44,32,123,118,97,108,117,101,125,125,10,32,32,9,101,110,100,10,32,32,10,32,32,9,45,45,32,109,97,107,101,115,32,115,117,114,101,32,116,104,101,32,108,97,115,116,32,105,116,101,109,32,105,110,32,97,32,99,104,97,105,110,32,105,115,32,97,110,32,105,110,100,101,120,10,32,32,9,108,111,99,97,108,32,95,97,115,115,105,103,110,97,98,108,101,32,61,32,123,32,105,110,100,101,120,32,61,32,116,114,117,101,44,32,100,111,116,32,61,32,116,114,117,101,44,32,115,108,105,99,101,32,61,32,116,114,117,101,32,125,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,99,104,101,99,107,95,97,115,115,105,103,110,97,98,108,101,40,115,116,114,44,32,112,111,115,44,32,118,97,108,117,101,41,10,32,32,9,9,105,102,32,110,116,121,112,101,40,118,97,108,117,101,41,32,61,61,32,34,99,104,97,105,110,34,32,97,110,100,32,95,97,115,115,105,103,110,97,98,108,101,91,110,116,121,112,101,40,118,97,108,117,101,91,35,118,97,108,117,101,93,41,93,10,32,32,9,9,9,111,114,32,116,121,112,101,40,118,97,108,117,101,41,32,61,61,32,34,115,116,114,105,110,103,34,10,32,32,9,9,116,104,101,110,10,32,32,9,9,9,114,101,116,117,114,110,32,116,114,117,101,44,32,118,97,108,117,101,10,32,32,9,9,101,110,100,10,32,32,9,9,114,101,116,117,114,110,32,102,97,108,115,101,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,83,105,109,112,108,101,78,97,109,101,32,61,32,78,97,109,101,32,45,45,32,102,111,114,32,116,97,98,108,101,32,107,101,121,10,32,32,10,32,32,9,45,45,32,109,97,107,101,32,115,117,114,101,32,110,97,109,101,32,105,115,32,110,111,116,32,97,32,107,101,121,119,111,114,100,10,32,32,9,108,111,99,97,108,32,78,97,109,101,32,61,32,67,109,116,40,78,97,109,101,44,32,102,117,110,99,116,105,111,110,40,115,116,114,44,32,112,111,115,44,32,110,97,109,101,41,10,32,32,9,9,105,102,32,107,101,121,119,111,114,100,115,91,110,97,109,101,93,32,116,104,101,110,32,114,101,116,117,114,110,32,102,97,108,115,101,32,101,110,100,10,32,32,9,9,114,101,116,117,114,110,32,116,114,117,101,10,32,32,9,101,110,100,41,32,47,32,116,114,105,109,10,32,32,10,32,32,9,108,111,99,97,108,32,78,97,109,101,32,61,32,115,121,109,34,64,34,32,42,32,78,97,109,101,32,47,32,109,97,114,107,34,115,101,108,102,34,32,43,32,78,97,109,101,32,43,32,83,112,97,99,101,32,42,32,34,46,46,46,34,32,47,32,116,114,105,109,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,115,105,109,112,108,101,95,115,116,114,105,110,103,40,100,101,108,105,109,44,32,120,41,10,32,32,9,9,114,101,116,117,114,110,32,67,40,115,121,109,120,40,100,101,108,105,109,41,41,32,42,32,67,40,40,80,40,39,92,92,39,46,46,100,101,108,105,109,41,32,43,10,32,32,9,9,9,34,92,92,92,92,34,32,43,10,32,32,9,9,9,40,49,32,45,32,83,40,39,92,114,92,110,39,46,46,100,101,108,105,109,41,41,41,94,48,41,32,42,32,115,121,109,40,100,101,108,105,109,41,32,47,32,109,97,114,107,34,115,116,114,105,110,103,34,10,32,32,9,101,110,100,10,32,32,10,32,32,9,45,45,32,119,114,97,112,32,105,102,32,115,116,97,116,101,109,101,110,116,32,105,102,32,116,104,101,114,101,32,105,115,32,97,32,99,111,110,100,105,116,105,111,110,97,108,32,100,101,99,111,114,97,116,111,114,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,119,114,97,112,95,105,102,40,115,116,109,44,32,99,111,110,100,41,10,32,32,9,9,105,102,32,99,111,110,100,32,116,104,101,110,10,32,32,9,9,9,108,111,99,97,108,32,112,97,115,115,44,32,102,97,105,108,32,61,32,117,110,112,97,99,107,40,99,111,110,100,41,10,32,32,9,9,9,105,102,32,102,97,105,108,32,116,104,101,110,32,102,97,105,108,32,61,32,123,34,101,108,115,101,34,44,32,123,102,97,105,108,125,125,32,101,110,100,10,32,32,9,9,9,114,101,116,117,114,110,32,123,34,105,102,34,44,32,99,111,110,100,91,50,93,44,32,123,115,116,109,125,44,32,102,97,105,108,125,10,32,32,9,9,101,110,100,10,32,32,9,9,114,101,116,117,114,110,32,115,116,109,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,119,114,97,112,95,100,101,99,111,114,97,116,111,114,40,115,116,109,44,32,100,101,99,41,10,32,32,9,9,105,102,32,110,111,116,32,100,101,99,32,116,104,101,110,32,114,101,116,117,114,110,32,115,116,109,32,101,110,100,10,32,32,10,32,32,9,9,108,111,99,97,108,32,97,114,103,32,61,32,123,115,116,109,44,32,100,101,99,125,10,32,32,10,32,32,9,9,105,102,32,100,101,99,91,49,93,32,61,61,32,34,105,102,34,32,116,104,101,110,10,32,32,9,9,9,108,111,99,97,108,32,95,44,32,99,111,110,100,44,32,102,97,105,108,32,61,32,117,110,112,97,99,107,40,100,101,99,41,10,32,32,9,9,9,105,102,32,102,97,105,108,32,116,104,101,110,32,102,97,105,108,32,61,32,123,34,101,108,115,101,34,44,32,123,102,97,105,108,125,125,32,101,110,100,10,32,32,9,9,9,115,116,109,32,61,32,123,34,105,102,34,44,32,99,111,110,100,44,32,123,115,116,109,125,44,32,102,97,105,108,125,10,32,32,9,9,101,108,115,101,105,102,32,100,101,99,91,49,93,32,61,61,32,34,99,111,109,112,114,101,104,101,110,115,105,111,110,34,32,116,104,101,110,10,32,32,9,9,9,108,111,99,97,108,32,95,44,32,99,108,97,117,115,101,115,32,61,32,117,110,112,97,99,107,40,100,101,99,41,10,32,32,9,9,9,115,116,109,32,61,32,123,34,99,111,109,112,114,101,104,101,110,115,105,111,110,34,44,32,115,116,109,44,32,99,108,97,117,115,101,115,125,10,32,32,9,9,101,110,100,10,32,32,10,32,32,9,9,114,101,116,117,114,110,32,115,116,109,10,32,32,9,101,110,100,10,32,32,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,99,104,101,99,107,95,108,117,97,95,115,116,114,105,110,103,40,115,116,114,44,32,112,111,115,44,32,114,105,103,104,116,44,32,108,101,102,116,41,10,32,32,9,9,114,101,116,117,114,110,32,35,108,101,102,116,32,61,61,32,35,114,105,103,104,116,10,32,32,9,101,110,100,10,32,32,10,32,32,9,45,45,32,58,110,97,109,101,32,105,110,32,116,97,98,108,101,32,108,105,116,101,114,97,108,10,32,32,9,108,111,99,97,108,32,102,117,110,99,116,105,111,110,32,115,101,108,102,95,97,115,115,105,103,110,40,110,97,109,101,41,10,32,32,9,9,114,101,116,117,114,110,32,123,110,97,109,101,44,32,110,97,109,101,125,10,32,32,9,101,110,100,10,32,32,10,32,32,9,45,45,32,99,97,110,39,116,32,104,97,118,101,32,80,40,102,97,108,115,101,41,32,98,101,99,97,117,115,101,32,105,116,32,99,97,117,115,101,115,32,112,114,101,99,101,100,105,110,103,32,112,97,116,116,101,114,110,115,32,110,111,116,32,116,111,32,114,117,110,10,32,32,9,108,111,99,97,108,32,67,117,116,32,61,32,80,40,102,117,110,99,116,105,111,110,40,41,32,114,101,116,117,114,110,32,102,97,108,115,101,32,101,110,100,41,10,32,32,10,32,32,9,108,111,99,97,108,32,103,32,61,32,108,112,101,103,46,80,123,10,32,32,9,9,70,105,108,101,44,10,32,32,9,9,70,105,108,101,32,61,32,83,104,101,98,97,110,103,94,45,49,32,42,32,40,66,108,111,99,107,32,43,32,67,116,34,34,41,44,10,32,32,9,9,66,108,111,99,107,32,61,32,67,116,40,76,105,110,101,32,42,32,40,66,114,101,97,107,94,49,32,42,32,76,105,110,101,41,94,48,41,44,10,32,32,9,9,67,104,101,99,107,73,110,100,101,110,116,32,61,32,67,109,116,40,73,110,100,101,110,116,44,32,99,104,101,99,107,95,105,110,100,101,110,116,41,44,32,45,45,32,118,97,108,105,100,97,116,101,115,32,108,105,110,101,32,105,115,32,105,110,32,99,111,114,114,101,99,116,32,105,110,100,101,110,116,10,32,32,9,9,76,105,110,101,32,61,32,67,104,101,99,107,73,110,100,101,110,116,32,42,32,83,116,97,116,101,109,101,110,116,32,43,32,83,112,97,99,101,32,42,32,35,66,114,101,97,107,44,10,32,32,10,32,32,9,9,83,116,97,116,101,109,101,110,116,32,61,32,40,73,109,112,111,114,116,32,43,32,87,104,105,108,101,32,43,32,87,105,116,104,32,43,32,70,111,114,32,43,32,70,111,114,69,97,99,104,32,43,32,82,101,116,117,114,110,10,32,32,9,9,9,43,32,67,108,97,115,115,68,101,99,108,32,43,32,69,120,112,111,114,116,32,43,32,66,114,101,97,107,76,111,111,112,32,43,32,67,116,40,69,120,112,76,105,115,116,41,32,47,32,102,108,97,116,116,101,110,95,111,114,95,109,97,114,107,34,101,120,112,108,105,115,116,34,32,42,32,83,112,97,99,101,41,32,42,32,40,40,10,32,32,9,9,9,9,45,45,32,115,116,97,116,101,109,101,110,116,32,100,101,99,111,114,97,116,111,114,115,10,32,32,9,9,9,9,107,101,121,34,105,102,34,32,42,32,69,120,112,32,42,32,40,107,101,121,34,101,108,115,101,34,32,42,32,69,120,112,41,94,45,49,32,42,32,83,112,97,99,101,32,47,32,109,97,114,107,34,105,102,34,32,43,10,32,32,9,9,9,9,67,111,109,112,73,110,110,101,114,32,47,32,109,97,114,107,34,99,111,109,112,114,101,104,101,110,115,105,111,110,34,10,32,32,9,9,9,41,32,42,32,83,112,97,99,101,41,94,45,49,32,47,32,119,114,97,112,95,100,101,99,111,114,97,116,111,114,44,10,32,32,10,32,32,9,9,66,111,100,121,32,61,32,83,112,97,99,101,94,45,49,32,42,32,66,114,101,97,107,32,42,32,69,109,112,116,121,76,105,110,101,94,48,32,42,32,73,110,66,108,111,99,107,32,43,32,67,116,40,83,116,97,116,101,109,101,110,116,41,44,32,45,45,32,101,105,116,104,101,114,32,97,32,115,116,97,116,101,109,101,110,116,44,32,111,114,32,97,110,32,105,110,100,101,110,116,101,100,32,98,108,111,99,107,10,32,32,10,32,32,9,9,65,100,118,97,110,99,101,32,61,32,35,67,109,116,40,73,110,100,101,110,116,44,32,97,100,118,97,110,99,101,95,105,110,100,101,110,116,41,44,32,45,45,32,65,100,118,97,110,99,101,115,32,116,104,101,32,105,110,100,101,110,116,44,32,103,105,118,101,115,32,98,97,99,107,32,119,104,105,116,101,115,112,97,99,101,32,102,111,114,32,67,104,101,99,107,73,110,100,101,110,116,10,32,32,9,9,80,117,115,104,73,110,100,101,110,116,32,61,32,67,109,116,40,73,110,100,101,110,116,44,32,112,117,115,104,95,105,110,100,101,110,116,41,44,10,32,32,9,9,80,111,112,73,110,100,101,110,116,32,61,32,67,109,116,40,34,34,44,32,112,111,112,95,105,110,100,101,110,116,41,44,10,32,32,9,9,73,110,66,108,111,99,107,32,61,32,65,100,118,97,110,99,101,32,42,32,66,108,111,99,107,32,42,32,80,111,112,73,110,100,101,110,116,44,10,32,32,10,32,32,9,9,73,109,112,111,114,116,32,61,32,107,101,121,34,105,109,112,111,114,116,34,32,42,32,32,67,116,40,73,109,112,111,114,116,78,97,109,101,76,105,115,116,41,32,42,32,107,101,121,34,102,114,111,109,34,32,42,32,69,120,112,32,47,32,109,97,114,107,34,105,109,112,111,114,116,34,44,32,10,32,32,9,9,73,109,112,111,114,116,78,97,109,101,32,61,32,40,115,121,109,34,92,92,34,32,42,32,67,116,40,67,99,34,58,34,32,42,32,78,97,109,101,41,32,43,32,78,97,109,101,41,44,10,32,32,9,9,73,109,112,111,114,116,78,97,109,101,76,105,115,116,32,61,32,73,109,112,111,114,116,78,97,109,101,32,42,32,40,115,121,109,34,44,34,32,42,32,73,109,112,111,114,116,78,97,109,101,41,94,48,44,10,32,32,10,32,32,9,9,78,97,109,101,76,105,115,116,32,61,32,78,97,109,101,32,42,32,40,115,121,109,34,44,34,32,42,32,78,97,109,101,41,94,48,44,10,32,32,10,32,32,9,9,66,114,101,97,107,76,111,111,112,32,61,32,67,116,40,107,101,121,34,98,114,101,97,107,34,47,116,114,105,109,41,44,10,32,32,10,32,32,9,9,82,101,116,117,114,110,32,61,32,107,101,121,34,114,101,116,117,114,110,34,32,42,32,40,69,120,112,76,105,115,116,76,111,119,47,109,97,114,107,34,101,120,112,108,105,115,116,34,32,43,32,67,34,34,41,32,47,32,109,97,114,107,34,114,101,116,117,114,110,34,44,10,32,32,10,32,32,9,9,87,105,116,104,32,61,32,107,101,121,34,119,105,116,104,34,32,42,32,69,120,112,32,42,32,107,101,121,34,100,111,34,94,45,49,32,42,32,66,111,100,121,32,47,32,109,97,114,107,34,119,105,116,104,34,44,10,32,32,10,32,32,9,9,73,102,32,61,32,107,101,121,34,105,102,34,32,42,32,69,120,112,32,42,32,107,101,121,34,116,104,101,110,34,94,45,49,32,42,32,66,111,100,121,32,42,10,32,32,9,9,9,40,40,66,114,101,97,107,32,42,32,67,104,101,99,107,73,110,100,101,110,116,41,94,45,49,32,42,32,69,109,112,116,121,76,105,110,101,94,48,32,42,32,107,101,121,34,101,108,115,101,105,102,34,32,42,32,69,120,112,32,42,32,107,101,121,34,116,104,101,110,34,94,45,49,32,42,32,66,111,100,121,32,47,32,109,97,114,107,34,101,108,115,101,105,102,34,41,94,48,32,42,10,32,32,9,9,9,40,40,66,114,101,97,107,32,42,32,67,104,101,99,107,73,110,100,101,110,116,41,94,45,49,32,42,32,69,109,112,116,121,76,105,110,101,94,48,32,42,32,107,101,121,34,101,108,115,101,34,32,42,32,66,111,100,121,32,47,32,109,97,114,107,34,101,108,115,101,34,41,94,45,49,32,47,32,109,97,114,107,34,105,102,34,44,10,32,32,10,32,32,9,9,87,104,105,108,101,32,61,32,107,101,121,34,119,104,105,108,101,34,32,42,32,69,120,112,32,42,32,107,101,121,34,100,111,34,94,45,49,32,42,32,66,111,100,121,32,47,32,109,97,114,107,34,119,104,105,108,101,34,44,10,32,32,10,32,32,9,9,70,111,114,32,61,32,107,101,121,34,102,111,114,34,32,42,32,40,78,97,109,101,32,42,32,115,121,109,34,61,34,32,42,32,67,116,40,69,120,112,32,42,32,115,121,109,34,44,34,32,42,32,69,120,112,32,42,32,40,115,121,109,34,44,34,32,42,32,69,120,112,41,94,45,49,41,41,32,42,10,32,32,9,9,9,107,101,121,34,100,111,34,94,45,49,32,42,32,66,111,100,121,32,47,32,109,97,114,107,34,102,111,114,34,44,10,32,32,10,32,32,9,9,70,111,114,69,97,99,104,32,61,32,107,101,121,34,102,111,114,34,32,42,32,67,116,40,78,97,109,101,76,105,115,116,41,32,42,32,107,101,121,34,105,110,34,32,42,32,40,115,121,109,34,42,34,32,42,32,69,120,112,32,47,32,109,97,114,107,34,117,110,112,97,99,107,34,32,43,32,69,120,112,41,32,42,32,107,101,121,34,100,111,34,94,45,49,32,42,32,66,111,100,121,32,47,32,109,97,114,107,34,102,111,114,101,97,99,104,34,44,10,32,32,10,32,32,9,9,67,111,109,112,114,101,104,101,110,115,105,111,110,32,61,32,115,121,109,34,91,34,32,42,32,69,120,112,32,42,32,67,111,109,112,73,110,110,101,114,32,42,32,115,121,109,34,93,34,32,47,32,109,97,114,107,34,99,111,109,112,114,101,104,101,110,115,105,111,110,34,44,10,32,32,10,32,32,9,9,67,111,109,112,73,110,110,101,114,32,61,32,67,116,40,67,111,109,112,70,111,114,32,42,32,67,111,109,112,67,108,97,117,115,101,94,48,41,44,10,32,32,9,9,67,111,109,112,70,111,114,32,61,32,107,101,121,34,102,111,114,34,32,42,32,67,116,40,78,97,109,101,76,105,115,116,41,32,42,32,107,101,121,34,105,110,34,32,42,32,40,115,121,109,34,42,34,32,42,32,69,120,112,32,47,32,109,97,114,107,34,117,110,112,97,99,107,34,32,43,32,69,120,112,41,32,47,32,109,97,114,107,34,102,111,114,34,44,10,32,32,9,9,67,111,109,112,67,108,97,117,115,101,32,61,32,67,111,109,112,70,111,114,32,43,32,107,101,121,34,119,104,101,110,34,32,42,32,69,120,112,32,47,32,109,97,114,107,34,119,104,101,110,34,44,10,32,32,10,32,32,9,9,65,115,115,105,103,110,32,61,32,67,116,40,65,115,115,105,103,110,97,98,108,101,76,105,115,116,41,32,42,32,115,121,109,34,61,34,32,42,32,40,67,116,40,87,105,116,104,32,43,32,73,102,41,32,43,32,67,116,40,84,97,98,108,101,66,108,111,99,107,32,43,32,69,120,112,76,105,115,116,76,111,119,41,41,32,47,32,109,97,114,107,34,97,115,115,105,103,110,34,44,10,32,32,9,9,85,112,100,97,116,101,32,61,32,65,115,115,105,103,110,97,98,108,101,32,42,32,40,40,115,121,109,34,46,46,61,34,32,43,32,115,121,109,34,43,61,34,32,43,32,115,121,109,34,45,61,34,32,43,32,115,121,109,34,42,61,34,32,43,32,115,121,109,34,47,61,34,32,43,32,115,121,109,34,37,61,34,41,47,116,114,105,109,41,32,42,32,69,120,112,32,47,32,109,97,114,107,34,117,112,100,97,116,101,34,44,10,32,32,10,32,32,9,9,45,45,32,119,101,32,99,97,110,32,105,103,110,111,114,101,32,112,114,101,99,101,100,101,110,99,101,32,102,111,114,32,110,111,119,10,32,32,9,9,79,116,104,101,114,79,112,115,32,61,32,111,112,34,111,114,34,32,43,32,111,112,34,97,110,100,34,32,43,32,111,112,34,60,61,34,32,43,32,111,112,34,62,61,34,32,43,32,111,112,34,126,61,34,32,43,32,111,112,34,33,61,34,32,43,32,111,112,34,61,61,34,32,43,32,111,112,34,46,46,34,32,43,32,111,112,34,60,34,32,43,32,111,112,34,62,34,44,10,32,32,10,32,32,9,9,65,115,115,105,103,110,97,98,108,101,32,61,32,67,109,116,40,68,111,116,67,104,97,105,110,32,43,32,67,104,97,105,110,44,32,99,104,101,99,107,95,97,115,115,105,103,110,97,98,108,101,41,32,43,32,78,97,109,101,44,10,32,32,9,9,65,115,115,105,103,110,97,98,108,101,76,105,115,116,32,61,32,65,115,115,105,103,110,97,98,108,101,32,42,32,40,115,121,109,34,44,34,32,42,32,65,115,115,105,103,110,97,98,108,101,41,94,48,44,10,32,32,10,32,32,9,9,69,120,112,32,61,32,67,116,40,86,97,108,117,101,32,42,32,40,40,79,116,104,101,114,79,112,115,32,43,32,70,97,99,116,111,114,79,112,32,43,32,84,101,114,109,79,112,41,32,42,32,86,97,108,117,101,41,94,48,41,32,47,32,102,108,97,116,116,101,110,95,111,114,95,109,97,114,107,34,101,120,112,34,44,10,32,32,10,32,32,9,9,45,45,32,69,120,112,32,61,32,67,116,40,70,97,99,116,111,114,32,42,32,40,79,116,104,101,114,79,112,115,32,42,32,70,97,99,116,111,114,41,94,48,41,32,47,32,102,108,97,116,116,101,110,95,111,114,95,109,97,114,107,34,101,120,112,34,44,10,32,32,9,9,45,45,32,70,97,99,116,111,114,32,61,32,67,116,40,84,101,114,109,32,42,32,40,70,97,99,116,111,114,79,112,32,42,32,84,101,114,109,41,94,48,41,32,47,32,102,108,97,116,116,101,110,95,111,114,95,109,97,114,107,34,101,120,112,34,44,10,32,32,9,9,45,45,32,84,101,114,109,32,61,32,67,116,40,86,97,108,117,101,32,42,32,40,84,101,114,109,79,112,32,42,32,86,97,108,117,101,41,94,48,41,32,47,32,102,108,97,116,116,101,110,95,111,114,95,109,97,114,107,34,101,120,112,34,44,10,32,32,10,32,32,9,9,83,105,109,112,108,101,86,97,108,117,101,32,61,10,32,32,9,9,9,73,102,32,43,10,32,32,9,9,9,87,105,116,104,32,43,10,32,32,9,9,9,70,111,114,69,97,99,104,32,43,32,70,111,114,32,43,32,87,104,105,108,101,32,43,10,32,32,9,9,9,115,121,109,34,45,34,32,42,32,45,83,111,109,101,83,112,97,99,101,32,42,32,69,120,112,32,47,32,109,97,114,107,34,109,105,110,117,115,34,32,43,10,32,32,9,9,9,115,121,109,34,35,34,32,42,32,69,120,112,32,47,32,109,97,114,107,34,108,101,110,103,116,104,34,32,43,10,32,32,9,9,9,107,101,121,34,110,111,116,34,32,42,32,69,120,112,32,47,32,109,97,114,107,34,110,111,116,34,32,43,10,32,32,9,9,9,84,97,98,108,101,76,105,116,32,43,10,32,32,9,9,9,67,111,109,112,114,101,104,101,110,115,105,111,110,32,43,10,32,32,9,9,9,65,115,115,105,103,110,32,43,32,85,112,100,97,116,101,32,43,32,70,117,110,76,105,116,32,43,32,83,116,114,105,110,103,32,43,10,32,32,9,9,9,78,117,109,44,10,32,32,10,32,32,9,9,67,104,97,105,110,86,97,108,117,101,32,61,32,45,45,32,97,32,102,117,110,99,116,105,111,110,32,99,97,108,108,32,111,114,32,97,110,32,111,98,106,101,99,116,32,97,99,99,101,115,115,10,32,32,9,9,9,40,40,67,104,97,105,110,32,43,32,68,111,116,67,104,97,105,110,32,43,32,67,97,108,108,97,98,108,101,41,32,42,32,67,116,40,73,110,118,111,107,101,65,114,103,115,94,45,49,41,41,32,47,32,102,108,97,116,116,101,110,95,102,117,110,99,44,10,32,32,10,32,32,9,9,86,97,108,117,101,32,61,32,112,111,115,40,10,32,32,9,9,9,83,105,109,112,108,101,86,97,108,117,101,32,43,10,32,32,9,9,9,67,116,40,75,101,121,86,97,108,117,101,76,105,115,116,41,32,47,32,109,97,114,107,34,116,97,98,108,101,34,32,43,10,32,32,9,9,9,67,104,97,105,110,86,97,108,117,101,41,44,10,32,32,10,32,32,9,9,83,108,105,99,101,86,97,108,117,101,32,61,32,83,105,109,112,108,101,86,97,108,117,101,32,43,32,67,104,97,105,110,86,97,108,117,101,44,10,32,32,10,32,32,9,9,83,116,114,105,110,103,32,61,32,83,112,97,99,101,32,42,32,68,111,117,98,108,101,83,116,114,105,110,103,32,43,32,83,112,97,99,101,32,42,32,83,105,110,103,108,101,83,116,114,105,110,103,32,43,32,76,117,97,83,116,114,105,110,103,44,10,32,32,9,9,83,105,110,103,108,101,83,116,114,105,110,103,32,61,32,115,105,109,112,108,101,95,115,116,114,105,110,103,40,34,39,34,41,44,10,32,32,9,9,68,111,117,98,108,101,83,116,114,105,110,103,32,61,32,115,105,109,112,108,101,95,115,116,114,105,110,103,40,39,34,39,41,44,10,32,32,10,32,32,9,9,76,117,97,83,116,114,105,110,103,32,61,32,67,103,40,76,117,97,83,116,114,105,110,103,79,112,101,110,44,32,34,115,116,114,105,110,103,95,111,112,101,110,34,41,32,42,32,67,98,34,115,116,114,105,110,103,95,111,112,101,110,34,32,42,32,66,114,101,97,107,94,45,49,32,42,10,32,32,9,9,9,67,40,40,49,32,45,32,67,109,116,40,67,40,76,117,97,83,116,114,105,110,103,67,108,111,115,101,41,32,42,32,67,98,34,115,116,114,105,110,103,95,111,112,101,110,34,44,32,99,104,101,99,107,95,108,117,97,95,115,116,114,105,110,103,41,41,94,48,41,32,42,10,32,32,9,9,9,67,40,76,117,97,83,116,114,105,110,103,67,108,111,115,101,41,32,47,32,109,97,114,107,34,115,116,114,105,110,103,34,44,10,32,32,10,32,32,9,9,76,117,97,83,116,114,105,110,103,79,112,101,110,32,61,32,115,121,109,34,91,34,32,42,32,80,34,61,34,94,48,32,42,32,34,91,34,32,47,32,116,114,105,109,44,10,32,32,9,9,76,117,97,83,116,114,105,110,103,67,108,111,115,101,32,61,32,34,93,34,32,42,32,80,34,61,34,94,48,32,42,32,34,93,34,44,10,32,32,10,32,32,9,9,67,97,108,108,97,98,108,101,32,61,32,78,97,109,101,32,43,32,80,97,114,101,110,115,32,47,32,109,97,114,107,34,112,97,114,101,110,115,34,44,10,32,32,9,9,80,97,114,101,110,115,32,61,32,115,121,109,34,40,34,32,42,32,69,120,112,32,42,32,115,121,109,34,41,34,44,10,32,32,10,32,32,9,9,70,110,65,114,103,115,32,61,32,115,121,109,120,34,40,34,32,42,32,67,116,40,69,120,112,76,105,115,116,94,45,49,41,32,42,32,115,121,109,34,41,34,32,43,32,115,121,109,34,33,34,32,42,32,45,80,34,61,34,32,42,32,67,116,34,34,44,10,32,32,10,32,32,9,9,45,45,32,97,32,108,105,115,116,32,111,102,32,102,117,110,99,97,108,108,115,32,97,110,100,32,105,110,100,101,120,115,32,111,110,32,97,32,99,97,108,108,97,98,108,101,10,32,32,9,9,67,104,97,105,110,32,61,32,67,97,108,108,97,98,108,101,32,42,32,40,67,104,97,105,110,73,116,101,109,94,49,32,42,32,67,111,108,111,110,83,117,102,102,105,120,94,45,49,32,43,32,67,111,108,111,110,83,117,102,102,105,120,41,32,47,32,109,97,114,107,34,99,104,97,105,110,34,44,10,32,32,10,32,32,9,9,45,45,32,115,104,111,114,116,104,97,110,100,32,100,111,116,32,99,97,108,108,32,102,111,114,32,117,115,101,32,105,110,32,119,105,116,104,32,115,116,97,116,101,109,101,110,116,10,32,32,9,9,68,111,116,67,104,97,105,110,32,61,10,32,32,9,9,9,40,115,121,109,34,46,34,32,42,32,67,99,40,45,49,41,32,42,32,40,95,78,97,109,101,32,47,32,109,97,114,107,34,100,111,116,34,41,32,42,32,67,104,97,105,110,73,116,101,109,94,48,41,32,47,32,109,97,114,107,34,99,104,97,105,110,34,32,43,32,10,32,32,9,9,9,40,115,121,109,34,92,92,34,32,42,32,67,99,40,45,49,41,32,42,32,40,10,32,32,9,9,9,9,40,95,78,97,109,101,32,42,32,73,110,118,111,107,101,32,47,32,109,97,114,107,34,99,111,108,111,110,34,41,32,42,32,67,104,97,105,110,73,116,101,109,94,48,32,43,32,10,32,32,9,9,9,9,40,95,78,97,109,101,32,47,32,109,97,114,107,34,99,111,108,111,110,95,115,116,117,98,34,41,10,32,32,9,9,9,41,41,32,47,32,109,97,114,107,34,99,104,97,105,110,34,44,10,32,32,10,32,32,9,9,67,104,97,105,110,73,116,101,109,32,61,32,10,32,32,9,9,9,73,110,118,111,107,101,32,43,32,10,32,32,9,9,9,83,108,105,99,101,32,43,10,32,32,9,9,9,115,121,109,120,34,91,34,32,42,32,69,120,112,47,109,97,114,107,34,105,110,100,101,120,34,32,42,32,115,121,109,34,93,34,32,43,10,32,32,9,9,9,115,121,109,120,34,46,34,32,42,32,95,78,97,109,101,47,109,97,114,107,34,100,111,116,34,32,43,10,32,32,9,9,9,67,111,108,111,110,67,97,108,108,44,10,32,32,10,32,32,9,9,83,108,105,99,101,32,61,32,115,121,109,120,34,91,34,32,42,32,40,83,108,105,99,101,86,97,108,117,101,32,43,32,67,99,40,49,41,41,32,42,32,115,121,109,34,58,34,32,42,32,40,83,108,105,99,101,86,97,108,117,101,32,43,32,67,99,34,34,41,32,32,42,10,32,32,9,9,9,40,115,121,109,34,58,34,32,42,32,83,108,105,99,101,86,97,108,117,101,41,94,45,49,32,42,115,121,109,34,93,34,32,47,32,109,97,114,107,34,115,108,105,99,101,34,44,10,32,32,10,32,32,9,9,67,111,108,111,110,67,97,108,108,32,61,32,115,121,109,120,34,92,92,34,32,42,32,40,95,78,97,109,101,32,42,32,73,110,118,111,107,101,41,32,47,32,109,97,114,107,34,99,111,108,111,110,34,44,10,32,32,9,9,67,111,108,111,110,83,117,102,102,105,120,32,61,32,115,121,109,120,34,92,92,34,32,42,32,95,78,97,109,101,32,47,32,109,97,114,107,34,99,111,108,111,110,95,115,116,117,98,34,44,10,32,32,10,32,32,9,9,73,110,118,111,107,101,32,61,32,70,110,65,114,103,115,47,109,97,114,107,34,99,97,108,108,34,32,43,10,32,32,9,9,9,83,105,110,103,108,101,83,116,114,105,110,103,32,47,32,119,114,97,112,95,102,117,110,99,95,97,114,103,32,43,10,32,32,9,9,9,68,111,117,98,108,101,83,116,114,105,110,103,32,47,32,119,114,97,112,95,102,117,110,99,95,97,114,103,44,10,32,32,10,32,32,9,9,84,97,98,108,101,86,97,108,117,101,32,61,32,75,101,121,86,97,108,117,101,32,43,32,67,116,40,69,120,112,41,44,10,32,32,10,32,32,9,9,84,97,98,108,101,76,105,116,32,61,32,115,121,109,34,123,34,32,42,32,67,116,40,10,32,32,9,9,9,9,84,97,98,108,101,86,97,108,117,101,76,105,115,116,94,45,49,32,42,32,115,121,109,34,44,34,94,45,49,32,42,10,32,32,9,9,9,9,40,83,112,97,99,101,66,114,101,97,107,32,42,32,84,97,98,108,101,76,105,116,76,105,110,101,32,42,32,40,115,121,109,34,44,34,94,45,49,32,42,32,83,112,97,99,101,66,114,101,97,107,32,42,32,84,97,98,108,101,76,105,116,76,105,110,101,41,94,48,32,42,32,115,121,109,34,44,34,94,45,49,41,94,45,49,10,32,32,9,9,9,41,32,42,32,87,104,105,116,101,32,42,32,115,121,109,34,125,34,32,47,32,109,97,114,107,34,116,97,98,108,101,34,44,10,32,32,10,32,32,9,9,84,97,98,108,101,86,97,108,117,101,76,105,115,116,32,61,32,84,97,98,108,101,86,97,108,117,101,32,42,32,40,115,121,109,34,44,34,32,42,32,84,97,98,108,101,86,97,108,117,101,41,94,48,44,10,32,32,9,9,84,97,98,108,101,76,105,116,76,105,110,101,32,61,32,80,117,115,104,73,110,100,101,110,116,32,42,32,40,40,84,97,98,108,101,86,97,108,117,101,76,105,115,116,32,42,32,80,111,112,73,110,100,101,110,116,41,32,43,32,40,80,111,112,73,110,100,101,110,116,32,42,32,67,117,116,41,41,32,43,32,83,112,97,99,101,44,10,32,32,10,32,32,9,9,45,45,32,116,104,101,32,117,110,98,111,117,110,100,101,100,32,116,97,98,108,101,10,32,32,9,9,84,97,98,108,101,66,108,111,99,107,73,110,110,101,114,32,61,32,67,116,40,75,101,121,86,97,108,117,101,76,105,110,101,32,42,32,40,83,112,97,99,101,66,114,101,97,107,94,49,32,42,32,75,101,121,86,97,108,117,101,76,105,110,101,41,94,48,41,44,10,32,32,9,9,84,97,98,108,101,66,108,111,99,107,32,61,32,83,112,97,99,101,66,114,101,97,107,94,49,32,42,32,65,100,118,97,110,99,101,32,42,32,84,97,98,108,101,66,108,111,99,107,73,110,110,101,114,32,42,32,80,111,112,73,110,100,101,110,116,32,47,32,109,97,114,107,34,116,97,98,108,101,34,44,10,32,32,10,32,32,9,9,67,108,97,115,115,68,101,99,108,32,61,32,107,101,121,34,99,108,97,115,115,34,32,42,32,78,97,109,101,32,42,32,40,107,101,121,34,101,120,116,101,110,100,115,34,32,42,32,69,120,112,32,43,32,67,34,34,41,94,45,49,32,42,32,84,97,98,108,101,66,108,111,99,107,32,47,32,109,97,114,107,34,99,108,97,115,115,34,44,10,32,32,9,9,69,120,112,111,114,116,32,61,32,107,101,121,34,101,120,112,111,114,116,34,32,42,32,67,116,40,78,97,109,101,76,105,115,116,41,32,47,32,109,97,114,107,34,101,120,112,111,114,116,34,44,10,32,32,10,32,32,9,9,75,101,121,86,97,108,117,101,32,61,32,40,115,121,109,34,58,34,32,42,32,78,97,109,101,41,32,47,32,115,101,108,102,95,97,115,115,105,103,110,32,43,32,67,116,40,40,83,105,109,112,108,101,78,97,109,101,32,43,32,115,121,109,34,91,34,32,42,32,69,120,112,32,42,32,115,121,109,34,93,34,41,32,42,32,115,121,109,120,34,58,34,32,42,32,40,69,120,112,32,43,32,84,97,98,108,101,66,108,111,99,107,41,41,44,10,32,32,9,9,75,101,121,86,97,108,117,101,76,105,115,116,32,61,32,75,101,121,86,97,108,117,101,32,42,32,40,115,121,109,34,44,34,32,42,32,75,101,121,86,97,108,117,101,41,94,48,44,10,32,32,9,9,75,101,121,86,97,108,117,101,76,105,110,101,32,61,32,67,104,101,99,107,73,110,100,101,110,116,32,42,32,75,101,121,86,97,108,117,101,76,105,115,116,32,42,32,115,121,109,34,44,34,94,45,49,44,10,32,32,10,32,32,9,9,70,110,65,114,103,115,68,101,102,32,61,32,115,121,109,34,40,34,32,42,32,67,116,40,70,110,65,114,103,68,101,102,76,105,115,116,94,45,49,41,32,42,10,32,32,9,9,9,40,107,101,121,34,117,115,105,110,103,34,32,42,32,67,116,40,78,97,109,101,76,105,115,116,32,43,32,83,112,97,99,101,32,42,32,34,110,105,108,34,41,32,43,32,67,116,34,34,41,32,42,10,32,32,9,9,9,115,121,109,34,41,34,32,43,32,67,116,34,34,32,42,32,67,116,34,34,44,10,32,32,10,32,32,9,9,70,110,65,114,103,68,101,102,76,105,115,116,32,61,32,32,70,110,65,114,103,68,101,102,32,42,32,40,115,121,109,34,44,34,32,42,32,70,110,65,114,103,68,101,102,41,94,48,44,10,32,32,9,9,70,110,65,114,103,68,101,102,32,61,32,67,116,40,78,97,109,101,32,42,32,40,115,121,109,34,61,34,32,42,32,69,120,112,41,94,45,49,41,44,10,32,32,10,32,32,9,9,70,117,110,76,105,116,32,61,32,70,110,65,114,103,115,68,101,102,32,42,10,32,32,9,9,9,40,115,121,109,34,45,62,34,32,42,32,67,99,34,115,108,105,109,34,32,43,32,115,121,109,34,61,62,34,32,42,32,67,99,34,102,97,116,34,41,32,42,10,32,32,9,9,9,40,66,111,100,121,32,43,32,67,116,34,34,41,32,47,32,109,97,114,107,34,102,110,100,101,102,34,44,10,32,32,10,32,32,9,9,78,97,109,101,76,105,115,116,32,61,32,78,97,109,101,32,42,32,40,115,121,109,34,44,34,32,42,32,78,97,109,101,41,94,48,44,10,32,32,9,9,69,120,112,76,105,115,116,32,61,32,69,120,112,32,42,32,40,115,121,109,34,44,34,32,42,32,69,120,112,41,94,48,44,10,32,32,9,9,69,120,112,76,105,115,116,76,111,119,32,61,32,69,120,112,32,42,32,40,40,115,121,109,34,44,34,32,43,32,115,121,109,34,59,34,41,32,42,32,69,120,112,41,94,48,44,10,32,32,10,32,32,9,9,73,110,118,111,107,101,65,114,103,115,32,61,32,69,120,112,76,105,115,116,32,42,32,40,115,121,109,34,44,34,32,42,32,83,112,97,99,101,66,114,101,97,107,32,42,32,65,100,118,97,110,99,101,32,42,32,65,114,103,66,108,111,99,107,41,94,45,49,44,10,32,32,9,9,65,114,103,66,108,111,99,107,32,61,32,65,114,103,76,105,110,101,32,42,32,40,115,121,109,34,44,34,32,42,32,83,112,97,99,101,66,114,101,97,107,32,42,32,65,114,103,76,105,110,101,41,94,48,32,42,32,80,111,112,73,110,100,101,110,116,44,10,32,32,9,9,65,114,103,76,105,110,101,32,61,32,67,104,101,99,107,73,110,100,101,110,116,32,42,32,69,120,112,76,105,115,116,10,32,32,9,125,10,32,32,10,32,32,9,114,101,116,117,114,110,32,123,10,32,32,9,9,95,103,32,61,32,87,104,105,116,101,32,42,32,103,32,42,32,87,104,105,116,101,32,42,32,45,49,44,10,32,32,9,9,109,97,116,99,104,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,115,116,114,44,32,46,46,46,41,10,32,32,10,32,32,9,9,9,108,111,99,97,108,32,112,111,115,95,116,111,95,108,105,110,101,32,61,32,102,117,110,99,116,105,111,110,40,112,111,115,41,10,32,32,9,9,9,9,114,101,116,117,114,110,32,117,116,105,108,46,112,111,115,95,116,111,95,108,105,110,101,40,115,116,114,44,32,112,111,115,41,10,32,32,9,9,9,101,110,100,10,32,32,10,32,32,9,9,9,108,111,99,97,108,32,103,101,116,95,108,105,110,101,32,61,32,102,117,110,99,116,105,111,110,40,110,117,109,41,10,32,32,9,9,9,9,114,101,116,117,114,110,32,117,116,105,108,46,103,101,116,95,108,105,110,101,40,115,116,114,44,32,110,117,109,41,10,32,32,9,9,9,101,110,100,10,32,32,10,32,32,9,9,9,108,111,99,97,108,32,116,114,101,101,10,32,32,9,9,9,108,111,99,97,108,32,97,114,103,115,32,61,32,123,46,46,46,125,10,32,32,9,9,9,108,111,99,97,108,32,112,97,115,115,44,32,101,114,114,32,61,32,112,99,97,108,108,40,102,117,110,99,116,105,111,110,40,41,10,32,32,9,9,9,9,116,114,101,101,32,61,32,115,101,108,102,46,95,103,58,109,97,116,99,104,40,115,116,114,44,32,117,110,112,97,99,107,40,97,114,103,115,41,41,10,32,32,9,9,9,101,110,100,41,10,32,32,10,32,32,9,9,9,105,102,32,110,111,116,32,112,97,115,115,32,116,104,101,110,10,32,32,9,9,9,9,108,111,99,97,108,32,108,105,110,101,95,110,111,32,61,32,112,111,115,95,116,111,95,108,105,110,101,40,108,97,115,116,95,112,111,115,41,10,32,32,9,9,9,9,112,114,105,110,116,40,34,115,116,111,112,112,101,100,32,97,116,34,44,32,108,105,110,101,95,110,111,41,10,32,32,9,9,9,9,101,114,114,111,114,40,101,114,114,41,10,32,32,9,9,9,101,110,100,10,32,32,10,32,32,9,9,9,105,102,32,110,111,116,32,116,114,101,101,32,116,104,101,110,10,32,32,9,9,9,9,108,111,99,97,108,32,108,105,110,101,95,110,111,32,61,32,112,111,115,95,116,111,95,108,105,110,101,40,108,97,115,116,95,112,111,115,41,10,32,32,9,9,9,9,108,111,99,97,108,32,108,105,110,101,95,115,116,114,32,61,32,103,101,116,95,108,105,110,101,40,108,105,110,101,95,110,111,41,32,111,114,32,34,34,10,32,32,9,9,9,9,10,32,32,9,9,9,9,114,101,116,117,114,110,32,110,105,108,44,32,101,114,114,95,109,115,103,58,102,111,114,109,97,116,40,108,105,110,101,95,110,111,44,32,116,114,105,109,40,108,105,110,101,95,115,116,114,41,44,32,95,105,110,100,101,110,116,58,116,111,112,40,41,41,10,32,32,9,9,9,101,110,100,10,32,32,9,9,9,114,101,116,117,114,110,32,116,114,101,101,10,32,32,9,9,101,110,100,10,32,32,9,125,10,32,32,9,10,32,32,101,110,100,41,10,32,32,10,32,32,45,45,32,112,97,114,115,101,32,97,32,115,116,114,105,110,103,10,32,32,45,45,32,114,101,116,117,114,110,115,32,116,114,101,101,44,32,111,114,32,110,105,108,32,97,110,100,32,101,114,114,111,114,32,109,101,115,115,97,103,101,10,32,32,102,117,110,99,116,105,111,110,32,115,116,114,105,110,103,40,115,116,114,41,10,32,32,9,108,111,99,97,108,32,103,32,61,32,98,117,105,108,100,95,103,114,97,109,109,97,114,40,41,10,32,32,9,114,101,116,117,114,110,32,103,58,109,97,116,99,104,40,115,116,114,41,10,32,32,101,110,100,10,32,32,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,99,111,110,99,97,116,32,61,32,116,97,98,108,101,46,99,111,110,99,97,116,10,32,32,109,111,111,110,32,61,32,123,10,32,32,32,32,105,115,95,111,98,106,101,99,116,32,61,32,102,117,110,99,116,105,111,110,40,118,97,108,117,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,116,121,112,101,40,118,97,108,117,101,41,32,61,61,32,34,116,97,98,108,101,34,32,97,110,100,32,118,97,108,117,101,46,95,95,99,108,97,115,115,10,32,32,32,32,101,110,100,44,10,32,32,32,32,116,121,112,101,32,61,32,102,117,110,99,116,105,111,110,40,118,97,108,117,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,98,97,115,101,95,116,121,112,101,32,61,32,116,121,112,101,40,118,97,108,117,101,41,10,32,32,32,32,32,32,105,102,32,98,97,115,101,95,116,121,112,101,32,61,61,32,34,116,97,98,108,101,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,108,115,32,61,32,118,97,108,117,101,46,95,95,99,108,97,115,115,10,32,32,32,32,32,32,32,32,105,102,32,99,108,115,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,99,108,115,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,98,97,115,101,95,116,121,112,101,10,32,32,32,32,101,110,100,10,32,32,125,10,32,32,112,111,115,95,116,111,95,108,105,110,101,32,61,32,102,117,110,99,116,105,111,110,40,115,116,114,44,32,112,111,115,41,10,32,32,32,32,108,111,99,97,108,32,108,105,110,101,32,61,32,49,10,32,32,32,32,102,111,114,32,95,32,105,110,32,115,116,114,58,115,117,98,40,49,44,32,112,111,115,41,58,103,109,97,116,99,104,40,34,92,110,34,41,32,100,111,10,32,32,32,32,32,32,108,105,110,101,32,61,32,108,105,110,101,32,43,32,49,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,108,105,110,101,10,32,32,101,110,100,10,32,32,103,101,116,95,99,108,111,115,101,115,116,95,108,105,110,101,32,61,32,102,117,110,99,116,105,111,110,40,115,116,114,44,32,108,105,110,101,95,110,117,109,41,10,32,32,32,32,108,111,99,97,108,32,108,105,110,101,32,61,32,103,101,116,95,108,105,110,101,40,115,116,114,44,32,108,105,110,101,95,110,117,109,41,10,32,32,32,32,105,102,32,40,110,111,116,32,108,105,110,101,32,111,114,32,116,114,105,109,40,108,105,110,101,41,32,61,61,32,34,34,41,32,97,110,100,32,108,105,110,101,95,110,117,109,32,62,32,49,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,103,101,116,95,99,108,111,115,101,115,116,95,108,105,110,101,40,115,116,114,44,32,108,105,110,101,95,110,117,109,32,45,32,49,41,10,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,108,105,110,101,44,32,108,105,110,101,95,110,117,109,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,103,101,116,95,108,105,110,101,32,61,32,102,117,110,99,116,105,111,110,40,115,116,114,44,32,108,105,110,101,95,110,117,109,41,10,32,32,32,32,102,111,114,32,108,105,110,101,32,105,110,32,115,116,114,58,103,109,97,116,99,104,40,34,40,46,45,41,91,92,110,36,93,34,41,32,100,111,10,32,32,32,32,32,32,105,102,32,108,105,110,101,95,110,117,109,32,61,61,32,49,32,116,104,101,110,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,108,105,110,101,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,105,110,101,95,110,117,109,32,61,32,108,105,110,101,95,110,117,109,32,45,32,49,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,114,101,118,101,114,115,101,100,32,61,32,102,117,110,99,116,105,111,110,40,115,101,113,41,10,32,32,32,32,114,101,116,117,114,110,32,99,111,114,111,117,116,105,110,101,46,119,114,97,112,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,102,111,114,32,105,32,61,32,35,115,101,113,44,32,49,44,32,45,49,32,100,111,10,32,32,32,32,32,32,32,32,99,111,114,111,117,116,105,110,101,46,121,105,101,108,100,40,105,44,32,115,101,113,91,105,93,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,41,10,32,32,101,110,100,10,32,32,116,114,105,109,32,61,32,102,117,110,99,116,105,111,110,40,115,116,114,41,10,32,32,32,32,114,101,116,117,114,110,32,115,116,114,58,109,97,116,99,104,40,34,94,37,115,42,40,46,45,41,37,115,42,36,34,41,10,32,32,101,110,100,10,32,32,115,112,108,105,116,32,61,32,102,117,110,99,116,105,111,110,40,115,116,114,44,32,100,101,108,105,109,41,10,32,32,32,32,105,102,32,115,116,114,32,61,61,32,34,34,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,123,32,125,10,32,32,32,32,101,110,100,10,32,32,32,32,115,116,114,32,61,32,115,116,114,32,46,46,32,100,101,108,105,109,10,32,32,32,32,114,101,116,117,114,110,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,102,111,114,32,109,32,105,110,32,115,116,114,58,103,109,97,116,99,104,40,34,40,46,45,41,34,32,46,46,32,100,101,108,105,109,41,32,100,111,10,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,109,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,101,110,100,41,40,41,10,32,32,101,110,100,10,32,32,100,117,109,112,32,61,32,102,117,110,99,116,105,111,110,40,119,104,97,116,41,10,32,32,32,32,108,111,99,97,108,32,115,101,101,110,32,61,32,123,32,125,10,32,32,32,32,108,111,99,97,108,32,95,100,117,109,112,10,32,32,32,32,95,100,117,109,112,32,61,32,102,117,110,99,116,105,111,110,40,119,104,97,116,44,32,100,101,112,116,104,41,10,32,32,32,32,32,32,105,102,32,100,101,112,116,104,32,61,61,32,110,105,108,32,116,104,101,110,10,32,32,32,32,32,32,32,32,100,101,112,116,104,32,61,32,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,116,32,61,32,116,121,112,101,40,119,104,97,116,41,10,32,32,32,32,32,32,105,102,32,116,32,61,61,32,34,115,116,114,105,110,103,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,39,34,39,32,46,46,32,119,104,97,116,32,46,46,32,39,34,92,110,39,10,32,32,32,32,32,32,101,108,115,101,105,102,32,116,32,61,61,32,34,116,97,98,108,101,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,105,102,32,115,101,101,110,91,119,104,97,116,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,34,114,101,99,117,114,115,105,111,110,40,34,32,46,46,32,116,111,115,116,114,105,110,103,40,119,104,97,116,41,32,46,46,32,34,41,46,46,46,92,110,34,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,115,101,101,110,91,119,104,97,116,93,32,61,32,116,114,117,101,10,32,32,32,32,32,32,32,32,100,101,112,116,104,32,61,32,100,101,112,116,104,32,43,32,49,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,105,110,101,115,32,61,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,107,44,32,118,32,105,110,32,112,97,105,114,115,40,119,104,97,116,41,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,118,97,108,117,101,95,48,32,61,32,40,34,32,34,41,58,114,101,112,40,100,101,112,116,104,32,42,32,52,41,32,46,46,32,34,91,34,32,46,46,32,116,111,115,116,114,105,110,103,40,107,41,32,46,46,32,34,93,32,61,32,34,32,46,46,32,95,100,117,109,112,40,118,44,32,100,101,112,116,104,41,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,95,118,97,108,117,101,95,48,32,126,61,32,110,105,108,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,95,118,97,108,117,101,95,48,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,101,110,100,41,40,41,10,32,32,32,32,32,32,32,32,115,101,101,110,91,119,104,97,116,93,32,61,32,102,97,108,115,101,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,34,123,92,110,34,32,46,46,32,99,111,110,99,97,116,40,108,105,110,101,115,41,32,46,46,32,40,34,32,34,41,58,114,101,112,40,40,100,101,112,116,104,32,45,32,49,41,32,42,32,52,41,32,46,46,32,34,125,92,110,34,10,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,111,115,116,114,105,110,103,40,119,104,97,116,41,32,46,46,32,34,92,110,34,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,95,100,117,109,112,40,119,104,97,116,41,10,32,32,101,110,100,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,100,97,116,97,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,97,116,97,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,99,111,110,99,97,116,32,61,32,116,97,98,108,101,46,99,111,110,99,97,116,10,32,32,83,101,116,32,61,32,102,117,110,99,116,105,111,110,40,105,116,101,109,115,41,10,32,32,32,32,108,111,99,97,108,32,115,101,108,102,32,61,32,123,32,125,10,32,32,32,32,100,111,10,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,105,116,101,109,115,10,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,107,101,121,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,115,101,108,102,91,107,101,121,93,32,61,32,116,114,117,101,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,32,32,101,110,100,10,32,32,83,116,97,99,107,32,61,32,40,102,117,110,99,116,105,111,110,40,95,112,97,114,101,110,116,95,48,41,10,32,32,32,32,108,111,99,97,108,32,95,98,97,115,101,95,48,32,61,32,123,10,32,32,32,32,32,32,95,95,116,111,115,116,114,105,110,103,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,34,60,83,116,97,99,107,32,123,34,32,46,46,32,99,111,110,99,97,116,40,115,101,108,102,44,32,34,44,32,34,41,32,46,46,32,34,125,62,34,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,112,111,112,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,97,98,108,101,46,114,101,109,111,118,101,40,115,101,108,102,41,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,112,117,115,104,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,116,97,98,108,101,46,105,110,115,101,114,116,40,115,101,108,102,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,118,97,108,117,101,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,116,111,112,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,91,35,115,101,108,102,93,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,10,32,32,32,32,105,102,32,95,112,97,114,101,110,116,95,48,32,116,104,101,110,10,32,32,32,32,32,32,115,101,116,109,101,116,97,116,97,98,108,101,40,95,98,97,115,101,95,48,44,32,103,101,116,109,101,116,97,116,97,98,108,101,40,95,112,97,114,101,110,116,95,48,41,46,95,95,105,110,100,101,120,41,10,32,32,32,32,101,110,100,10,32,32,32,32,108,111,99,97,108,32,95,99,108,97,115,115,95,48,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,10,32,32,32,32,32,32,95,95,105,110,105,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,46,46,46,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,112,117,115,104,40,118,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,44,32,123,10,32,32,32,32,32,32,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,44,10,32,32,32,32,32,32,95,95,99,97,108,108,32,61,32,102,117,110,99,116,105,111,110,40,109,116,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,101,108,102,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,125,44,32,95,98,97,115,101,95,48,41,10,32,32,32,32,32,32,32,32,109,116,46,95,95,105,110,105,116,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,41,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,99,108,97,115,115,32,61,32,95,99,108,97,115,115,95,48,10,32,32,32,32,114,101,116,117,114,110,32,95,99,108,97,115,115,95,48,10,32,32,101,110,100,41,40,41,10,32,32,108,117,97,95,107,101,121,119,111,114,100,115,32,61,32,83,101,116,40,123,10,32,32,32,32,39,97,110,100,39,44,10,32,32,32,32,39,98,114,101,97,107,39,44,10,32,32,32,32,39,100,111,39,44,10,32,32,32,32,39,101,108,115,101,39,44,10,32,32,32,32,39,101,108,115,101,105,102,39,44,10,32,32,32,32,39,101,110,100,39,44,10,32,32,32,32,39,102,97,108,115,101,39,44,10,32,32,32,32,39,102,111,114,39,44,10,32,32,32,32,39,102,117,110,99,116,105,111,110,39,44,10,32,32,32,32,39,105,102,39,44,10,32,32,32,32,39,105,110,39,44,10,32,32,32,32,39,108,111,99,97,108,39,44,10,32,32,32,32,39,110,105,108,39,44,10,32,32,32,32,39,110,111,116,39,44,10,32,32,32,32,39,111,114,39,44,10,32,32,32,32,39,114,101,112,101,97,116,39,44,10,32,32,32,32,39,114,101,116,117,114,110,39,44,10,32,32,32,32,39,116,104,101,110,39,44,10,32,32,32,32,39,116,114,117,101,39,44,10,32,32,32,32,39,117,110,116,105,108,39,44,10,32,32,32,32,39,119,104,105,108,101,39,10,32,32,125,41,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,34,41,10,32,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,112,97,114,115,101,34,41,10,32,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,41,10,32,32,108,111,99,97,108,32,99,111,110,99,97,116,44,32,105,110,115,101,114,116,32,61,32,116,97,98,108,101,46,99,111,110,99,97,116,44,32,116,97,98,108,101,46,105,110,115,101,114,116,10,32,32,108,111,99,97,108,32,115,112,108,105,116,44,32,100,117,109,112,32,61,32,117,116,105,108,46,115,112,108,105,116,44,32,117,116,105,108,46,100,117,109,112,10,32,32,100,105,114,115,101,112,32,61,32,34,47,34,10,32,32,108,105,110,101,95,116,97,98,108,101,115,32,61,32,123,32,125,10,32,32,108,111,99,97,108,32,99,114,101,97,116,101,95,109,111,111,110,112,97,116,104,10,32,32,99,114,101,97,116,101,95,109,111,111,110,112,97,116,104,32,61,32,102,117,110,99,116,105,111,110,40,112,97,99,107,97,103,101,95,112,97,116,104,41,10,32,32,32,32,108,111,99,97,108,32,112,97,116,104,115,32,61,32,115,112,108,105,116,40,112,97,99,107,97,103,101,95,112,97,116,104,44,32,34,59,34,41,10,32,32,32,32,102,111,114,32,105,44,32,112,97,116,104,32,105,110,32,105,112,97,105,114,115,40,112,97,116,104,115,41,32,100,111,10,32,32,32,32,32,32,108,111,99,97,108,32,112,32,61,32,112,97,116,104,58,109,97,116,99,104,40,34,94,40,46,45,41,37,46,108,117,97,36,34,41,10,32,32,32,32,32,32,105,102,32,112,32,116,104,101,110,10,32,32,32,32,32,32,32,32,112,97,116,104,115,91,105,93,32,61,32,112,32,46,46,32,34,46,109,111,111,110,34,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,99,111,110,99,97,116,40,112,97,116,104,115,44,32,34,59,34,41,10,32,32,101,110,100,10,32,32,109,111,111,110,95,99,104,117,110,107,32,61,32,102,117,110,99,116,105,111,110,40,102,105,108,101,44,32,102,105,108,101,95,112,97,116,104,41,10,32,32,32,32,108,111,99,97,108,32,116,101,120,116,32,61,32,102,105,108,101,58,114,101,97,100,40,34,42,97,34,41,10,32,32,32,32,105,102,32,110,111,116,32,116,101,120,116,32,116,104,101,110,10,32,32,32,32,32,32,101,114,114,111,114,40,34,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,102,105,108,101,34,41,10,32,32,32,32,101,110,100,10,32,32,32,32,108,111,99,97,108,32,116,114,101,101,44,32,101,114,114,32,61,32,112,97,114,115,101,46,115,116,114,105,110,103,40,116,101,120,116,41,10,32,32,32,32,105,102,32,110,111,116,32,116,114,101,101,32,116,104,101,110,10,32,32,32,32,32,32,101,114,114,111,114,40,34,80,97,114,115,101,32,101,114,114,111,114,58,32,34,32,46,46,32,101,114,114,41,10,32,32,32,32,101,110,100,10,32,32,32,32,108,111,99,97,108,32,99,111,100,101,44,32,108,116,97,98,108,101,44,32,112,111,115,32,61,32,99,111,109,112,105,108,101,46,116,114,101,101,40,116,114,101,101,41,10,32,32,32,32,105,102,32,110,111,116,32,99,111,100,101,32,116,104,101,110,10,32,32,32,32,32,32,101,114,114,111,114,40,99,111,109,112,105,108,101,46,102,111,114,109,97,116,95,101,114,114,111,114,40,108,116,97,98,108,101,44,32,112,111,115,44,32,116,101,120,116,41,41,10,32,32,32,32,101,110,100,10,32,32,32,32,108,105,110,101,95,116,97,98,108,101,115,91,102,105,108,101,95,112,97,116,104,93,32,61,32,108,116,97,98,108,101,10,32,32,32,32,108,111,99,97,108,32,114,117,110,110,101,114,10,32,32,32,32,114,117,110,110,101,114,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,99,111,100,101,10,32,32,32,32,32,32,32,32,99,111,100,101,32,61,32,110,105,108,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,108,111,97,100,40,114,117,110,110,101,114,44,32,102,105,108,101,95,112,97,116,104,41,10,32,32,101,110,100,10,32,32,109,111,111,110,95,108,111,97,100,101,114,32,61,32,102,117,110,99,116,105,111,110,40,110,97,109,101,41,10,32,32,32,32,108,111,99,97,108,32,110,97,109,101,95,112,97,116,104,32,61,32,110,97,109,101,58,103,115,117,98,40,34,37,46,34,44,32,100,105,114,115,101,112,41,10,32,32,32,32,108,111,99,97,108,32,102,105,108,101,44,32,102,105,108,101,95,112,97,116,104,32,61,32,110,105,108,44,32,110,105,108,10,32,32,32,32,100,111,10,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,115,112,108,105,116,40,112,97,99,107,97,103,101,46,109,111,111,110,112,97,116,104,44,32,34,59,34,41,10,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,112,97,116,104,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,102,105,108,101,95,112,97,116,104,32,61,32,112,97,116,104,58,103,115,117,98,40,34,63,34,44,32,110,97,109,101,95,112,97,116,104,41,10,32,32,32,32,32,32,32,32,102,105,108,101,32,61,32,105,111,46,111,112,101,110,40,102,105,108,101,95,112,97,116,104,41,10,32,32,32,32,32,32,32,32,105,102,32,102,105,108,101,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,98,114,101,97,107,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,32,32,105,102,32,102,105,108,101,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,109,111,111,110,95,99,104,117,110,107,40,102,105,108,101,44,32,102,105,108,101,95,112,97,116,104,41,10,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,44,32,34,67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,109,111,111,110,32,102,105,108,101,34,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,105,102,32,110,111,116,32,112,97,99,107,97,103,101,46,109,111,111,110,112,97,116,104,32,116,104,101,110,10,32,32,32,32,112,97,99,107,97,103,101,46,109,111,111,110,112,97,116,104,32,61,32,99,114,101,97,116,101,95,109,111,111,110,112,97,116,104,40,112,97,99,107,97,103,101,46,112,97,116,104,41,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,105,110,105,116,95,108,111,97,100,101,114,10,32,32,105,110,105,116,95,108,111,97,100,101,114,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,114,101,116,117,114,110,32,105,110,115,101,114,116,40,112,97,99,107,97,103,101,46,108,111,97,100,101,114,115,44,32,50,44,32,109,111,111,110,95,108,111,97,100,101,114,41,10,32,32,101,110,100,10,32,32,105,102,32,110,111,116,32,95,71,46,109,111,111,110,95,110,111,95,108,111,97,100,101,114,32,116,104,101,110,10,32,32,32,32,105,110,105,116,95,108,111,97,100,101,114,40,41,10,32,32,101,110,100,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,41,10,32,32,108,111,99,97,108,32,100,117,109,112,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,117,109,112,34,41,10,32,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,46,102,111,114,109,97,116,34,41,10,32,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,46,108,105,110,101,34,41,10,32,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,46,118,97,108,117,101,34,41,10,32,32,108,111,99,97,108,32,116,114,97,110,115,102,111,114,109,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,116,114,97,110,115,102,111,114,109,34,41,10,32,32,108,111,99,97,108,32,78,97,109,101,80,114,111,120,121,32,61,32,116,114,97,110,115,102,111,114,109,46,78,97,109,101,80,114,111,120,121,10,32,32,108,111,99,97,108,32,83,101,116,10,32,32,100,111,10,32,32,32,32,108,111,99,97,108,32,95,116,97,98,108,101,95,48,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,97,116,97,34,41,10,32,32,32,32,83,101,116,32,61,32,95,116,97,98,108,101,95,48,46,83,101,116,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,110,116,121,112,101,10,32,32,100,111,10,32,32,32,32,108,111,99,97,108,32,95,116,97,98,108,101,95,48,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,116,121,112,101,115,34,41,10,32,32,32,32,110,116,121,112,101,32,61,32,95,116,97,98,108,101,95,48,46,110,116,121,112,101,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,99,111,110,99,97,116,44,32,105,110,115,101,114,116,32,61,32,116,97,98,108,101,46,99,111,110,99,97,116,44,32,116,97,98,108,101,46,105,110,115,101,114,116,10,32,32,108,111,99,97,108,32,112,111,115,95,116,111,95,108,105,110,101,44,32,103,101,116,95,99,108,111,115,101,115,116,95,108,105,110,101,44,32,116,114,105,109,32,61,32,117,116,105,108,46,112,111,115,95,116,111,95,108,105,110,101,44,32,117,116,105,108,46,103,101,116,95,99,108,111,115,101,115,116,95,108,105,110,101,44,32,117,116,105,108,46,116,114,105,109,10,32,32,108,111,99,97,108,32,98,117,98,98,108,101,95,110,97,109,101,115,32,61,32,123,10,32,32,32,32,34,104,97,115,95,118,97,114,97,114,103,115,34,10,32,32,125,10,32,32,108,111,99,97,108,32,76,105,110,101,10,32,32,76,105,110,101,32,61,32,40,102,117,110,99,116,105,111,110,40,95,112,97,114,101,110,116,95,48,41,10,32,32,32,32,108,111,99,97,108,32,95,98,97,115,101,95,48,32,61,32,123,10,32,32,32,32,32,32,95,97,112,112,101,110,100,95,115,105,110,103,108,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,105,116,101,109,41,10,32,32,32,32,32,32,32,32,105,102,32,117,116,105,108,46,109,111,111,110,46,116,121,112,101,40,105,116,101,109,41,32,61,61,32,76,105,110,101,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,105,116,101,109,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,97,108,117,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,95,97,112,112,101,110,100,95,115,105,110,103,108,101,40,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,115,101,108,102,44,32,105,116,101,109,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,97,112,112,101,110,100,95,108,105,115,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,105,116,101,109,115,44,32,100,101,108,105,109,41,10,32,32,32,32,32,32,32,32,102,111,114,32,105,32,61,32,49,44,32,35,105,116,101,109,115,32,100,111,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,95,97,112,112,101,110,100,95,115,105,110,103,108,101,40,105,116,101,109,115,91,105,93,41,10,32,32,32,32,32,32,32,32,32,32,105,102,32,105,32,60,32,35,105,116,101,109,115,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,115,101,108,102,44,32,100,101,108,105,109,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,97,112,112,101,110,100,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,46,46,46,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,116,101,109,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,95,97,112,112,101,110,100,95,115,105,110,103,108,101,40,105,116,101,109,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,114,101,110,100,101,114,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,98,117,102,102,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,102,111,114,32,105,32,61,32,49,44,32,35,115,101,108,102,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,32,61,32,115,101,108,102,91,105,93,10,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,98,117,102,102,44,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,117,116,105,108,46,109,111,111,110,46,116,121,112,101,40,99,41,32,61,61,32,66,108,111,99,107,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,99,58,114,101,110,100,101,114,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,99,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,41,40,41,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,99,111,110,99,97,116,40,98,117,102,102,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,10,32,32,32,32,105,102,32,95,112,97,114,101,110,116,95,48,32,116,104,101,110,10,32,32,32,32,32,32,115,101,116,109,101,116,97,116,97,98,108,101,40,95,98,97,115,101,95,48,44,32,103,101,116,109,101,116,97,116,97,98,108,101,40,95,112,97,114,101,110,116,95,48,41,46,95,95,105,110,100,101,120,41,10,32,32,32,32,101,110,100,10,32,32,32,32,108,111,99,97,108,32,95,99,108,97,115,115,95,48,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,10,32,32,32,32,32,32,95,95,105,110,105,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,105,102,32,95,112,97,114,101,110,116,95,48,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,112,97,114,101,110,116,95,48,46,95,95,105,110,105,116,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,44,32,123,10,32,32,32,32,32,32,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,44,10,32,32,32,32,32,32,95,95,99,97,108,108,32,61,32,102,117,110,99,116,105,111,110,40,109,116,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,101,108,102,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,125,44,32,95,98,97,115,101,95,48,41,10,32,32,32,32,32,32,32,32,109,116,46,95,95,105,110,105,116,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,41,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,99,108,97,115,115,32,61,32,95,99,108,97,115,115,95,48,10,32,32,32,32,114,101,116,117,114,110,32,95,99,108,97,115,115,95,48,10,32,32,101,110,100,41,40,41,10,32,32,108,111,99,97,108,32,66,108,111,99,107,95,10,32,32,66,108,111,99,107,95,32,61,32,40,102,117,110,99,116,105,111,110,40,95,112,97,114,101,110,116,95,48,41,10,32,32,32,32,108,111,99,97,108,32,95,98,97,115,101,95,48,32,61,32,123,10,32,32,32,32,32,32,104,101,97,100,101,114,32,61,32,34,100,111,34,44,10,32,32,32,32,32,32,102,111,111,116,101,114,32,61,32,34,101,110,100,34,44,10,32,32,32,32,32,32,108,105,110,101,95,116,97,98,108,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,46,95,112,111,115,109,97,112,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,115,101,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,97,109,101,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,115,116,97,116,101,91,110,97,109,101,93,32,61,32,118,97,108,117,101,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,103,101,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,97,109,101,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,46,95,115,116,97,116,101,91,110,97,109,101,93,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,100,101,99,108,97,114,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,97,109,101,115,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,117,110,100,101,99,108,97,114,101,100,32,61,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,110,97,109,101,115,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,116,32,61,32,117,116,105,108,46,109,111,111,110,46,116,121,112,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,114,101,97,108,95,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,116,32,61,61,32,78,97,109,101,80,114,111,120,121,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,97,108,95,110,97,109,101,32,61,32,110,97,109,101,58,103,101,116,95,110,97,109,101,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,116,32,61,61,32,34,115,116,114,105,110,103,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,97,108,95,110,97,109,101,32,61,32,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,118,97,108,117,101,95,48,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,114,101,97,108,95,110,97,109,101,32,97,110,100,32,110,111,116,32,115,101,108,102,58,104,97,115,95,110,97,109,101,40,114,101,97,108,95,110,97,109,101,41,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,118,97,108,117,101,95,48,32,61,32,114,101,97,108,95,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,95,118,97,108,117,101,95,48,32,126,61,32,110,105,108,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,95,118,97,108,117,101,95,48,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,101,110,100,41,40,41,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,117,110,100,101,99,108,97,114,101,100,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,112,117,116,95,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,117,110,100,101,99,108,97,114,101,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,119,104,105,116,101,108,105,115,116,95,110,97,109,101,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,97,109,101,115,41,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,110,97,109,101,95,119,104,105,116,101,108,105,115,116,32,61,32,83,101,116,40,110,97,109,101,115,41,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,112,117,116,95,110,97,109,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,97,109,101,41,10,32,32,32,32,32,32,32,32,105,102,32,117,116,105,108,46,109,111,111,110,46,116,121,112,101,40,110,97,109,101,41,32,61,61,32,78,97,109,101,80,114,111,120,121,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,110,97,109,101,32,61,32,110,97,109,101,58,103,101,116,95,110,97,109,101,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,110,97,109,101,115,91,110,97,109,101,93,32,61,32,116,114,117,101,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,104,97,115,95,110,97,109,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,97,109,101,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,121,101,115,32,61,32,115,101,108,102,46,95,110,97,109,101,115,91,110,97,109,101,93,10,32,32,32,32,32,32,32,32,105,102,32,121,101,115,32,61,61,32,110,105,108,32,97,110,100,32,115,101,108,102,46,112,97,114,101,110,116,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,115,101,108,102,46,95,110,97,109,101,95,119,104,105,116,101,108,105,115,116,32,111,114,32,115,101,108,102,46,95,110,97,109,101,95,119,104,105,116,101,108,105,115,116,91,110,97,109,101,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,46,112,97,114,101,110,116,58,104,97,115,95,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,121,101,115,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,115,104,97,100,111,119,95,110,97,109,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,97,109,101,41,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,110,97,109,101,115,91,110,97,109,101,93,32,61,32,102,97,108,115,101,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,102,114,101,101,95,110,97,109,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,112,114,101,102,105,120,44,32,100,111,110,116,95,112,117,116,41,10,32,32,32,32,32,32,32,32,112,114,101,102,105,120,32,61,32,112,114,101,102,105,120,32,111,114,32,34,109,111,111,110,34,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,101,97,114,99,104,105,110,103,32,61,32,116,114,117,101,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,44,32,105,32,61,32,110,105,108,44,32,48,10,32,32,32,32,32,32,32,32,119,104,105,108,101,32,115,101,97,114,99,104,105,110,103,32,100,111,10,32,32,32,32,32,32,32,32,32,32,110,97,109,101,32,61,32,99,111,110,99,97,116,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,112,114,101,102,105,120,44,10,32,32,32,32,32,32,32,32,32,32,32,32,105,10,32,32,32,32,32,32,32,32,32,32,125,44,32,34,95,34,41,10,32,32,32,32,32,32,32,32,32,32,105,32,61,32,105,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,115,101,97,114,99,104,105,110,103,32,61,32,115,101,108,102,58,104,97,115,95,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,100,111,110,116,95,112,117,116,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,112,117,116,95,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,97,109,101,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,105,110,105,116,95,102,114,101,101,95,118,97,114,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,112,114,101,102,105,120,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,115,101,108,102,58,102,114,101,101,95,110,97,109,101,40,112,114,101,102,105,120,44,32,116,114,117,101,41,10,32,32,32,32,32,32,32,32,115,101,108,102,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,97,109,101,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,109,97,114,107,95,112,111,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,32,32,105,102,32,110,111,100,101,91,45,49,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,46,108,97,115,116,95,112,111,115,32,61,32,110,111,100,101,91,45,49,93,10,32,32,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,115,101,108,102,46,95,112,111,115,109,97,112,91,115,101,108,102,46,99,117,114,114,101,110,116,95,108,105,110,101,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,46,95,112,111,115,109,97,112,91,115,101,108,102,46,99,117,114,114,101,110,116,95,108,105,110,101,93,32,61,32,115,101,108,102,46,108,97,115,116,95,112,111,115,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,97,100,100,95,108,105,110,101,95,116,101,120,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,116,101,120,116,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,105,110,115,101,114,116,40,115,101,108,102,46,95,108,105,110,101,115,44,32,116,101,120,116,41,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,97,112,112,101,110,100,95,108,105,110,101,95,116,97,98,108,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,115,117,98,95,116,97,98,108,101,44,32,111,102,102,115,101,116,41,10,32,32,32,32,32,32,32,32,111,102,102,115,101,116,32,61,32,111,102,102,115,101,116,32,43,32,115,101,108,102,46,99,117,114,114,101,110,116,95,108,105,110,101,10,32,32,32,32,32,32,32,32,102,111,114,32,108,105,110,101,44,32,115,111,117,114,99,101,32,105,110,32,112,97,105,114,115,40,115,117,98,95,116,97,98,108,101,41,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,105,110,101,32,61,32,108,105,110,101,32,43,32,111,102,102,115,101,116,10,32,32,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,115,101,108,102,46,95,112,111,115,109,97,112,91,108,105,110,101,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,46,95,112,111,115,109,97,112,91,108,105,110,101,93,32,61,32,115,111,117,114,99,101,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,97,100,100,95,108,105,110,101,95,116,97,98,108,101,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,108,105,110,101,41,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,108,105,110,101,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,104,117,110,107,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,117,116,105,108,46,109,111,111,110,46,116,121,112,101,40,99,104,117,110,107,41,32,61,61,32,66,108,111,99,107,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,117,114,114,101,110,116,32,61,32,99,104,117,110,107,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,104,105,108,101,32,99,117,114,114,101,110,116,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,117,116,105,108,46,109,111,111,110,46,116,121,112,101,40,99,117,114,114,101,110,116,46,104,101,97,100,101,114,41,32,61,61,32,76,105,110,101,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,97,100,100,95,108,105,110,101,95,116,97,98,108,101,115,40,99,117,114,114,101,110,116,46,104,101,97,100,101,114,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,97,112,112,101,110,100,95,108,105,110,101,95,116,97,98,108,101,40,99,117,114,114,101,110,116,58,108,105,110,101,95,116,97,98,108,101,40,41,44,32,48,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,46,99,117,114,114,101,110,116,95,108,105,110,101,32,61,32,115,101,108,102,46,99,117,114,114,101,110,116,95,108,105,110,101,32,43,32,99,117,114,114,101,110,116,46,99,117,114,114,101,110,116,95,108,105,110,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,32,61,32,99,117,114,114,101,110,116,46,110,101,120,116,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,97,100,100,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,108,105,110,101,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,116,32,61,32,117,116,105,108,46,109,111,111,110,46,116,121,112,101,40,108,105,110,101,41,10,32,32,32,32,32,32,32,32,105,102,32,116,32,61,61,32,34,115,116,114,105,110,103,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,97,100,100,95,108,105,110,101,95,116,101,120,116,40,108,105,110,101,41,10,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,116,32,61,61,32,66,108,111,99,107,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,98,117,98,98,108,101,95,110,97,109,101,115,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,108,105,110,101,91,110,97,109,101,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,91,110,97,109,101,93,32,61,32,108,105,110,101,46,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,97,100,100,40,115,101,108,102,58,108,105,110,101,40,108,105,110,101,41,41,10,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,116,32,61,61,32,76,105,110,101,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,97,100,100,95,108,105,110,101,95,116,97,98,108,101,115,40,108,105,110,101,41,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,97,100,100,95,108,105,110,101,95,116,101,120,116,40,108,105,110,101,58,114,101,110,100,101,114,40,41,41,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,46,99,117,114,114,101,110,116,95,108,105,110,101,32,61,32,115,101,108,102,46,99,117,114,114,101,110,116,95,108,105,110,101,32,43,32,49,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,101,114,114,111,114,40,34,65,100,100,105,110,103,32,117,110,107,110,111,119,110,32,105,116,101,109,34,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,95,105,110,115,101,114,116,95,98,114,101,97,107,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,102,111,114,32,105,32,61,32,49,44,32,35,115,101,108,102,46,95,108,105,110,101,115,32,45,32,49,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,101,102,116,44,32,114,105,103,104,116,32,61,32,115,101,108,102,46,95,108,105,110,101,115,91,105,93,44,32,115,101,108,102,46,95,108,105,110,101,115,91,105,32,43,32,49,93,10,32,32,32,32,32,32,32,32,32,32,105,102,32,108,101,102,116,58,115,117,98,40,45,49,41,32,61,61,32,34,41,34,32,97,110,100,32,114,105,103,104,116,58,115,117,98,40,49,44,32,49,41,32,61,61,32,34,40,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,46,95,108,105,110,101,115,91,105,93,32,61,32,115,101,108,102,46,95,108,105,110,101,115,91,105,93,32,46,46,32,34,59,34,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,114,101,110,100,101,114,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,102,108,97,116,116,101,110,10,32,32,32,32,32,32,32,32,102,108,97,116,116,101,110,32,61,32,102,117,110,99,116,105,111,110,40,108,105,110,101,41,10,32,32,32,32,32,32,32,32,32,32,105,102,32,116,121,112,101,40,108,105,110,101,41,32,61,61,32,34,115,116,114,105,110,103,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,108,105,110,101,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,108,105,110,101,58,114,101,110,100,101,114,40,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,104,101,97,100,101,114,32,61,32,102,108,97,116,116,101,110,40,115,101,108,102,46,104,101,97,100,101,114,41,10,32,32,32,32,32,32,32,32,105,102,32,35,115,101,108,102,46,95,108,105,110,101,115,32,61,61,32,48,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,102,111,111,116,101,114,32,61,32,102,108,97,116,116,101,110,40,115,101,108,102,46,102,111,111,116,101,114,41,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,99,111,110,99,97,116,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,104,101,97,100,101,114,44,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,111,116,101,114,10,32,32,32,32,32,32,32,32,32,32,125,44,32,34,32,34,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,110,100,101,110,116,32,61,32,105,110,100,101,110,116,95,99,104,97,114,58,114,101,112,40,115,101,108,102,46,105,110,100,101,110,116,41,10,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,115,101,108,102,46,100,101,108,105,109,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,95,105,110,115,101,114,116,95,98,114,101,97,107,115,40,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,98,111,100,121,32,61,32,105,110,100,101,110,116,32,46,46,32,99,111,110,99,97,116,40,115,101,108,102,46,95,108,105,110,101,115,44,32,40,115,101,108,102,46,100,101,108,105,109,32,111,114,32,34,34,41,32,46,46,32,34,92,110,34,32,46,46,32,105,110,100,101,110,116,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,99,111,110,99,97,116,40,123,10,32,32,32,32,32,32,32,32,32,32,104,101,97,100,101,114,44,10,32,32,32,32,32,32,32,32,32,32,98,111,100,121,44,10,32,32,32,32,32,32,32,32,32,32,105,110,100,101,110,116,95,99,104,97,114,58,114,101,112,40,115,101,108,102,46,105,110,100,101,110,116,32,45,32,49,41,32,46,46,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,115,101,108,102,46,110,101,120,116,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,46,110,101,120,116,58,114,101,110,100,101,114,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,102,108,97,116,116,101,110,40,115,101,108,102,46,102,111,111,116,101,114,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,41,40,41,10,32,32,32,32,32,32,32,32,125,44,32,34,92,110,34,41,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,98,108,111,99,107,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,104,101,97,100,101,114,44,32,102,111,111,116,101,114,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,66,108,111,99,107,40,115,101,108,102,44,32,104,101,97,100,101,114,44,32,102,111,111,116,101,114,41,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,108,105,110,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,76,105,110,101,40,41,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,40,46,46,46,41,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,105,115,95,115,116,109,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,108,105,110,101,95,99,111,109,112,105,108,101,91,110,116,121,112,101,40,110,111,100,101,41,93,32,126,61,32,110,105,108,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,105,115,95,118,97,108,117,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,116,32,61,32,110,116,121,112,101,40,110,111,100,101,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,118,97,108,117,101,95,99,111,109,112,105,108,101,91,116,93,32,126,61,32,110,105,108,32,111,114,32,116,32,61,61,32,34,118,97,108,117,101,34,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,110,97,109,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,118,97,108,117,101,40,110,111,100,101,41,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,118,97,108,117,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,97,99,116,105,111,110,10,32,32,32,32,32,32,32,32,105,102,32,116,121,112,101,40,110,111,100,101,41,32,126,61,32,34,116,97,98,108,101,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,97,99,116,105,111,110,32,61,32,34,114,97,119,95,118,97,108,117,101,34,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,109,97,114,107,95,112,111,115,40,110,111,100,101,41,10,32,32,32,32,32,32,32,32,32,32,97,99,116,105,111,110,32,61,32,110,111,100,101,91,49,93,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,102,110,32,61,32,118,97,108,117,101,95,99,111,109,112,105,108,101,91,97,99,116,105,111,110,93,10,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,102,110,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,101,114,114,111,114,40,34,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,118,97,108,117,101,58,32,34,32,46,46,32,100,117,109,112,46,118,97,108,117,101,40,110,111,100,101,41,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,110,111,100,101,32,61,32,116,114,97,110,115,102,111,114,109,46,110,111,100,101,40,110,111,100,101,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,102,110,40,115,101,108,102,44,32,110,111,100,101,44,32,46,46,46,41,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,118,97,108,117,101,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,118,97,108,117,101,115,44,32,100,101,108,105,109,41,10,32,32,32,32,32,32,32,32,100,101,108,105,109,32,61,32,100,101,108,105,109,32,111,114,32,39,44,32,39,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,76,105,110,101,40,41,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,95,108,105,115,116,40,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,118,97,108,117,101,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,115,101,108,102,58,118,97,108,117,101,40,118,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,32,32,101,110,100,41,40,41,44,32,100,101,108,105,109,41,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,115,116,109,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,102,110,32,61,32,108,105,110,101,95,99,111,109,112,105,108,101,91,110,116,121,112,101,40,110,111,100,101,41,93,10,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,102,110,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,105,102,32,104,97,115,95,118,97,108,117,101,40,110,111,100,101,41,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,95,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,111,100,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,97,100,100,40,115,101,108,102,58,118,97,108,117,101,40,110,111,100,101,41,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,109,97,114,107,95,112,111,115,40,110,111,100,101,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,111,117,116,32,61,32,102,110,40,115,101,108,102,44,32,110,111,100,101,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,32,32,105,102,32,111,117,116,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,97,100,100,40,111,117,116,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,114,101,116,95,115,116,109,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,115,116,109,115,44,32,114,101,116,41,10,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,114,101,116,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,32,61,32,100,101,102,97,117,108,116,95,114,101,116,117,114,110,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,32,61,32,49,10,32,32,32,32,32,32,32,32,119,104,105,108,101,32,105,32,60,32,35,115,116,109,115,32,100,111,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,115,116,109,40,115,116,109,115,91,105,93,41,10,32,32,32,32,32,32,32,32,32,32,105,32,61,32,105,32,43,32,49,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,97,115,116,95,101,120,112,32,61,32,115,116,109,115,91,105,93,10,32,32,32,32,32,32,32,32,105,102,32,108,97,115,116,95,101,120,112,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,105,102,32,99,97,115,99,97,100,105,110,103,91,110,116,121,112,101,40,108,97,115,116,95,101,120,112,41,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,115,116,109,40,108,97,115,116,95,101,120,112,44,32,114,101,116,41,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,115,101,108,102,58,105,115,95,118,97,108,117,101,40,108,97,115,116,95,101,120,112,41,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,105,110,101,32,61,32,114,101,116,40,115,116,109,115,91,105,93,41,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,115,101,108,102,58,105,115,95,115,116,109,40,108,105,110,101,41,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,115,116,109,40,108,105,110,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,114,114,111,114,40,34,103,111,116,32,97,32,118,97,108,117,101,32,102,114,111,109,32,105,109,112,108,105,99,105,116,32,114,101,116,117,114,110,34,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,115,116,109,40,108,97,115,116,95,101,120,112,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,115,116,109,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,115,116,109,115,44,32,114,101,116,41,10,32,32,32,32,32,32,32,32,105,102,32,114,101,116,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,114,101,116,95,115,116,109,115,40,115,116,109,115,44,32,114,101,116,41,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,115,116,109,115,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,116,109,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,115,116,109,40,115,116,109,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,10,32,32,32,32,105,102,32,95,112,97,114,101,110,116,95,48,32,116,104,101,110,10,32,32,32,32,32,32,115,101,116,109,101,116,97,116,97,98,108,101,40,95,98,97,115,101,95,48,44,32,103,101,116,109,101,116,97,116,97,98,108,101,40,95,112,97,114,101,110,116,95,48,41,46,95,95,105,110,100,101,120,41,10,32,32,32,32,101,110,100,10,32,32,32,32,108,111,99,97,108,32,95,99,108,97,115,115,95,48,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,10,32,32,32,32,32,32,95,95,105,110,105,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,112,97,114,101,110,116,44,32,104,101,97,100,101,114,44,32,102,111,111,116,101,114,41,10,32,32,32,32,32,32,32,32,115,101,108,102,46,112,97,114,101,110,116,44,32,115,101,108,102,46,104,101,97,100,101,114,44,32,115,101,108,102,46,102,111,111,116,101,114,32,61,32,112,97,114,101,110,116,44,32,104,101,97,100,101,114,44,32,102,111,111,116,101,114,10,32,32,32,32,32,32,32,32,115,101,108,102,46,99,117,114,114,101,110,116,95,108,105,110,101,32,61,32,49,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,108,105,110,101,115,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,112,111,115,109,97,112,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,110,97,109,101,115,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,115,116,97,116,101,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,105,102,32,115,101,108,102,46,112,97,114,101,110,116,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,46,105,110,100,101,110,116,32,61,32,115,101,108,102,46,112,97,114,101,110,116,46,105,110,100,101,110,116,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,116,109,101,116,97,116,97,98,108,101,40,115,101,108,102,46,95,115,116,97,116,101,44,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,95,95,105,110,100,101,120,32,61,32,115,101,108,102,46,112,97,114,101,110,116,46,95,115,116,97,116,101,10,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,46,105,110,100,101,110,116,32,61,32,48,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,44,32,123,10,32,32,32,32,32,32,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,44,10,32,32,32,32,32,32,95,95,99,97,108,108,32,61,32,102,117,110,99,116,105,111,110,40,109,116,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,101,108,102,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,125,44,32,95,98,97,115,101,95,48,41,10,32,32,32,32,32,32,32,32,109,116,46,95,95,105,110,105,116,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,41,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,99,108,97,115,115,32,61,32,95,99,108,97,115,115,95,48,10,32,32,32,32,114,101,116,117,114,110,32,95,99,108,97,115,115,95,48,10,32,32,101,110,100,41,40,41,10,32,32,108,111,99,97,108,32,82,111,111,116,66,108,111,99,107,10,32,32,82,111,111,116,66,108,111,99,107,32,61,32,40,102,117,110,99,116,105,111,110,40,95,112,97,114,101,110,116,95,48,41,10,32,32,32,32,108,111,99,97,108,32,95,98,97,115,101,95,48,32,61,32,123,10,32,32,32,32,32,32,114,101,110,100,101,114,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,115,101,108,102,58,95,105,110,115,101,114,116,95,98,114,101,97,107,115,40,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,99,111,110,99,97,116,40,115,101,108,102,46,95,108,105,110,101,115,44,32,34,92,110,34,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,10,32,32,32,32,105,102,32,95,112,97,114,101,110,116,95,48,32,116,104,101,110,10,32,32,32,32,32,32,115,101,116,109,101,116,97,116,97,98,108,101,40,95,98,97,115,101,95,48,44,32,103,101,116,109,101,116,97,116,97,98,108,101,40,95,112,97,114,101,110,116,95,48,41,46,95,95,105,110,100,101,120,41,10,32,32,32,32,101,110,100,10,32,32,32,32,108,111,99,97,108,32,95,99,108,97,115,115,95,48,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,10,32,32,32,32,32,32,95,95,105,110,105,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,105,102,32,95,112,97,114,101,110,116,95,48,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,112,97,114,101,110,116,95,48,46,95,95,105,110,105,116,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,44,32,123,10,32,32,32,32,32,32,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,44,10,32,32,32,32,32,32,95,95,99,97,108,108,32,61,32,102,117,110,99,116,105,111,110,40,109,116,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,101,108,102,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,125,44,32,95,98,97,115,101,95,48,41,10,32,32,32,32,32,32,32,32,109,116,46,95,95,105,110,105,116,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,41,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,99,108,97,115,115,32,61,32,95,99,108,97,115,115,95,48,10,32,32,32,32,114,101,116,117,114,110,32,95,99,108,97,115,115,95,48,10,32,32,101,110,100,41,40,66,108,111,99,107,95,41,10,32,32,66,108,111,99,107,32,61,32,66,108,111,99,107,95,10,32,32,102,111,114,109,97,116,95,101,114,114,111,114,32,61,32,102,117,110,99,116,105,111,110,40,109,115,103,44,32,112,111,115,44,32,102,105,108,101,95,115,116,114,41,10,32,32,32,32,108,111,99,97,108,32,108,105,110,101,32,61,32,112,111,115,95,116,111,95,108,105,110,101,40,102,105,108,101,95,115,116,114,44,32,112,111,115,41,10,32,32,32,32,108,111,99,97,108,32,108,105,110,101,95,115,116,114,10,32,32,32,32,108,105,110,101,95,115,116,114,44,32,108,105,110,101,32,61,32,103,101,116,95,99,108,111,115,101,115,116,95,108,105,110,101,40,102,105,108,101,95,115,116,114,44,32,108,105,110,101,41,10,32,32,32,32,108,105,110,101,95,115,116,114,32,61,32,108,105,110,101,95,115,116,114,32,111,114,32,34,34,10,32,32,32,32,114,101,116,117,114,110,32,99,111,110,99,97,116,40,123,10,32,32,32,32,32,32,34,67,111,109,112,105,108,101,32,101,114,114,111,114,58,32,34,32,46,46,32,109,115,103,44,10,32,32,32,32,32,32,40,34,32,91,37,100,93,32,62,62,32,32,32,32,37,115,34,41,58,102,111,114,109,97,116,40,108,105,110,101,44,32,116,114,105,109,40,108,105,110,101,95,115,116,114,41,41,10,32,32,32,32,125,44,32,34,92,110,34,41,10,32,32,101,110,100,10,32,32,118,97,108,117,101,32,61,32,102,117,110,99,116,105,111,110,40,118,97,108,117,101,41,10,32,32,32,32,108,111,99,97,108,32,111,117,116,32,61,32,110,105,108,10,32,32,32,32,100,111,10,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,82,111,111,116,66,108,111,99,107,40,41,10,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,100,100,40,95,119,105,116,104,95,48,58,118,97,108,117,101,40,118,97,108,117,101,41,41,10,32,32,32,32,32,32,111,117,116,32,61,32,95,119,105,116,104,95,48,58,114,101,110,100,101,114,40,41,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,111,117,116,10,32,32,101,110,100,10,32,32,116,114,101,101,32,61,32,102,117,110,99,116,105,111,110,40,116,114,101,101,41,10,32,32,32,32,108,111,99,97,108,32,115,99,111,112,101,32,61,32,82,111,111,116,66,108,111,99,107,40,41,10,32,32,32,32,108,111,99,97,108,32,114,117,110,110,101,114,32,61,32,99,111,114,111,117,116,105,110,101,46,99,114,101,97,116,101,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,116,114,101,101,10,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,105,110,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,115,99,111,112,101,58,115,116,109,40,108,105,110,101,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,99,111,112,101,58,114,101,110,100,101,114,40,41,10,32,32,32,32,101,110,100,41,10,32,32,32,32,108,111,99,97,108,32,115,117,99,99,101,115,115,44,32,114,101,115,117,108,116,32,61,32,99,111,114,111,117,116,105,110,101,46,114,101,115,117,109,101,40,114,117,110,110,101,114,41,10,32,32,32,32,105,102,32,110,111,116,32,115,117,99,99,101,115,115,32,116,104,101,110,10,32,32,32,32,32,32,108,111,99,97,108,32,101,114,114,111,114,95,109,115,103,10,32,32,32,32,32,32,105,102,32,116,121,112,101,40,114,101,115,117,108,116,41,32,61,61,32,34,116,97,98,108,101,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,101,114,114,111,114,95,116,121,112,101,32,61,32,114,101,115,117,108,116,91,49,93,10,32,32,32,32,32,32,32,32,105,102,32,101,114,114,111,114,95,116,121,112,101,32,61,61,32,34,117,115,101,114,45,101,114,114,111,114,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,101,114,114,111,114,95,109,115,103,32,61,32,114,101,115,117,108,116,91,50,93,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,101,114,114,111,114,95,109,115,103,32,61,32,101,114,114,111,114,40,34,85,110,107,110,111,119,110,32,101,114,114,111,114,32,116,104,114,111,119,110,34,44,32,117,116,105,108,46,100,117,109,112,40,101,114,114,111,114,95,109,115,103,41,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,101,114,114,111,114,95,109,115,103,32,61,32,99,111,110,99,97,116,40,123,10,32,32,32,32,32,32,32,32,32,32,114,101,115,117,108,116,44,10,32,32,32,32,32,32,32,32,32,32,100,101,98,117,103,46,116,114,97,99,101,98,97,99,107,40,114,117,110,110,101,114,41,10,32,32,32,32,32,32,32,32,125,44,32,34,92,110,34,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,44,32,101,114,114,111,114,95,109,115,103,44,32,115,99,111,112,101,46,108,97,115,116,95,112,111,115,10,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,108,111,99,97,108,32,116,98,108,32,61,32,115,99,111,112,101,58,108,105,110,101,95,116,97,98,108,101,40,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,115,117,108,116,44,32,116,98,108,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,116,121,112,101,115,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,116,121,112,101,115,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,41,10,32,32,108,111,99,97,108,32,100,97,116,97,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,97,116,97,34,41,10,32,32,108,111,99,97,108,32,105,110,115,101,114,116,32,61,32,116,97,98,108,101,46,105,110,115,101,114,116,10,32,32,110,116,121,112,101,32,61,32,102,117,110,99,116,105,111,110,40,110,111,100,101,41,10,32,32,32,32,105,102,32,116,121,112,101,40,110,111,100,101,41,32,126,61,32,34,116,97,98,108,101,34,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,34,118,97,108,117,101,34,10,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,111,100,101,91,49,93,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,116,32,61,32,123,32,125,10,32,32,108,111,99,97,108,32,110,111,100,101,95,116,121,112,101,115,32,61,32,123,10,32,32,32,32,102,110,100,101,102,32,61,32,123,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,34,97,114,103,115,34,44,10,32,32,32,32,32,32,32,32,116,10,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,34,119,104,105,116,101,108,105,115,116,34,44,10,32,32,32,32,32,32,32,32,116,10,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,34,97,114,114,111,119,34,44,10,32,32,32,32,32,32,32,32,34,115,108,105,109,34,10,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,34,98,111,100,121,34,44,10,32,32,32,32,32,32,32,32,116,10,32,32,32,32,32,32,125,10,32,32,32,32,125,44,10,32,32,32,32,97,115,115,105,103,110,32,61,32,123,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,34,110,97,109,101,115,34,44,10,32,32,32,32,32,32,32,32,116,10,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,34,118,97,108,117,101,115,34,44,10,32,32,32,32,32,32,32,32,116,10,32,32,32,32,32,32,125,10,32,32,32,32,125,10,32,32,125,10,32,32,108,111,99,97,108,32,98,117,105,108,100,95,116,97,98,108,101,10,32,32,98,117,105,108,100,95,116,97,98,108,101,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,108,111,99,97,108,32,107,101,121,95,116,97,98,108,101,32,61,32,123,32,125,10,32,32,32,32,102,111,114,32,110,97,109,101,44,32,97,114,103,115,32,105,110,32,112,97,105,114,115,40,110,111,100,101,95,116,121,112,101,115,41,32,100,111,10,32,32,32,32,32,32,108,111,99,97,108,32,105,110,100,101,120,32,61,32,123,32,125,10,32,32,32,32,32,32,102,111,114,32,105,44,32,116,117,112,108,101,32,105,110,32,105,112,97,105,114,115,40,97,114,103,115,41,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,116,117,112,108,101,91,49,93,10,32,32,32,32,32,32,32,32,105,110,100,101,120,91,110,97,109,101,93,32,61,32,105,32,43,32,49,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,107,101,121,95,116,97,98,108,101,91,110,97,109,101,93,32,61,32,105,110,100,101,120,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,107,101,121,95,116,97,98,108,101,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,107,101,121,95,116,97,98,108,101,32,61,32,98,117,105,108,100,95,116,97,98,108,101,40,41,10,32,32,108,111,99,97,108,32,109,97,107,101,95,98,117,105,108,100,101,114,10,32,32,109,97,107,101,95,98,117,105,108,100,101,114,32,61,32,102,117,110,99,116,105,111,110,40,110,97,109,101,41,10,32,32,32,32,108,111,99,97,108,32,115,112,101,99,32,61,32,110,111,100,101,95,116,121,112,101,115,91,110,97,109,101,93,10,32,32,32,32,105,102,32,110,111,116,32,115,112,101,99,32,116,104,101,110,10,32,32,32,32,32,32,101,114,114,111,114,40,34,100,111,110,39,116,32,107,110,111,119,32,104,111,119,32,116,111,32,98,117,105,108,100,32,110,111,100,101,58,32,34,32,46,46,32,110,97,109,101,41,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,102,117,110,99,116,105,111,110,40,112,114,111,112,115,41,10,32,32,32,32,32,32,105,102,32,112,114,111,112,115,32,61,61,32,110,105,108,32,116,104,101,110,10,32,32,32,32,32,32,32,32,112,114,111,112,115,32,61,32,123,32,125,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,110,111,100,101,32,61,32,123,10,32,32,32,32,32,32,32,32,110,97,109,101,10,32,32,32,32,32,32,125,10,32,32,32,32,32,32,102,111,114,32,105,44,32,97,114,103,32,105,110,32,105,112,97,105,114,115,40,115,112,101,99,41,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,107,101,121,44,32,100,101,102,97,117,108,116,95,118,97,108,117,101,32,61,32,117,110,112,97,99,107,40,97,114,103,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,97,108,10,32,32,32,32,32,32,32,32,105,102,32,112,114,111,112,115,91,107,101,121,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,118,97,108,32,61,32,112,114,111,112,115,91,107,101,121,93,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,118,97,108,32,61,32,100,101,102,97,117,108,116,95,118,97,108,117,101,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,105,102,32,118,97,108,32,61,61,32,116,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,118,97,108,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,110,111,100,101,91,105,32,43,32,49,93,32,61,32,118,97,108,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,111,100,101,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,98,117,105,108,100,32,61,32,110,105,108,10,32,32,98,117,105,108,100,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,10,32,32,32,32,98,108,111,99,107,95,101,120,112,32,61,32,102,117,110,99,116,105,111,110,40,98,111,100,121,41,10,32,32,32,32,32,32,108,111,99,97,108,32,102,110,32,61,32,98,117,105,108,100,46,102,110,100,101,102,40,123,10,32,32,32,32,32,32,32,32,98,111,100,121,32,61,32,98,111,100,121,10,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,98,117,105,108,100,46,99,104,97,105,110,40,123,10,32,32,32,32,32,32,32,32,98,97,115,101,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,34,112,97,114,101,110,115,34,44,10,32,32,32,32,32,32,32,32,32,32,102,110,10,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,34,99,97,108,108,34,44,10,32,32,32,32,32,32,32,32,32,32,123,32,125,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,125,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,99,104,97,105,110,32,61,32,102,117,110,99,116,105,111,110,40,112,97,114,116,115,41,10,32,32,32,32,32,32,108,111,99,97,108,32,98,97,115,101,32,61,32,112,97,114,116,115,46,98,97,115,101,32,111,114,32,101,114,114,111,114,40,34,101,120,112,101,99,116,105,110,103,32,98,97,115,101,32,112,114,111,112,101,114,116,121,32,102,111,114,32,99,104,97,105,110,34,41,10,32,32,32,32,32,32,108,111,99,97,108,32,110,111,100,101,32,61,32,123,10,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,98,97,115,101,10,32,32,32,32,32,32,125,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,112,97,114,116,115,10,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,112,97,114,116,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,110,111,100,101,44,32,112,97,114,116,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,111,100,101,10,32,32,32,32,101,110,100,10,32,32,125,44,32,123,10,32,32,32,32,95,95,105,110,100,101,120,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,97,109,101,41,10,32,32,32,32,32,32,115,101,108,102,91,110,97,109,101,93,32,61,32,109,97,107,101,95,98,117,105,108,100,101,114,40,110,97,109,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,97,119,103,101,116,40,115,101,108,102,44,32,110,97,109,101,41,10,32,32,32,32,101,110,100,10,32,32,125,41,10,32,32,115,109,97,114,116,95,110,111,100,101,32,61,32,102,117,110,99,116,105,111,110,40,110,111,100,101,41,10,32,32,32,32,108,111,99,97,108,32,105,110,100,101,120,32,61,32,107,101,121,95,116,97,98,108,101,91,110,116,121,112,101,40,110,111,100,101,41,93,10,32,32,32,32,105,102,32,110,111,116,32,105,110,100,101,120,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,111,100,101,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,115,101,116,109,101,116,97,116,97,98,108,101,40,110,111,100,101,44,32,123,10,32,32,32,32,32,32,95,95,105,110,100,101,120,32,61,32,102,117,110,99,116,105,111,110,40,110,111,100,101,44,32,107,101,121,41,10,32,32,32,32,32,32,32,32,105,102,32,105,110,100,101,120,91,107,101,121,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,114,97,119,103,101,116,40,110,111,100,101,44,32,105,110,100,101,120,91,107,101,121,93,41,10,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,116,121,112,101,40,107,101,121,41,32,61,61,32,34,115,116,114,105,110,103,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,101,114,114,111,114,40,34,117,110,107,110,111,119,110,32,107,101,121,58,32,96,34,32,46,46,32,107,101,121,32,46,46,32,34,96,32,111,110,32,110,111,100,101,32,116,121,112,101,58,32,96,34,32,46,46,32,110,116,121,112,101,40,110,111,100,101,41,32,46,46,32,34,96,34,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,95,95,110,101,119,105,110,100,101,120,32,61,32,102,117,110,99,116,105,111,110,40,110,111,100,101,44,32,107,101,121,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,105,102,32,105,110,100,101,120,91,107,101,121,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,107,101,121,32,61,32,105,110,100,101,120,91,107,101,121,93,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,114,97,119,115,101,116,40,110,111,100,101,44,32,107,101,121,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,41,10,32,32,101,110,100,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,118,101,114,115,105,111,110,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,118,101,114,115,105,111,110,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,10,32,32,118,101,114,115,105,111,110,32,61,32,34,48,46,50,46,48,45,100,101,118,34,10,32,32,102,117,110,99,116,105,111,110,32,112,114,105,110,116,95,118,101,114,115,105,111,110,40,41,10,32,32,9,112,114,105,110,116,40,34,77,111,111,110,83,99,114,105,112,116,32,118,101,114,115,105,111,110,32,34,46,46,118,101,114,115,105,111,110,41,10,32,32,101,110,100,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,116,114,97,110,115,102,111,114,109,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,116,114,97,110,115,102,111,114,109,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,116,121,112,101,115,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,116,121,112,101,115,34,41,10,32,32,108,111,99,97,108,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,41,10,32,32,108,111,99,97,108,32,100,97,116,97,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,97,116,97,34,41,10,32,32,108,111,99,97,108,32,110,116,121,112,101,44,32,98,117,105,108,100,32,61,32,116,121,112,101,115,46,110,116,121,112,101,44,32,116,121,112,101,115,46,98,117,105,108,100,10,32,32,78,97,109,101,80,114,111,120,121,32,61,32,40,102,117,110,99,116,105,111,110,40,95,112,97,114,101,110,116,95,48,41,10,32,32,32,32,108,111,99,97,108,32,95,98,97,115,101,95,48,32,61,32,123,10,32,32,32,32,32,32,103,101,116,95,110,97,109,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,115,99,111,112,101,41,10,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,115,101,108,102,46,110,97,109,101,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,46,110,97,109,101,32,61,32,115,99,111,112,101,58,102,114,101,101,95,110,97,109,101,40,115,101,108,102,46,112,114,101,102,105,120,44,32,116,114,117,101,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,46,110,97,109,101,10,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,95,95,116,111,115,116,114,105,110,103,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,41,10,32,32,32,32,32,32,32,32,105,102,32,115,101,108,102,46,110,97,109,101,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,40,34,110,97,109,101,60,37,115,62,34,41,58,102,111,114,109,97,116,40,115,101,108,102,46,110,97,109,101,41,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,40,34,110,97,109,101,60,112,114,101,102,105,120,40,37,115,41,62,34,41,58,102,111,114,109,97,116,40,115,101,108,102,46,112,114,101,102,105,120,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,10,32,32,32,32,105,102,32,95,112,97,114,101,110,116,95,48,32,116,104,101,110,10,32,32,32,32,32,32,115,101,116,109,101,116,97,116,97,98,108,101,40,95,98,97,115,101,95,48,44,32,103,101,116,109,101,116,97,116,97,98,108,101,40,95,112,97,114,101,110,116,95,48,41,46,95,95,105,110,100,101,120,41,10,32,32,32,32,101,110,100,10,32,32,32,32,108,111,99,97,108,32,95,99,108,97,115,115,95,48,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,10,32,32,32,32,32,32,95,95,105,110,105,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,112,114,101,102,105,120,41,10,32,32,32,32,32,32,32,32,115,101,108,102,46,112,114,101,102,105,120,32,61,32,112,114,101,102,105,120,10,32,32,32,32,32,32,32,32,115,101,108,102,91,49,93,32,61,32,34,116,101,109,112,95,110,97,109,101,34,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,44,32,123,10,32,32,32,32,32,32,95,95,105,110,100,101,120,32,61,32,95,98,97,115,101,95,48,44,10,32,32,32,32,32,32,95,95,99,97,108,108,32,61,32,102,117,110,99,116,105,111,110,40,109,116,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,101,108,102,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,125,44,32,95,98,97,115,101,95,48,41,10,32,32,32,32,32,32,32,32,109,116,46,95,95,105,110,105,116,40,115,101,108,102,44,32,46,46,46,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,125,41,10,32,32,32,32,95,98,97,115,101,95,48,46,95,95,99,108,97,115,115,32,61,32,95,99,108,97,115,115,95,48,10,32,32,32,32,114,101,116,117,114,110,32,95,99,108,97,115,115,95,48,10,32,32,101,110,100,41,40,41,10,32,32,108,111,99,97,108,32,116,114,97,110,115,102,111,114,109,101,114,115,32,61,32,123,10,32,32,32,32,99,104,97,105,110,32,61,32,102,117,110,99,116,105,111,110,40,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,115,116,117,98,32,61,32,110,111,100,101,91,35,110,111,100,101,93,10,32,32,32,32,32,32,105,102,32,116,121,112,101,40,115,116,117,98,41,32,61,61,32,34,116,97,98,108,101,34,32,97,110,100,32,115,116,117,98,91,49,93,32,61,61,32,34,99,111,108,111,110,95,115,116,117,98,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,116,97,98,108,101,46,114,101,109,111,118,101,40,110,111,100,101,44,32,35,110,111,100,101,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,98,97,115,101,95,110,97,109,101,32,61,32,78,97,109,101,80,114,111,120,121,40,34,98,97,115,101,34,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,102,110,95,110,97,109,101,32,61,32,78,97,109,101,80,114,111,120,121,40,34,102,110,34,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,98,117,105,108,100,46,98,108,111,99,107,95,101,120,112,40,123,10,32,32,32,32,32,32,32,32,32,32,98,117,105,108,100,46,97,115,115,105,103,110,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,97,115,101,95,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,111,100,101,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,41,44,10,32,32,32,32,32,32,32,32,32,32,98,117,105,108,100,46,97,115,115,105,103,110,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,110,95,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,117,105,108,100,46,99,104,97,105,110,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,97,115,101,32,61,32,98,97,115,101,95,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,100,111,116,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,116,117,98,91,50,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,41,44,10,32,32,32,32,32,32,32,32,32,32,98,117,105,108,100,46,102,110,100,101,102,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,97,114,103,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,46,46,46,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,98,111,100,121,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,117,105,108,100,46,99,104,97,105,110,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,97,115,101,32,61,32,102,110,95,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,97,108,108,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,97,115,101,95,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,46,46,46,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,125,10,32,32,110,111,100,101,32,61,32,102,117,110,99,116,105,111,110,40,110,41,10,32,32,32,32,108,111,99,97,108,32,116,114,97,110,115,102,111,114,109,101,114,32,61,32,116,114,97,110,115,102,111,114,109,101,114,115,91,110,116,121,112,101,40,110,41,93,10,32,32,32,32,105,102,32,116,114,97,110,115,102,111,114,109,101,114,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,116,114,97,110,115,102,111,114,109,101,114,40,110,41,32,111,114,32,110,10,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,46,118,97,108,117,101,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,41,10,32,32,108,111,99,97,108,32,100,97,116,97,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,97,116,97,34,41,10,32,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,46,102,111,114,109,97,116,34,41,10,32,32,108,111,99,97,108,32,110,116,121,112,101,10,32,32,100,111,10,32,32,32,32,108,111,99,97,108,32,95,116,97,98,108,101,95,48,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,116,121,112,101,115,34,41,10,32,32,32,32,110,116,121,112,101,32,61,32,95,116,97,98,108,101,95,48,46,110,116,121,112,101,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,99,111,110,99,97,116,44,32,105,110,115,101,114,116,32,61,32,116,97,98,108,101,46,99,111,110,99,97,116,44,32,116,97,98,108,101,46,105,110,115,101,114,116,10,32,32,108,111,99,97,108,32,116,97,98,108,101,95,97,112,112,101,110,100,10,32,32,116,97,98,108,101,95,97,112,112,101,110,100,32,61,32,102,117,110,99,116,105,111,110,40,110,97,109,101,44,32,108,101,110,44,32,118,97,108,117,101,41,10,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,34,117,112,100,97,116,101,34,44,10,32,32,32,32,32,32,32,32,108,101,110,44,10,32,32,32,32,32,32,32,32,34,43,61,34,44,10,32,32,32,32,32,32,32,32,49,10,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,105,110,100,101,120,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,125,10,32,32,32,32,125,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,99,114,101,97,116,101,95,97,99,99,117,109,117,108,97,116,101,95,119,114,97,112,112,101,114,10,32,32,99,114,101,97,116,101,95,97,99,99,117,109,117,108,97,116,101,95,119,114,97,112,112,101,114,32,61,32,102,117,110,99,116,105,111,110,40,98,108,111,99,107,95,112,111,115,41,10,32,32,32,32,114,101,116,117,114,110,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,34,40,102,117,110,99,116,105,111,110,40,41,34,44,32,34,101,110,100,41,40,41,34,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,97,99,99,117,109,95,110,97,109,101,32,61,32,95,119,105,116,104,95,48,58,105,110,105,116,95,102,114,101,101,95,118,97,114,40,34,97,99,99,117,109,34,44,32,123,10,32,32,32,32,32,32,32,32,32,32,34,116,97,98,108,101,34,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,111,117,110,116,95,110,97,109,101,32,61,32,95,119,105,116,104,95,48,58,105,110,105,116,95,102,114,101,101,95,118,97,114,40,34,108,101,110,34,44,32,48,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,97,108,117,101,95,110,97,109,101,32,61,32,95,119,105,116,104,95,48,58,102,114,101,101,95,110,97,109,101,40,34,118,97,108,117,101,34,44,32,116,114,117,101,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,110,110,101,114,32,61,32,110,111,100,101,91,98,108,111,99,107,95,112,111,115,93,10,32,32,32,32,32,32,32,32,105,110,110,101,114,91,35,105,110,110,101,114,93,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,95,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,105,110,110,101,114,91,35,105,110,110,101,114,93,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,105,110,110,101,114,44,32,123,10,32,32,32,32,32,32,32,32,32,32,34,105,102,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,101,120,112,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,95,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,34,126,61,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,34,110,105,108,34,10,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,116,97,98,108,101,95,97,112,112,101,110,100,40,97,99,99,117,109,95,110,97,109,101,44,32,99,111,117,110,116,95,110,97,109,101,44,32,118,97,108,117,101,95,110,97,109,101,41,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,110,111,100,101,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,34,114,101,116,117,114,110,34,44,10,32,32,32,32,32,32,32,32,32,32,97,99,99,117,109,95,110,97,109,101,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,118,97,108,117,101,95,99,111,109,112,105,108,101,32,61,32,123,10,32,32,32,32,101,120,112,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,99,111,109,112,10,32,32,32,32,32,32,95,99,111,109,112,32,61,32,102,117,110,99,116,105,111,110,40,105,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,105,102,32,105,32,37,32,50,32,61,61,32,49,32,97,110,100,32,118,97,108,117,101,32,61,61,32,34,33,61,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,32,61,32,34,126,61,34,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,118,97,108,117,101,40,118,97,108,117,101,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,108,105,110,101,40,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,95,108,105,115,116,40,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,105,44,32,118,32,105,110,32,105,112,97,105,114,115,40,110,111,100,101,41,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,105,32,62,32,49,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,95,99,111,109,112,40,105,44,32,118,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,101,110,100,41,40,41,44,32,34,32,34,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,117,112,100,97,116,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,110,97,109,101,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,115,101,108,102,58,115,116,109,40,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,101,120,112,108,105,115,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,108,105,110,101,40,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,95,108,105,115,116,40,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,110,111,100,101,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,50,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,115,101,108,102,58,118,97,108,117,101,40,118,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,101,110,100,41,40,41,44,32,34,44,32,34,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,112,97,114,101,110,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,108,105,110,101,40,34,40,34,44,32,115,101,108,102,58,118,97,108,117,101,40,110,111,100,101,91,50,93,41,44,32,34,41,34,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,115,116,114,105,110,103,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,100,101,108,105,109,44,32,105,110,110,101,114,44,32,100,101,108,105,109,95,101,110,100,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,100,101,108,105,109,32,46,46,32,105,110,110,101,114,32,46,46,32,40,100,101,108,105,109,95,101,110,100,32,111,114,32,100,101,108,105,109,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,119,105,116,104,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,34,40,102,117,110,99,116,105,111,110,40,41,34,44,32,34,101,110,100,41,40,41,34,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,110,111,100,101,44,32,100,101,102,97,117,108,116,95,114,101,116,117,114,110,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,91,34,105,102,34,93,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,34,40,102,117,110,99,116,105,111,110,40,41,34,44,32,34,101,110,100,41,40,41,34,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,110,111,100,101,44,32,100,101,102,97,117,108,116,95,114,101,116,117,114,110,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,99,111,109,112,114,101,104,101,110,115,105,111,110,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,101,120,112,44,32,105,116,101,114,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,116,109,112,95,110,97,109,101,32,61,32,95,119,105,116,104,95,48,58,105,110,105,116,95,102,114,101,101,95,118,97,114,40,34,97,99,99,117,109,34,44,32,123,10,32,32,32,32,32,32,32,32,32,32,34,116,97,98,108,101,34,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,101,110,95,110,97,109,101,32,61,32,95,119,105,116,104,95,48,58,105,110,105,116,95,102,114,101,101,95,118,97,114,40,34,108,101,110,34,44,32,48,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,97,99,116,105,111,110,10,32,32,32,32,32,32,32,32,97,99,116,105,111,110,32,61,32,102,117,110,99,116,105,111,110,40,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,97,98,108,101,95,97,112,112,101,110,100,40,116,109,112,95,110,97,109,101,44,32,108,101,110,95,110,97,109,101,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,110,111,100,101,44,32,97,99,116,105,111,110,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,34,114,101,116,117,114,110,34,44,10,32,32,32,32,32,32,32,32,32,32,116,109,112,95,110,97,109,101,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,105,102,32,95,119,105,116,104,95,48,46,104,97,115,95,118,97,114,97,114,103,115,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,46,104,101,97,100,101,114,44,32,95,119,105,116,104,95,48,46,102,111,111,116,101,114,32,61,32,34,40,102,117,110,99,116,105,111,110,40,46,46,46,41,34,44,32,34,101,110,100,41,40,46,46,46,41,34,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,46,104,101,97,100,101,114,44,32,95,119,105,116,104,95,48,46,102,111,111,116,101,114,32,61,32,34,40,102,117,110,99,116,105,111,110,40,41,34,44,32,34,101,110,100,41,40,41,34,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,91,34,102,111,114,34,93,32,61,32,99,114,101,97,116,101,95,97,99,99,117,109,117,108,97,116,101,95,119,114,97,112,112,101,114,40,52,41,44,10,32,32,32,32,102,111,114,101,97,99,104,32,61,32,99,114,101,97,116,101,95,97,99,99,117,109,117,108,97,116,101,95,119,114,97,112,112,101,114,40,52,41,44,10,32,32,32,32,91,34,119,104,105,108,101,34,93,32,61,32,99,114,101,97,116,101,95,97,99,99,117,109,117,108,97,116,101,95,119,114,97,112,112,101,114,40,51,41,44,10,32,32,32,32,99,104,97,105,110,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,99,97,108,108,101,101,32,61,32,110,111,100,101,91,50,93,10,32,32,32,32,32,32,105,102,32,99,97,108,108,101,101,32,61,61,32,45,49,32,116,104,101,110,10,32,32,32,32,32,32,32,32,99,97,108,108,101,101,32,61,32,115,101,108,102,58,103,101,116,40,34,115,99,111,112,101,95,118,97,114,34,41,10,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,99,97,108,108,101,101,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,117,115,101,114,95,101,114,114,111,114,40,34,83,104,111,114,116,45,100,111,116,32,115,121,110,116,97,120,32,109,117,115,116,32,98,101,32,99,97,108,108,101,100,32,119,105,116,104,105,110,32,97,32,119,105,116,104,32,98,108,111,99,107,34,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,115,117,112,32,61,32,115,101,108,102,58,103,101,116,40,34,115,117,112,101,114,34,41,10,32,32,32,32,32,32,105,102,32,99,97,108,108,101,101,32,61,61,32,34,115,117,112,101,114,34,32,97,110,100,32,115,117,112,32,116,104,101,110,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,118,97,108,117,101,40,115,117,112,40,115,101,108,102,44,32,110,111,100,101,41,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,99,104,97,105,110,95,105,116,101,109,10,32,32,32,32,32,32,99,104,97,105,110,95,105,116,101,109,32,61,32,102,117,110,99,116,105,111,110,40,110,111,100,101,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,116,44,32,97,114,103,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,32,32,105,102,32,116,32,61,61,32,34,99,97,108,108,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,34,40,34,44,32,115,101,108,102,58,118,97,108,117,101,115,40,97,114,103,41,44,32,34,41,34,10,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,116,32,61,61,32,34,105,110,100,101,120,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,34,91,34,44,32,115,101,108,102,58,118,97,108,117,101,40,97,114,103,41,44,32,34,93,34,10,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,116,32,61,61,32,34,100,111,116,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,34,46,34,44,32,97,114,103,10,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,116,32,61,61,32,34,99,111,108,111,110,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,34,58,34,44,32,97,114,103,44,32,99,104,97,105,110,95,105,116,101,109,40,110,111,100,101,91,51,93,41,10,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,116,32,61,61,32,34,99,111,108,111,110,95,115,116,117,98,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,117,115,101,114,95,101,114,114,111,114,40,34,85,110,99,97,108,108,101,100,32,99,111,108,111,110,32,115,116,117,98,34,41,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,101,114,114,111,114,40,34,85,110,107,110,111,119,110,32,99,104,97,105,110,32,97,99,116,105,111,110,58,32,34,32,46,46,32,116,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,97,99,116,105,111,110,115,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,108,105,110,101,40,41,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,110,111,100,101,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,51,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,97,99,116,105,111,110,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,40,99,104,97,105,110,95,105,116,101,109,40,97,99,116,105,111,110,41,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,97,99,116,105,111,110,115,32,61,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,105,102,32,110,116,121,112,101,40,99,97,108,108,101,101,41,32,61,61,32,34,115,101,108,102,34,32,97,110,100,32,110,111,100,101,91,51,93,32,97,110,100,32,110,116,121,112,101,40,110,111,100,101,91,51,93,41,32,61,61,32,34,99,97,108,108,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,99,97,108,108,101,101,91,49,93,32,61,32,34,115,101,108,102,95,99,111,108,111,110,34,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,99,97,108,108,101,101,95,118,97,108,117,101,32,61,32,115,101,108,102,58,110,97,109,101,40,99,97,108,108,101,101,41,10,32,32,32,32,32,32,105,102,32,110,116,121,112,101,40,99,97,108,108,101,101,41,32,61,61,32,34,101,120,112,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,99,97,108,108,101,101,95,118,97,108,117,101,32,61,32,115,101,108,102,58,108,105,110,101,40,34,40,34,44,32,99,97,108,108,101,101,95,118,97,108,117,101,44,32,34,41,34,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,108,105,110,101,40,99,97,108,108,101,101,95,118,97,108,117,101,44,32,97,99,116,105,111,110,115,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,102,110,100,101,102,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,97,114,103,115,44,32,119,104,105,116,101,108,105,115,116,44,32,97,114,114,111,119,44,32,98,108,111,99,107,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,100,101,102,97,117,108,116,95,97,114,103,115,32,61,32,123,32,125,10,32,32,32,32,32,32,108,111,99,97,108,32,115,101,108,102,95,97,114,103,115,32,61,32,123,32,125,10,32,32,32,32,32,32,108,111,99,97,108,32,97,114,103,95,110,97,109,101,115,32,61,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,97,114,103,115,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,97,114,103,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,44,32,100,101,102,97,117,108,116,95,118,97,108,117,101,32,61,32,117,110,112,97,99,107,40,97,114,103,41,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,116,121,112,101,40,110,97,109,101,41,32,61,61,32,34,115,116,114,105,110,103,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,32,61,32,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,110,97,109,101,91,49,93,32,61,61,32,34,115,101,108,102,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,115,101,108,102,95,97,114,103,115,44,32,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,32,61,32,110,97,109,101,91,50,93,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,100,101,102,97,117,108,116,95,118,97,108,117,101,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,100,101,102,97,117,108,116,95,97,114,103,115,44,32,97,114,103,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,118,97,108,117,101,95,48,32,61,32,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,95,118,97,108,117,101,95,48,32,126,61,32,110,105,108,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,95,118,97,108,117,101,95,48,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,101,110,100,41,40,41,10,32,32,32,32,32,32,105,102,32,97,114,114,111,119,32,61,61,32,34,102,97,116,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,97,114,103,95,110,97,109,101,115,44,32,49,44,32,34,115,101,108,102,34,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,34,102,117,110,99,116,105,111,110,40,34,32,46,46,32,99,111,110,99,97,116,40,97,114,103,95,110,97,109,101,115,44,32,34,44,32,34,41,32,46,46,32,34,41,34,41,10,32,32,32,32,32,32,32,32,105,102,32,35,119,104,105,116,101,108,105,115,116,32,62,32,48,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,119,104,105,116,101,108,105,115,116,95,110,97,109,101,115,40,119,104,105,116,101,108,105,115,116,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,97,114,103,95,110,97,109,101,115,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,112,117,116,95,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,100,101,102,97,117,108,116,95,97,114,103,115,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,100,101,102,97,117,108,116,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,44,32,118,97,108,117,101,32,61,32,117,110,112,97,99,107,40,100,101,102,97,117,108,116,41,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,116,121,112,101,40,110,97,109,101,41,32,61,61,32,34,116,97,98,108,101,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,32,61,32,110,97,109,101,91,50,93,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,39,105,102,39,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,39,101,120,112,39,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,39,61,61,39,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,39,110,105,108,39,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,39,97,115,115,105,103,110,39,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,101,108,102,95,97,114,103,95,118,97,108,117,101,115,32,61,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,115,101,108,102,95,97,114,103,115,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,97,114,103,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,97,114,103,91,50,93,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,101,110,100,41,40,41,10,32,32,32,32,32,32,32,32,105,102,32,35,115,101,108,102,95,97,114,103,115,32,62,32,48,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,95,97,114,103,115,44,10,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,95,97,114,103,95,118,97,108,117,101,115,10,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,114,101,116,95,115,116,109,115,40,98,108,111,99,107,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,116,97,98,108,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,105,116,101,109,115,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,34,123,34,44,32,34,125,34,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,46,100,101,108,105,109,32,61,32,34,44,34,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,102,111,114,109,97,116,95,108,105,110,101,10,32,32,32,32,32,32,32,32,102,111,114,109,97,116,95,108,105,110,101,32,61,32,102,117,110,99,116,105,111,110,40,116,117,112,108,101,41,10,32,32,32,32,32,32,32,32,32,32,105,102,32,35,116,117,112,108,101,32,61,61,32,50,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,107,101,121,44,32,118,97,108,117,101,32,61,32,117,110,112,97,99,107,40,116,117,112,108,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,116,121,112,101,40,107,101,121,41,32,61,61,32,34,115,116,114,105,110,103,34,32,97,110,100,32,100,97,116,97,46,108,117,97,95,107,101,121,119,111,114,100,115,91,107,101,121,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,107,101,121,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,115,116,114,105,110,103,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,39,34,39,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,107,101,121,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,97,115,115,105,103,110,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,116,121,112,101,40,107,101,121,41,32,126,61,32,34,115,116,114,105,110,103,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,115,115,105,103,110,32,61,32,115,101,108,102,58,108,105,110,101,40,34,91,34,44,32,95,119,105,116,104,95,48,58,118,97,108,117,101,40,107,101,121,41,44,32,34,93,34,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,115,115,105,103,110,32,61,32,107,101,121,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,101,116,40,34,99,117,114,114,101,110,116,95,98,108,111,99,107,34,44,32,107,101,121,41,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,111,117,116,32,61,32,115,101,108,102,58,108,105,110,101,40,97,115,115,105,103,110,44,32,34,32,61,32,34,44,32,95,119,105,116,104,95,48,58,118,97,108,117,101,40,118,97,108,117,101,41,41,10,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,101,116,40,34,99,117,114,114,101,110,116,95,98,108,111,99,107,34,44,32,110,105,108,41,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,111,117,116,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,108,105,110,101,40,95,119,105,116,104,95,48,58,118,97,108,117,101,40,116,117,112,108,101,91,49,93,41,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,105,102,32,105,116,101,109,115,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,105,116,101,109,115,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,105,110,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,100,100,40,102,111,114,109,97,116,95,108,105,110,101,40,108,105,110,101,41,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,109,105,110,117,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,108,105,110,101,40,34,45,34,44,32,115,101,108,102,58,118,97,108,117,101,40,110,111,100,101,91,50,93,41,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,116,101,109,112,95,110,97,109,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,111,100,101,58,103,101,116,95,110,97,109,101,40,115,101,108,102,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,110,117,109,98,101,114,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,111,100,101,91,50,93,10,32,32,32,32,101,110,100,44,10,32,32,32,32,108,101,110,103,116,104,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,108,105,110,101,40,34,35,34,44,32,115,101,108,102,58,118,97,108,117,101,40,110,111,100,101,91,50,93,41,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,91,34,110,111,116,34,93,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,108,105,110,101,40,34,110,111,116,32,34,44,32,115,101,108,102,58,118,97,108,117,101,40,110,111,100,101,91,50,93,41,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,115,101,108,102,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,34,115,101,108,102,46,34,32,46,46,32,115,101,108,102,58,118,97,108,117,101,40,110,111,100,101,91,50,93,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,115,101,108,102,95,99,111,108,111,110,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,34,115,101,108,102,58,34,32,46,46,32,115,101,108,102,58,118,97,108,117,101,40,110,111,100,101,91,50,93,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,114,97,119,95,118,97,108,117,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,118,97,108,117,101,41,10,32,32,32,32,32,32,105,102,32,118,97,108,117,101,32,61,61,32,34,46,46,46,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,115,101,108,102,46,104,97,115,95,118,97,114,97,114,103,115,32,61,32,116,114,117,101,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,116,111,115,116,114,105,110,103,40,118,97,108,117,101,41,10,32,32,32,32,101,110,100,10,32,32,125,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,46,108,105,110,101,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,41,10,32,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,46,102,111,114,109,97,116,34,41,10,32,32,108,111,99,97,108,32,100,117,109,112,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,117,109,112,34,41,10,32,32,108,111,99,97,108,32,114,101,118,101,114,115,101,100,32,61,32,117,116,105,108,46,114,101,118,101,114,115,101,100,10,32,32,108,111,99,97,108,32,110,116,121,112,101,44,32,115,109,97,114,116,95,110,111,100,101,10,32,32,100,111,10,32,32,32,32,108,111,99,97,108,32,95,116,97,98,108,101,95,48,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,116,121,112,101,115,34,41,10,32,32,32,32,110,116,121,112,101,32,61,32,95,116,97,98,108,101,95,48,46,110,116,121,112,101,10,32,32,32,32,115,109,97,114,116,95,110,111,100,101,32,61,32,95,116,97,98,108,101,95,48,46,115,109,97,114,116,95,110,111,100,101,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,99,111,110,99,97,116,44,32,105,110,115,101,114,116,32,61,32,116,97,98,108,101,46,99,111,110,99,97,116,44,32,116,97,98,108,101,46,105,110,115,101,114,116,10,32,32,108,111,99,97,108,32,99,111,110,115,116,114,117,99,116,111,114,95,110,97,109,101,32,61,32,34,110,101,119,34,10,32,32,108,105,110,101,95,99,111,109,112,105,108,101,32,61,32,123,10,32,32,32,32,114,97,119,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,116,101,120,116,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,97,100,100,40,116,101,120,116,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,100,101,99,108,97,114,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,110,97,109,101,115,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,117,110,100,101,99,108,97,114,101,100,32,61,32,115,101,108,102,58,100,101,99,108,97,114,101,40,110,97,109,101,115,41,10,32,32,32,32,32,32,105,102,32,35,117,110,100,101,99,108,97,114,101,100,32,62,32,48,32,116,104,101,110,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,108,105,110,101,40,34,108,111,99,97,108,32,34,41,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,95,108,105,115,116,40,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,110,97,109,101,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,115,101,108,102,58,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,32,32,101,110,100,41,40,41,44,32,34,44,32,34,41,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,97,115,115,105,103,110,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,110,97,109,101,115,44,32,118,97,108,117,101,115,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,117,110,100,101,99,108,97,114,101,100,32,61,32,115,101,108,102,58,100,101,99,108,97,114,101,40,110,97,109,101,115,41,10,32,32,32,32,32,32,108,111,99,97,108,32,100,101,99,108,97,114,101,32,61,32,34,108,111,99,97,108,32,34,32,46,46,32,99,111,110,99,97,116,40,117,110,100,101,99,108,97,114,101,100,44,32,34,44,32,34,41,10,32,32,32,32,32,32,105,102,32,35,118,97,108,117,101,115,32,61,61,32,49,32,97,110,100,32,115,101,108,102,58,105,115,95,115,116,109,40,118,97,108,117,101,115,91,49,93,41,32,97,110,100,32,99,97,115,99,97,100,105,110,103,91,110,116,121,112,101,40,118,97,108,117,101,115,91,49,93,41,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,116,109,32,61,32,118,97,108,117,101,115,91,49,93,10,32,32,32,32,32,32,32,32,105,102,32,35,117,110,100,101,99,108,97,114,101,100,32,62,32,48,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,97,100,100,40,100,101,99,108,97,114,101,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,100,101,99,111,114,97,116,101,10,32,32,32,32,32,32,32,32,100,101,99,111,114,97,116,101,32,61,32,102,117,110,99,116,105,111,110,40,118,97,108,117,101,41,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,115,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,97,108,117,101,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,115,116,109,40,115,116,109,44,32,100,101,99,111,114,97,116,101,41,10,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,104,97,115,95,102,110,100,101,102,32,61,32,102,97,108,115,101,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,32,61,32,49,10,32,32,32,32,32,32,32,32,119,104,105,108,101,32,105,32,60,61,32,35,118,97,108,117,101,115,32,100,111,10,32,32,32,32,32,32,32,32,32,32,105,102,32,110,116,121,112,101,40,118,97,108,117,101,115,91,105,93,41,32,61,61,32,34,102,110,100,101,102,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,104,97,115,95,102,110,100,101,102,32,61,32,116,114,117,101,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,105,32,61,32,105,32,43,32,49,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,108,105,110,101,40,41,10,32,32,32,32,32,32,32,32,32,32,105,102,32,35,117,110,100,101,99,108,97,114,101,100,32,61,61,32,35,110,97,109,101,115,32,97,110,100,32,110,111,116,32,104,97,115,95,102,110,100,101,102,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,40,100,101,99,108,97,114,101,41,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,35,117,110,100,101,99,108,97,114,101,100,32,62,32,48,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,97,100,100,40,100,101,99,108,97,114,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,95,108,105,115,116,40,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,110,97,109,101,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,115,101,108,102,58,118,97,108,117,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,41,40,41,44,32,34,44,32,34,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,40,34,32,61,32,34,41,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,95,108,105,115,116,40,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,118,97,108,117,101,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,115,101,108,102,58,118,97,108,117,101,40,118,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,32,32,101,110,100,41,40,41,44,32,34,44,32,34,41,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,117,112,100,97,116,101,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,110,97,109,101,44,32,111,112,44,32,101,120,112,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,111,112,95,102,105,110,97,108,32,61,32,111,112,58,109,97,116,99,104,40,34,94,40,46,43,41,61,36,34,41,10,32,32,32,32,32,32,105,102,32,110,111,116,32,111,112,95,102,105,110,97,108,32,116,104,101,110,10,32,32,32,32,32,32,32,32,101,114,114,111,114,40,34,85,110,107,110,111,119,110,32,111,112,58,32,34,32,46,46,32,111,112,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,110,97,109,101,10,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,101,120,112,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,111,112,95,102,105,110,97,108,44,10,32,32,32,32,32,32,32,32,32,32,32,32,101,120,112,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,125,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,91,34,114,101,116,117,114,110,34,93,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,108,105,110,101,40,34,114,101,116,117,114,110,32,34,44,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,105,102,32,110,111,100,101,91,50,93,32,126,61,32,34,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,118,97,108,117,101,40,110,111,100,101,91,50,93,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,41,40,41,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,91,34,98,114,101,97,107,34,93,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,34,98,114,101,97,107,34,10,32,32,32,32,101,110,100,44,10,32,32,32,32,105,109,112,111,114,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,110,97,109,101,115,44,32,115,111,117,114,99,101,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,102,105,110,97,108,95,110,97,109,101,115,44,32,116,111,95,98,105,110,100,32,61,32,123,32,125,44,32,123,32,125,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,110,97,109,101,115,10,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,102,105,110,97,108,10,32,32,32,32,32,32,32,32,32,32,105,102,32,110,116,121,112,101,40,110,97,109,101,41,32,61,61,32,34,58,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,116,109,112,32,61,32,115,101,108,102,58,110,97,109,101,40,110,97,109,101,91,50,93,41,10,32,32,32,32,32,32,32,32,32,32,32,32,116,111,95,98,105,110,100,91,116,109,112,93,32,61,32,116,114,117,101,10,32,32,32,32,32,32,32,32,32,32,32,32,102,105,110,97,108,32,61,32,116,109,112,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,102,105,110,97,108,32,61,32,115,101,108,102,58,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,115,101,108,102,58,112,117,116,95,110,97,109,101,40,102,105,110,97,108,41,10,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,102,105,110,97,108,95,110,97,109,101,115,44,32,102,105,110,97,108,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,103,101,116,95,118,97,108,117,101,10,32,32,32,32,32,32,103,101,116,95,118,97,108,117,101,32,61,32,102,117,110,99,116,105,111,110,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,105,102,32,116,111,95,98,105,110,100,91,110,97,109,101,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,109,111,111,110,108,105,98,46,98,105,110,100,40,115,111,117,114,99,101,44,32,110,97,109,101,41,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,111,117,114,99,101,32,46,46,32,34,46,34,32,46,46,32,110,97,109,101,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,105,102,32,116,121,112,101,40,115,111,117,114,99,101,41,32,61,61,32,34,115,116,114,105,110,103,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,97,108,117,101,115,32,61,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,102,105,110,97,108,95,110,97,109,101,115,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,103,101,116,95,118,97,108,117,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,101,110,100,41,40,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,105,110,101,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,108,105,110,101,40,34,108,111,99,97,108,32,34,44,32,99,111,110,99,97,116,40,102,105,110,97,108,95,110,97,109,101,115,44,32,34,44,32,34,41,44,32,34,32,61,32,34,41,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,95,108,105,115,116,40,118,97,108,117,101,115,44,32,34,44,32,34,41,10,32,32,32,32,32,32,32,32,32,32,108,105,110,101,32,61,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,108,105,110,101,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,115,101,108,102,58,97,100,100,40,115,101,108,102,58,108,105,110,101,40,34,108,111,99,97,108,32,34,44,32,99,111,110,99,97,116,40,102,105,110,97,108,95,110,97,109,101,115,44,32,34,44,32,34,41,41,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,34,100,111,34,41,10,32,32,32,32,32,32,32,32,115,111,117,114,99,101,32,61,32,95,119,105,116,104,95,48,58,105,110,105,116,95,102,114,101,101,95,118,97,114,40,34,116,97,98,108,101,34,44,32,115,111,117,114,99,101,41,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,102,105,110,97,108,95,110,97,109,101,115,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,103,101,116,95,118,97,108,117,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,91,34,105,102,34,93,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,44,32,114,101,116,41,10,32,32,32,32,32,32,108,111,99,97,108,32,99,111,110,100,44,32,98,108,111,99,107,32,61,32,110,111,100,101,91,50,93,44,32,110,111,100,101,91,51,93,10,32,32,32,32,32,32,108,111,99,97,108,32,114,111,111,116,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,115,101,108,102,58,108,105,110,101,40,34,105,102,32,34,44,32,115,101,108,102,58,118,97,108,117,101,40,99,111,110,100,41,44,32,34,32,116,104,101,110,34,41,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,115,40,98,108,111,99,107,44,32,114,101,116,41,10,32,32,32,32,32,32,32,32,114,111,111,116,32,61,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,99,117,114,114,101,110,116,32,61,32,114,111,111,116,10,32,32,32,32,32,32,108,111,99,97,108,32,97,100,100,95,99,108,97,117,115,101,10,32,32,32,32,32,32,97,100,100,95,99,108,97,117,115,101,32,61,32,102,117,110,99,116,105,111,110,40,99,108,97,117,115,101,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,116,121,112,101,32,61,32,99,108,97,117,115,101,91,49,93,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,32,61,32,50,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,101,120,116,10,32,32,32,32,32,32,32,32,105,102,32,116,121,112,101,32,61,61,32,34,101,108,115,101,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,110,101,120,116,32,61,32,115,101,108,102,58,98,108,111,99,107,40,34,101,108,115,101,34,41,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,105,32,61,32,105,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,110,101,120,116,32,61,32,115,101,108,102,58,98,108,111,99,107,40,115,101,108,102,58,108,105,110,101,40,34,101,108,115,101,105,102,32,34,44,32,115,101,108,102,58,118,97,108,117,101,40,99,108,97,117,115,101,91,50,93,41,44,32,34,32,116,104,101,110,34,41,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,110,101,120,116,58,115,116,109,115,40,99,108,97,117,115,101,91,105,93,44,32,114,101,116,41,10,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,46,110,101,120,116,32,61,32,110,101,120,116,10,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,32,61,32,110,101,120,116,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,110,111,100,101,10,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,52,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,111,110,100,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,97,100,100,95,99,108,97,117,115,101,40,99,111,110,100,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,114,111,111,116,10,32,32,32,32,101,110,100,44,10,32,32,32,32,91,34,119,104,105,108,101,34,93,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,99,111,110,100,44,32,98,108,111,99,107,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,111,117,116,10,32,32,32,32,32,32,105,102,32,105,115,95,110,111,110,95,97,116,111,109,105,99,40,99,111,110,100,41,32,116,104,101,110,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,34,119,104,105,108,101,32,116,114,117,101,32,100,111,34,41,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,105,102,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,110,111,116,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,98,114,101,97,107,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,32,32,111,117,116,32,61,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,111,117,116,32,61,32,115,101,108,102,58,98,108,111,99,107,40,115,101,108,102,58,108,105,110,101,40,34,119,104,105,108,101,32,34,44,32,115,101,108,102,58,118,97,108,117,101,40,99,111,110,100,41,44,32,34,32,100,111,34,41,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,111,117,116,58,115,116,109,115,40,98,108,111,99,107,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,111,117,116,10,32,32,32,32,101,110,100,44,10,32,32,32,32,91,34,102,111,114,34,93,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,110,97,109,101,44,32,98,111,117,110,100,115,44,32,98,108,111,99,107,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,108,111,111,112,32,61,32,115,101,108,102,58,108,105,110,101,40,34,102,111,114,32,34,44,32,115,101,108,102,58,110,97,109,101,40,110,97,109,101,41,44,32,34,32,61,32,34,44,32,115,101,108,102,58,118,97,108,117,101,40,123,10,32,32,32,32,32,32,32,32,34,101,120,112,108,105,115,116,34,44,10,32,32,32,32,32,32,32,32,117,110,112,97,99,107,40,98,111,117,110,100,115,41,10,32,32,32,32,32,32,125,41,44,32,34,32,100,111,34,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,108,111,111,112,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,115,40,98,108,111,99,107,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,102,111,114,101,97,99,104,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,110,97,109,101,115,44,32,101,120,112,44,32,98,108,111,99,107,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,105,102,32,110,116,121,112,101,40,101,120,112,41,32,61,61,32,34,117,110,112,97,99,107,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,116,101,114,32,61,32,101,120,112,91,50,93,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,108,111,111,112,10,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,116,101,109,115,95,116,109,112,32,61,32,95,119,105,116,104,95,48,58,102,114,101,101,95,110,97,109,101,40,34,105,116,101,109,34,44,32,116,114,117,101,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,98,111,117,110,100,115,10,32,32,32,32,32,32,32,32,32,32,105,102,32,105,115,95,115,108,105,99,101,40,105,116,101,114,41,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,108,105,99,101,32,61,32,105,116,101,114,91,35,105,116,101,114,93,10,32,32,32,32,32,32,32,32,32,32,32,32,116,97,98,108,101,46,114,101,109,111,118,101,40,105,116,101,114,41,10,32,32,32,32,32,32,32,32,32,32,32,32,116,97,98,108,101,46,114,101,109,111,118,101,40,115,108,105,99,101,44,32,49,41,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,115,108,105,99,101,91,50,93,32,97,110,100,32,115,108,105,99,101,91,50,93,32,126,61,32,34,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,109,97,120,95,116,109,112,32,61,32,95,119,105,116,104,95,48,58,105,110,105,116,95,102,114,101,101,95,118,97,114,40,34,109,97,120,34,44,32,115,108,105,99,101,91,50,93,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,108,105,99,101,91,50,93,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,101,120,112,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,109,97,120,95,116,109,112,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,60,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,97,110,100,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,108,101,110,103,116,104,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,116,101,109,115,95,116,109,112,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,43,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,109,97,120,95,116,109,112,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,111,114,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,109,97,120,95,116,109,112,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,108,105,99,101,91,50,93,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,108,101,110,103,116,104,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,116,101,109,115,95,116,109,112,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,98,111,117,110,100,115,32,61,32,115,108,105,99,101,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,98,111,117,110,100,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,108,101,110,103,116,104,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,116,101,109,115,95,116,109,112,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,110,100,101,120,95,116,109,112,32,61,32,95,119,105,116,104,95,48,58,102,114,101,101,95,110,97,109,101,40,34,105,110,100,101,120,34,41,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,116,101,109,115,95,116,109,112,10,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,116,101,114,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,32,32,98,108,111,99,107,32,61,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,98,108,111,99,107,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,32,32,101,110,100,41,40,41,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,110,97,109,101,115,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,104,97,100,111,119,95,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,98,108,111,99,107,44,32,49,44,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,115,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,116,101,109,115,95,116,109,112,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,105,110,100,101,120,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,110,100,101,120,95,116,109,112,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,102,111,114,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,105,110,100,101,120,95,116,109,112,44,10,32,32,32,32,32,32,32,32,32,32,32,32,98,111,117,110,100,115,44,10,32,32,32,32,32,32,32,32,32,32,32,32,98,108,111,99,107,10,32,32,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,32,32,108,111,111,112,32,61,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,108,111,111,112,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,108,111,111,112,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,108,105,110,101,40,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,40,34,102,111,114,32,34,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,95,108,105,115,116,40,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,110,97,109,101,115,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,115,101,108,102,58,110,97,109,101,40,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,101,110,100,41,40,41,44,32,34,44,32,34,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,97,112,112,101,110,100,40,34,32,105,110,32,34,44,32,115,101,108,102,58,118,97,108,117,101,40,101,120,112,41,44,32,34,32,100,111,34,41,10,32,32,32,32,32,32,32,32,108,111,111,112,32,61,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,108,111,111,112,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,115,40,98,108,111,99,107,41,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,44,10,32,32,32,32,101,120,112,111,114,116,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,110,97,109,101,115,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,115,101,108,102,58,100,101,99,108,97,114,101,40,110,97,109,101,115,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,110,105,108,10,32,32,32,32,101,110,100,44,10,32,32,32,32,99,108,97,115,115,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,110,97,109,101,44,32,112,97,114,101,110,116,95,118,97,108,44,32,116,98,108,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,99,111,110,115,116,114,117,99,116,111,114,32,61,32,110,105,108,10,32,32,32,32,32,32,108,111,99,97,108,32,102,105,110,97,108,95,112,114,111,112,101,114,116,105,101,115,32,61,32,123,32,125,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,116,98,108,91,50,93,10,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,101,110,116,114,121,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,105,102,32,101,110,116,114,121,91,49,93,32,61,61,32,99,111,110,115,116,114,117,99,116,111,114,95,110,97,109,101,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,114,117,99,116,111,114,32,61,32,101,110,116,114,121,91,50,93,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,102,105,110,97,108,95,112,114,111,112,101,114,116,105,101,115,44,32,101,110,116,114,121,41,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,116,98,108,91,50,93,32,61,32,102,105,110,97,108,95,112,114,111,112,101,114,116,105,101,115,10,32,32,32,32,32,32,108,111,99,97,108,32,112,97,114,101,110,116,95,108,111,99,32,61,32,115,101,108,102,58,102,114,101,101,95,110,97,109,101,40,34,112,97,114,101,110,116,34,44,32,116,114,117,101,41,10,32,32,32,32,32,32,105,102,32,110,111,116,32,99,111,110,115,116,114,117,99,116,111,114,32,116,104,101,110,10,32,32,32,32,32,32,32,32,99,111,110,115,116,114,117,99,116,111,114,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,34,102,110,100,101,102,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,46,46,46,34,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,123,32,125,44,10,32,32,32,32,32,32,32,32,32,32,34,102,97,116,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,105,102,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,97,114,101,110,116,95,108,111,99,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,115,117,112,101,114,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,97,108,108,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,46,46,46,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,115,109,97,114,116,95,110,111,100,101,40,99,111,110,115,116,114,117,99,116,111,114,41,10,32,32,32,32,32,32,99,111,110,115,116,114,117,99,116,111,114,46,97,114,114,111,119,32,61,32,34,102,97,116,34,10,32,32,32,32,32,32,108,111,99,97,108,32,100,101,102,95,115,99,111,112,101,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,41,10,32,32,32,32,32,32,32,32,105,102,32,112,97,114,101,110,116,95,118,97,108,32,126,61,32,34,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,112,97,114,101,110,116,95,118,97,108,32,61,32,115,101,108,102,58,118,97,108,117,101,40,112,97,114,101,110,116,95,118,97,108,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,112,117,116,95,110,97,109,101,40,112,97,114,101,110,116,95,108,111,99,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,46,104,101,97,100,101,114,32,61,32,115,101,108,102,58,108,105,110,101,40,34,40,102,117,110,99,116,105,111,110,40,34,44,32,112,97,114,101,110,116,95,108,111,99,44,32,34,41,34,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,46,102,111,111,116,101,114,32,61,32,115,101,108,102,58,108,105,110,101,40,34,101,110,100,41,40,34,44,32,112,97,114,101,110,116,95,118,97,108,44,32,34,41,34,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,101,116,40,34,115,117,112,101,114,34,44,32,102,117,110,99,116,105,111,110,40,98,108,111,99,107,44,32,99,104,97,105,110,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,97,108,108,105,110,103,95,110,97,109,101,32,61,32,98,108,111,99,107,58,103,101,116,40,34,99,117,114,114,101,110,116,95,98,108,111,99,107,34,41,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,115,108,105,99,101,32,61,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,99,104,97,105,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,51,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,116,101,109,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,105,116,101,109,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,32,32,32,32,32,32,101,110,100,41,40,41,10,32,32,32,32,32,32,32,32,32,32,115,108,105,99,101,91,49,93,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,99,97,108,108,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,115,101,108,102,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,117,110,112,97,99,107,40,115,108,105,99,101,91,49,93,91,50,93,41,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,97,99,116,10,32,32,32,32,32,32,32,32,32,32,105,102,32,110,116,121,112,101,40,99,97,108,108,105,110,103,95,110,97,109,101,41,32,126,61,32,34,118,97,108,117,101,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,32,32,97,99,116,32,61,32,34,105,110,100,101,120,34,10,32,32,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,32,32,97,99,116,32,61,32,34,100,111,116,34,10,32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,112,97,114,101,110,116,95,108,111,99,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,99,116,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,108,108,105,110,103,95,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,117,110,112,97,99,107,40,115,108,105,99,101,41,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,101,110,100,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,98,97,115,101,95,110,97,109,101,32,61,32,95,119,105,116,104,95,48,58,105,110,105,116,95,102,114,101,101,95,118,97,114,40,34,98,97,115,101,34,44,32,116,98,108,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,97,115,101,95,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,100,111,116,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,95,95,105,110,100,101,120,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,98,97,115,101,95,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,34,105,102,34,44,10,32,32,32,32,32,32,32,32,32,32,112,97,114,101,110,116,95,108,111,99,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,115,101,116,109,101,116,97,116,97,98,108,101,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,97,108,108,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,97,115,101,95,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,103,101,116,109,101,116,97,116,97,98,108,101,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,97,108,108,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,97,114,101,110,116,95,108,111,99,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,100,111,116,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,95,95,105,110,100,101,120,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,108,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,34,116,97,98,108,101,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,95,95,105,110,105,116,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,114,117,99,116,111,114,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,108,115,95,109,116,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,34,116,97,98,108,101,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,95,95,105,110,100,101,120,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,97,115,101,95,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,95,95,99,97,108,108,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,102,110,100,101,102,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,109,116,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,46,46,46,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,115,108,105,109,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,114,97,119,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,34,108,111,99,97,108,32,115,101,108,102,32,61,32,115,101,116,109,101,116,97,116,97,98,108,101,40,123,125,44,32,37,115,41,34,41,58,102,111,114,109,97,116,40,98,97,115,101,95,110,97,109,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,109,116,46,95,95,105,110,105,116,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,97,108,108,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,115,101,108,102,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,46,46,46,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,115,101,108,102,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,108,115,95,110,97,109,101,32,61,32,95,119,105,116,104,95,48,58,105,110,105,116,95,102,114,101,101,95,118,97,114,40,34,99,108,97,115,115,34,44,32,123,10,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,34,115,101,116,109,101,116,97,116,97,98,108,101,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,99,97,108,108,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,108,115,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,108,115,95,109,116,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,34,97,115,115,105,103,110,34,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,99,104,97,105,110,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,97,115,101,95,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,100,111,116,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,95,95,99,108,97,115,115,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,125,44,10,32,32,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,99,108,115,95,110,97,109,101,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,32,32,34,114,101,116,117,114,110,34,44,10,32,32,32,32,32,32,32,32,32,32,99,108,115,95,110,97,109,101,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,32,32,100,101,102,95,115,99,111,112,101,32,61,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,115,101,108,102,58,115,116,109,40,123,10,32,32,32,32,32,32,32,32,34,100,101,99,108,97,114,101,34,44,10,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,110,97,109,101,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,108,105,110,101,40,110,97,109,101,44,32,34,32,61,32,34,44,32,100,101,102,95,115,99,111,112,101,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,99,111,109,112,114,101,104,101,110,115,105,111,110,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,44,32,97,99,116,105,111,110,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,101,120,112,44,32,99,108,97,117,115,101,115,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,105,102,32,110,111,116,32,97,99,116,105,111,110,32,116,104,101,110,10,32,32,32,32,32,32,32,32,97,99,116,105,111,110,32,61,32,102,117,110,99,116,105,111,110,40,101,120,112,41,10,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,101,120,112,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,108,111,99,97,108,32,99,117,114,114,101,110,116,95,115,116,109,115,32,61,32,97,99,116,105,111,110,40,101,120,112,41,10,32,32,32,32,32,32,102,111,114,32,95,44,32,99,108,97,117,115,101,32,105,110,32,114,101,118,101,114,115,101,100,40,99,108,97,117,115,101,115,41,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,116,32,61,32,99,108,97,117,115,101,91,49,93,10,32,32,32,32,32,32,32,32,105,102,32,116,32,61,61,32,34,102,111,114,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,110,97,109,101,115,44,32,105,116,101,114,10,32,32,32,32,32,32,32,32,32,32,95,44,32,110,97,109,101,115,44,32,105,116,101,114,32,61,32,117,110,112,97,99,107,40,99,108,97,117,115,101,41,10,32,32,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,95,115,116,109,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,102,111,114,101,97,99,104,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,115,44,10,32,32,32,32,32,32,32,32,32,32,32,32,105,116,101,114,44,10,32,32,32,32,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,95,115,116,109,115,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,101,108,115,101,105,102,32,116,32,61,61,32,34,119,104,101,110,34,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,99,111,110,100,10,32,32,32,32,32,32,32,32,32,32,95,44,32,99,111,110,100,32,61,32,117,110,112,97,99,107,40,99,108,97,117,115,101,41,10,32,32,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,95,115,116,109,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,34,105,102,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,100,44,10,32,32,32,32,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,95,115,116,109,115,10,32,32,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,95,115,116,109,115,32,61,32,101,114,114,111,114,40,34,85,110,107,110,111,119,110,32,99,111,109,112,114,101,104,101,110,115,105,111,110,32,99,108,97,117,115,101,58,32,34,32,46,46,32,116,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,95,115,116,109,115,32,61,32,123,10,32,32,32,32,32,32,32,32,32,32,99,117,114,114,101,110,116,95,115,116,109,115,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,58,115,116,109,115,40,99,117,114,114,101,110,116,95,115,116,109,115,41,10,32,32,32,32,101,110,100,44,10,32,32,32,32,119,105,116,104,32,61,32,102,117,110,99,116,105,111,110,40,115,101,108,102,44,32,110,111,100,101,44,32,114,101,116,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,44,32,101,120,112,44,32,98,108,111,99,107,32,61,32,117,110,112,97,99,107,40,110,111,100,101,41,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,115,101,108,102,58,98,108,111,99,107,40,41,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,97,114,32,61,32,95,119,105,116,104,95,48,58,105,110,105,116,95,102,114,101,101,95,118,97,114,40,34,119,105,116,104,34,44,32,101,120,112,41,10,32,32,32,32,32,32,32,32,115,101,108,102,58,115,101,116,40,34,115,99,111,112,101,95,118,97,114,34,44,32,118,97,114,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,115,40,98,108,111,99,107,41,10,32,32,32,32,32,32,32,32,105,102,32,114,101,116,32,116,104,101,110,10,32,32,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,115,116,109,40,114,101,116,40,118,97,114,41,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,95,119,105,116,104,95,48,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,125,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,46,102,111,114,109,97,116,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,99,111,109,112,105,108,101,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,41,10,32,32,108,111,99,97,108,32,100,97,116,97,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,97,116,97,34,41,10,32,32,108,111,99,97,108,32,83,101,116,10,32,32,100,111,10,32,32,32,32,108,111,99,97,108,32,95,116,97,98,108,101,95,48,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,97,116,97,34,41,10,32,32,32,32,83,101,116,32,61,32,95,116,97,98,108,101,95,48,46,83,101,116,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,110,116,121,112,101,10,32,32,100,111,10,32,32,32,32,108,111,99,97,108,32,95,116,97,98,108,101,95,48,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,116,121,112,101,115,34,41,10,32,32,32,32,110,116,121,112,101,32,61,32,95,116,97,98,108,101,95,48,46,110,116,121,112,101,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,99,111,110,99,97,116,44,32,105,110,115,101,114,116,32,61,32,116,97,98,108,101,46,99,111,110,99,97,116,44,32,116,97,98,108,101,46,105,110,115,101,114,116,10,32,32,105,110,100,101,110,116,95,99,104,97,114,32,61,32,34,32,32,34,10,32,32,117,115,101,114,95,101,114,114,111,114,32,61,32,102,117,110,99,116,105,111,110,40,46,46,46,41,10,32,32,32,32,114,101,116,117,114,110,32,101,114,114,111,114,40,123,10,32,32,32,32,32,32,34,117,115,101,114,45,101,114,114,111,114,34,44,10,32,32,32,32,32,32,46,46,46,10,32,32,32,32,125,41,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,109,97,110,117,97,108,95,114,101,116,117,114,110,32,61,32,83,101,116,40,123,10,32,32,32,32,34,102,111,114,101,97,99,104,34,44,10,32,32,32,32,34,102,111,114,34,44,10,32,32,32,32,34,119,104,105,108,101,34,10,32,32,125,41,10,32,32,100,101,102,97,117,108,116,95,114,101,116,117,114,110,32,61,32,102,117,110,99,116,105,111,110,40,101,120,112,41,10,32,32,32,32,108,111,99,97,108,32,116,32,61,32,110,116,121,112,101,40,101,120,112,41,10,32,32,32,32,105,102,32,116,32,61,61,32,34,99,104,97,105,110,34,32,97,110,100,32,101,120,112,91,50,93,32,61,61,32,34,114,101,116,117,114,110,34,32,116,104,101,110,10,32,32,32,32,32,32,108,111,99,97,108,32,105,116,101,109,115,32,61,32,123,10,32,32,32,32,32,32,32,32,34,101,120,112,108,105,115,116,34,10,32,32,32,32,32,32,125,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,101,120,112,91,51,93,91,50,93,10,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,105,110,115,101,114,116,40,105,116,101,109,115,44,32,118,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,32,32,34,114,101,116,117,114,110,34,44,10,32,32,32,32,32,32,32,32,105,116,101,109,115,10,32,32,32,32,32,32,125,10,32,32,32,32,101,108,115,101,105,102,32,109,97,110,117,97,108,95,114,101,116,117,114,110,91,116,93,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,101,120,112,10,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,123,10,32,32,32,32,32,32,32,32,34,114,101,116,117,114,110,34,44,10,32,32,32,32,32,32,32,32,101,120,112,10,32,32,32,32,32,32,125,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,109,111,111,110,108,105,98,32,61,32,123,10,32,32,32,32,98,105,110,100,32,61,32,102,117,110,99,116,105,111,110,40,116,98,108,44,32,110,97,109,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,99,111,110,99,97,116,40,123,10,32,32,32,32,32,32,32,32,34,109,111,111,110,46,98,105,110,100,40,34,44,10,32,32,32,32,32,32,32,32,116,98,108,44,10,32,32,32,32,32,32,32,32,34,46,34,44,10,32,32,32,32,32,32,32,32,110,97,109,101,44,10,32,32,32,32,32,32,32,32,34,44,32,34,44,10,32,32,32,32,32,32,32,32,116,98,108,44,10,32,32,32,32,32,32,32,32,34,41,34,10,32,32,32,32,32,32,125,41,10,32,32,32,32,101,110,100,10,32,32,125,10,32,32,99,97,115,99,97,100,105,110,103,32,61,32,83,101,116,40,123,10,32,32,32,32,34,105,102,34,44,10,32,32,32,32,34,119,105,116,104,34,10,32,32,125,41,10,32,32,110,111,110,95,97,116,111,109,105,99,32,61,32,83,101,116,40,123,10,32,32,32,32,34,117,112,100,97,116,101,34,10,32,32,125,41,10,32,32,104,97,115,95,118,97,108,117,101,32,61,32,102,117,110,99,116,105,111,110,40,110,111,100,101,41,10,32,32,32,32,105,102,32,110,116,121,112,101,40,110,111,100,101,41,32,61,61,32,34,99,104,97,105,110,34,32,116,104,101,110,10,32,32,32,32,32,32,108,111,99,97,108,32,99,116,121,112,101,32,61,32,110,116,121,112,101,40,110,111,100,101,91,35,110,111,100,101,93,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,99,116,121,112,101,32,126,61,32,34,99,97,108,108,34,32,97,110,100,32,99,116,121,112,101,32,126,61,32,34,99,111,108,111,110,34,10,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,114,101,116,117,114,110,32,116,114,117,101,10,32,32,32,32,101,110,100,10,32,32,101,110,100,10,32,32,105,115,95,110,111,110,95,97,116,111,109,105,99,32,61,32,102,117,110,99,116,105,111,110,40,110,111,100,101,41,10,32,32,32,32,114,101,116,117,114,110,32,110,111,110,95,97,116,111,109,105,99,91,110,116,121,112,101,40,110,111,100,101,41,93,10,32,32,101,110,100,10,32,32,105,115,95,115,108,105,99,101,32,61,32,102,117,110,99,116,105,111,110,40,110,111,100,101,41,10,32,32,32,32,114,101,116,117,114,110,32,110,116,121,112,101,40,110,111,100,101,41,32,61,61,32,34,99,104,97,105,110,34,32,97,110,100,32,110,116,121,112,101,40,110,111,100,101,91,35,110,111,100,101,93,41,32,61,61,32,34,115,108,105,99,101,34,10,32,32,101,110,100,10,32,32,99,111,117,110,116,95,108,105,110,101,115,32,61,32,102,117,110,99,116,105,111,110,40,115,116,114,41,10,32,32,32,32,108,111,99,97,108,32,99,111,117,110,116,32,61,32,49,10,32,32,32,32,102,111,114,32,95,32,105,110,32,115,116,114,58,103,109,97,116,99,104,40,34,92,110,34,41,32,100,111,10,32,32,32,32,32,32,99,111,117,110,116,32,61,32,99,111,117,110,116,32,43,32,49,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,99,111,117,110,116,10,32,32,101,110,100,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,100,117,109,112,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,100,117,109,112,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,102,108,97,116,95,118,97,108,117,101,10,32,32,102,108,97,116,95,118,97,108,117,101,32,61,32,102,117,110,99,116,105,111,110,40,111,112,44,32,100,101,112,116,104,41,10,32,32,32,32,105,102,32,100,101,112,116,104,32,61,61,32,110,105,108,32,116,104,101,110,10,32,32,32,32,32,32,100,101,112,116,104,32,61,32,49,10,32,32,32,32,101,110,100,10,32,32,32,32,105,102,32,116,121,112,101,40,111,112,41,32,61,61,32,34,115,116,114,105,110,103,34,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,39,34,39,32,46,46,32,111,112,32,46,46,32,39,34,39,10,32,32,32,32,101,110,100,10,32,32,32,32,105,102,32,116,121,112,101,40,111,112,41,32,126,61,32,34,116,97,98,108,101,34,32,116,104,101,110,10,32,32,32,32,32,32,114,101,116,117,114,110,32,116,111,115,116,114,105,110,103,40,111,112,41,10,32,32,32,32,101,110,100,10,32,32,32,32,108,111,99,97,108,32,105,116,101,109,115,32,61,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,111,112,10,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,105,116,101,109,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,102,108,97,116,95,118,97,108,117,101,40,105,116,101,109,44,32,100,101,112,116,104,32,43,32,49,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,101,110,100,41,40,41,10,32,32,32,32,108,111,99,97,108,32,112,111,115,32,61,32,111,112,91,45,49,93,10,32,32,32,32,114,101,116,117,114,110,32,34,123,34,32,46,46,32,40,112,111,115,32,97,110,100,32,34,91,34,32,46,46,32,112,111,115,32,46,46,32,34,93,32,34,32,111,114,32,34,34,41,32,46,46,32,116,97,98,108,101,46,99,111,110,99,97,116,40,105,116,101,109,115,44,32,34,44,32,34,41,32,46,46,32,34,125,34,10,32,32,101,110,100,10,32,32,118,97,108,117,101,32,61,32,102,117,110,99,116,105,111,110,40,111,112,41,10,32,32,32,32,114,101,116,117,114,110,32,102,108,97,116,95,118,97,108,117,101,40,111,112,41,10,32,32,101,110,100,10,32,32,116,114,101,101,32,61,32,102,117,110,99,116,105,111,110,40,98,108,111,99,107,41,10,32,32,32,32,114,101,116,117,114,110,32,40,102,117,110,99,116,105,111,110,40,41,10,32,32,32,32,32,32,108,111,99,97,108,32,95,97,99,99,117,109,95,48,32,61,32,123,32,125,10,32,32,32,32,32,32,108,111,99,97,108,32,95,108,101,110,95,48,32,61,32,48,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,105,116,101,109,95,48,32,61,32,98,108,111,99,107,10,32,32,32,32,32,32,32,32,102,111,114,32,95,105,110,100,101,120,95,48,32,61,32,49,44,32,35,95,105,116,101,109,95,48,32,100,111,10,32,32,32,32,32,32,32,32,32,32,108,111,99,97,108,32,118,97,108,117,101,32,61,32,95,105,116,101,109,95,48,91,95,105,110,100,101,120,95,48,93,10,32,32,32,32,32,32,32,32,32,32,95,108,101,110,95,48,32,61,32,95,108,101,110,95,48,32,43,32,49,10,32,32,32,32,32,32,32,32,32,32,95,97,99,99,117,109,95,48,91,95,108,101,110,95,48,93,32,61,32,112,114,105,110,116,40,102,108,97,116,95,118,97,108,117,101,40,118,97,108,117,101,41,41,10,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,114,101,116,117,114,110,32,95,97,99,99,117,109,95,48,10,32,32,32,32,101,110,100,41,40,41,10,32,32,101,110,100,10,32,32,10,101,110,100,10,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,109,111,111,110,115,99,114,105,112,116,46,101,114,114,111,114,115,39,93,32,61,32,102,117,110,99,116,105,111,110,40,41,10,32,32,109,111,100,117,108,101,40,34,109,111,111,110,115,99,114,105,112,116,46,101,114,114,111,114,115,34,44,32,112,97,99,107,97,103,101,46,115,101,101,97,108,108,41,10,32,32,108,111,99,97,108,32,109,111,111,110,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,34,41,10,32,32,108,111,99,97,108,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,40,34,109,111,111,110,115,99,114,105,112,116,46,117,116,105,108,34,41,10,32,32,114,101,113,117,105,114,101,40,34,108,112,101,103,34,41,10,32,32,108,111,99,97,108,32,99,111,110,99,97,116,44,32,105,110,115,101,114,116,32,61,32,116,97,98,108,101,46,99,111,110,99,97,116,44,32,116,97,98,108,101,46,105,110,115,101,114,116,10,32,32,108,111,99,97,108,32,115,112,108,105,116,44,32,112,111,115,95,116,111,95,108,105,110,101,32,61,32,117,116,105,108,46,115,112,108,105,116,44,32,117,116,105,108,46,112,111,115,95,116,111,95,108,105,110,101,10,32,32,108,111,99,97,108,32,108,111,111,107,117,112,95,108,105,110,101,10,32,32,108,111,111,107,117,112,95,108,105,110,101,32,61,32,102,117,110,99,116,105,111,110,40,102,110,97,109,101,44,32,112,111,115,44,32,99,97,99,104,101,41,10,32,32,32,32,105,102,32,110,111,116,32,99,97,99,104,101,91,102,110,97,109,101,93,32,116,104,101,110,10,32,32,32,32,32,32,100,111,10,32,32,32,32,32,32,32,32,108,111,99,97,108,32,95,119,105,116,104,95,48,32,61,32,105,111,46,111,112,101,110,40,102,110,97,109,101,41,10,32,32,32,32,32,32,32,32,99,97,99,104,101,91,102,110,97,109,101,93,32,61,32,95,119,105,116,104,95,48,58,114,101,97,100,40,34,42,97,34,41,10,32,32,32,32,32,32,32,32,95,119,105,116,104,95,48,58,99,108,111,115,101,40,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,112,111,115,95,116,111,95,108,105,110,101,40,99,97,99,104,101,91,102,110,97,109,101,93,44,32,112,111,115,41,10,32,32,101,110,100,10,32,32,108,111,99,97,108,32,114,101,118,101,114,115,101,95,108,105,110,101,95,110,117,109,98,101,114,10,32,32,114,101,118,101,114,115,101,95,108,105,110,101,95,110,117,109,98,101,114,32,61,32,102,117,110,99,116,105,111,110,40,102,110,97,109,101,44,32,108,105,110,101,95,116,97,98,108,101,44,32,108,105,110,101,95,110,117,109,44,32,99,97,99,104,101,41,10,32,32,32,32,102,111,114,32,105,32,61,32,108,105,110,101,95,110,117,109,44,32,48,44,32,45,49,32,100,111,10,32,32,32,32,32,32,105,102,32,108,105,110,101,95,116,97,98,108,101,91,105,93,32,116,104,101,110,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,108,111,111,107,117,112,95,108,105,110,101,40,102,110,97,109,101,44,32,108,105,110,101,95,116,97,98,108,101,91,105,93,44,32,99,97,99,104,101,41,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,34,117,110,107,110,111,119,110,34,10,32,32,101,110,100,10,32,32,114,101,119,114,105,116,101,95,116,114,97,99,101,98,97,99,107,32,61,32,102,117,110,99,116,105,111,110,40,116,101,120,116,44,32,101,114,114,41,10,32,32,32,32,108,111,99,97,108,32,108,105,110,101,95,116,97,98,108,101,115,32,61,32,109,111,111,110,46,108,105,110,101,95,116,97,98,108,101,115,10,32,32,32,32,108,111,99,97,108,32,86,44,32,83,44,32,67,116,44,32,67,32,61,32,108,112,101,103,46,86,44,32,108,112,101,103,46,83,44,32,108,112,101,103,46,67,116,44,32,108,112,101,103,46,67,10,32,32,32,32,108,111,99,97,108,32,104,101,97,100,101,114,95,116,101,120,116,32,61,32,34,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,34,10,32,32,32,32,108,111,99,97,108,32,72,101,97,100,101,114,44,32,76,105,110,101,32,61,32,86,40,34,72,101,97,100,101,114,34,41,44,32,86,40,34,76,105,110,101,34,41,10,32,32,32,32,108,111,99,97,108,32,66,114,101,97,107,32,61,32,108,112,101,103,46,83,40,34,92,110,34,41,10,32,32,32,32,108,111,99,97,108,32,103,32,61,32,108,112,101,103,46,80,40,123,10,32,32,32,32,32,32,72,101,97,100,101,114,44,10,32,32,32,32,32,32,72,101,97,100,101,114,32,61,32,104,101,97,100,101,114,95,116,101,120,116,32,42,32,66,114,101,97,107,32,42,32,67,116,40,76,105,110,101,32,94,32,49,41,44,10,32,32,32,32,32,32,76,105,110,101,32,61,32,34,92,116,34,32,42,32,67,40,40,49,32,45,32,66,114,101,97,107,41,32,94,32,48,41,32,42,32,40,66,114,101,97,107,32,43,32,45,49,41,10,32,32,32,32,125,41,10,32,32,32,32,108,111,99,97,108,32,99,97,99,104,101,32,61,32,123,32,125,10,32,32,32,32,108,111,99,97,108,32,114,101,119,114,105,116,101,95,115,105,110,103,108,101,10,32,32,32,32,114,101,119,114,105,116,101,95,115,105,110,103,108,101,32,61,32,102,117,110,99,116,105,111,110,40,116,114,97,99,101,41,10,32,32,32,32,32,32,108,111,99,97,108,32,102,110,97,109,101,44,32,108,105,110,101,44,32,109,115,103,32,61,32,116,114,97,99,101,58,109,97,116,99,104,40,39,94,37,91,115,116,114,105,110,103,32,34,40,46,45,41,34,93,58,40,37,100,43,41,58,32,40,46,42,41,36,39,41,10,32,32,32,32,32,32,108,111,99,97,108,32,116,98,108,32,61,32,108,105,110,101,95,116,97,98,108,101,115,91,102,110,97,109,101,93,10,32,32,32,32,32,32,105,102,32,102,110,97,109,101,32,97,110,100,32,116,98,108,32,116,104,101,110,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,99,111,110,99,97,116,40,123,10,32,32,32,32,32,32,32,32,32,32,102,110,97,109,101,44,10,32,32,32,32,32,32,32,32,32,32,34,58,34,44,10,32,32,32,32,32,32,32,32,32,32,114,101,118,101,114,115,101,95,108,105,110,101,95,110,117,109,98,101,114,40,102,110,97,109,101,44,32,116,98,108,44,32,108,105,110,101,44,32,99,97,99,104,101,41,44,10,32,32,32,32,32,32,32,32,32,32,34,58,32,34,44,10,32,32,32,32,32,32,32,32,32,32,109,115,103,10,32,32,32,32,32,32,32,32,125,41,10,32,32,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,114,97,99,101,10,32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,10,32,32,32,32,101,114,114,32,61,32,114,101,119,114,105,116,101,95,115,105,110,103,108,101,40,101,114,114,41,10,32,32,32,32,108,111,99,97,108,32,109,97,116,99,104,32,61,32,103,58,109,97,116,99,104,40,116,101,120,116,41,10,32,32,32,32,102,111,114,32,105,44,32,116,114,97,99,101,32,105,110,32,105,112,97,105,114,115,40,109,97,116,99,104,41,32,100,111,10,32,32,32,32,32,32,109,97,116,99,104,91,105,93,32,61,32,114,101,119,114,105,116,101,95,115,105,110,103,108,101,40,116,114,97,99,101,41,10,32,32,32,32,101,110,100,10,32,32,32,32,114,101,116,117,114,110,32,99,111,110,99,97,116,40,123,10,32,32,32,32,32,32,34,109,111,111,110,58,34,32,46,46,32,101,114,114,44,10,32,32,32,32,32,32,104,101,97,100,101,114,95,116,101,120,116,44,10,32,32,32,32,32,32,34,92,116,34,32,46,46,32,99,111,110,99,97,116,40,109,97,116,99,104,44,32,34,92,110,92,116,34,41,10,32,32,32,32,125,44,32,34,92,110,34,41,10,32,32,101,110,100,10,32,32,10,101,110,100,10,114,101,116,117,114,110,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,34,109,111,111,110,115,99,114,105,112,116,34,93,40,41,10] /* package.preload['moo */, "i8", ALLOC_STATIC);
_moonscript_lua_len=allocate([74582], ["i32",0,0,0,0], ALLOC_STATIC);
_l=allocate(1, "%struct.lua_State*", ALLOC_STATIC);
__str646=allocate([116,104,101,114,101,32,97,114,101,32,37,100,32,97,114,103,117,109,101,110,116,115,46,10,0] /* there are %d argumen */, "i8", ALLOC_STATIC);
__str1647=allocate([32,42,32,37,115,10,0] /*  _ %s\0A\00 */, "i8", ALLOC_STATIC);
__str2648=allocate([109,111,111,110,115,99,114,105,112,116,46,108,117,97,0] /* moonscript.lua\00 */, "i8", ALLOC_STATIC);
__str3649=allocate([70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,109,111,111,110,115,99,114,105,112,116,46,108,117,97,10,0] /* Failed to load moons */, "i8", ALLOC_STATIC);
__str650=allocate([117,112,118,97,108,117,101,115,32,40,37,100,41,32,102,111,114,32,37,112,58,10,0] /* upvalues (%d) for %p */, "i8", ALLOC_STATIC);
__str1651=allocate([9,37,100,9,37,115,10,0] /* \09%d\09%s\0A\00 */, "i8", ALLOC_STATIC);
__str2652=allocate([108,111,99,97,108,115,32,40,37,100,41,32,102,111,114,32,37,112,58,10,0] /* locals (%d) for %p:\ */, "i8", ALLOC_STATIC);
__str3653=allocate([9,37,100,9,37,115,9,37,100,9,37,100,10,0] /* \09%d\09%s\09%d\09%d */, "i8", ALLOC_STATIC);
__str4654=allocate([99,111,110,115,116,97,110,116,115,32,40,37,100,41,32,102,111,114,32,37,112,58,10,0] /* constants (%d) for % */, "i8", ALLOC_STATIC);
__str5655=allocate([9,37,100,9,0] /* \09%d\09\00 */, "i8", ALLOC_STATIC);
__str6656=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
__str7657=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
__str8658=allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_STATIC);
__str9659=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
__str10660=allocate([37,46,49,52,103,0] /* %.14g\00 */, "i8", ALLOC_STATIC);
__str11661=allocate([63,32,116,121,112,101,61,37,100,0] /* ? type=%d\00 */, "i8", ALLOC_STATIC);
__str12662=allocate([92,34,0] /* \5C\22\00 */, "i8", ALLOC_STATIC);
__str13663=allocate([92,92,0] /* \5C\5C\00 */, "i8", ALLOC_STATIC);
__str14664=allocate([92,97,0] /* \5Ca\00 */, "i8", ALLOC_STATIC);
__str15665=allocate([92,98,0] /* \5Cb\00 */, "i8", ALLOC_STATIC);
__str16666=allocate([92,102,0] /* \5Cf\00 */, "i8", ALLOC_STATIC);
__str17667=allocate([92,110,0] /* \5Cn\00 */, "i8", ALLOC_STATIC);
__str18668=allocate([92,114,0] /* \5Cr\00 */, "i8", ALLOC_STATIC);
__str19669=allocate([92,116,0] /* \5Ct\00 */, "i8", ALLOC_STATIC);
__str20670=allocate([92,118,0] /* \5Cv\00 */, "i8", ALLOC_STATIC);
__str21671=allocate([92,37,48,51,117,0] /* \5C%03u\00 */, "i8", ALLOC_STATIC);
__str22672=allocate([91,37,100,93,9,0] /* [%d]\09\00 */, "i8", ALLOC_STATIC);
__str23673=allocate([91,45,93,9,0] /* [-]\09\00 */, "i8", ALLOC_STATIC);
__str24674=allocate([37,45,57,115,9,0] /* %-9s\09\00 */, "i8", ALLOC_STATIC);
__str25675=allocate([37,100,0] /* %d\00 */, "i8", ALLOC_STATIC);
__str26676=allocate([32,37,100,0] /*  %d\00 */, "i8", ALLOC_STATIC);
__str27677=allocate([37,100,32,37,100,0] /* %d %d\00 */, "i8", ALLOC_STATIC);
__str28678=allocate([9,59,32,0] /* \09; \00 */, "i8", ALLOC_STATIC);
__str29679=allocate([9,59,32,37,115,0] /* \09; %s\00 */, "i8", ALLOC_STATIC);
__str30680=allocate([45,0] /* -\00 */, "i8", ALLOC_STATIC);
__str31681=allocate([32,0] /*  \00 */, "i8", ALLOC_STATIC);
__str32682=allocate([9,59,32,116,111,32,37,100,0] /* \09; to %d\00 */, "i8", ALLOC_STATIC);
__str33683=allocate([9,59,32,37,112,0] /* \09; %p\00 */, "i8", ALLOC_STATIC);
__str34684=allocate([9,59,32,37,100,0] /* \09; %d\00 */, "i8", ALLOC_STATIC);
__str35685=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
__str36686=allocate([40,98,115,116,114,105,110,103,41,0] /* (bstring)\00 */, "i8", ALLOC_STATIC);
__str37687=allocate([40,115,116,114,105,110,103,41,0] /* (string)\00 */, "i8", ALLOC_STATIC);
__str38688=allocate([10,37,115,32,60,37,115,58,37,100,44,37,100,62,32,40,37,100,32,105,110,115,116,114,117,99,116,105,111,110,37,115,44,32,37,100,32,98,121,116,101,115,32,97,116,32,37,112,41,10,0] /* \0A%s <%s:%d,%d> (%d */, "i8", ALLOC_STATIC);
__str39689=allocate([109,97,105,110,0] /* main\00 */, "i8", ALLOC_STATIC);
__str40690=allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_STATIC);
__str41691=allocate(1, "i8", ALLOC_STATIC);
__str42692=allocate([115,0] /* s\00 */, "i8", ALLOC_STATIC);
__str43693=allocate([37,100,37,115,32,112,97,114,97,109,37,115,44,32,37,100,32,115,108,111,116,37,115,44,32,37,100,32,117,112,118,97,108,117,101,37,115,44,32,0] /* %d%s param%s, %d slo */, "i8", ALLOC_STATIC);
__str44694=allocate([43,0] /* +\00 */, "i8", ALLOC_STATIC);
__str45695=allocate([37,100,32,108,111,99,97,108,37,115,44,32,37,100,32,99,111,110,115,116,97,110,116,37,115,44,32,37,100,32,102,117,110,99,116,105,111,110,37,115,10,0] /* %d local%s, %d const */, "i8", ALLOC_STATIC);
__str696=allocate([108,112,101,103,46,110,101,119,112,102,0] /* lpeg.newpf\00 */, "i8", ALLOC_STATIC);
__str1697=allocate([108,112,101,103,45,112,97,116,116,101,114,110,0] /* lpeg-pattern\00 */, "i8", ALLOC_STATIC);
__str2698=allocate([108,112,101,103,45,109,97,120,115,116,97,99,107,0] /* lpeg-maxstack\00 */, "i8", ALLOC_STATIC);
_metapattreg=allocate([0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 0, 0, 0, 368, 0, 0, 0, 0, 0, 0, 0, 370, 0, 0, 0, 0, 0, 0, 0, 372, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str3699=allocate([108,112,101,103,0] /* lpeg\00 */, "i8", ALLOC_STATIC);
_pattreg=allocate([0, 0, 0, 0, 376, 0, 0, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0, 0, 0, 0, 380, 0, 0, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 0, 0, 0, 0, 0, 386, 0, 0, 0, 0, 0, 0, 0, 388, 0, 0, 0, 0, 0, 0, 0, 390, 0, 0, 0, 0, 0, 0, 0, 392, 0, 0, 0, 0, 0, 0, 0, 394, 0, 0, 0, 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 404, 0, 0, 0, 0, 0, 0, 0, 406, 0, 0, 0, 0, 0, 0, 0, 408, 0, 0, 0, 0, 0, 0, 0, 410, 0, 0, 0, 0, 0, 0, 0, 412, 0, 0, 0, 0, 0, 0, 0, 414, 0, 0, 0, 0, 0, 0, 0, 416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0,"i8*",0,0,0,"i32 (%struct.lua_State*)*",0,0,0], ALLOC_STATIC);
__str4700=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
__str5701=allocate([109,97,116,99,104,0] /* match\00 */, "i8", ALLOC_STATIC);
__str6702=allocate([112,114,105,110,116,0] /* print\00 */, "i8", ALLOC_STATIC);
__str7703=allocate([108,111,99,97,108,101,0] /* locale\00 */, "i8", ALLOC_STATIC);
__str8704=allocate([115,101,116,109,97,120,115,116,97,99,107,0] /* setmaxstack\00 */, "i8", ALLOC_STATIC);
__str9705=allocate([66,0] /* B\00 */, "i8", ALLOC_STATIC);
__str10706=allocate([67,0] /* C\00 */, "i8", ALLOC_STATIC);
__str11707=allocate([67,102,0] /* Cf\00 */, "i8", ALLOC_STATIC);
__str12708=allocate([67,99,0] /* Cc\00 */, "i8", ALLOC_STATIC);
__str13709=allocate([67,103,0] /* Cg\00 */, "i8", ALLOC_STATIC);
__str14710=allocate([67,112,0] /* Cp\00 */, "i8", ALLOC_STATIC);
__str15711=allocate([67,98,0] /* Cb\00 */, "i8", ALLOC_STATIC);
__str16712=allocate([67,97,114,103,0] /* Carg\00 */, "i8", ALLOC_STATIC);
__str17713=allocate([67,109,116,0] /* Cmt\00 */, "i8", ALLOC_STATIC);
__str18714=allocate([67,115,0] /* Cs\00 */, "i8", ALLOC_STATIC);
__str19715=allocate([67,116,0] /* Ct\00 */, "i8", ALLOC_STATIC);
__str20716=allocate([80,0] /* P\00 */, "i8", ALLOC_STATIC);
__str21717=allocate([82,0] /* R\00 */, "i8", ALLOC_STATIC);
__str22718=allocate([83,0] /* S\00 */, "i8", ALLOC_STATIC);
__str23719=allocate([86,0] /* V\00 */, "i8", ALLOC_STATIC);
__str24720=allocate([116,121,112,101,0] /* type\00 */, "i8", ALLOC_STATIC);
__str25721=allocate([118,101,114,115,105,111,110,0] /* version\00 */, "i8", ALLOC_STATIC);
__str26722=allocate([48,46,49,48,0] /* 0.10\00 */, "i8", ALLOC_STATIC);
__str27723=allocate([112,97,116,116,101,114,110,0] /* pattern\00 */, "i8", ALLOC_STATIC);
__str28724=allocate([110,111,110,45,110,105,108,32,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0] /* non-nil value expect */, "i8", ALLOC_STATIC);
__str29725=allocate([97,117,120,32,60,61,32,48,120,70,70,0] /* aux <= 0xFF\00 */, "i8", ALLOC_STATIC);
__str30726=allocate([108,112,101,103,47,108,112,101,103,46,99,0] /* lpeg/lpeg.c\00 */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___setinstaux=allocate([118,111,105,100,32,115,101,116,105,110,115,116,97,117,120,40,73,110,115,116,114,117,99,116,105,111,110,32,42,44,32,79,112,99,111,100,101,44,32,105,110,116,44,32,105,110,116,41,0] /* void setinstaux(Inst */, "i8", ALLOC_STATIC);
__str31727=allocate([112,97,116,116,101,114,110,32,116,111,111,32,98,105,103,0] /* pattern too big\00 */, "i8", ALLOC_STATIC);
__str32728=allocate([37,115,32,105,115,32,110,111,116,32,97,32,112,97,116,116,101,114,110,0] /* %s is not a pattern\ */, "i8", ALLOC_STATIC);
__str33729=allocate([103,114,97,109,109,97,114,32,116,111,111,32,108,97,114,103,101,0] /* grammar too large\00 */, "i8", ALLOC_STATIC);
__str34730=allocate([103,114,97,109,109,97,114,32,104,97,115,32,116,111,111,32,109,97,110,121,32,114,117,108,101,115,0] /* grammar has too many */, "i8", ALLOC_STATIC);
__str35731=allocate([101,109,112,116,121,32,103,114,97,109,109,97,114,0] /* empty grammar\00 */, "i8", ALLOC_STATIC);
__str36732=allocate([105,110,105,116,105,97,108,32,114,117,108,101,32,110,111,116,32,100,101,102,105,110,101,100,32,105,110,32,103,105,118,101,110,32,103,114,97,109,109,97,114,0] /* initial rule not def */, "i8", ALLOC_STATIC);
_opproperties=allocate([7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 88, 0, 0, 0, 56, 0, 0, 0, 120, 0, 0, 0, 120, 0, 0, 0, 120, 0, 0, 0, 80, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
__str37733=allocate([37,115,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,32,105,110,32,103,105,118,101,110,32,103,114,97,109,109,97,114,0] /* %s is not defined in */, "i8", ALLOC_STATIC);
__str38734=allocate([111,112,91,115,116,97,114,116,32,45,32,49,93,46,105,46,99,111,100,101,32,61,61,32,73,67,104,111,105,99,101,32,38,38,32,40,40,115,116,97,114,116,32,45,32,49,41,32,43,32,40,40,111,112,41,43,40,115,116,97,114,116,32,45,32,49,41,41,45,62,105,46,111,102,102,115,101,116,41,32,61,61,32,116,97,114,103,101,116,40,111,112,44,32,105,32,43,32,49,41,0] /* op[start - 1].i.code */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___checkrule=allocate([118,111,105,100,32,99,104,101,99,107,114,117,108,101,40,108,117,97,95,83,116,97,116,101,32,42,44,32,73,110,115,116,114,117,99,116,105,111,110,32,42,44,32,105,110,116,44,32,105,110,116,44,32,105,110,116,44,32,105,110,116,41,0] /* void checkrule(lua_S */, "i8", ALLOC_STATIC);
__str39735=allocate([112,111,115,115,105,98,108,101,32,105,110,102,105,110,105,116,101,32,108,111,111,112,32,105,110,32,37,115,0] /* possible infinite lo */, "i8", ALLOC_STATIC);
__str40736=allocate([111,112,91,105,32,45,32,49,93,46,105,46,99,111,100,101,32,61,61,32,73,82,101,116,0] /* op[i - 1].i.code ==  */, "i8", ALLOC_STATIC);
_verify_dummy=allocate(1, "i8", ALLOC_STATIC);
__str41737=allocate([116,111,111,32,109,97,110,121,32,112,101,110,100,105,110,103,32,99,97,108,108,115,47,99,104,111,105,99,101,115,0] /* too many pending cal */, "i8", ALLOC_STATIC);
__str42738=allocate([40,112,32,43,32,49,41,45,62,105,46,99,111,100,101,32,33,61,32,73,82,101,116,0] /* (p + 1)->i.code != I */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___verify=allocate([105,110,116,32,118,101,114,105,102,121,40,108,117,97,95,83,116,97,116,101,32,42,44,32,73,110,115,116,114,117,99,116,105,111,110,32,42,44,32,99,111,110,115,116,32,73,110,115,116,114,117,99,116,105,111,110,32,42,44,32,73,110,115,116,114,117,99,116,105,111,110,32,42,44,32,105,110,116,44,32,105,110,116,41,0] /* int verify(lua_State */, "i8", ALLOC_STATIC);
__str43739=allocate([37,115,32,105,115,32,108,101,102,116,32,114,101,99,117,114,115,105,118,101,0] /* %s is left recursive */, "i8", ALLOC_STATIC);
__str44740=allocate([98,97,99,107,116,111,112,32,62,32,48,32,38,38,32,112,45,62,105,46,111,102,102,115,101,116,32,62,32,48,0] /* backtop > 0 && p->i. */, "i8", ALLOC_STATIC);
__str45741=allocate([98,97,99,107,116,111,112,32,62,32,48,0] /* backtop > 0\00 */, "i8", ALLOC_STATIC);
__str46742=allocate([112,111,115,116,97,98,108,101,32,33,61,32,48,0] /* postable != 0\00 */, "i8", ALLOC_STATIC);
__str47743=allocate([40,79,112,99,111,100,101,41,40,112,32,45,32,49,41,45,62,105,46,99,111,100,101,32,61,61,32,73,67,104,111,105,99,101,0] /* (Opcode)(p - 1)->i.c */, "i8", ALLOC_STATIC);
__str48744=allocate([40,79,112,99,111,100,101,41,40,112,32,45,32,49,41,45,62,105,46,99,111,100,101,32,61,61,32,73,70,97,105,108,0] /* (Opcode)(p - 1)->i.c */, "i8", ALLOC_STATIC);
__str49745=allocate([48,0] /* 0\00 */, "i8", ALLOC_STATIC);
__str50746=allocate([98,97,99,107,116,111,112,32,61,61,32,48,0] /* backtop == 0\00 */, "i8", ALLOC_STATIC);
__str51747=allocate([114,117,108,101,32,39,37,115,39,0] /* rule '%s'\00 */, "i8", ALLOC_STATIC);
__str52748=allocate([114,117,108,101,32,60,97,32,37,115,62,0] /* rule <a %s>\00 */, "i8", ALLOC_STATIC);
__str53749=allocate([114,97,110,103,101,32,109,117,115,116,32,104,97,118,101,32,116,119,111,32,99,104,97,114,97,99,116,101,114,115,0] /* range must have two  */, "i8", ALLOC_STATIC);
__str54750=allocate([110,32,60,61,32,48,120,70,32,38,38,32,115,116,97,114,116,32,60,61,32,105,32,38,38,32,105,32,60,32,101,110,100,0] /* n <= 0xF && start <= */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___optimizecaptures=allocate([118,111,105,100,32,111,112,116,105,109,105,122,101,99,97,112,116,117,114,101,115,40,73,110,115,116,114,117,99,116,105,111,110,32,42,41,0] /* void optimizecapture */, "i8", ALLOC_STATIC);
__str55751=allocate([40,40,111,112,112,114,111,112,101,114,116,105,101,115,91,40,112,32,43,32,115,116,97,114,116,41,45,62,105,46,99,111,100,101,93,32,38,32,40,48,120,52,41,41,32,38,38,32,40,112,32,43,32,115,116,97,114,116,41,45,62,105,46,111,102,102,115,101,116,32,61,61,32,48,41,32,38,38,32,40,111,112,112,114,111,112,101,114,116,105,101,115,91,40,112,32,43,32,105,41,45,62,105,46,99,111,100,101,93,32,38,32,40,48,120,49,48,41,41,0] /* ((opproperties[(p +  */, "i8", ALLOC_STATIC);
__str56752=allocate([105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,105,110,100,101,120,0] /* invalid argument ind */, "i8", ALLOC_STATIC);
__str57753=allocate([108,111,111,107,98,101,104,105,110,100,32,100,101,108,116,97,32,116,111,111,32,108,97,114,103,101,0] /* lookbehind delta too */, "i8", ALLOC_STATIC);
__str58754=allocate([108,111,111,107,98,101,104,105,110,100,32,112,97,116,116,101,114,110,32,99,97,110,110,111,116,32,99,111,110,116,97,105,110,32,110,111,110,32,116,101,114,109,105,110,97,108,115,0] /* lookbehind pattern c */, "i8", ALLOC_STATIC);
__str59755=allocate([97,108,110,117,109,0] /* alnum\00 */, "i8", ALLOC_STATIC);
__str60756=allocate([97,108,112,104,97,0] /* alpha\00 */, "i8", ALLOC_STATIC);
__str61757=allocate([99,110,116,114,108,0] /* cntrl\00 */, "i8", ALLOC_STATIC);
__str62758=allocate([100,105,103,105,116,0] /* digit\00 */, "i8", ALLOC_STATIC);
__str63759=allocate([103,114,97,112,104,0] /* graph\00 */, "i8", ALLOC_STATIC);
__str64760=allocate([108,111,119,101,114,0] /* lower\00 */, "i8", ALLOC_STATIC);
__str65761=allocate([112,117,110,99,116,0] /* punct\00 */, "i8", ALLOC_STATIC);
__str66762=allocate([115,112,97,99,101,0] /* space\00 */, "i8", ALLOC_STATIC);
__str67763=allocate([117,112,112,101,114,0] /* upper\00 */, "i8", ALLOC_STATIC);
__str68764=allocate([120,100,105,103,105,116,0] /* xdigit\00 */, "i8", ALLOC_STATIC);
__str69765=allocate([91,0] /* [\00 */, "i8", ALLOC_STATIC);
__str70766=allocate([37,100,32,61,32,0] /* %d = \00 */, "i8", ALLOC_STATIC);
__str71767=allocate([37,115,32,32,0] /* %s  \00 */, "i8", ALLOC_STATIC);
__str72768=allocate([93,10,0] /* ]\0A\00 */, "i8", ALLOC_STATIC);
_printinst_names=allocate(96, "i8*", ALLOC_STATIC);
__str73769=allocate([97,110,121,0] /* any\00 */, "i8", ALLOC_STATIC);
__str74770=allocate([99,104,97,114,0] /* char\00 */, "i8", ALLOC_STATIC);
__str75771=allocate([115,101,116,0] /* set\00 */, "i8", ALLOC_STATIC);
__str76772=allocate([115,112,97,110,0] /* span\00 */, "i8", ALLOC_STATIC);
__str77773=allocate([98,97,99,107,0] /* back\00 */, "i8", ALLOC_STATIC);
__str78774=allocate([114,101,116,0] /* ret\00 */, "i8", ALLOC_STATIC);
__str79775=allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_STATIC);
__str80=allocate([99,104,111,105,99,101,0] /* choice\00 */, "i8", ALLOC_STATIC);
__str81=allocate([106,109,112,0] /* jmp\00 */, "i8", ALLOC_STATIC);
__str82=allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_STATIC);
__str83776=allocate([111,112,101,110,95,99,97,108,108,0] /* open_call\00 */, "i8", ALLOC_STATIC);
__str84=allocate([99,111,109,109,105,116,0] /* commit\00 */, "i8", ALLOC_STATIC);
__str85=allocate([112,97,114,116,105,97,108,95,99,111,109,109,105,116,0] /* partial_commit\00 */, "i8", ALLOC_STATIC);
__str86=allocate([98,97,99,107,95,99,111,109,109,105,116,0] /* back_commit\00 */, "i8", ALLOC_STATIC);
__str87=allocate([102,97,105,108,116,119,105,99,101,0] /* failtwice\00 */, "i8", ALLOC_STATIC);
__str88=allocate([102,97,105,108,0] /* fail\00 */, "i8", ALLOC_STATIC);
__str89=allocate([103,105,118,101,117,112,0] /* giveup\00 */, "i8", ALLOC_STATIC);
__str90=allocate([102,117,110,99,0] /* func\00 */, "i8", ALLOC_STATIC);
__str91=allocate([102,117,108,108,99,97,112,116,117,114,101,0] /* fullcapture\00 */, "i8", ALLOC_STATIC);
__str92=allocate([101,109,112,116,121,99,97,112,116,117,114,101,0] /* emptycapture\00 */, "i8", ALLOC_STATIC);
__str93=allocate([101,109,112,116,121,99,97,112,116,117,114,101,105,100,120,0] /* emptycaptureidx\00 */, "i8", ALLOC_STATIC);
__str94=allocate([111,112,101,110,99,97,112,116,117,114,101,0] /* opencapture\00 */, "i8", ALLOC_STATIC);
__str95=allocate([99,108,111,115,101,99,97,112,116,117,114,101,0] /* closecapture\00 */, "i8", ALLOC_STATIC);
__str96=allocate([99,108,111,115,101,114,117,110,116,105,109,101,0] /* closeruntime\00 */, "i8", ALLOC_STATIC);
__str97=allocate([37,48,50,108,100,58,32,37,115,32,0] /* %02ld: %s \00 */, "i8", ALLOC_STATIC);
__str98=allocate([39,37,99,39,0] /* '%c'\00 */, "i8", ALLOC_STATIC);
__str99=allocate([42,32,37,100,0] /* _ %d\00 */, "i8", ALLOC_STATIC);
__str100=allocate([40,110,32,61,32,37,100,41,32,32,40,111,102,102,32,61,32,37,100,41,0] /* (n = %d)  (off = %d) */, "i8", ALLOC_STATIC);
__str101=allocate([45,62,32,37,100,0] /* -> %d\00 */, "i8", ALLOC_STATIC);
__str102=allocate([32,40,37,100,41,0] /*  (%d)\00 */, "i8", ALLOC_STATIC);
__str103=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
__str104=allocate([40,37,48,50,120,41,0] /* (%02x)\00 */, "i8", ALLOC_STATIC);
__str105=allocate([40,37,48,50,120,45,37,48,50,120,41,0] /* (%02x-%02x)\00 */, "i8", ALLOC_STATIC);
__str106=allocate([93,0] /* ]\00 */, "i8", ALLOC_STATIC);
_printcapkind_modes=allocate(56, "i8*", ALLOC_STATIC);
__str107=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_STATIC);
__str108=allocate([112,111,115,105,116,105,111,110,0] /* position\00 */, "i8", ALLOC_STATIC);
__str109=allocate([99,111,110,115,116,97,110,116,0] /* constant\00 */, "i8", ALLOC_STATIC);
__str110=allocate([98,97,99,107,114,101,102,0] /* backref\00 */, "i8", ALLOC_STATIC);
__str111=allocate([97,114,103,117,109,101,110,116,0] /* argument\00 */, "i8", ALLOC_STATIC);
__str112=allocate([115,105,109,112,108,101,0] /* simple\00 */, "i8", ALLOC_STATIC);
__str113=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
__str114=allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_STATIC);
__str115=allocate([113,117,101,114,121,0] /* query\00 */, "i8", ALLOC_STATIC);
__str116=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
__str117=allocate([115,117,98,115,116,105,116,117,116,105,111,110,0] /* substitution\00 */, "i8", ALLOC_STATIC);
__str118=allocate([102,111,108,100,0] /* fold\00 */, "i8", ALLOC_STATIC);
__str119=allocate([114,117,110,116,105,109,101,0] /* runtime\00 */, "i8", ALLOC_STATIC);
__str120=allocate([103,114,111,117,112,0] /* group\00 */, "i8", ALLOC_STATIC);
__str121=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
__str122=allocate([45,62,32,0] /* -> \00 */, "i8", ALLOC_STATIC);
__str123=allocate([70,65,73,76,0] /* FAIL\00 */, "i8", ALLOC_STATIC);
__str124=allocate([37,100,0] /* %d\00 */, "i8", ALLOC_STATIC);
__str125=allocate([116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0] /* too many captures\00 */, "i8", ALLOC_STATIC);
__str126=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,97,98,115,101,110,116,32,97,114,103,117,109,101,110,116,32,35,37,100,0] /* reference to absent  */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___pushcapture=allocate([105,110,116,32,112,117,115,104,99,97,112,116,117,114,101,40,67,97,112,83,116,97,116,101,32,42,41,0] /* int pushcapture(CapS */, "i8", ALLOC_STATIC);
__str127=allocate([110,111,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,102,111,114,32,102,111,108,100,32,99,97,112,116,117,114,101,0] /* no initial value for */, "i8", ALLOC_STATIC);
__str128777=allocate([40,97,32,37,115,41,0] /* (a %s)\00 */, "i8", ALLOC_STATIC);
__str129=allocate([98,97,99,107,32,114,101,102,101,114,101,110,99,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,0] /* back reference '%s'  */, "i8", ALLOC_STATIC);
__str130=allocate([114,101,112,108,97,99,101,109,101,110,116,0] /* replacement\00 */, "i8", ALLOC_STATIC);
__str131=allocate([105,110,118,97,108,105,100,32,37,115,32,118,97,108,117,101,32,40,97,32,37,115,41,0] /* invalid %s value (a  */, "i8", ALLOC_STATIC);
__str132=allocate([105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,32,40,37,100,41,0] /* invalid capture inde */, "i8", ALLOC_STATIC);
__str133=allocate([99,97,112,116,117,114,101,0] /* capture\00 */, "i8", ALLOC_STATIC);
__str134=allocate([110,111,32,118,97,108,117,101,115,32,105,110,32,99,97,112,116,117,114,101,32,105,110,100,101,120,32,37,100,0] /* no values in capture */, "i8", ALLOC_STATIC);
__str135=allocate([115,116,97,99,107,32,61,61,32,40,40,83,116,97,99,107,32,42,41,108,117,97,95,116,111,117,115,101,114,100,97,116,97,40,76,44,32,40,40,112,116,111,112,41,32,43,32,52,41,41,41,32,43,32,49,0] /* stack == ((Stack _)l */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___match=allocate([99,111,110,115,116,32,99,104,97,114,32,42,109,97,116,99,104,40,108,117,97,95,83,116,97,116,101,32,42,44,32,99,111,110,115,116,32,99,104,97,114,32,42,44,32,99,111,110,115,116,32,99,104,97,114,32,42,44,32,99,111,110,115,116,32,99,104,97,114,32,42,44,32,73,110,115,116,114,117,99,116,105,111,110,32,42,44,32,67,97,112,116,117,114,101,32,42,44,32,105,110,116,41,0] /* const char _match(lu */, "i8", ALLOC_STATIC);
__str136778=allocate([115,116,97,99,107,32,61,61,32,40,40,83,116,97,99,107,32,42,41,108,117,97,95,116,111,117,115,101,114,100,97,116,97,40,76,44,32,40,40,112,116,111,112,41,32,43,32,52,41,41,41,0] /* stack == ((Stack _)l */, "i8", ALLOC_STATIC);
__str137=allocate([115,116,97,99,107,32,62,32,40,40,83,116,97,99,107,32,42,41,108,117,97,95,116,111,117,115,101,114,100,97,116,97,40,76,44,32,40,40,112,116,111,112,41,32,43,32,52,41,41,41,32,38,38,32,40,115,116,97,99,107,32,45,32,49,41,45,62,115,32,61,61,32,40,40,118,111,105,100,42,41,48,41,0] /* stack > ((Stack _)lu */, "i8", ALLOC_STATIC);
__str138=allocate([115,116,97,99,107,32,62,32,40,40,83,116,97,99,107,32,42,41,108,117,97,95,116,111,117,115,101,114,100,97,116,97,40,76,44,32,40,40,112,116,111,112,41,32,43,32,52,41,41,41,32,38,38,32,40,115,116,97,99,107,32,45,32,49,41,45,62,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0] /* stack > ((Stack _)lu */, "i8", ALLOC_STATIC);
__str139=allocate([115,116,97,99,107,32,62,32,40,40,83,116,97,99,107,32,42,41,108,117,97,95,116,111,117,115,101,114,100,97,116,97,40,76,44,32,40,40,112,116,111,112,41,32,43,32,52,41,41,41,0] /* stack > ((Stack _)lu */, "i8", ALLOC_STATIC);
__str140=allocate([105,110,118,97,108,105,100,32,112,111,115,105,116,105,111,110,32,114,101,116,117,114,110,101,100,32,98,121,32,109,97,116,99,104,45,116,105,109,101,32,99,97,112,116,117,114,101,0] /* invalid position ret */, "i8", ALLOC_STATIC);
__str141=allocate([99,97,112,116,111,112,32,62,32,48,0] /* captop > 0\00 */, "i8", ALLOC_STATIC);
__str142=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,37,115,32,111,117,116,115,105,100,101,32,97,32,103,114,97,109,109,97,114,0] /* reference to %s outs */, "i8", ALLOC_STATIC);
__str143=allocate([98,97,115,101,91,48,93,46,107,105,110,100,32,61,61,32,67,114,117,110,116,105,109,101,32,38,38,32,98,97,115,101,91,48,93,46,115,105,122,32,61,61,32,48,0] /* base[0].kind == Crun */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___adddyncaptures=allocate([118,111,105,100,32,97,100,100,100,121,110,99,97,112,116,117,114,101,115,40,99,111,110,115,116,32,99,104,97,114,32,42,44,32,67,97,112,116,117,114,101,32,42,44,32,105,110,116,44,32,105,110,116,41,0] /* void adddyncaptures( */, "i8", ALLOC_STATIC);
__str144=allocate([40,40,111,112,101,110,41,45,62,107,105,110,100,41,32,61,61,32,67,114,117,110,116,105,109,101,0] /* ((open)->kind) == Cr */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___runtimecap=allocate([105,110,116,32,114,117,110,116,105,109,101,99,97,112,40,108,117,97,95,83,116,97,116,101,32,42,44,32,67,97,112,116,117,114,101,32,42,44,32,67,97,112,116,117,114,101,32,42,44,32,99,111,110,115,116,32,99,104,97,114,32,42,44,32,99,111,110,115,116,32,99,104,97,114,32,42,44,32,105,110,116,41,0] /* int runtimecap(lua_S */, "i8", ALLOC_STATIC);
__str145=allocate([116,111,111,32,109,97,110,121,32,114,117,110,116,105,109,101,32,99,97,112,116,117,114,101,115,0] /* too many runtime cap */, "i8", ALLOC_STATIC);
_giveup=allocate([16, 0, 0, 0], ["i8","i8","i16",0], ALLOC_STATIC);
__str146=allocate([95,95,97,100,100,0] /* __add\00 */, "i8", ALLOC_STATIC);
__str147=allocate([95,95,112,111,119,0] /* __pow\00 */, "i8", ALLOC_STATIC);
__str148=allocate([95,95,115,117,98,0] /* __sub\00 */, "i8", ALLOC_STATIC);
__str149=allocate([95,95,109,117,108,0] /* __mul\00 */, "i8", ALLOC_STATIC);
__str150=allocate([95,95,100,105,118,0] /* __div\00 */, "i8", ALLOC_STATIC);
__str151=allocate([95,95,117,110,109,0] /* __unm\00 */, "i8", ALLOC_STATIC);
__str152=allocate([95,95,108,101,110,0] /* __len\00 */, "i8", ALLOC_STATIC);
__str153=allocate(1, "i8", ALLOC_STATIC);
__str154=allocate([105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,0] /* invalid replacement  */, "i8", ALLOC_STATIC);
__str155=allocate([112,45,62,105,46,99,111,100,101,32,61,61,32,73,67,104,111,105,99,101,0] /* p->i.code == IChoice */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___optimizechoice=allocate([118,111,105,100,32,111,112,116,105,109,105,122,101,99,104,111,105,99,101,40,73,110,115,116,114,117,99,116,105,111,110,32,42,41,0] /* void optimizechoice( */, "i8", ALLOC_STATIC);
__str156=allocate([40,40,111,112,112,114,111,112,101,114,116,105,101,115,91,40,112,41,45,62,105,46,99,111,100,101,93,32,38,32,40,48,120,52,41,41,32,38,38,32,40,112,41,45,62,105,46,111,102,102,115,101,116,32,61,61,32,48,41,32,38,38,32,40,112,32,43,32,108,99,41,45,62,105,46,99,111,100,101,32,61,61,32,73,67,104,111,105,99,101,0] /* ((opproperties[(p)-> */, "i8", ALLOC_STATIC);
__str157=allocate([40,40,111,112,112,114,111,112,101,114,116,105,101,115,91,40,112,41,45,62,105,46,99,111,100,101,93,32,38,32,40,48,120,50,41,41,32,38,38,32,40,112,41,45,62,105,46,111,102,102,115,101,116,32,61,61,32,48,41,32,38,38,32,110,32,33,61,32,48,0] /* ((opproperties[(p)-> */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___check2test=allocate([118,111,105,100,32,99,104,101,99,107,50,116,101,115,116,40,73,110,115,116,114,117,99,116,105,111,110,32,42,44,32,105,110,116,41,0] /* void check2test(Inst */, "i8", ALLOC_STATIC);
__str158=allocate([108,111,111,112,32,98,111,100,121,32,109,97,121,32,97,99,99,101,112,116,32,101,109,112,116,121,32,115,116,114,105,110,103,0] /* loop body may accept */, "i8", ALLOC_STATIC);
__str159779=allocate([112,49,45,62,105,46,111,102,102,115,101,116,32,33,61,32,48,0] /* p1->i.offset != 0\00 */, "i8", ALLOC_STATIC);
___PRETTY_FUNCTION___interfere=allocate([105,110,116,32,105,110,116,101,114,102,101,114,101,40,73,110,115,116,114,117,99,116,105,111,110,32,42,44,32,105,110,116,44,32,67,104,97,114,115,101,116,84,97,103,32,42,41,0] /* int interfere(Instru */, "i8", ALLOC_STATIC);
__str160=allocate([112,49,45,62,105,46,99,111,100,101,32,61,61,32,73,65,110,121,0] /* p1->i.code == IAny\0 */, "i8", ALLOC_STATIC);
__str161=allocate([112,97,116,116,101,114,110,32,100,97,116,97,32,116,111,111,32,108,111,110,103,0] /* pattern data too lon */, "i8", ALLOC_STATIC);
HEAP[_co_funcs]=((__str128)&4294967295);
HEAP[_co_funcs+8]=((__str229)&4294967295);
HEAP[_co_funcs+16]=((__str330)&4294967295);
HEAP[_co_funcs+24]=((__str431)&4294967295);
HEAP[_co_funcs+32]=((__str532)&4294967295);
HEAP[_co_funcs+40]=((__str633)&4294967295);
HEAP[_statnames]=((__str330)&4294967295);
HEAP[_statnames+4]=((__str1037)&4294967295);
HEAP[_statnames+8]=((__str1138)&4294967295);
HEAP[_statnames+12]=((__str1239)&4294967295);
HEAP[_base_funcs]=((__str2451)&4294967295);
HEAP[_base_funcs+8]=((__str2552)&4294967295);
HEAP[_base_funcs+16]=((__str2653)&4294967295);
HEAP[_base_funcs+24]=((__str2754)&4294967295);
HEAP[_base_funcs+32]=((__str28)&4294967295);
HEAP[_base_funcs+40]=((__str29)&4294967295);
HEAP[_base_funcs+48]=((__str30)&4294967295);
HEAP[_base_funcs+56]=((__str31)&4294967295);
HEAP[_base_funcs+64]=((__str32)&4294967295);
HEAP[_base_funcs+72]=((__str33)&4294967295);
HEAP[_base_funcs+80]=((__str34)&4294967295);
HEAP[_base_funcs+88]=((__str35)&4294967295);
HEAP[_base_funcs+96]=((__str36)&4294967295);
HEAP[_base_funcs+104]=((__str3755)&4294967295);
HEAP[_base_funcs+112]=((__str38)&4294967295);
HEAP[_base_funcs+120]=((__str39)&4294967295);
HEAP[_base_funcs+128]=((__str40)&4294967295);
HEAP[_base_funcs+136]=((__str41)&4294967295);
HEAP[_base_funcs+144]=((__str42)&4294967295);
HEAP[_base_funcs+152]=((__str43)&4294967295);
HEAP[_base_funcs+160]=((__str44)&4294967295);
HEAP[_base_funcs+168]=((__str45)&4294967295);
HEAP[_base_funcs+176]=((__str46)&4294967295);
HEAP[_base_funcs+184]=((__str47)&4294967295);
HEAP[_luaB_collectgarbage_opts]=((__str70)&4294967295);
HEAP[_luaB_collectgarbage_opts+4]=((__str71)&4294967295);
HEAP[_luaB_collectgarbage_opts+8]=((__str72)&4294967295);
HEAP[_luaB_collectgarbage_opts+12]=((__str73)&4294967295);
HEAP[_luaB_collectgarbage_opts+16]=((__str74)&4294967295);
HEAP[_luaB_collectgarbage_opts+20]=((__str75)&4294967295);
HEAP[_luaB_collectgarbage_opts+24]=((__str76)&4294967295);
HEAP[_dblib]=((__str83)&4294967295);
HEAP[_dblib+8]=((__str184)&4294967295);
HEAP[_dblib+16]=((__str285)&4294967295);
HEAP[_dblib+24]=((__str386)&4294967295);
HEAP[_dblib+32]=((__str487)&4294967295);
HEAP[_dblib+40]=((__str588)&4294967295);
HEAP[_dblib+48]=((__str689)&4294967295);
HEAP[_dblib+56]=((__str790)&4294967295);
HEAP[_dblib+64]=((__str891)&4294967295);
HEAP[_dblib+72]=((__str992)&4294967295);
HEAP[_dblib+80]=((__str1093)&4294967295);
HEAP[_dblib+88]=((__str1194)&4294967295);
HEAP[_dblib+96]=((__str1295)&4294967295);
HEAP[_dblib+104]=((__str1396)&4294967295);
HEAP[_hookf_hooknames]=((__str28111)&4294967295);
HEAP[_hookf_hooknames+4]=((__str29112)&4294967295);
HEAP[_hookf_hooknames+8]=((__str30113)&4294967295);
HEAP[_hookf_hooknames+12]=((__str31114)&4294967295);
HEAP[_hookf_hooknames+16]=((__str32115)&4294967295);
HEAP[_lualibs]=((__str195)&4294967295);
HEAP[_lualibs+8]=((__str1196)&4294967295);
HEAP[_lualibs+16]=((__str2197)&4294967295);
HEAP[_lualibs+24]=((__str3198)&4294967295);
HEAP[_lualibs+32]=((__str4199)&4294967295);
HEAP[_lualibs+40]=((__str5200)&4294967295);
HEAP[_lualibs+48]=((__str6201)&4294967295);
HEAP[_lualibs+56]=((__str7202)&4294967295);
HEAP[_iolib]=((__str9212)&4294967295);
HEAP[_iolib+8]=((__str10213)&4294967295);
HEAP[_iolib+16]=((__str11214)&4294967295);
HEAP[_iolib+24]=((__str12215)&4294967295);
HEAP[_iolib+32]=((__str13216)&4294967295);
HEAP[_iolib+40]=((__str14217)&4294967295);
HEAP[_iolib+48]=((__str4207)&4294967295);
HEAP[_iolib+56]=((__str15218)&4294967295);
HEAP[_iolib+64]=((__str16219)&4294967295);
HEAP[_iolib+72]=((__str17220)&4294967295);
HEAP[_iolib+80]=((__str18221)&4294967295);
HEAP[_fnames]=((__str11214)&4294967295);
HEAP[_fnames+4]=((__str14217)&4294967295);
HEAP[_flib]=((__str9212)&4294967295);
HEAP[_flib+8]=((__str10213)&4294967295);
HEAP[_flib+16]=((__str12215)&4294967295);
HEAP[_flib+24]=((__str15218)&4294967295);
HEAP[_flib+32]=((__str34237)&4294967295);
HEAP[_flib+40]=((__str35238)&4294967295);
HEAP[_flib+48]=((__str18221)&4294967295);
HEAP[_flib+56]=((__str36239)&4294967295);
HEAP[_flib+64]=((__str37240)&4294967295);
HEAP[_f_setvbuf_modenames]=((__str40243)&4294967295);
HEAP[_f_setvbuf_modenames+4]=((__str41244)&4294967295);
HEAP[_f_setvbuf_modenames+8]=((__str42245)&4294967295);
HEAP[_f_seek_modenames]=((__str43246)&4294967295);
HEAP[_f_seek_modenames+4]=((__str44247)&4294967295);
HEAP[_f_seek_modenames+8]=((__str45248)&4294967295);
HEAP[_luaX_tokens]=((__str250)&4294967295);
HEAP[_luaX_tokens+4]=((__str1251)&4294967295);
HEAP[_luaX_tokens+8]=((__str2252)&4294967295);
HEAP[_luaX_tokens+12]=((__str3253)&4294967295);
HEAP[_luaX_tokens+16]=((__str4254)&4294967295);
HEAP[_luaX_tokens+20]=((__str5255)&4294967295);
HEAP[_luaX_tokens+24]=((__str6256)&4294967295);
HEAP[_luaX_tokens+28]=((__str7257)&4294967295);
HEAP[_luaX_tokens+32]=((__str8258)&4294967295);
HEAP[_luaX_tokens+36]=((__str9259)&4294967295);
HEAP[_luaX_tokens+40]=((__str10260)&4294967295);
HEAP[_luaX_tokens+44]=((__str11261)&4294967295);
HEAP[_luaX_tokens+48]=((__str12262)&4294967295);
HEAP[_luaX_tokens+52]=((__str13263)&4294967295);
HEAP[_luaX_tokens+56]=((__str14264)&4294967295);
HEAP[_luaX_tokens+60]=((__str15265)&4294967295);
HEAP[_luaX_tokens+64]=((__str16266)&4294967295);
HEAP[_luaX_tokens+68]=((__str17267)&4294967295);
HEAP[_luaX_tokens+72]=((__str18268)&4294967295);
HEAP[_luaX_tokens+76]=((__str19269)&4294967295);
HEAP[_luaX_tokens+80]=((__str20270)&4294967295);
HEAP[_luaX_tokens+84]=((__str21271)&4294967295);
HEAP[_luaX_tokens+88]=((__str22272)&4294967295);
HEAP[_luaX_tokens+92]=((__str23273)&4294967295);
HEAP[_luaX_tokens+96]=((__str24274)&4294967295);
HEAP[_luaX_tokens+100]=((__str25275)&4294967295);
HEAP[_luaX_tokens+104]=((__str26276)&4294967295);
HEAP[_luaX_tokens+108]=((__str27277)&4294967295);
HEAP[_luaX_tokens+112]=((__str28278)&4294967295);
HEAP[_luaX_tokens+116]=((__str29279)&4294967295);
HEAP[_luaX_tokens+120]=((__str30280)&4294967295);
HEAP[_mathlib]=((__str5303)&4294967295);
HEAP[_mathlib+8]=((__str6304)&4294967295);
HEAP[_mathlib+16]=((__str7305)&4294967295);
HEAP[_mathlib+24]=((__str8306)&4294967295);
HEAP[_mathlib+32]=((__str9307)&4294967295);
HEAP[_mathlib+40]=((__str10308)&4294967295);
HEAP[_mathlib+48]=((__str11309)&4294967295);
HEAP[_mathlib+56]=((__str12310)&4294967295);
HEAP[_mathlib+64]=((__str13311)&4294967295);
HEAP[_mathlib+72]=((__str14312)&4294967295);
HEAP[_mathlib+80]=((__str15313)&4294967295);
HEAP[_mathlib+88]=((__str3301)&4294967295);
HEAP[_mathlib+96]=((__str16314)&4294967295);
HEAP[_mathlib+104]=((__str17315)&4294967295);
HEAP[_mathlib+112]=((__str18316)&4294967295);
HEAP[_mathlib+120]=((__str19317)&4294967295);
HEAP[_mathlib+128]=((__str20318)&4294967295);
HEAP[_mathlib+136]=((__str21319)&4294967295);
HEAP[_mathlib+144]=((__str22320)&4294967295);
HEAP[_mathlib+152]=((__str23321)&4294967295);
HEAP[_mathlib+160]=((__str24322)&4294967295);
HEAP[_mathlib+168]=((__str25323)&4294967295);
HEAP[_mathlib+176]=((__str26324)&4294967295);
HEAP[_mathlib+184]=((__str27325)&4294967295);
HEAP[_mathlib+192]=((__str28326)&4294967295);
HEAP[_mathlib+200]=((__str29327)&4294967295);
HEAP[_mathlib+208]=((__str30328)&4294967295);
HEAP[_mathlib+216]=((__str31329)&4294967295);
HEAP[_pk_funcs]=((__str47384)&4294967295);
HEAP[_pk_funcs+8]=((__str48385)&4294967295);
HEAP[_ll_funcs]=((__str15352)&4294967295);
HEAP[_ll_funcs+8]=((__str16353)&4294967295);
HEAP[_luaP_opnames]=((__str404)&4294967295);
HEAP[_luaP_opnames+4]=((__str1405)&4294967295);
HEAP[_luaP_opnames+8]=((__str2406)&4294967295);
HEAP[_luaP_opnames+12]=((__str3407)&4294967295);
HEAP[_luaP_opnames+16]=((__str4408)&4294967295);
HEAP[_luaP_opnames+20]=((__str5409)&4294967295);
HEAP[_luaP_opnames+24]=((__str6410)&4294967295);
HEAP[_luaP_opnames+28]=((__str7411)&4294967295);
HEAP[_luaP_opnames+32]=((__str8412)&4294967295);
HEAP[_luaP_opnames+36]=((__str9413)&4294967295);
HEAP[_luaP_opnames+40]=((__str10414)&4294967295);
HEAP[_luaP_opnames+44]=((__str11415)&4294967295);
HEAP[_luaP_opnames+48]=((__str12416)&4294967295);
HEAP[_luaP_opnames+52]=((__str13417)&4294967295);
HEAP[_luaP_opnames+56]=((__str14418)&4294967295);
HEAP[_luaP_opnames+60]=((__str15419)&4294967295);
HEAP[_luaP_opnames+64]=((__str16420)&4294967295);
HEAP[_luaP_opnames+68]=((__str17421)&4294967295);
HEAP[_luaP_opnames+72]=((__str18422)&4294967295);
HEAP[_luaP_opnames+76]=((__str19423)&4294967295);
HEAP[_luaP_opnames+80]=((__str20424)&4294967295);
HEAP[_luaP_opnames+84]=((__str21425)&4294967295);
HEAP[_luaP_opnames+88]=((__str22426)&4294967295);
HEAP[_luaP_opnames+92]=((__str23427)&4294967295);
HEAP[_luaP_opnames+96]=((__str24428)&4294967295);
HEAP[_luaP_opnames+100]=((__str25429)&4294967295);
HEAP[_luaP_opnames+104]=((__str26430)&4294967295);
HEAP[_luaP_opnames+108]=((__str27431)&4294967295);
HEAP[_luaP_opnames+112]=((__str28432)&4294967295);
HEAP[_luaP_opnames+116]=((__str29433)&4294967295);
HEAP[_luaP_opnames+120]=((__str30434)&4294967295);
HEAP[_luaP_opnames+124]=((__str31435)&4294967295);
HEAP[_luaP_opnames+128]=((__str32436)&4294967295);
HEAP[_luaP_opnames+132]=((__str33437)&4294967295);
HEAP[_luaP_opnames+136]=((__str34438)&4294967295);
HEAP[_luaP_opnames+140]=((__str35439)&4294967295);
HEAP[_luaP_opnames+144]=((__str36440)&4294967295);
HEAP[_luaP_opnames+148]=((__str37441)&4294967295);
HEAP[_syslib]=((__str1444)&4294967295);
HEAP[_syslib+8]=((__str2445)&4294967295);
HEAP[_syslib+16]=((__str3446)&4294967295);
HEAP[_syslib+24]=((__str4447)&4294967295);
HEAP[_syslib+32]=((__str5448)&4294967295);
HEAP[_syslib+40]=((__str6449)&4294967295);
HEAP[_syslib+48]=((__str7450)&4294967295);
HEAP[_syslib+56]=((__str8451)&4294967295);
HEAP[_syslib+64]=((__str9452)&4294967295);
HEAP[_syslib+72]=((__str10453)&4294967295);
HEAP[_syslib+80]=((__str11454)&4294967295);
HEAP[_os_setlocale_catnames]=((__str21464)&4294967295);
HEAP[_os_setlocale_catnames+4]=((__str22465)&4294967295);
HEAP[_os_setlocale_catnames+8]=((__str23466)&4294967295);
HEAP[_os_setlocale_catnames+12]=((__str24467)&4294967295);
HEAP[_os_setlocale_catnames+16]=((__str25468)&4294967295);
HEAP[_os_setlocale_catnames+20]=((__str10453)&4294967295);
HEAP[_strlib]=((__str5516)&4294967295);
HEAP[_strlib+8]=((__str6517)&4294967295);
HEAP[_strlib+16]=((__str7518)&4294967295);
HEAP[_strlib+24]=((__str8519)&4294967295);
HEAP[_strlib+32]=((__str9520)&4294967295);
HEAP[_strlib+40]=((__str2513)&4294967295);
HEAP[_strlib+48]=((__str1512)&4294967295);
HEAP[_strlib+56]=((__str10521)&4294967295);
HEAP[_strlib+64]=((__str11522)&4294967295);
HEAP[_strlib+72]=((__str12523)&4294967295);
HEAP[_strlib+80]=((__str13524)&4294967295);
HEAP[_strlib+88]=((__str14525)&4294967295);
HEAP[_strlib+96]=((__str15526)&4294967295);
HEAP[_strlib+104]=((__str16527)&4294967295);
HEAP[_strlib+112]=((__str17528)&4294967295);
HEAP[_tab_funcs]=((__str1566)&4294967295);
HEAP[_tab_funcs+8]=((__str2567)&4294967295);
HEAP[_tab_funcs+16]=((__str3568)&4294967295);
HEAP[_tab_funcs+24]=((__str4569)&4294967295);
HEAP[_tab_funcs+32]=((__str5570)&4294967295);
HEAP[_tab_funcs+40]=((__str6571)&4294967295);
HEAP[_tab_funcs+48]=((__str7572)&4294967295);
HEAP[_tab_funcs+56]=((__str8573)&4294967295);
HEAP[_tab_funcs+64]=((__str9574)&4294967295);
HEAP[_luaT_typenames]=((__str581)&4294967295);
HEAP[_luaT_typenames+4]=((__str1582)&4294967295);
HEAP[_luaT_typenames+8]=((__str2583)&4294967295);
HEAP[_luaT_typenames+12]=((__str3584)&4294967295);
HEAP[_luaT_typenames+16]=((__str4585)&4294967295);
HEAP[_luaT_typenames+20]=((__str5586)&4294967295);
HEAP[_luaT_typenames+24]=((__str6587)&4294967295);
HEAP[_luaT_typenames+28]=((__str2583)&4294967295);
HEAP[_luaT_typenames+32]=((__str7588)&4294967295);
HEAP[_luaT_typenames+36]=((__str8589)&4294967295);
HEAP[_luaT_typenames+40]=((__str9590)&4294967295);
HEAP[_luaT_init_luaT_eventname]=((__str10592)&4294967295);
HEAP[_luaT_init_luaT_eventname+4]=((__str11593)&4294967295);
HEAP[_luaT_init_luaT_eventname+8]=((__str12594)&4294967295);
HEAP[_luaT_init_luaT_eventname+12]=((__str13595)&4294967295);
HEAP[_luaT_init_luaT_eventname+16]=((__str14596)&4294967295);
HEAP[_luaT_init_luaT_eventname+20]=((__str15597)&4294967295);
HEAP[_luaT_init_luaT_eventname+24]=((__str16598)&4294967295);
HEAP[_luaT_init_luaT_eventname+28]=((__str17599)&4294967295);
HEAP[_luaT_init_luaT_eventname+32]=((__str18600)&4294967295);
HEAP[_luaT_init_luaT_eventname+36]=((__str19601)&4294967295);
HEAP[_luaT_init_luaT_eventname+40]=((__str20602)&4294967295);
HEAP[_luaT_init_luaT_eventname+44]=((__str21603)&4294967295);
HEAP[_luaT_init_luaT_eventname+48]=((__str22604)&4294967295);
HEAP[_luaT_init_luaT_eventname+52]=((__str23605)&4294967295);
HEAP[_luaT_init_luaT_eventname+56]=((__str24606)&4294967295);
HEAP[_luaT_init_luaT_eventname+60]=((__str25607)&4294967295);
HEAP[_luaT_init_luaT_eventname+64]=((__str26608)&4294967295);
HEAP[_metapattreg]=((__str146)&4294967295);
HEAP[_metapattreg+8]=((__str147)&4294967295);
HEAP[_metapattreg+16]=((__str148)&4294967295);
HEAP[_metapattreg+24]=((__str149)&4294967295);
HEAP[_metapattreg+32]=((__str150)&4294967295);
HEAP[_metapattreg+40]=((__str151)&4294967295);
HEAP[_metapattreg+48]=((__str152)&4294967295);
HEAP[_pattreg]=((__str5701)&4294967295);
HEAP[_pattreg+8]=((__str6702)&4294967295);
HEAP[_pattreg+16]=((__str7703)&4294967295);
HEAP[_pattreg+24]=((__str8704)&4294967295);
HEAP[_pattreg+32]=((__str9705)&4294967295);
HEAP[_pattreg+40]=((__str10706)&4294967295);
HEAP[_pattreg+48]=((__str11707)&4294967295);
HEAP[_pattreg+56]=((__str12708)&4294967295);
HEAP[_pattreg+64]=((__str13709)&4294967295);
HEAP[_pattreg+72]=((__str14710)&4294967295);
HEAP[_pattreg+80]=((__str15711)&4294967295);
HEAP[_pattreg+88]=((__str16712)&4294967295);
HEAP[_pattreg+96]=((__str17713)&4294967295);
HEAP[_pattreg+104]=((__str18714)&4294967295);
HEAP[_pattreg+112]=((__str19715)&4294967295);
HEAP[_pattreg+120]=((__str20716)&4294967295);
HEAP[_pattreg+128]=((__str21717)&4294967295);
HEAP[_pattreg+136]=((__str22718)&4294967295);
HEAP[_pattreg+144]=((__str23719)&4294967295);
HEAP[_pattreg+152]=((__str24720)&4294967295);
HEAP[_pattreg+160]=((__str25721)&4294967295);
HEAP[_printinst_names]=((__str73769)&4294967295);
HEAP[_printinst_names+4]=((__str74770)&4294967295);
HEAP[_printinst_names+8]=((__str75771)&4294967295);
HEAP[_printinst_names+12]=((__str76772)&4294967295);
HEAP[_printinst_names+16]=((__str77773)&4294967295);
HEAP[_printinst_names+20]=((__str78774)&4294967295);
HEAP[_printinst_names+24]=((__str79775)&4294967295);
HEAP[_printinst_names+28]=((__str80)&4294967295);
HEAP[_printinst_names+32]=((__str81)&4294967295);
HEAP[_printinst_names+36]=((__str82)&4294967295);
HEAP[_printinst_names+40]=((__str83776)&4294967295);
HEAP[_printinst_names+44]=((__str84)&4294967295);
HEAP[_printinst_names+48]=((__str85)&4294967295);
HEAP[_printinst_names+52]=((__str86)&4294967295);
HEAP[_printinst_names+56]=((__str87)&4294967295);
HEAP[_printinst_names+60]=((__str88)&4294967295);
HEAP[_printinst_names+64]=((__str89)&4294967295);
HEAP[_printinst_names+68]=((__str90)&4294967295);
HEAP[_printinst_names+72]=((__str91)&4294967295);
HEAP[_printinst_names+76]=((__str92)&4294967295);
HEAP[_printinst_names+80]=((__str93)&4294967295);
HEAP[_printinst_names+84]=((__str94)&4294967295);
HEAP[_printinst_names+88]=((__str95)&4294967295);
HEAP[_printinst_names+92]=((__str96)&4294967295);
HEAP[_printcapkind_modes]=((__str107)&4294967295);
HEAP[_printcapkind_modes+4]=((__str108)&4294967295);
HEAP[_printcapkind_modes+8]=((__str109)&4294967295);
HEAP[_printcapkind_modes+12]=((__str110)&4294967295);
HEAP[_printcapkind_modes+16]=((__str111)&4294967295);
HEAP[_printcapkind_modes+20]=((__str112)&4294967295);
HEAP[_printcapkind_modes+24]=((__str113)&4294967295);
HEAP[_printcapkind_modes+28]=((__str114)&4294967295);
HEAP[_printcapkind_modes+32]=((__str115)&4294967295);
HEAP[_printcapkind_modes+36]=((__str116)&4294967295);
HEAP[_printcapkind_modes+40]=((__str117)&4294967295);
HEAP[_printcapkind_modes+44]=((__str118)&4294967295);
HEAP[_printcapkind_modes+48]=((__str119)&4294967295);
HEAP[_printcapkind_modes+52]=((__str120)&4294967295);
FS.init();
___setErrNo(0);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);


  __globalConstructor__();

  var ret = null;
  if (Module['_main']) {
    ret = Module.callMain(args);
    __shutdownRuntime__();
  }
  return ret;
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}


if (!Module['noInitialRun']) {
  run();
}

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

/*
  return Module;
}).call(this, {}, arguments); // Replace parameters as needed
*/


